{"version":3,"file":"index.js","sources":["../src/editor/create-editor-schema.ts","../src/editor/define-schema.ts","../src/internal-utils/debug.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/values.ts","../src/internal-utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/internal-utils/schema.ts","../src/editor/mutation-machine.ts","../src/internal-utils/validateValue.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withoutPatching.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.2/node_modules/@sanity/diff-match-patch/dist/index.js","../src/internal-utils/withUndoRedo.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/sync-machine.ts","../src/editor/components/Synchronizer.tsx","../src/internal-utils/operationToPatches.ts","../src/editor/with-applying-behavior-actions.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behavior-actions/behavior.action.list-item.ts","../src/behavior-actions/behavior.action.style.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/behavior-actions/behavior.action-utils.insert-block.ts","../src/behavior-actions/behavior.action.insert-block-object.ts","../src/behavior-actions/behavior.action.insert-break.ts","../src/behavior-actions/behavior.action.insert-inline-object.ts","../src/behavior-actions/behavior.action.insert-span.ts","../src/behavior-actions/behavior.action.text-block.set.ts","../src/behavior-actions/behavior.action.text-block.unset.ts","../src/behavior-actions/behavior.actions.ts","../src/editor/get-active-decorators.ts","../src/editor/editor-machine.ts","../src/editor/get-value.ts","../src/editor/editor-selector.ts","../src/editor/key-generator.ts","../src/editor/create-editor.ts","../src/editor/editor-actor-context.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/editor-provider.tsx","../src/editor/editor-event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../internal-utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        <div ref={blockRef} contentEditable={false}>\n          {renderedBlockFromProps ? (\n            renderedBlockFromProps\n          ) : (\n            <ObjectNode value={value} />\n          )}\n        </div>\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      return (\n        !context.readOnly &&\n        (context.isProcessingLocalChanges ||\n          (isChangingRemotely(context.slateEditor) ?? false))\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) =>\n      !(\n        context.previousValue === undefined &&\n        context.pendingValue === undefined\n      ) && isEqual(context.pendingValue, context.previousValue),\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: ['emit done syncing initial value'],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                reenter: true,\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nconst debug = debugWithName('hook:useSyncValue')\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      props.editorActor.send(event)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\n\nconst IS_APPLYING_BEHAVIOR_ACTIONS: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  const prev = isApplyingBehaviorActions(editor)\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, true)\n  fn()\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? false\n}\n","import {Editor} from 'slate'\nimport {toPortableTextRange} from '../../internal-utils/ranges'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'custom.*': {\n            editorActor.send({\n              type: 'custom behavior event',\n              behaviorEvent: event.event,\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'select': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'select',\n                selection: event.selection,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    const {\n      deleteBackward,\n      deleteForward,\n      insertBreak,\n      insertSoftBreak,\n      insertText,\n      select,\n    } = editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText(text, options)\n        },\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            range,\n            editorActor.getSnapshot().context.schema,\n          ),\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location)\n        },\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../internal-utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateValue} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../internal-utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {toSlatePath} from '../internal-utils/paths'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PickFromUnion} from '../type-utils'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {\n  isCustomBehaviorEvent,\n  type Behavior,\n  type BehaviorAction,\n  type CustomBehaviorEvent,\n  type NativeBehaviorEvent,\n  type SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {withApplyingBehaviorActions} from './with-applying-behavior-actions'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {type: 'done syncing initial value'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      defaultActionCallback?: () => void\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'custom behavior event'\n      behaviorEvent: CustomBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | CustomBehaviorEvent\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<\n      InternalEditorEmittedEvent,\n      'type',\n      'ready' | 'read only' | 'editable'\n    >\n\n/**\n * @public\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'editable'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'read only'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'select'; selection: EditorSelection}\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'read only'}\n  | {type: 'editable'}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'blur'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n  | {\n      type: 'custom.*'\n      event: CustomBehaviorEvent\n    }\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set(event.behaviors)\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event', 'custom behavior event'])\n\n      const defaultAction =\n        event.type === 'custom behavior event' ||\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n      const defaultActionCallback =\n        event.type === 'behavior event'\n          ? event.defaultActionCallback\n          : undefined\n\n      const eventBehaviors = [...context.behaviors.values()].filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n            })\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction,\n              })\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        activeDecorators: getActiveDecorators({\n          schema: context.schema,\n          slateEditorInstance: event.editor,\n        }),\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              for (const actionIntend of actionIntends) {\n                if (actionIntend.type === 'raise') {\n                  if (isCustomBehaviorEvent(actionIntend.event)) {\n                    enqueue.raise({\n                      type: 'custom behavior event',\n                      behaviorEvent: actionIntend.event as CustomBehaviorEvent,\n                      editor: event.editor,\n                    })\n                  } else {\n                    enqueue.raise({\n                      type: 'behavior event',\n                      behaviorEvent: actionIntend.event,\n                      editor: event.editor,\n                    })\n                  }\n                  continue\n                }\n\n                const action = {\n                  ...actionIntend,\n                  editor: event.editor,\n                }\n\n                try {\n                  performAction({context, action})\n                } catch (error) {\n                  console.error(\n                    new Error(\n                      `Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                    ),\n                  )\n                  break\n                }\n              }\n            })\n          })\n          event.editor.onChange()\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n            })\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction,\n              })\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(input.behaviors ?? coreBehaviors),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'custom behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.*': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'custom.*': {\n              actions: emit(({event}) => ({type: 'custom.*', event})),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'select': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior, CustomBehaviorEvent} from '../behaviors/behavior.types'\nimport {compileType} from '../internal-utils/schema'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent =\n  | PickFromUnion<\n      InternalEditorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'blur'\n      | 'decorator.toggle'\n      | 'focus'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'select'\n      | 'style.toggle'\n      | 'patches'\n      | 'update behaviors'\n      | 'update readOnly'\n      | 'update value'\n    >\n  | CustomBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {validateValue} from '../../internal-utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../internal-utils/values'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @public\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","Symbol","for","userSelect","t1","displayName","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","JSON","stringify","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","selected","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","level","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","assertEvent","pendingValue","previousValue","initial value synced","is busy","isProcessingLocalChanges","value changed while syncing","pending value equals previous value","actors","always","entry","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","i","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","Synchronizer","useSelector","_temp","_temp2","syncActorRef","useActorRef","mutationActorRef","subscription","send","subscription_0","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","IS_APPLYING_BEHAVIOR_ACTIONS","withApplyingBehaviorActions","isApplyingBehaviorActions","createWithEventListeners","maxBlocks","behaviorEvent","placement","deleteBackward","deleteForward","insertBreak","insertSoftBreak","unit","defaultActionCallback","location","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","Node","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","removeMark","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","Number","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","performAction","performDefaultAction","getActiveDecorators","slateEditorInstance","editorMachine","behaviors","behavior","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","message","editorContext","activeDecorators","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","isCustomBehaviorEvent","raise","nativeEvent","coreBehaviors","initialReadOnly","exit","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","editable","registerBehavior","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","change$","Subject","constructor","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","div","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAUO,SAASA,mBACdC,kBACc;AACd,MAAI,CAACA;AACG,UAAA,IAAIC,MAAM,iDAAiD;AAEnE,QAAMC,YAAYF,iBAAiBG,IAAIC,KAAKC,aAAa;AAGzD,MAAI,CAACH;AACG,UAAA,IAAID,MAAM,qDAAqD;AAEvE,QAAMK,gBAAgBJ,UAAUK,QAAQH,KACrCI,CAAUA,UAAAA,MAAMC,SAAS,UAC5B;AACA,MAAI,CAACH;AACG,UAAA,IAAIL,MAAM,0DAA0D;AAEtES,QAAAA,SAASJ,cAAcK,KAAKR;AAClC,MAAI,CAACO;AACG,UAAA,IAAIT,MACR,+DACF;AAEF,QAAMW,WAAWF,OAAON,KAAMS,CAAeA,eAAAA,WAAWJ,SAAS,MAAM;AAGvE,MAAI,CAACG;AACG,UAAA,IAAIX,MAAM,0CAA0C;AAEtDa,QAAAA,oBAAqBJ,OAAOK,OAC/BF,CAAAA,eAAeA,WAAWJ,SAAS,MACtC,KAAK,CAAyB,GACxBO,mBAAoBhB,iBAAiBG,IAAIY,OAC5CP,CAAUA,UAAAA,MAAMC,SAASP,UAAUO,IACtC,KAAK,CAAyB;AACvB,SAAA;AAAA,IACLQ,QAAQC,qBAAqBhB,SAAS;AAAA,IACtCiB,YAAYC,yBAAyBR,QAAQ;AAAA,IAC7CS,OAAOC,wBAAwBpB,SAAS;AAAA,IACxCqB,OAAOrB;AAAAA,IACPsB,MAAMZ;AAAAA,IACNa,cAAczB;AAAAA,IACd0B,eAAeZ;AAAAA,IACfa,cAAcX;AAAAA,IACdY,aAAchB,SAA4BgB;AAAAA,EAC5C;AACF;AAEA,SAASV,qBAAqBhB,WAA6B;AACzD,QAAM2B,aAAa3B,UAAUK,QAAQH,KAClC0B,CAAYA,YAAAA,QAAQrB,SAAS,OAChC;AACA,MAAI,CAACoB;AACG,UAAA,IAAI5B,MACR,wEACF;AAEF,QAAM8B,aACJF,WAAWlB,KAAKqB,SAASC,QACzBJ,WAAWlB,KAAKqB,QAAQC,MAAMlB,OAC3BmB,CAA2BA,UAAAA,MAAMC,KACpC;AACE,MAAA,CAACJ,cAAcA,WAAWK,WAAW;AACjC,UAAA,IAAInC,MACR,4FAEF;AAEK8B,SAAAA;AACT;AAEA,SAASX,yBAAyBR,UAA4B;AAC5D,SAAQA,SAAiBO;AAC3B;AAEA,SAASG,wBAAwBpB,WAA6B;AAC5D,QAAMmC,YAAYnC,UAAUK,QAAQH,KACjC0B,CAAYA,YAAAA,QAAQrB,SAAS,UAChC;AACA,MAAI,CAAC4B;AACG,UAAA,IAAIpC,MACR,2EACF;AAEF,QAAMqC,YACJD,UAAU1B,KAAKqB,SAASC,QACxBI,UAAU1B,KAAKqB,QAAQC,KAAKlB,OAAQkB,CAA0BA,SAAAA,KAAKE,KAAK;AAC1E,MAAI,CAACG;AACG,UAAA,IAAIrC,MAAM,mDAAmD;AAE9DqC,SAAAA;AACT;AAEA,SAASjC,cAAcM,MAA0C;AAC3DA,SAAAA,KAAKA,OACAN,cAAcM,KAAKA,IAAI,IAG5BA,KAAKF,SAAS,UACTE,OAGF;AACT;ACnFO,SAAS4B,aACdC,YACmB;AACZA,SAAAA;AACT;AAOO,SAASC,wBAEdD,YAAgC;AAChC,QAAMb,eACJa,YAAYb,cAAce,IAAKC,iBAC7BC,WAAW;AAAA,IACTjC,MAAM;AAAA;AAAA;AAAA,IAGNF,MAAMkC,YAAYlC,SAAS,UAAU,cAAckC,YAAYlC;AAAAA,IAC/DoC,OAAOF,YAAYE;AAAAA,IACnBtC,QAAQ,CAAA;AAAA,EAAA,CACT,CACH,KAAK,CAAE,GACHmB,gBACJc,YAAYd,eAAegB,IAAKI,CAAAA,iBAC9BF,WAAW;AAAA,IACTjC,MAAM;AAAA,IACNF,MAAMqC,aAAarC;AAAAA,IACnBoC,OAAOC,aAAaD;AAAAA,IACpBtC,QAAQ,CAAA;AAAA,EACT,CAAA,CACH,KAAK,CAAA,GAEDwC,qBAAqBC,YAAY;AAAA,IACrCrC,MAAM;AAAA,IACNF,MAAM;AAAA,IACNN,IAAI,CACF,GAAGwB,aAAae,IAAKC,CAAiB,iBAAA;AAAA,MAAChC,MAAMgC,YAAYlC;AAAAA,MAAM,GAC/D;AAAA,MACEE,MAAM;AAAA,MACNF,MAAM;AAAA,MACNN,IAAIuB,cAAcgB,IAAKI,CAAkB,kBAAA;AAAA,QAACnC,MAAMmC,aAAarC;AAAAA,MAAAA,EAAM;AAAA,MACnEwC,OAAO;AAAA,QACL9B,YACEqB,YAAYrB,YAAYuB,IAAKQ,CAAe,eAAA;AAAA,UAC1CL,OAAOK,UAAUL,SAASM,UAAUD,UAAUzC,IAAI;AAAA,UAClD0B,OAAOe,UAAUzC;AAAAA,QACnB,EAAE,KAAK,CAAE;AAAA,QACXmB,aACEY,YAAYZ,aAAac,IAAKU,CAAgB,gBAAA;AAAA,UAC5C3C,MAAM2C,WAAW3C;AAAAA,UACjBE,MAAM;AAAA,UACNkC,OAAOO,WAAWP;AAAAA,QACpB,EAAE,KAAK,CAAA;AAAA,MACX;AAAA,MACAxB,OACEmB,YAAYnB,OAAOqB,IAAKT,CAAU,UAAA;AAAA,QAChCE,OAAOF,KAAKxB;AAAAA,QACZoC,OAAOZ,KAAKY,SAASM,UAAUlB,KAAKxB,IAAI;AAAA,MAC1C,EAAE,KAAK,CAAE;AAAA,MACXQ,QACEuB,YAAYvB,QAAQyB,IAAKR,CAAW,WAAA;AAAA,QAClCC,OAAOD,MAAMzB;AAAAA,QACboC,OAAOX,MAAMW,SAASM,UAAUjB,MAAMzB,IAAI;AAAA,MAC5C,EAAE,KAAK,CAAA;AAAA,IACV,CAAA;AAAA,EAAA,CAEJ,GAEK4C,SAASC,OAAaC,QAAQ;AAAA,IAClCC,OAAO,CAACT,oBAAoB,GAAGpB,cAAc,GAAGD,aAAa;AAAA,EAAA,CAC9D,EAAE+B,IAAI,eAAe,GAEhBC,YAAY3D,mBAAmBsD,MAAM;AAEpC,SAAA;AAAA,IACL,GAAGK;AAAAA,IACH/B,cAAc+B,UAAU/B,aAAae,IAAKC,CACxCA,gBAAAA,YAAYlC,SAAS,cAChB;AAAA,MACC,GAAGkC;AAAAA,MACHlC,MAAM;AAAA,MACNE,MAAM;AAAA,QACJ,GAAGgC,YAAYhC;AAAAA,QACfF,MAAM;AAAA,MAAA;AAAA,IACR,IAEFkC,WACN;AAAA,EACF;AACF;ACzHA,MAAMgB,WAAW;AAEFC,QAAMD,QAAQ;AACtB,SAASE,cAAcpD,MAA8B;AAC1D,QAAMqD,YAAY,GAAGH,QAAQ,GAAGlD,IAAI;AAChCmD,SAAAA,WAASA,QAAMG,QAAQD,SAAS,IAC3BF,QAAME,SAAS,IAEjBF,QAAMD,QAAQ;AACvB;ACCgBK,SAAAA,gBACdC,OACA9B,OACAqB,OACa;AACb,QAAMU,YAAY,CAACD,MAAME,KAAK,CAAC,CAAC;AAChC,MAAI,CAAChC;AACI,WAAA;AAET,QAAMZ,QAAQY,MAAM+B,UAAU,CAAC,CAAC;AAChC,MAAI,CAAC3C;AACI,WAAA;AAET,QAAM6C,iBAAiB,CAAC;AAAA,IAACC,MAAM9C,MAAM8C;AAAAA,EAAAA,CAAK;AACtC9C,MAAAA,MAAM+C,UAAUd,MAAMjC,MAAMd;AACvB2D,WAAAA;AAELG,MAAAA;AACJ,QAAMC,YAAYP,MAAME,KAAKM,MAAM,GAAG,CAAC,GACjCC,QAAQC,MAAMC,QAAQrD,MAAMsD,QAAQ,KAAKtD,MAAMsD,SAASL,UAAU,CAAC,CAAC;AACtEE,SAAAA,UACFH,iBAAiB,CAAC,YAAY;AAAA,IAACF,MAAMK,MAAML;AAAAA,EAAAA,CAAK,IAGhDE,iBAAiB,CAAC,GAAGH,gBAAgB,GAAGG,cAAc,IAAIH;AAE9D;AAEgBU,SAAAA,YAAYX,MAAYY,QAA2B;AACjE,MAAI,CAACA;AACH,WAAO,CAAE;AAEL,QAAA,CAACxD,OAAO2C,SAAS,IAAIS,MAAMK,KAC/BC,OAAOC,MAAMH,QAAQ;AAAA,IACnBI,IAAI,CAAE;AAAA,IACNC,OAAQC,CACNC,MAAAA,aAAanB,KAAK,CAAC,CAAC,KAAMkB,EAAiBhB,SAASF,KAAK,CAAC,EAAEE;AAAAA,EAC/D,CAAA,CACH,EAAE,CAAC,KAAK,CAACkB,QAAWA,MAAS;AAE7B,MAAI,CAAChE,SAAS,CAACiE,UAAQC,UAAUlE,KAAK;AACpC,WAAO,CAAE;AAGPwD,MAAAA,OAAOW,OAAOnE,KAAK;AACrB,WAAO,CAAC2C,UAAU,CAAC,GAAG,CAAC;AAGzB,QAAMM,YAAY,CAACL,KAAK,CAAC,CAAC,GACpBwB,aAAapE,MAAMsD,SAASe,UAAWlB,CAC3CmB,UAAAA,QAAQ,CAAC;AAAA,IAACxB,MAAMK,MAAML;AAAAA,EAAAA,CAAK,GAAGG,SAAS,CACzC;AAEA,MAAImB,cAAc,KAAKpE,MAAMsD,SAASc,UAAU,GAAG;AAC3CjB,UAAAA,QAAQnD,MAAMsD,SAASc,UAAU;AACvC,WAAIH,UAAQC,UAAUf,KAAK,KAAKK,OAAOW,OAAOhB,KAAK,IAC1CR,UAAU4B,OAAOH,UAAU,EAAEG,OAAO,CAAC,IAEvC5B,UAAU4B,OAAOH,UAAU;AAAA,EAAA;AAGpC,SAAO,CAACzB,UAAU,CAAC,GAAG,CAAC;AACzB;AC5DgB6B,SAAAA,oBACd5D,OACA6D,OACAxC,OACiB;AACjB,MAAI,CAACwC;AACI,WAAA;AAELC,MAAAA,SAAsC,MACtCC,QAAqC;AACzC,QAAMC,aAAaH,MAAMC,UAAUjC,gBAAgBgC,MAAMC,QAAQ9D,OAAOqB,KAAK;AACzE2C,gBAAcH,MAAMC,WACtBA,SAAS;AAAA,IACP9B,MAAMgC;AAAAA,IACNC,QAAQJ,MAAMC,OAAOG;AAAAA,EAAAA;AAGzB,QAAMC,YAAYL,MAAME,SAASlC,gBAAgBgC,MAAME,OAAO/D,OAAOqB,KAAK;AACtE6C,eAAaL,MAAME,UACrBA,QAAQ;AAAA,IACN/B,MAAMkC;AAAAA,IACND,QAAQJ,MAAME,MAAME;AAAAA,EAAAA;AAGlBE,QAAAA,WAAWC,GACfC,MAAMC,QAAQT,KAAK,KAAIQ,MAAME,WAAWV,KAAK;AAE/C,SAAOC,UAAUC,QAAQ;AAAA,IAACD;AAAAA,IAAQC;AAAAA,IAAOI;AAAAA,EAAAA,IAAY;AACvD;AAEgBK,SAAAA,aACdC,WACA7B,QACc;AACV,MAAA,CAAC6B,aAAa,CAAC7B;AACV,WAAA;AAET,QAAMkB,SAAS;AAAA,IACb9B,MAAMW,YAAY8B,UAAUX,OAAO9B,MAAMY,MAAM;AAAA,IAC/CqB,QAAQQ,UAAUX,OAAOG;AAAAA,KAErBF,QAAQ;AAAA,IACZ/B,MAAMW,YAAY8B,UAAUV,MAAM/B,MAAMY,MAAM;AAAA,IAC9CqB,QAAQQ,UAAUV,MAAME;AAAAA,EAC1B;AACIF,SAAAA,MAAM/B,KAAK/B,WAAW,KAAK6D,OAAO9B,KAAK/B,WAAW,IAC7C,OAEe8D,QAAQ;AAAA,IAACD;AAAAA,IAAQC;AAAAA,EAAAA,IAAS;AAEpD;AAEgBW,SAAAA,qBACdb,OACAc,WACc;AACd,QAAMb,SAASc,MAAMC,UAAUhB,MAAMC,QAAQa,SAAS,GAChDZ,QAAQa,MAAMC,UAAUhB,MAAME,OAAOY,SAAS;AAEpD,SAAIb,WAAW,QAAQC,UAAU,OACxB,OAGLa,MAAME,OAAOhB,QAAQD,MAAMC,MAAM,KAAKc,MAAME,OAAOf,OAAOF,MAAME,KAAK,IAChEF,QAGF;AAAA,IAACC;AAAAA,IAAQC;AAAAA,EAAK;AACvB;AC9EgBgB,SAAAA,eACdjD,OACA9B,OAC6B;AACzB,MAAA,CAAC8B,SAAS,CAAC9B;AACN,WAAA;AAET,QAAMgF,UAAgB,CAAE;AACpBC,MAAAA,YAAoBnD,MAAMmC,UAAU;AACxC,QAAMiB,WACJ,OAAOpD,MAAME,KAAK,CAAC,KAAM,YACzB,UAAUF,MAAME,KAAK,CAAC,KACtBF,MAAME,KAAK,CAAC,EAAEE,MACViD,WACJ,OAAOrD,MAAME,KAAK,CAAC,KAAM,YACzB,UAAUF,MAAME,KAAK,CAAC,KACtBF,MAAME,KAAK,CAAC,EAAEE,MACV9C,QAAuCY,MAAM/B,KAChDmH,CAAQA,QAAAA,IAAIlD,SAASgD,QACxB;AACI9F,MAAAA;AACF4F,YAAQK,KAAK;AAAA,MAACnD,MAAM9C,MAAM8C;AAAAA,IAAAA,CAAK;AAAA;AAExB,WAAA;AAET,MAAI9C,SAAS0C,MAAME,KAAK,CAAC,MAAM,YAAY;AAEvC,QAAA,CAAC5C,MAAMsD,YACNF,MAAMC,QAAQrD,MAAMsD,QAAQ,KAAKtD,MAAMsD,SAASzC,WAAW;AAErD,aAAA;AAET,UAAMsC,QACJC,MAAMC,QAAQrD,MAAMsD,QAAQ,KAC5BtD,MAAMsD,SAASzE,KAAMqH,CAAAA,QAAQA,IAAIpD,SAASiD,QAAQ;AAChD5C,QAAAA;AACFyC,cAAQK,KAAK,UAAU,GACvBL,QAAQK,KAAK;AAAA,QAACnD,MAAMK,MAAML;AAAAA,MAAAA,CAAK,GAC/B+C,YACE1C,MAAMgD,QAAQhD,MAAMgD,KAAKtF,UAAU6B,MAAMmC,SACrCnC,MAAMmC,SACL1B,MAAMgD,QAAQhD,MAAMgD,KAAKtF,UAAW;AAAA;AAEpC,aAAA;AAAA,EAAA;AAGJ,SAAA;AAAA,IAAC+B,MAAMgD;AAAAA,IAASf,QAAQgB;AAAAA,EAAS;AAC1C;AAEgBO,SAAAA,mBACdf,WACAzE,OACwB;AACxB,MAAI,CAACyE,aAAa,CAACzE,SAASA,MAAMC,WAAW;AACpC,WAAA;AAELwF,MAAAA,YAAyC,MACzCC,WAAwC;AACtC,QAAA;AAAA,IAAC5B;AAAAA,IAAQC;AAAAA,EAAAA,IAASU;AAUxB,SAREX,UACA9D,MAAM/B,KAAMmH,CAAAA,QAAQ1B,QAAQ;AAAA,IAACxB,MAAMkD,IAAIlD;AAAAA,EAAAA,GAAO4B,OAAO9B,KAAK,CAAC,CAAC,CAAC,MAE7DyD,YAAYV,eAAejB,QAAQ9D,KAAK,IAEtC+D,SAAS/D,MAAM/B,KAAMmH,SAAQ1B,QAAQ;AAAA,IAACxB,MAAMkD,IAAIlD;AAAAA,EAAO6B,GAAAA,MAAM/B,KAAK,CAAC,CAAC,CAAC,MACvE0D,WAAWX,eAAehB,OAAO/D,KAAK,IAEpCyF,aAAaC,WACR;AAAA,IAAC5B,QAAQ2B;AAAAA,IAAW1B,OAAO2B;AAAAA,IAAUvB,UAAUM,UAAUN;AAAAA,EAAAA,IAE3D;AACT;ACjEawB,MAEAC,iBAAiB;AAM9B,SAASC,mBACPC,QACAC,QACA;AACM/F,QAAAA,QAAQ+F,OAAOD,OAAO5D,IAAI;AAC5BlC,SAAAA,SAAS0D,QAAQoC,QAAQ9F,KAAK,IACzBA,SAET+F,OAAOD,OAAO5D,IAAI,IAAI4D,QACfA;AACT;AAEO,SAASE,aACdhG,OACA;AAAA,EAACiG;AAAyD,GAC1DF,SAA8B,CAAA,GAChB;AACd,SAAI/F,SAASwC,MAAMC,QAAQzC,KAAK,IACvBA,MAAMO,IAAKnB,CAAU,UAAA;AACpB,UAAA;AAAA,MAAC+C;AAAAA,MAAOD;AAAAA,MAAM,GAAGgE;AAAAA,IAAAA,IAAQ9G,OACzB+G,eAAe,CACnB;AAAA,MAACjE,MAAM0D;AAAAA,MAAgBzD,OAAO;AAAA,MAAQoD,MAAM;AAAA,MAAIzE,OAAO,CAAA;AAAA,IAAA,CAAG;AAG5D,QADuB1B,SAASA,MAAM+C,UAAU8D,YAAY7G,MAAMd,MAC9C;AAClB,YAAM8H,YAAYhH;AAClB,UAAIiH,aAAa;AACXC,YAAAA,kBAAkB,OAAOF,UAAUrG,QAAU,KAC7CwG,qBAAqB,OAAOH,UAAUI,WAAa,KACnDC,qBAAqB,OAAOL,UAAU1D,WAAa,KAEnDA,YAAY0D,UAAU1D,YAAY,CAAInC,GAAAA,IAAKgC,CAAU,UAAA;AACnD,cAAA;AAAA,UAACJ,OAAOuE;AAAAA,UAAOxE,MAAMyE;AAAAA,UAAM,GAAGC;AAAAA,QAAAA,IAASrE;AAM7C,eAAImE,UAAU,UACZL,aAAa,IACNR,mBACL;AAAA,UACE1D,OAAOuE;AAAAA,UACPxE,MAAMyE;AAAAA,UACNjE,UAAUyD;AAAAA,UACVnG,OAAO4G;AAAAA,UACPC,UAAU;AAAA,QAAA,GAEZd,MACF,KAGKxD;AAAAA,MAAAA,CACR;AAGC,aAAA,CAAC+D,mBACD,CAACC,sBACD,CAACE,sBACD,CAACJ,cACDhD,UAAQC,UAAUlE,KAAK,IAGhBA,SAGLkH,oBACFJ,KAAKnG,QAAQkG,YAAYnH,OAAO,CAAC,EAAEkB,QAE9B6F,mBAAmB;AAAA,QAAC1D;AAAAA,QAAOD;AAAAA,QAAM,GAAGgE;AAAAA,QAAMxD;AAAAA,SAAWqD,MAAM;AAAA,IAAA;AAEpE,WAAOF,mBACL;AAAA,MACE1D;AAAAA,MACAD;AAAAA,MACAQ,UAAUyD;AAAAA,MACVnG,OAAOkG;AAAAA,OAETH,MACF;AAAA,EACD,CAAA,IAEI,CAAE;AACX;AAEO,SAASe,eACd9G,OACA+G,eACAhB,SAAgE,CAAA,GAC3C;AACd/F,SAAAA,MAAMO,IAAKnB,CAAU,UAAA;AACpB,UAAA;AAAA,MAAC8C;AAAAA,MAAMC;AAAAA,IAAAA,IAAS/C;AAClB,QAAA,CAAC8C,QAAQ,CAACC;AACN,YAAA,IAAIrE,MAAM,mBAAmB;AAGnCqE,QAAAA,UAAU4E,iBACV,cAAc3H,SACdoD,MAAMC,QAAQrD,MAAMsD,QAAQ,KAC5BR,MACA;AACA,UAAImE,aAAa;AACjB,YAAM3D,WAAWtD,MAAMsD,SAASnC,IAAKgC,CAAU,UAAA;AACvC,cAAA;AAAA,UAACJ,OAAO6E;AAAAA,QAAAA,IAAUzE;AACpB,YAAA,WAAWA,SAASyE,WAAW,QAAQ;AAC5B,uBAAA;AACP,gBAAA;AAAA,YACJhH,OAAOiH;AAAAA,YACP/E,MAAMgF;AAAAA,YACN/E,OAAOgF;AAAAA,YACPN,UAAUO;AAAAA,YACV1E,UAAU2E;AAAAA,YACV,GAAGnB;AAAAA,UAAAA,IACD3D;AACJ,iBAAOsD,mBACL;AAAA,YAAC,GAAGK;AAAAA,YAAM,GAAGe;AAAAA,YAAG/E,MAAMgF;AAAAA,YAAa/E,OAAOgF;AAAAA,aAC1CpB,MACF;AAAA,QAAA;AAEKxD,eAAAA;AAAAA,MAAAA,CACR;AACD,aAAK8D,aAGER,mBACL;AAAA,QAAC,GAAGzG;AAAAA,QAAOsD;AAAAA,QAAUR;AAAAA,QAAMC;AAAAA,MAAAA,GAC3B4D,MACF,IALS3G;AAAAA,IAAAA;AAOLkI,UAAAA,aAAa,WAAWlI,SAASA,MAAMY;AAC7C,WAAO6F,mBACL;AAAA,MAAC3D;AAAAA,MAAMC;AAAAA,MAAO,GAAI,OAAOmF,cAAe,WAAWA,aAAa,CAAA;AAAA,OAChEvB,MACF;AAAA,EAAA,CACD;AACH;AAEgBwB,SAAAA,qBACd7E,UACAuD,aACS;AAEPvD,SAAAA,aAAaU,UACZV,YAAYF,MAAMC,QAAQC,QAAQ,KAAKA,SAASzC,WAAW,KAC3DyC,YACCF,MAAMC,QAAQC,QAAQ,KACtBA,SAASzC,WAAW,KACpBoD,UAAQC,UAAUZ,SAAS,CAAC,CAAC,KAC7BA,SAAS,CAAC,EAAEP,UAAU8D,YAAY7G,MAAMd,QACxC,WAAWoE,SAAS,CAAC,KACrBA,SAAS,CAAC,EAAE3C,UAAUkG,YAAYnH,OAAO,CAAC,EAAEkB,SAC5C,EAAE,cAAc0C,SAAS,CAAC,MAC1BF,MAAMC,QAAQC,SAAS,CAAC,EAAEA,QAAQ,KAClCA,SAAS,CAAC,EAAEA,SAASzC,WAAW,KAChCuH,KAAKC,OAAO/E,SAAS,CAAC,EAAEA,SAAS,CAAC,CAAC,KACnCA,SAAS,CAAC,EAAEA,SAAS,CAAC,EAAEP,UAAU,UAClC,CAACO,SAAS,CAAC,EAAEA,SAAS,CAAC,EAAE5B,OAAO4G,KAAK,EAAE,KACvChF,SAAS,CAAC,EAAEA,SAAS,CAAC,EAAE6C,SAAS;AAEvC;AC9KO,MAAMoC,+BACX,oBAAIC,WAGOC,cAAwC,oBAAID,WAE5CE,4BAAsD,oBAAIF,WAG1DG,6BACPH,oBAAAA,QAAAA,GAEOI,oCAGLJ,oBAAAA,QAAAA,GAEKK,uBACPL,oBAAAA,QAAAA,GACOM,uBACPN,oBAAAA,QAAAA,GAGOO,mDAAmCP,QAG9C,GCvBIQ,gBAAgBC,CAAA,UAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAD,IAAA,CAAA,MAAAE,OAAAC,IAAA,2BAAA,KAENF,KAAA;AAAA,IAAAG,YAAa;AAAA,EAAA,GAAOJ,OAAAC,MAAAA,KAAAD,EAAA,CAAA;AAAAK,MAAAA;AAAA,SAAAL,EAAA,CAAA,MAAAD,MAAArI,MAAAkC,QAAAoG,EAAAD,CAAAA,MAAAA,MAAArI,MAAAmC,SAAhCwG,KAAA,qBAAA,OAAA,EAAY,OAAAJ,IAAsB,UAAA;AAAA,IAAA;AAAA,IAC9BF,MAAKrI,MAAAmC;AAAAA,IAAa;AAAA,IAAGkG,MAAKrI,MAAAkC;AAAAA,IAAY;AAAA,EAAA,GAC1C,GAAMoG,EAAAD,CAAAA,IAAAA,MAAArI,MAAAkC,MAAAoG,EAAAD,CAAAA,IAAAA,MAAArI,MAAAmC,OAAAmG,OAAAK,MAAAA,KAAAL,EAAA,CAAA,GAFNK;AAEM;AAIVP,cAAcQ,cAAc;ACK5B,MAAMnH,UAAQC,cAAc,2BAA2B,GAiB1CmH,iBAAiBN,CAAA,OAAA;AAAAD,QAAAA,IAAAjB,EAAA,EAAA,GAAC;AAAA,IAAA3E;AAAAA,IAAAoG;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAT,IAAAA,IAM7B3F,SAAeqG,kBACfC,eAAqBC,OAAA/F,MAA6B,GAClD,CAAAgG,YAAAC,aAAA,IAAoCC,WAAc;AAAC,MAAAX,IAAAY;AAAAjB,IAAA1F,CAAAA,MAAAA,UAAA0F,SAAAQ,WAE3CS,KAAAzG,OAAAS,OAAcX,QAAQkG,OAAO,GAACR,OAAA1F,QAAA0F,OAAAQ,SAAAR,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAK,KAA9BY;AADR,QAAAhG,SAAeoF;AAGd,MAAAa,IAAAC;AAAAnB,IAAA1F,CAAAA,MAAAA,UAAA0F,SAAAQ,WAEOW,KAAA3G,OAAA4G,SAAgB9G,QAAQkG,OAAO,GAACR,OAAA1F,QAAA0F,OAAAQ,SAAAR,OAAAmB,MAAAA,KAAAnB,EAAA,CAAA,GAAAkB,KAAhCC;AADR,QAAAC,WAAiBF,IAKjB,CAAAG,cAAAC,eAAA,IAAwCN,aAAiC;AAAC,MAAAO,IAAAC;AAAAxB,IAAAU,CAAAA,MAAAA,YAAAV,SAAA1F,UAAA0F,EAAA,CAAA,MAAAQ,WAGxEe,KAAAA,MACED,gBACEZ,WAAWA,SAAQe,UAAWC,YAAAC,UAAsBrH,QAAQkG,OAAO,CACrE,GACFgB,KAAClH,CAAAA,QAAQkG,SAASE,QAAQ,GAACV,OAAAU,UAAAV,OAAA1F,QAAA0F,OAAAQ,SAAAR,OAAAuB,IAAAvB,QAAAwB,OAAAD,KAAAvB,EAAA,CAAA,GAAAwB,KAAAxB,EAAA,EAAA,IAL7B4B,UACEL,IAIAC,EACF;AAACK,MAAAA;AAAA7B,IAAAqB,EAAAA,MAAAA,gBAAArB,UAAA1F,UAAA0F,EAAA,EAAA,MAAAQ,WAICqB,KAAAC,CAAA,UAAA;AACEC,UAAAA,eAAqBvC,0BAAAxG,IAA8BsB,MAAM;AAErD,QAAA,CAACyH,gBAAY,CAAKV;AAAY;AAG7BW,UAAAA,eAAAA,GACLF,MAAKG,aAAAC,aAA2B,QAChCzC,2BAAA0C,IAA+B7H,QAAQkG,OAAO;AAC9C,UAAA4B,cAAoBf,aAAYgB,sBAAAA,GAChC1G,SAAeyG,YAAWE,KAC1BC,SAAeH,YAAWG,QAC1BC,IAAUV,MAAKW,OACfC,MAAYC,KAAAC,IAASjH,SAAS6G,CAAC;AAS0B,QAPrDhC,YAAYlG,OAAMF,SAAY,CAAA,MAEvBsI,MAAMH,SAAU,IAEzB7C,kCAAAyC,IAAsC7H,QAD3B,KAC2C,IAGtDoF,kCAAAyC,IAAsC7H,QAD3B,QAC2C,IAEpDyH,iBAAiBvB,SAAO;AAC1BsB,YAAKG,aAAAC,aAA2B;AAAM;AAAA,IAAA;AAGxCnB,oBAAkB;AAAA,EAAA,GACnBf,QAAAqB,cAAArB,QAAA1F,QAAA0F,QAAAQ,SAAAR,QAAA6B,MAAAA,KAAA7B,EAAA,EAAA;AA9BH,QAAA6C,iBAAuBhB;AAgCtBiB,MAAAA;AAAA9C,IAAA,EAAA,MAAAE,OAAAC,IAAA,2BAAA,KAGmC2C,KAAAA,MAAA;AAClC/B,oBAAmB;AAAA,EAAA,GACpBf,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAFD,QAAA+C,kBAAwBD;AAElBE,MAAAA;AAAAhD,IAAA1F,EAAAA,MAAAA,UAAA0F,UAAAQ,WAIJwC,KAAAC,CAAA,YAAA;AACEC,UAAAA,cAAoBzD,2BAAAzG,IAA+BsB,MAAM;AAAC,QACtD4I,aAAW;AACbf,kBAAAA,IAAgB7H,UAAa,GAC7BwH,QAAKE,eAAgB,GACrBF,QAAKqB,gBACL1D,GAAAA,2BAAA2D,OAAkC9I,MAAM,GACpCsG,aAAYa,YACdtI,QAAM,qBAAqB,GAC3BkK,SAAAC,KAAAC,YAA0B3C,aAAYa,OAAQ;AAEhD+B,YAAAA,eAAqB9D,kCAAA1G,IAAsCsB,MAAM;AACjEoF,wCAAA0D,OAAyC9I,MAAM;AAC/C,UAAAmJ,aAAiB/B,YAAAgC,SAAqBpJ,QAAQ4I,WAAW;AACzDS,YAAAA,SAAejC,YAAAgC,SAAqBpJ,QAAQkG,OAAO,GACnDoD,WAAiBC,KAAAD,SAAcD,QAAQF,UAAU;AAC7CD,UAAAA,iBAAiB,YAAQ,CAAKI,UAAQ;AAAA,YAEpCH,WAAiBnJ,CAAAA,KAAAA,OAAMF,SAAAzC,SAAoB,GAAA;AAC7CwB,kBAAM,6CAA6C;AAAC;AAAA,QAAA;AAGtD,cAAA2K,eAAqBL;AACrBA,qBAAaA,KAAAA,KAAUA,UAAU,GACjCtK,QACE,6BAA6B4K,KAAAC,UAAeF,YAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAGAD,UAAAA,iBAAiB,SACjBI,YACAH,WAAU,CAAA,MAAQnJ,OAAMF,SAAAzC,SAAoB,GAAA;AAE5C,cAAAsM,iBAAqBR;AACrBA,qBAAaA,KAAAA,SAAcA,UAAU,GACrCtK,QACE,6BAA6B4K,KAAAC,UAAeF,cAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAAC,UAECI,KAAArH,OAAYiH,YAAYE,MAAM,GAAC;AAC5B3B,gBAAAA,eAAAA,GACL7I,QAAM,+CAA+C;AAAC;AAAA,MAAA;AAGxDA,cACE,kBAAkBqH,QAAO5G,IAAA,cAAmBmK,KAAAC,UAAeL,MAAM,CAAC,OAAOI,KAAAC,UACvEP,UACF,CAAC,KAAKD,YAAY,GACpB,GACAU,WAAAC,UAAqB7J,QAAM;AAAA,QAAAI,IAAOiJ;AAAAA,QAAMS,IAAMX;AAAAA,MAAAA,CAAW,GACzDnJ,OAAM+J,SAAU;AAAC;AAAA,IAAA;AAGnBlL,YAAM,uCAAuC;AAAA,EAC9C6G,GAAAA,QAAA1F,QAAA0F,QAAAQ,SAAAR,QAAAgD,MAAAA,KAAAhD,EAAA,EAAA;AA3DH,QAAAsE,gBAAsBtB;AA6DrBuB,MAAAA;AAAAvE,IAAA1F,EAAAA,MAAAA,UAAA0F,UAAAQ,WAGC+D,MAAAC,CAAA,YAAA;AACMhF,8BAAAxG,IAA8BsB,MAAM,MACtCnB,QAAM,uBAAuBqH,OAAO,GACpCsB,QAAKE,kBACLF,QAAKqB,gBAAiB,GACtBpC,gBAAmB;AAAA,EAEtBf,GAAAA,QAAA1F,QAAA0F,QAAAQ,SAAAR,QAAAuE,OAAAA,MAAAvE,EAAA,EAAA;AARH,QAAAyE,aAAmBF;AAUlBG,MAAAA;AAAA1E,IAAA1F,EAAAA,MAAAA,UAAA0F,UAAAQ,WAAAR,EAAA,EAAA,MAAA/E,UAGCyJ,MAAAC,CAAA,YAAA;AAAA,QAAA,CACO1J,QAAM;AACTuE,gCAAA4D,OAAiC9I,MAAM;AAAC;AAAA,IAAA;AAG1C6H,gBAAAA,IAAgB7H,UAAY,GAC5BkF,0BAAA2C,IAA8B7H,QAAQkG,OAAO,GAC7CsB,QAAKqB,gBAAiB;AAEtB,UAAAyB,SAAe9C,QAAK8C;AAEhBA,sBAAMC,gBACRD,OAAMnN,MAAAqN,UAAiB;AAAA,EAAA,GAE1B9E,QAAA1F,QAAA0F,QAAAQ,SAAAR,QAAA/E,QAAA+E,QAAA0E,OAAAA,MAAA1E,EAAA,EAAA;AAfH,QAAA+E,aAAmBL;AAiBlBM,MAAAA;AAAAhF,IAAAqB,EAAAA,MAAAA,gBAAArB,EAAA,EAAA,MAAA1F,UAAA0F,EAAA+E,EAAAA,MAAAA,cAAA/E,EAAA,EAAA,MAAAoB,YAAApB,UAAA/E,UAIC+J,MAAAC,CAAA,YAAA;AACM,QAAA,CAAChK,UAAUmG,UAAQ;AACfjI,cAAA,oBAAoB,GAC1BqG,0BAAA4D,OAAiC9I,MAAM,GACvCiF,YAAA4C,IAAgB7H,UAAa;AAAC;AAAA,IAAA;AAGhCnB,QAAAA,QAAM,YAAY,GAClBoG,YAAA4C,IAAgB7H,UAAY,GACxBwH,QAAKG,iBACPH,QAAKG,aAAAiD,QAAsB,6BAA6B,WAAW,GACnEpD,QAAKG,aAAAkD,gBAA8B,SAKjC9D,gBAAgBA,wBAAYwD,aAAuB;AACrDO,UAAAA,YAAgB/D,aAAYgE,YAAe;AAC3CC,YAAAA,cAAoBF,UAASG,cAC3B,8BACF;AACID,UAAAA,gBACFF,YAAYE,cAIdF,UAASI,aAAc,gBAAgB,EAAE,GAACnC,SAAAC,MAAA;AAGxC1C,qBAAYa,UAAW2D,WACvBA,UAAS3N,MAAAgO,WAAkB,YAC3BL,UAAS3N,MAAAiO,OAAc,YACvBN,UAAS3N,MAAAkO,YAAmB,cAC5BtC,SAAAC,KAAAsC,YAA0BR,SAAS;AACnC,cAAAS,OAAaxE,aAAYgB,sBAAuB,GAChDyD,IAAUhE,QAAKiE,UAAWF,KAAIH,MAC9BM,IAAUlE,QAAKmE,UAAWJ,KAAIvD;AAC9B8C,kBAAS3N,MAAAyO,QAAe,GAAGL,KAAIK,KAAA,MAC/Bd,UAAS3N,MAAA8K,SAAgB,GAAGsD,KAAItD,MAAA,MAChCT,QAAKG,aAAAkE,aAA2Bf,WAAWU,GAAGE,CAAC;AAAA,MAAA;AAAA,IAAC;AAGpDjB,eAAWjD,OAAK;AAAA,EAAC,GAClB9B,QAAAqB,cAAArB,QAAA1F,QAAA0F,QAAA+E,YAAA/E,QAAAoB,UAAApB,QAAA/E,QAAA+E,QAAAgF,OAAAA,MAAAhF,EAAA,EAAA;AA5CH,QAAAoG,kBAAwBpB;AA8CvBqB,MAAAA;AAAArG,IAAA1F,EAAAA,MAAAA,UAAA0F,UAAAc,cAGCuF,MAAAvF,cAAcxG,OAAMF,SAAiBqF,CAAAA,MAAAA,2BAAAzG,IAA+BsB,MAAM,GAAC0F,QAAA1F,QAAA0F,QAAAc,YAAAd,QAAAqG,OAAAA,MAAArG,EAAA,EAAA;AAD7E,QAAAsG,2BACED;AAA2EE,MAAAA;AAAAvG,IAAA1F,EAAAA,MAAAA,UAAA0F,UAAAc,cAE3EyF,MAAAzF,cACAxG,OAAMF,SAAUE,OAAMF,SAAAzC,UAAoB,MACxC8H,2BAAAzG,IAA+BsB,MAAM,GAAC0F,QAAA1F,QAAA0F,QAAAc,YAAAd,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAH1CwG,QAAAA,0BACED,KAGFE,iBAAqB/G,kCAAA1G,IAAsCsB,MAAM,GAEjEoM,oBACEJ,4BACCxF,cAAU,CACRwF,4BAAwB,CACxBE,2BACDhD,mBAAiB,OACrBmD,uBACEH,2BACC1F,cAAU,CACRwF,4BAAwB,CACxBE,2BACDhD,mBAAiB;AAAS,MAAAoD,KAAAC;AAAA7G,IAAA,EAAA,MAAAE,OAAAC,IAAA,2BAAA,KAI1B0G,mCACY,WAAA,qBACH,OAAA;AAAA,IAAApB,UACK;AAAA,IAAUS,OACb;AAAA,IAAM3D,QAAA;AAAA,IAAAuE,cAEC;AAAA,IAAwBC,QAAA;AAAA,EAAA,GAGxC,GAAA/G,QAAA6G,OAAAA,MAAA7G,EAAA,EAAA,GAAA4G,MATFC;AAFJ,QAAAG,gBAAsBJ;AAcrB,MAEGnG,UAAQ;AAAAwG,QAAAA;AAAA,WAAAjH,UAAA5F,YACH6M,OAAA,oBAAA,UAAA,YAAW,GAAIjH,QAAA5F,UAAA4F,QAAAiH,QAAAA,OAAAjH,EAAA,EAAA,GAAfiH;AAAAA,EAAAA;AAiBJ,QAAAA,MAAAP,qBAAqBM,eAErBE,MAAAP,wBAAwBK;AAAaG,MAAAA;AAAAnH,SAAAA,EAAA,EAAA,MAAA5F,YAAA4F,EAAA+E,EAAAA,MAAAA,cAAA/E,UAAAsE,iBAAAtE,EAAA,EAAA,MAAA6C,kBAAA7C,EAAAoG,EAAAA,MAAAA,mBAAApG,EAAAyE,EAAAA,MAAAA,cAAAzE,EAAA,EAAA,MAAA/E,UAAA+E,EAAAiH,EAAAA,MAAAA,OAAAjH,UAAAkH,OAXxCC,MAAA,qBAAA,OACalM,EAAAA,mBACEmL,aAAAA,iBACLrB,QAAS,YACLlC,YAAa,gBACZE,aAAc,iBAChBuB,0BACHG,QAAAA,YAEPwC,UAAAA;AAAAA,IAAAA;AAAAA,IACA7M;AAAAA,IACA8M;AAAAA,EAAAA,GACH,GAAMlH,QAAA5F,UAAA4F,QAAA+E,YAAA/E,QAAAsE,eAAAtE,QAAA6C,gBAAA7C,QAAAoG,iBAAApG,QAAAyE,YAAAzE,QAAA/E,QAAA+E,QAAAiH,KAAAjH,QAAAkH,KAAAlH,QAAAmH,OAAAA,MAAAnH,EAAA,EAAA,GAZNmH;AAYM;AAIV5G,eAAeD,cAAc;ACrRflH,cAAc,oBAAoB;AAAA,MAE1CgO,oBAA0C,CAAE,GAkB5CC,mBAAmB;AAAA,EAACC,SAAS;AAAc,GAMpCvM,UAA2CA,CAAC;AAAA,EACvDwM;AAAAA,EACAnN;AAAAA,EACAoG;AAAAA,EACA7C;AAAAA,EACA8C;AAAAA,EACA+G;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AACF,MAAM;AACEtN,QAAAA,SAASqG,kBACTkH,WAAWC,eACXpH,WAAWG,OAA8B,IAAI,GAC7CkH,uBAAuBlH,OAAO,IAAI,GAClCmH,UACHH,YAAYvN,OAAO6B,aAAaJ,MAAMkM,YAAY3N,OAAO6B,SAAS,KACnE,IAEIzE,QAAQwQ,QACZ,MACE1J,eACE,CAACgC,OAAO,GACR7C,YAAY7G,MAAMd,MAClB4J,qBAAqB5G,IAAIsB,MAAM,CACjC,EAAE,CAAC,GACL,CAACA,QAAQkG,SAAS7C,YAAY7G,MAAMd,IAAI,CAC1C;AAEA,MAAImS,gBAAgB/N,UAEhBgO;AAEE3O,QAAAA,YAAkByO,QAAQ,MAAM,CAAC;AAAA,IAACtO,MAAM4G,QAAQ5G;AAAAA,EAAAA,CAAK,GAAG,CAAC4G,OAAO,CAAC;AAEnE,MAAA,OAAOA,QAAQ3G,SAAU;AACrB,UAAA,IAAIrE,MAAM,2CAA2C;AAGzD,MAAA,OAAOgL,QAAQ5G,QAAS;AACpB,UAAA,IAAIpE,MAAM,0CAA0C;AAIxD8E,MAAAA,OAAO8G,SAASZ,OAAO,GAAG;AAC5B,UAAM9G,OAAOgI,YAAYgC,SAASpJ,QAAQkG,OAAO,GAC3C,CAAC1J,KAAK,IAAI0D,OAAO6N,KAAK/N,QAAQZ,MAAM;AAAA,MAAC4O,OAAO;AAAA,IAAE,CAAA,GAC9CC,aAAa5K,YAAY1G,cAActB,KAC1CkE,CAAUA,UAAAA,MAAM7D,SAASwK,QAAQ3G,KACpC;AACA,QAAI,CAAC0O;AACG,YAAA,IAAI/S,MAAM,8CAA8C;AAE5DgT,QAAAA,UAAaxN,UAAUlE,KAAK,GAAG;AACjC,YAAM2R,UAAgB,CACpB;AAAA,QAAC7O,MAAM9C,MAAM8C;AAAAA,SACb,YACA;AAAA,QAACA,MAAM4G,QAAQ5G;AAAAA,MAAAA,CAAK;AAElB8O,aAIF,qBAAC,QAAK,EAAA,GAAInB,YAEPnN,UAAAA;AAAAA,QAAAA;AAAAA,QACA,qBAAA,QAAA,EACC,WAAW,CAACqG,UACZ,WAAU,oBACV,eAAY,oBACZ,KAAKsH,sBAEL,OAAOV,kBACP,iBAAiB,IAEhBI,UAAAA;AAAAA,UAAAA,eACCA,YAAY;AAAA,YACVtQ,aAAaiQ;AAAAA;AAAAA,YACbhN,UAAW,oBAAAuO,eAAA,EAAW,MAAgB,CAAA;AAAA,YACtCC,kBAAkBb;AAAAA,YAClBC;AAAAA,YACAtO,MAAM+O;AAAAA,YACNF;AAAAA,YACAV;AAAAA,YACA3R,MAAMqS;AAAAA,YACN7Q;AAAAA,UAAAA,CACD;AAAA,UACF,CAAC+P,eAAgB,oBAAAkB,eAAA,EAAW,MAAgB,CAAA;AAAA,QAAA,EAAA,GAhBxCnI,QAAQ5G,IAiBf;AAAA,MAAA,GACF;AAAA,IAAA;AAGE,UAAA,IAAIpE,MAAM,kBAAkB;AAAA,EAAA;AAKpC,MAAIgL,QAAQ3G,UAAU8D,YAAY7G,MAAMd,MAAM;AAChC,gBAAA;AACZ,UAAM6S,aAAa,cAAcrI,SAI3B/I,QAAS,WAAW+I,WAAWA,QAAQ/I,SAAU;AACvD2Q,gBAAY,8CAA8C3Q,KAAK;AAC/D,UAAMqR,iBAAiBnL,YAAYnH,OAAOb,KACvCoT,CAASA,SAAAA,KAAKrR,UAAUD,KAC3B;AACIkQ,mBAAemB,mBACjBX,gBAAgBR,YAAY;AAAA,MAC1B7Q,OAAO0J;AAAAA,MACPpG;AAAAA,MACA4N;AAAAA,MACAH;AAAAA,MACAnQ,OAAOD;AAAAA,MACPiC,MAAMD;AAAAA,MACN8O,YAAYO;AAAAA,MACZF,kBAAkBlI;AAAAA,IAAAA,CACnB;AAECsI,QAAAA;AAEAH,QAAAA,eACE,OAAOrI,QAAQwI,SAAU,aAC3BA,QAAQxI,QAAQwI,QAElBZ,aAAa,8BAA8B5H,QAAQyI,QAAQ,uBAAuBD,SAAS,CAAC,KAG1F1O,OAAO4O,YAAYxR,KAAK,KAAKmR,cAAcrI,QAAQyI,UAAU;AACzDE,YAAAA,WAAWxL,YAAY/G,MAAMjB,KAChCoT,YAASA,OAAKrR,UAAU8I,QAAQyI,QACnC;AACIvB,wBAAkByB,aACpBhB,gBAAgBT,eAAe;AAAA,QAC7B5Q,OAAOY;AAAAA,QACP0C,UAAU+N;AAAAA,QACVH;AAAAA,QACAH;AAAAA,QACAnQ,OAAO8I,QAAQyI;AAAAA,QACfvP,MAAMD;AAAAA,QACN8O,YAAYY;AAAAA,QACZH,OAAOtR,MAAMsR,SAAS;AAAA,QACtBJ,kBAAkBlI;AAAAA,MAAAA,CACnB;AAAA,IAAA;AAIC0I,UAAAA,cAA8CC,OAAOC,eACzD;AAAA,MACElP,UAAU+N;AAAAA,MACVS,kBAAkBlI;AAAAA,MAClBsH;AAAAA,MACAgB;AAAAA,MACAC,UAAUJ,aAAarI,QAAQyI,WAAWnO;AAAAA,MAC1CpB,MAAMD;AAAAA,MACNoO;AAAAA,MACApQ;AAAAA,MACA8Q,YAAY5K,YAAY7G;AAAAA,MACxBY;AAAAA,OAEF,QACA;AAAA,MACE6R,YAAY;AAAA,MACZvQ,MAAM;AACIwQ,eAAAA,QAAAA,KACN,0DACF,GACO7L,YAAY7G;AAAAA,MAAAA;AAAAA,IAGzB,CAAA,GAEM2S,yBAAyBjC,cAC3BA,YAAY4B,WAA+B,IAC3ChP;AACJ,+BACG,OAEC,EAAA,GAAImN,YACJ,WACA,YAEA,8BAAC,gBACC,EAAA,SACA,UACA,UAEA,UAAA,oBAAC,SAAI,KAAK7G,UAAW+I,iCAAuB,CAAA,EAC9C,CAAA,KAXKjJ,QAAQ5G,IAYf;AAAA,EAAA;AAIE2O,QAAAA,eAAa5K,YAAYzG,aAAavB,KACzCkE,aAAUA,QAAM7D,SAASwK,QAAQ3G,KACpC;AAEA,MAAI,CAAC0O;AACH,UAAM,IAAI/S,MACR,yDAAyDgL,QAAQ3G,KAAK,EACxE;AAOFuO,cAAY;AAEZ,QAAMtR,UAAQ0H,eACZ,CAACgC,OAAO,GACR7C,YAAY7G,MAAMd,MAClB4J,qBAAqB5G,IAAIsB,MAAM,CACjC,EAAE,CAAC;AAECoP,MAAAA;AAEJ,MAAIlC,aAAa;AACTmC,UAAAA,SAAyCN,OAAOC,eACpD;AAAA,MACElP,UAAW,oBAAAuO,eAAA,EAAW,MAAgB,CAAA;AAAA,MACtCC,kBAAkBlI;AAAAA,MAClBsH;AAAAA,MACAtO,MAAMD;AAAAA,MACN8O,YAAAA;AAAAA,MACAV;AAAAA,MACAnQ,OAAOZ;AAAAA,OAET,QACA;AAAA,MACEyS,YAAY;AAAA,MACZvQ,MAAM;AACIwQ,eAAAA,QAAAA,KACN,0DACF,GACOjB;AAAAA,MAAAA;AAAAA,IACT,CAEJ;AACAmB,6BAAyBlC,YAAYmC,MAA0B;AAAA,EAAA;AAGjE,SACG,qBAAA,OAAA,EAAuB,GAAIpC,YAAY,WACrCnN,UAAAA;AAAAA,IAAAA;AAAAA,wBACA,gBAAe,EAAA,SAAkB,UAAoB,UACpD,8BAAC,OAAI,EAAA,KAAKsG,UAAU,iBAAiB,IAClCgJ,UAGC,0BAAA,oBAACf,eAAW,EAAA,OACb,GACH,EACF,CAAA;AAAA,EAAA,EAAA,GAVQnI,QAAQ5G,IAWlB;AAEJ;AAEAmB,QAAQuF,cAAc;AC1Tf,MAAMsJ,4BACXC,cAAyC,IAAI,GAOlCC,wBAAwBA,MAAA;AACnCxP,QAAAA,SAAeyP,WAAAH,yBAAoC;AAAC,MAAA,CAE/CtP;AAAM9E,UAAAA,IAAAA,MAEP,oGAAsG;AAInG8E,SAAAA;AAAM;AChBR,SAAA0P,kBAAAjK,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAD,IAAA,CAAA,MAAAD,MAAApH,cAEHsH,KAAAA,MAAMgK,MAAMlG,KAAAC,UAAejE,MAAKpH,UAAW,CAAC,GAACqH,EAAA,CAAA,IAAAD,MAAApH,YAAAqH,OAAAC,MAAAA,KAAAD,EAAA,CAAA;AAD/C,QAAAkK,cAAoBjK;AAGnBI,MAAAA;AAAAL,IAAA,CAAA,MAAAE,OAAAC,IAAA,2BAAA,KAEcE,KAAA;AAAA,IAAA8J,OAAQ;AAAA,EAAA,GAAOnK,OAAAK,MAAAA,KAAAL,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,SAAAkK,eAAAlK,EAAAD,CAAAA,MAAAA,MAAA3F,YAA5B6G,mCAAa,OAAAZ,IAA0B6J,SAAU,aAC9CnK,UAAAA,MAAK3F,SACR,CAAA,GAAO4F,OAAAkK,aAAAlK,EAAA,CAAA,IAAAD,MAAA3F,UAAA4F,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAFPiB;AAEO;AAIX+I,kBAAkB1J,cAAc;ACjBzB,SAAS8J,YAAYC,SAAc;AACxC,SAAOC,OAAOxR,QAAQ;AAAA,IACpB9C,MAAM;AAAA,IACN+C,OAAO,CAACsR,OAAO;AAAA,EAAA,CAChB,EAAErR,IAAIqR,QAAQrU,IAAI;AACrB;ACEA,MAAMuU,6BAA6BC,QAAQC,IAAIC,aAAa,SAAS,MAAM,KAK9DC,kBAAkBC,MAAM;AAAA,EACnC7R,OAAO;AAAA,IACL8R,SAAS,CAAC;AAAA,IAKVC,QAAQ,CAAC;AAAA,IACTC,OAAO,CAAC;AAAA,IAIRC,SAAS,CAAA;AAAA,EASX;AAAA,EACAC,SAAS;AAAA,IACP,4BAA4BC,KAAK;AAAA,MAAChV,MAAM;AAAA,IAAA,CAAsB;AAAA,IAC9D,iBAAiBgV,KAAK,CAAC;AAAA,MAACL;AAAAA,IAAAA,OAAc;AAAA,MACpC3U,MAAM;AAAA,MACNiV,SAASN,QAAQO;AAAAA,MACjBC,UAAU7M,eACRqM,QAAQS,YAAYlR,UACpByQ,QAAQjS,OAAO9B,MAAMd,MACrB4J,qBAAqB5G,IAAI6R,QAAQS,WAAW,CAC9C;AAAA,IAAA,EACA;AAAA,IACF,yBAAyBC,OAAO;AAAA,MAC9BH,gBAAgB,CAAA;AAAA,IAAA,CACjB;AAAA,IACD,eAAeG,OAAO;AAAA,MACpBH,gBAAgBA,CAAC;AAAA,QAACP;AAAAA,QAAS/I;AAAAA,YAAW,CACpC,GAAG+I,QAAQO,gBACXtJ,MAAM0J,KAAK;AAAA,IAEd,CAAA;AAAA,EACH;AAAA,EACAC,QAAQ;AAAA,IACN,wBAAwBC,CAAC;AAAA,MAACb;AAAAA,IAAAA,MACxBrQ,OAAOmR,cAAcd,QAAQS,WAAW;AAAA,EAAA;AAE9C,CAAC,EAAEM,cAAc;AAAA,EACfC,IAAI;AAAA,EACJhB,SAASA,CAAC;AAAA,IAACE;AAAAA,EAAAA,OAAY;AAAA,IACrBK,gBAAgB,CAAE;AAAA,IAClBxS,QAAQmS,MAAMnS;AAAAA,IACd0S,aAAaP,MAAMO;AAAAA,EAAAA;AAAAA,EAErBQ,SAAS;AAAA,EACTC,QAAQ;AAAA,IACN,MAAQ;AAAA,MACNC,IAAI;AAAA,QACFR,OAAO;AAAA,UACLP,SAAS,CAAC,eAAe,0BAA0B;AAAA,UACnDrG,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAEJ;AAAA,IACA,uBAAuB;AAAA,MACrBqH,OAAO;AAAA,QACL,CAAC1B,0BAA0B,GAAG,CAC5B;AAAA,UACE2B,OAAO;AAAA,UACPtH,QAAQ;AAAA,UACRqG,SAAS,CAAC,iBAAiB,uBAAuB;AAAA,QAAA,GAEpD;AAAA,UACEkB,SAAS;AAAA,QACV,CAAA;AAAA,MAEL;AAAA,MACAH,IAAI;AAAA,QACFR,OAAO;AAAA,UACLP,SAAS,CAAC,aAAa;AAAA,UACvBkB,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAEJ,CAAC;AChFeC,SAAAA,cACd1U,OACAqB,OACAsT,cACY;AACRC,MAAAA,aAA4C,MAC5CC,QAAQ;AACNC,QAAAA,kBAAkB,CACtBzT,MAAMhC,KAAKf,MACX,GAAG+C,MAAM9B,cAAcgB,IAAK4G,CAAMA,MAAAA,EAAE7I,IAAI,CAAC,GAErCyW,kBAAkB,CACtB1T,MAAMjC,MAAMd,MACZ,GAAG+C,MAAM7B,aAAae,IAAK4G,CAAAA,MAAMA,EAAE7I,IAAI,CAAC;AAI1C,SAAI0B,UAAUoD,SACL;AAAA,IAACyR,OAAO;AAAA,IAAMD,YAAY;AAAA,IAAM5U;AAAAA,EAAAA,IAGrC,CAACwC,MAAMC,QAAQzC,KAAK,KAAKA,MAAMC,WAAW,IACrC;AAAA,IACL4U,OAAO;AAAA,IACPD,YAAY;AAAA,MACVnB,SAAS,CAACuB,MAAM,CAAA,CAAE,CAAC;AAAA,MACnBC,aACE;AAAA,MACFC,QAAQ;AAAA,MACR7D,MAAMrR;AAAAA,MAENmV,MAAM;AAAA,QACJF,aACE;AAAA,QACFC,QAAQ;AAAA,MAAA;AAAA,IAEZ;AAAA,IACAlV;AAAAA,EAIFA,KAAAA,MAAMoV,KAAK,CAAChQ,KAAwBiQ,UAA2B;AAEzD,QAAA,CAACC,cAAclQ,GAAG;AACP,aAAA,aAAA;AAAA,QACXqO,SAAS,CAACuB,MAAM,CAACK,KAAK,CAAC,CAAC;AAAA,QACxBJ,aAAa,gCAAgCM,OAAOnQ,GAAG,CAAC;AAAA,QACxD8P,QAAQ;AAAA,QACR7D,MAAMjM;AAAAA,QAEN+P,MAAM;AAAA,UACJF,aACE;AAAA,UACFC,QAAQ;AAAA,UACRM,QAAQ;AAAA,YAACH;AAAAA,UAAAA;AAAAA,QAAK;AAAA,MAChB,GAEK;AAGT,QAAI,CAACjQ,IAAIlD,QAAQ,OAAOkD,IAAIlD,QAAS;AACtB,aAAA,aAAA;AAAA,QACXuR,SAAS,CAAChJ,IAAI;AAAA,UAAC,GAAGrF;AAAAA,UAAKlD,MAAMyS,aAAa;AAAA,QAAA,GAAI,CAACU,KAAK,CAAC,CAAC;AAAA,QACtDJ,aAAa,kBAAkBI,KAAK;AAAA,QACpCH,QAAQ;AAAA,QACR7D,MAAMjM;AAAAA,QAEN+P,MAAM;AAAA,UACJF,aACE;AAAA,UACFC,QAAQ;AAAA,UACRM,QAAQ;AAAA,YAACH;AAAAA,UAAAA;AAAAA,QAAK;AAAA,MAChB,GAEK;AAGL,QAAA,CAACjQ,IAAIjD,SAAS,CAAC4S,gBAAgBU,SAASrQ,IAAIjD,KAAK,GAAG;AAElDiD,UAAAA,IAAIjD,UAAU,SAAS;AACnBuT,cAAAA,uBAAuBrU,MAAMjC,MAAMd;AAC5B,eAAA,aAAA;AAAA,UACXmV,SAAS,CACPhJ,IAAI;AAAA,YAAC,GAAGrF;AAAAA,YAAKjD,OAAOuT;AAAAA,UAAAA,GAAuB,CAAC;AAAA,YAACxT,MAAMkD,IAAIlD;AAAAA,UAAK,CAAA,CAAC,CAAC;AAAA,UAEhE+S,aAAa,oBAAoB7P,IAAIlD,IAAI,4BAA4BkD,IAAIjD,KAAK,uDAAuDuT,oBAAoB;AAAA,UACzJR,QAAQ,aAAaQ,oBAAoB;AAAA,UACzCrE,MAAMjM;AAAAA,UAEN+P,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cAACG,KAAKvQ,IAAIlD;AAAAA,cAAM0T,kBAAkBF;AAAAA,YAAAA;AAAAA,UAAoB;AAAA,QAChE,GAEK;AAAA,MAAA;AAKP,aAAA,CAACtQ,IAAIjD,SACL0T,wBAAwB;AAAA,QAAC,GAAGzQ;AAAAA,QAAKjD,OAAOd,MAAMjC,MAAMd;AAAAA,MAAK,CAAA,KAEzDsW,aAAa;AAAA,QACXnB,SAAS,CACPhJ,IAAI;AAAA,UAAC,GAAGrF;AAAAA,UAAKjD,OAAOd,MAAMjC,MAAMd;AAAAA,QAAAA,GAAO,CAAC;AAAA,UAAC4D,MAAMkD,IAAIlD;AAAAA,QAAK,CAAA,CAAC,CAAC;AAAA,QAE5D+S,aAAa,oBAAoB7P,IAAIlD,IAAI,8EAA8Eb,MAAMjC,MAAMd,IAAI;AAAA,QACvI4W,QAAQ,aAAa7T,MAAMjC,MAAMd,IAAI;AAAA,QACrC+S,MAAMjM;AAAAA,QAEN+P,MAAM;AAAA,UACJF,aACE;AAAA,UACFC,QACE;AAAA,UACFM,QAAQ;AAAA,YAACG,KAAKvQ,IAAIlD;AAAAA,YAAM0T,kBAAkBvU,MAAMjC,MAAMd;AAAAA,UAAAA;AAAAA,QAAI;AAAA,MAGvD,GAAA,MAGJ8G,IAAIjD,SAiBTyS,aAAa;AAAA,QACXnB,SAAS,CAACuB,MAAM,CAAC;AAAA,UAAC9S,MAAMkD,IAAIlD;AAAAA,QAAK,CAAA,CAAC,CAAC;AAAA,QACnC+S,aAAa,oBAAoB7P,IAAIlD,IAAI,wBAAwBkD,IAAIjD,KAAK;AAAA,QAC1E+S,QAAQ;AAAA,QACR7D,MAAMjM;AAAAA,QAEN+P,MAAM;AAAA,UACJF,aACE;AAAA,UACFC,QAAQ;AAAA,UACRM,QAAQ;AAAA,YAACG,KAAKvQ,IAAIlD;AAAAA,YAAM4T,UAAU1Q,IAAIjD;AAAAA,UAAAA;AAAAA,QAAK;AAAA,MAC7C,GAEK,OA7BLyS,aAAa;AAAA,QACXnB,SAAS,CAACuB,MAAM,CAAC;AAAA,UAAC9S,MAAMkD,IAAIlD;AAAAA,QAAK,CAAA,CAAC,CAAC;AAAA,QACnC+S,aAAa,oBAAoB7P,IAAIlD,IAAI;AAAA,QACzCgT,QAAQ;AAAA,QACR7D,MAAMjM;AAAAA,QAEN+P,MAAM;AAAA,UACJF,aACE;AAAA,UACFC,QAAQ;AAAA,UACRM,QAAQ;AAAA,YAACG,KAAKvQ,IAAIlD;AAAAA,UAAAA;AAAAA,QAAI;AAAA,MAGnB,GAAA;AAAA,IAAA;AAoBX,QAAIkD,IAAIjD,UAAUd,MAAMjC,MAAMd,MAAM;AAClC,YAAM8H,YAAYhB;AAElB,UAAIgB,UAAU1D,YAAY,CAACF,MAAMC,QAAQ2D,UAAU1D,QAAQ;AAC5C,eAAA,aAAA;AAAA,UACX+Q,SAAS,CAAChJ,IAAI;AAAA,YAAC/H,UAAU,CAAA;AAAA,UAAA,GAAK,CAAC;AAAA,YAACR,MAAMkE,UAAUlE;AAAAA,UAAK,CAAA,CAAC,CAAC;AAAA,UACvD+S,aAAa,yBAAyB7O,UAAUlE,IAAI;AAAA,UACpDgT,QAAQ;AAAA,UACR7D,MAAMjL;AAAAA,UAEN+O,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cAACG,KAAKvP,UAAUlE;AAAAA,YAAAA;AAAAA,UAAI;AAAA,QAC9B,GAEK;AAIPkE,UAAAA,UAAU1D,aAAaU,UACtBZ,MAAMC,QAAQ2D,UAAU1D,QAAQ,KAAK0D,UAAU1D,SAASzC,WAAW,GACpE;AACA,cAAM8V,UAAU;AAAA,UACd5T,OAAOd,MAAMhC,KAAKf;AAAAA,UAClB4D,MAAMyS,aAAa;AAAA,UACnBpP,MAAM;AAAA,UACNzE,OAAO,CAAA;AAAA,QACT;AACa,eAAA,aAAA;AAAA,UACXkV,aAAa;AAAA,UACbvC,SAAS,CACPwC,aAAa,CAAA,GAAI,CAAC;AAAA,YAAC/T,MAAMkD,IAAIlD;AAAAA,UAAAA,GAAO,UAAU,CAAC,GAC/CgU,OAAO,CAACH,OAAO,GAAG,SAAS,CAAC;AAAA,YAAC7T,MAAMkD,IAAIlD;AAAAA,UAAAA,GAAO,YAAY,CAAC,CAAC,CAAC;AAAA,UAE/D+S,aAAa,sCAAsC7P,IAAIlD,IAAI;AAAA,UAC3DgT,QAAQ;AAAA,UACR7D,MAAMjM;AAAAA,UAEN+P,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cAACG,KAAKvQ,IAAIlD;AAAAA,YAAAA;AAAAA,UAAI;AAAA,QACxB,GAEK;AAAA,MAAA;AAGHiU,YAAAA,eAAeC,KACnBC,QACEjQ,UAAU1D,SACP9D,OAAQ0G,CAAAA,QAAQA,IAAInD,UAAUd,MAAMhC,KAAKf,IAAI,EAC7CiC,IAAK+E,CAAQA,QAAAA,IAAIxE,SAAS,CAAE,CAAA,CACjC,CACF;AAGI0B,UAAAA,MAAMC,QAAQ2C,IAAIoB,QAAQ,KAAKpB,IAAIoB,SAASvG,SAAS,GAAG;AAC1D,cAAMqW,iBAA2BF,KAC/BhR,IAAIoB,SACDjG,IAAKgW,SAAQA,IAAIrU,IAAI,EACrBtD,OAAQ+W,SAAQ,CAACQ,aAAaV,SAASE,GAAG,CAAC,CAChD;AACA,YAAIW,eAAerW,SAAS;AACb,iBAAA,aAAA;AAAA,YACX+V,aAAa;AAAA,YACbvC,SAAS6C,eAAe/V,IAAKiW,CAAAA,eAC3BxB,MAAM,CAAC;AAAA,cAAC9S,MAAMkD,IAAIlD;AAAAA,eAAO,YAAY;AAAA,cAACA,MAAMsU;AAAAA,YAAW,CAAA,CAAC,CAC1D;AAAA,YACAvB,aAAa,2DAA2DqB,eAAe5O,KACrF,IACF,CAAC;AAAA,YACDwN,QAAQ;AAAA,YACR7D,MAAMjM;AAAAA,YACN+P,MAAM;AAAA,cACJF,aACE;AAAA,cACFC,QACE;AAAA,cACFM,QAAQ;AAAA,gBACNG,KAAKvQ,IAAIlD;AAAAA,gBACToU,gBAAgBA,eAAe/V,IAAKkW,CAAMA,MAAAA,EAAEC,SAAU,CAAA;AAAA,cAAA;AAAA,YACxD;AAAA,UACF,GAEK;AAAA,MAAA;AAQX,YAAMC,gBAHkBR,aAAavX,OAClCgY,CAAAA,SAAS,CAACvV,MAAMrC,WAAWuB,IAAKsW,CAAQA,QAAAA,IAAI7W,KAAK,EAAEyV,SAASmB,IAAI,CACnE,EACsChY,OACnCgY,CAAAA,SACCxQ,UAAUI,aAAapD,UACvB,CAACgD,UAAUI,SAASvI,KAAMsY,CAAAA,QAAQA,IAAIrU,SAAS0U,IAAI,CACvD;AACID,UAAAA,cAAc1W,SAAS,GAAG;AACtB6W,cAAAA,eAAe1Q,UAAU1D,SAAS9D,OACrC0G,SACCA,IAAInD,UAAUd,MAAMhC,KAAKf,QACzBkE,MAAMC,QAAQ6C,IAAIxE,KAAK,KACvBwE,IAAIxE,MAAMsU,KAAMwB,UAASD,cAAclB,SAASmB,IAAI,CAAC,CACzD;AACA,YAAIE,cAAc;AACVC,gBAAAA,WAAWJ,cAAcjP,KAAK,IAAI;AAC3B,iBAAA,aAAA;AAAA,YACXsO,aAAa;AAAA,YACbvC,SAASqD,aAAavW,IAAKgC,CAClBkI,UAAAA,KACJlI,MAAMzB,SAAS,CAAIlC,GAAAA,OACjBoY,UAAS,CAACL,cAAclB,SAASuB,IAAI,CACxC,GACA,CAAC;AAAA,cAAC9U,MAAMkD,IAAIlD;AAAAA,eAAO,YAAY;AAAA,cAACA,MAAMK,MAAML;AAAAA,YAAAA,GAAO,OAAO,CAC5D,CACD;AAAA,YACD+S,aAAa,oBAAoB7P,IAAIlD,IAAI,qBAAqB6U,QAAQ;AAAA,YACtE7B,QAAQ;AAAA,YACR7D,MAAMjM;AAAAA,YAEN+P,MAAM;AAAA,cACJF,aACE;AAAA,cACFC,QACE;AAAA,cACFM,QAAQ;AAAA,gBACNG,KAAKvQ,IAAIlD;AAAAA,gBACTyU,eAAeA,cAAcpW,IAAKkW,CAAMA,MAAAA,EAAEC,SAAU,CAAA;AAAA,cAAA;AAAA,YACtD;AAAA,UACF,GAEK;AAAA,QAAA;AAAA,MACT;AAKAtQ,gBAAU1D,SAAS0S,KAAK,CAAC7S,OAAO0U,WAAmB;AAC7C,YAAA,CAAC3B,cAAc/S,KAAK;AACT,iBAAA,aAAA;AAAA,YACXkR,SAAS,CAACuB,MAAM,CAAC;AAAA,cAAC9S,MAAMkD,IAAIlD;AAAAA,YAAAA,GAAO,YAAY+U,MAAM,CAAC,CAAC;AAAA,YACvDhC,aAAa,mBAAmBgC,MAAM,wBAAwB7R,IAAIlD,IAAI;AAAA,YACtEgT,QAAQ;AAAA,YACR7D,MAAMjM;AAAAA,YAEN+P,MAAM;AAAA,cACJF,aACE;AAAA,cACFC,QACE;AAAA,cACFM,QAAQ;AAAA,gBAACG,KAAKvQ,IAAIlD;AAAAA,gBAAMmT,OAAO4B;AAAAA,cAAAA;AAAAA,YAAM;AAAA,UACvC,GAEK;AAGT,YAAI,CAAC1U,MAAML,QAAQ,OAAOK,MAAML,QAAS,UAAU;AACjD,gBAAMgV,WAAW;AAAA,YAAC,GAAG3U;AAAAA,YAAOL,MAAMyS,aAAa;AAAA,UAAC;AACnC,iBAAA,aAAA;AAAA,YACXqB,aAAa;AAAA,YACbvC,SAAS,CACPhJ,IAAIyM,UAAU,CAAC;AAAA,cAAChV,MAAMkD,IAAIlD;AAAAA,YAAAA,GAAO,YAAY+U,MAAM,CAAC,CAAC;AAAA,YAEvDhC,aAAa,kBAAkBgC,MAAM,gDAAgD7R,IAAIlD,IAAI;AAAA,YAC7FgT,QAAQ;AAAA,YACR7D,MAAMjM;AAAAA,YAEN+P,MAAM;AAAA,cACJF,aACE;AAAA,cACFC,QACE;AAAA,cACFM,QAAQ;AAAA,gBAACG,KAAKvQ,IAAIlD;AAAAA,gBAAMmT,OAAO4B;AAAAA,cAAAA;AAAAA,YAAM;AAAA,UACvC,GAEK;AAAA,QAAA;AAIT,eAAK1U,MAAMJ,QAoBN2S,gBAAgBW,SAASlT,MAAMJ,KAAK,IA0BvCI,MAAMJ,UAAUd,MAAMhC,KAAKf,QAC3B,OAAOiE,MAAMgD,QAAS,YAEtBqP,aAAa;AAAA,UACXnB,SAAS,CACPhJ,IAAI;AAAA,YAAC,GAAGlI;AAAAA,YAAOgD,MAAM;AAAA,UAAA,GAAK,CACxB;AAAA,YAACrD,MAAMkD,IAAIlD;AAAAA,aACX,YACA;AAAA,YAACA,MAAMK,MAAML;AAAAA,UAAK,CAAA,CACnB,CAAC;AAAA,UAEJ+S,aAAa,oBAAoB1S,MAAML,IAAI,wBAAwBkD,IAAIlD,IAAI;AAAA,UAC3EgT,QAAQ;AAAA,UACR7D,MAAMjM;AAAAA,UAEN+P,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cAACG,KAAKvQ,IAAIlD;AAAAA,cAAMiD,UAAU5C,MAAML;AAAAA,YAAAA;AAAAA,UAAI;AAAA,QAC9C,GAEK,MAEF,MAlDL0S,aAAa;AAAA,UACXnB,SAAS,CACPuB,MAAM,CAAC;AAAA,YAAC9S,MAAMkD,IAAIlD;AAAAA,aAAO,YAAY;AAAA,YAACA,MAAMK,MAAML;AAAAA,UAAK,CAAA,CAAC,CAAC;AAAA,UAE3D+S,aAAa,oBAAoB1S,MAAML,IAAI,wBAAwBkD,IAAIlD,IAAI,mCAAmCK,MAAMJ,KAAK;AAAA,UACzH+S,QAAQ;AAAA,UACR7D,MAAMjM;AAAAA,UAEN+P,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cACNG,KAAKvQ,IAAIlD;AAAAA,cACTiD,UAAU5C,MAAML;AAAAA,cAChBiV,WAAW5U,MAAMJ;AAAAA,YAAAA;AAAAA,UACnB;AAAA,QACF,GAEK,OAxCPyS,aAAa;AAAA,UACXnB,SAAS,CACPuB,MAAM,CAAC;AAAA,YAAC9S,MAAMkD,IAAIlD;AAAAA,aAAO,YAAY;AAAA,YAACA,MAAMK,MAAML;AAAAA,UAAK,CAAA,CAAC,CAAC;AAAA,UAE3D+S,aAAa,oBAAoB1S,MAAML,IAAI,wBAAwBkD,IAAIlD,IAAI;AAAA,UAC3EgT,QAAQ;AAAA,UACR7D,MAAMjM;AAAAA,UAEN+P,MAAM;AAAA,YACJF,aACE;AAAA,YACFC,QACE;AAAA,YACFM,QAAQ;AAAA,cAACG,KAAKvQ,IAAIlD;AAAAA,cAAMiD,UAAU5C,MAAML;AAAAA,YAAAA;AAAAA,UAAI;AAAA,QAGzC,GAAA;AAAA,MAAA,CAuDV,MAED2S,QAAQ;AAAA,IAAA;AAGL,WAAA;AAAA,EAAA,CACR,MAEDA,QAAQ,KAEH;AAAA,IAACA;AAAAA,IAAOD;AAAAA,IAAY5U;AAAAA,EAAAA;AAC7B;ACzbgBoX,SAAAA,kBAAkBxU,QAAgByU,IAAsB;AAChEC,QAAAA,OAAOC,mBAAmB3U,MAAM,KAAK;AACd6H,+BAAAA,IAAI7H,QAAQ,EAAI,GAC7CyU,GACA1P,GAAAA,6BAA6B8C,IAAI7H,QAAQ0U,IAAI;AAC/C;AAEO,SAASC,mBAAmB3U,QAAqC;AAC/D+E,SAAAA,6BAA6BrG,IAAIsB,MAAM;AAChD;ACVa4U,MAAAA,+BAAqD5P,QAAQ;AAE1D6P,SAAAA,gBAAgB7U,QAAgByU,IAAsB;AAC9DC,QAAAA,OAAOI,WAAW9U,MAAM;AACrB6H,WAAAA,IAAI7H,QAAQ,EAAK,GAC1ByU,GACAG,GAAAA,SAAS/M,IAAI7H,QAAQ0U,IAAI;AAC3B;AAEO,SAASI,WAAW9U,QAAqC;AACvD4U,SAAAA,SAASlW,IAAIsB,MAAM;AAC5B;ACJO,SAAS+U,UAAUC,OAAkB;AACpC,QAAA,CAACpZ,MAAMsV,KAAK,IAAI8D;AACf,SAACpZ,CAAAA,MAAMsV,KAAK;AACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,MAAM+D,YAAsDjQ,oBAAAA,QAAAA,GACtDkQ,iCAAuDlQ,QAAQ;AAErDmQ,SAAAA,YAAYnV,QAAgByU,IAAgB;AACpDC,QAAAA,OAAOU,UAAUpV,MAAM;AACnB6H,YAAAA,IAAI7H,QAAQ,EAAI,GAC1ByU,GACAQ,GAAAA,UAAUpN,IAAI7H,QAAQ0U,IAAI;AAC5B;AAEO,SAASU,UAAUpV,QAAgB;AACjCiV,SAAAA,UAAUvW,IAAIsB,MAAM,KAAK;AAClC;AAEgBqV,SAAAA,aAAarV,QAAgBoV,YAAoB;AACrDvN,YAAAA,IAAI7H,QAAQoV,UAAS;AACjC;AAEgBE,SAAAA,YAAYtV,QAAgByU,IAAgB;AACpDC,QAAAA,OAAOa,UAAUvV,MAAM;AAClB6H,aAAAA,IAAI7H,QAAQ,EAAI,GAC3ByU,GACAS,GAAAA,WAAWrN,IAAI7H,QAAQ0U,IAAI;AAC7B;AAEO,SAASa,UAAUvV,QAAgB;AACjCkV,SAAAA,WAAWxW,IAAIsB,MAAM,KAAK;AACnC;AAEgBwV,SAAAA,aAAaxV,QAAgBuV,YAAoB;AACpD1N,aAAAA,IAAI7H,QAAQuV,UAAS;AAClC;ACGA,MAAM1W,UAAQC,cAAc,qBAAqB,GAG3C2W,6BAAazQ,WACb0Q,iBAAqB1Q,oBAAAA,WASrB2Q,kBAAkB,KAElBC,WAAY5V,CAAwC,WAAA;AAClD6V,QAAAA,QAAQJ,OAAO/W,IAAIsB,MAAM;AACxB6V,SAAAA,UAAUrV,SAAY,KAAOqV;AACtC,GAQMC,mBAAoB9V,CACnB0V,YAAAA,eAAehX,IAAIsB,MAAM,KAC5B0V,eAAe7N,IAAI7H,QAAQ,CAAA,CAAE,GAExB0V,eAAehX,IAAIsB,MAAM,KAAK,CAAE;AAGlC,SAAS+V,mBACd9Y,SAC8D;AACxD,QAAA;AAAA,IAAC+Y;AAAAA,IAAaC;AAAAA,EAAAA,IAAmBhZ;AAEvC,SAAQ+C,CAAoC,WAAA;AAC1C,QAAIkW,mBAAoDhS,eACtDlE,OAAOF,UACPmW,gBAAgBva,IAClB;AACMya,UAAAA,gBAAgBL,iBAAiB9V,MAAM;AAErCoW,YAAAA,cAAc3T,KAAK,MAAM;AAC/B5D,cAAM,wBAAwB;AAC9B,YAAMwX,MAAML,YAAYtE,GAAG,WAAW,CAAC;AAAA,QAACb;AAAAA,QAASE;AAAAA,MAAAA,MAAc;AAC7D,YAAIuF,QAAQ;AACZzF,gBAAQ0F,QAASrF,CAAU,UAAA;AACzB,cAAI,CAACoF,SAASpF,MAAMsF,WAAW,WAAWL,eAAe;AACvD,gBAAIjF,MAAMtV,SAAS,WAAWsV,MAAM9R,KAAK/B,WAAW,GAAG;AAEnDwB,sBAAA,+DACF,GACAmB,OAAOyW,UAAU;AAAA,gBAACC,OAAO,CAAE;AAAA,gBAAEC,OAAO,CAAA;AAAA,cACpCR,GAAAA,cAAcS,OAAO,GAAGT,cAAc9Y,MAAM,GAC5CoY,OAAO5N,IAAI7H,QAAQ,EAAI,GACvBsW,QAAQ;AACR;AAAA,YAAA;AAEFH,0BAAc1T,KAAK;AAAA,cACjByO;AAAAA,cACA2F,0BAAUC,KAAK;AAAA,cACf/F;AAAAA,cACAmF;AAAAA,YAAAA,CACD;AAAA,UAAA;AAAA,QACH,CACD,GACDA,mBAAmBnF;AAAAA,MAAAA,CACpB;AACD,aAAO,MAAM;AACLlS,gBAAA,0BAA0B,GAChCwX,IAAIU,YAAY;AAAA,MAClB;AAAA,IAAA,CACD,GAED/W,OAAOyW,UAAU;AAAA,MAACC,OAAO,CAAE;AAAA,MAAEC,OAAO,CAAA;AAAA,IAAE;AAChC,UAAA;AAAA,MAACK,OAAAA;AAAAA,IAAAA,IAAShX;AAChBA,WAAAA,OAAOgX,QAASC,CAAkB,OAAA;AAC5BjB,UAAAA,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC,aAAa;AAAA,MAAA,CAAY,GAAG;AACjEH,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAOEtC,UAAAA,mBAAmB3U,MAAM,GAAG;AAC9BgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAOF,UAAI7B,UAAUpV,MAAM,KAAKuV,UAAUvV,MAAM,GAAG;AAC1CgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAGI,YAAA;AAAA,QAACG;AAAAA,QAAYX;AAAAA,UAAWzW,QACxB;AAAA,QAAC0W;AAAAA,MAAK,IAAID,SACVY,OAAOX,MAAMA,MAAMrZ,SAAS,CAAC,GAC7Bia,SACJD,QAAQA,KAAKD,cAAcC,KAAKD,WAAWC,KAAKD,WAAW/Z,SAAS,CAAC,GACjEka,YAAYC,gBAAgBP,IAAIK,MAAM,GACtCG,OAAO7B,SAAS5V,MAAM;AAE5B,UAAI0X,QAAQ;AACZ,UAAID,MAAM;AAOR,YANKJ,OAEMD,WAAW/Z,WAAW,MAC/Bqa,QAAQC,YAAYV,IAAIK,MAAM,KAAKC,aAFnCG,QAAQ,IAKNL,QAAQK;AACLN,eAAAA,WAAW3U,KAAKwU,EAAE;AAAA,aAClB;AACL,gBAAMW,UAAU;AAAA,YACdR,YAAY,CACV,GAAIpX,OAAO6B,cAAc,OACrB,KACA,CAACgW,sBAAsB7X,MAAM,CAAC,GAClCiX,EAAE;AAAA,YAEJa,+BAAehB,KAAK;AAAA,UACtB;AACAJ,gBAAMjU,KAAKmV,OAAO,GAClB/Y,QAAM,yBAAyBwY,IAAI;AAAA,QAAA;AAGrC,eAAOX,MAAMrZ,SAASsY;AACpBe,gBAAMqB,MAAM;AAGVC,oBAAYf,EAAE,MAChBR,QAAQE,QAAQ,CAAA;AAAA,MAAE;AAGtBK,MAAAA,OAAMC,EAAE;AAAA,IAAA,GAGVjX,OAAOiY,OAAO,MAAM;AACdjC,UAAAA,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC,aAAa;AAAA,MAAA,CAAY;AAC9D;AAEI,YAAA;AAAA,QAACT;AAAAA,UAAS1W,OAAOyW;AACnBC,UAAAA,MAAMrZ,SAAS,GAAG;AACpB,cAAMga,OAAOX,MAAMA,MAAMrZ,SAAS,CAAC;AAEnC,YADAwB,QAAM,WAAWwY,IAAI,GACjBA,KAAKD,WAAW/Z,SAAS,GAAG;AAC9B,gBAAM6a,eAAe/B,cAAcna,OAChCyS,UAASA,KAAKoI,QAAQQ,KAAKS,SAC9B;AACA,cAAIK,wBAAwBd,KAAKD;AACjCc,uBAAa3B,QAAS9H,CAAS,SAAA;AAC7B0J,oCAAwB1E,QACtB0E,sBAAsBxa,IAAKsZ,CAAAA,OACzBmB,mBACEpY,QACAyO,KAAKyC,OACL+F,IACAxI,KAAKsC,UACLtC,KAAKyH,gBACP,CACF,CACF;AAAA,UAAA,CACD;AACD,gBAAMmC,qBAAqBF,sBACxBxa,IAAI2a,UAAUC,OAAO,EACrBC,QAAQ;AAEP,cAAA;AACKC,mBAAAA,mBAAmBzY,QAAQ,MAAM;AACtCmV,0BAAYnV,QAAQ,MAAM;AACxB0Y,8BAAc1Y,QAAQ,MAAM;AAC1BqY,qCAAmB9B,QAASU,CAAO,OAAA;AACjCjX,2BAAOgX,MAAMC,EAAE;AAAA,kBAAA,CAChB;AAAA,gBAAA,CACF;AAAA,cAAA,CACF;AAAA,YACF,CAAA,GACDjX,OAAO2Y,aACP3Y,OAAO+J,SAAS;AAAA,mBACT6O,KAAK;AACZ/Z,oBAAM,+BAA+B+Z,GAAG,GACxCzC,cAAcS,OAAO,GAAGT,cAAc9Y,MAAM,GAC5CuM,WAAWiP,SAAS7Y,MAAM,GAC1BA,OAAOyW,UAAU;AAAA,cAACC,OAAO,CAAE;AAAA,cAAEC,OAAO,CAAA;AAAA,YAAE,GACtClB,OAAO5N,IAAI7H,QAAQ,EAAI,GACvBqV,aAAarV,QAAQ,EAAK,GAC1BA,OAAO+J,SAAS;AAChB;AAAA,UAAA;AAEK0M,iBAAAA,QAAQE,MAAMlU,KAAK4U,IAAI,GAC9BrX,OAAOyW,QAAQC,MAAMoC,IAAI;AAAA,QAAA;AAAA,MAC3B;AAAA,IACF,GAGF9Y,OAAO+Y,OAAO,MAAM;AACd/C,UAAAA,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC,aAAa;AAAA,MAAA,CAAY;AAC9D;AAEI,YAAA;AAAA,QAACR;AAAAA,UAAS3W,OAAOyW;AACnBE,UAAAA,MAAMtZ,SAAS,GAAG;AACpB,cAAMga,OAAOV,MAAMA,MAAMtZ,SAAS,CAAC;AAEnC,YADAwB,QAAM,WAAWwY,IAAI,GACjBA,KAAKD,WAAW/Z,SAAS,GAAG;AAC9B,gBAAM6a,eAAe/B,cAAcna,OAChCyS,UAASA,KAAKoI,QAAQQ,KAAKS,SAC9B;AACA,cAAIK,wBAAwBd,KAAKD;AACjCc,uBAAa3B,QAAS9H,CAAS,SAAA;AAC7B0J,oCAAwB1E,QACtB0E,sBAAsBxa,IAAKsZ,CAAAA,OACzBmB,mBACEpY,QACAyO,KAAKyC,OACL+F,IACAxI,KAAKsC,UACLtC,KAAKyH,gBACP,CACF,CACF;AAAA,UAAA,CACD;AACG,cAAA;AACKuC,mBAAAA,mBAAmBzY,QAAQ,MAAM;AACtCsV,0BAAYtV,QAAQ,MAAM;AACxB0Y,8BAAc1Y,QAAQ,MAAM;AAC1BmY,wCAAsB5B,QAASU,CAAO,OAAA;AACpCjX,2BAAOgX,MAAMC,EAAE;AAAA,kBAAA,CAChB;AAAA,gBAAA,CACF;AAAA,cAAA,CACF;AAAA,YACF,CAAA,GACDjX,OAAO2Y,aACP3Y,OAAO+J,SAAS;AAAA,mBACT6O,KAAK;AACZ/Z,oBAAM,+BAA+B+Z,GAAG,GACxCzC,cAAcS,OAAO,GAAGT,cAAc9Y,MAAM,GAC5CuM,WAAWiP,SAAS7Y,MAAM,GAC1BA,OAAOyW,UAAU;AAAA,cAACC,OAAO,CAAE;AAAA,cAAEC,OAAO,CAAA;AAAA,YAAE,GACtClB,OAAO5N,IAAI7H,QAAQ,EAAI,GACvBwV,aAAaxV,QAAQ,EAAK,GAC1BA,OAAO+J,SAAS;AAChB;AAAA,UAAA;AAEK0M,iBAAAA,QAAQC,MAAMjU,KAAK4U,IAAI,GAC9BrX,OAAOyW,QAAQE,MAAMmC,IAAI;AAAA,QAAA;AAAA,MAC3B;AAAA,IACF,GAIK9Y;AAAAA,EACT;AACF;AAMA,SAASoY,mBACPpY,QACAkR,OACAnP,WACAgP,UACAmF,kBACa;AASb,QAAM8C,uBAAuB;AAAA,IAAC,GAAGjX;AAAAA,EAAS;AAE1C,MAAImP,MAAMtV,SAAS,YAAYsV,MAAM9R,KAAK/B,WAAW,GAAG;AACtD,UAAM4b,oBAAoBlI,YAAY,CAAA,GAAIlQ,UAAW2B,SACnD1B,QAAQ;AAAA,MAACxB,MAAMkD,IAAIlD;AAAAA,IAAO4R,GAAAA,MAAM9R,KAAK,CAAC,CAAC,CACzC;AACAP,WAAAA,QACE,0BAA0BqS,MAAMgI,MAAM7b,MAAM,UAAU2b,qBAAqBpd,IAAI,0BAA0BsV,MAAMtV,IAAI,GACrH,GACO,CACLud,gBACEH,sBACA9H,MAAMgI,MAAM7b,QACZ4b,gBACF,CAAC;AAAA,EAAA;AAIL,MAAI/H,MAAMtV,SAAS,WAAWsV,MAAM9R,KAAK/B,WAAW,GAAG;AACrD,UAAM+b,mBAAmBlD,oBAAoB,CAAA,GAAIrV,UAAW2B,SAC1D1B,QAAQ;AAAA,MAACxB,MAAMkD,IAAIlD;AAAAA,IAAO4R,GAAAA,MAAM9R,KAAK,CAAC,CAAC,CACzC;AAEA,WACE,UAAU4Z,wBACVpZ,MAAMC,QAAQmZ,qBAAqB5Z,IAAI,KACvC4Z,qBAAqB5Z,KAAK,CAAC,MAAMga,mBAEjCva,QAAM,qDAAqD,GACpD,MAQF,CAACsa,gBAAgBH,sBAAsB,IAAII,eAAe,CAAC;AAAA,EAAA;AAIpE,MAAIlI,MAAMtV,SAAS,WAAWsV,MAAM9R,KAAK/B,WAAW;AAClDwB,WAAAA,QACE,sDAAsDkD,UAAUnG,IAAI,YACtE,GACO,CAAE;AAGPsV,MAAAA,MAAMtV,SAAS,kBAAkB;AAC7Byd,UAAAA,uBAAuBC,yBAC3BtZ,QACAgZ,oBACF;AAEE,WAAA,CAACK,wBACD,CAACvY,QAAQ;AAAA,MAACxB,MAAM+Z,qBAAqB/Z;AAAAA,IAAO4R,GAAAA,MAAM9R,KAAK,CAAC,CAAC,IAElD,CAAC4Z,oBAAoB,KAEVO,MAAWrI,MAAM9T,KAAK,EAC9BmZ,QAASiD,CAAc,cAAA;AAC7BC,UAAAA,iBAAiB,GACjBC,gBAAgBF,UAAUG;AACxB,YAAA;AAAA,QAACC;AAAAA,MAAAA,IAASJ;AAgChB,UA/BAI,MAAMrD,QAAQ,CAACsD,OAAMpH,UAAU;AACvB,cAAA,CAACqH,UAAUnX,IAAI,IAAIkX;AACrBC,qBAAaC,eACfN,kBAAkB9W,KAAKtF,QACvBqc,iBAAiB/W,KAAKtF,UACbyc,aAAaE,eACtBP,kBAAkB9W,KAAKtF,QACvBqc,iBAAiB/W,KAAKtF,UACbyc,aAAaG,eAEjBL,MAAMla,MAAM+S,KAAK,EAAEyH,MAAM,CAAC,CAACC,KAAK,MAAMA,UAAUF,UAAU,MAC7DP,iBAAiB/W,KAAKtF;AAAAA,MAG3B,CAAA,GAEG2b,qBAAqBpd,SAAS,iBAC5B8d,gBAAgBV,qBAAqB3X,WACvC2X,qBAAqB3X,UAAUoY,iBAI/BT,qBAAqBpd,SAAS,iBAE9B8d,iBACAV,qBAAqB3X,SAAS2X,qBAAqBrW,KAAKtF,WAExD2b,qBAAqB3X,UAAUoY,iBAI/BT,qBAAqBpd,SAAS,iBAAiB;AAC3Cwe,cAAAA,eAAepB,qBAAqBqB,YAAYlZ,QAClD;AAAA,UAAC,GAAG6X,qBAAqBqB,WAAWlZ;AAAAA,QACpCX,IAAAA,QACE8Z,gBAAgBtB,sBAAsBqB,YAAYnZ,SACpD;AAAA,UAAC,GAAG8X,qBAAqBqB,WAAWnZ;AAAAA,QACpCV,IAAAA,QACEsC,WAAWkW,sBAAsBuB,eAAepZ,QAClD;AAAA,UAAC,GAAG6X,qBAAqBuB,cAAcpZ;AAAAA,QACvCX,IAAAA,QACEqC,YAAYmW,sBAAsBuB,eAAerZ,SACnD;AAAA,UAAC,GAAG8X,qBAAqBuB,cAAcrZ;AAAAA,QAAAA,IACvCV;AACC4Z,SAAAA,gBAAgBE,iBAAmBxX,YAAYD,eACnC,CAACuX,cAAcE,eAAexX,UAAUD,SAAS,EACzD0T,QAASrX,CAAU,UAAA;AACpBA,mBAASwa,gBAAgBxa,MAAMmC,WACjCnC,MAAMmC,UAAUoY;AAAAA,QAEnB,CAAA,GACGW,gBAAgBE,kBAClBtB,qBAAqBqB,aAAa;AAAA,UAChClZ,OAAOiZ;AAAAA,UACPlZ,QAAQoZ;AAAAA,QAGRxX,IAAAA,YAAYD,cACdmW,qBAAqBuB,gBAAgB;AAAA,UACnCpZ,OAAO2B;AAAAA,UACP5B,QAAQ2B;AAAAA,QAAAA;AAAAA,MACV;AAAA,IAGN,CACD,GACM,CAACmW,oBAAoB;AAAA,EAAA;AAE9B,SAAO,CAACA,oBAAoB;AAC9B;AAIA,SAASG,gBACPpX,WACA2M,OACA8L,YACW;AACX,QAAMxB,uBAAuB;AAAA,IAAC,GAAGjX;AAAAA,EAAS;AAExCyY,MAAAA,cAAc,KACdxB,qBAAqBpd,SAAS,mBAC9BgE,MAAMC,QAAQmZ,qBAAqB5Z,IAAI,KACvC4Z,qBAAqB5Z,KAAK,CAAC,KAAKob,aAAa9L,SAC7CsK,qBAAqB5Z,KAAK,CAAC,IAAIsP,QAAQ,IACvC;AACA,UAAMtM,UAAU,CACd4W,qBAAqB5Z,KAAK,CAAC,IAAIsP,OAC/B,GAAGsK,qBAAqB5Z,KAAKM,MAAM,CAAC,CAAC;AAEvCsZ,yBAAqB5Z,OAAOgD;AAAAA,EAAAA;AAE1B4W,MAAAA,qBAAqBpd,SAAS,iBAAiB;AAC3Cwe,UAAAA,eAAepB,qBAAqBqB,YAAYlZ,QAClD;AAAA,MAAC,GAAG6X,qBAAqBqB,WAAWlZ;AAAAA,IACpCX,IAAAA,QACE8Z,gBAAgBtB,sBAAsBqB,YAAYnZ,SACpD;AAAA,MAAC,GAAG8X,qBAAqBqB,WAAWnZ;AAAAA,IACpCV,IAAAA,QACEsC,WAAWkW,sBAAsBuB,eAAepZ,QAClD;AAAA,MAAC,GAAG6X,qBAAqBuB,cAAcpZ;AAAAA,IACvCX,IAAAA,QACEqC,YAAYmW,sBAAsBuB,eAAerZ,SACnD;AAAA,MAAC,GAAG8X,qBAAqBuB,cAAcrZ;AAAAA,IAAAA,IACvCV;AACC4Z,KAAAA,gBAAgBE,iBAAmBxX,YAAYD,eACnC,CAACuX,cAAcE,eAAexX,UAAUD,SAAS,EACzD0T,QAASrX,CAAU,UAAA;AAEtBA,eACAA,MAAME,KAAK,CAAC,KAAKob,aAAa9L,SAC9BxP,MAAME,KAAK,CAAC,IAAIsP,QAAQ,OAExBxP,MAAME,OAAO,CAACF,MAAME,KAAK,CAAC,IAAIsP,OAAO,GAAGxP,MAAME,KAAKM,MAAM,CAAC,CAAC;AAAA,IAE9D,CAAA,GACG0a,gBAAgBE,kBAClBtB,qBAAqBqB,aAAa;AAAA,MAChClZ,OAAOiZ;AAAAA,MACPlZ,QAAQoZ;AAAAA,IAGRxX,IAAAA,YAAYD,cACdmW,qBAAqBuB,gBAAgB;AAAA,MACnCpZ,OAAO2B;AAAAA,MACP5B,QAAQ2B;AAAAA,IAAAA;AAAAA,EACV;AAKCmW,SAAAA;AACT;AAIA,MAAMrB,cAAcA,CAACV,IAAevC,SAC9BuC,CAAGrb,EAAAA,GAAAA,SAAS,mBAMd8Y,QACAuC,GAAGrb,SAAS,iBACZ8Y,KAAK9Y,SAAS,iBACdqb,GAAG5V,WAAWqT,KAAKrT,SAASqT,KAAK/R,KAAKtF,UACtCkM,KAAKrH,OAAO+U,GAAG7X,MAAMsV,KAAKtV,IAAI,KAC9B6X,GAAGtU,SAAS,OAOZ+R,QACAuC,GAAGrb,SAAS,iBACZ8Y,KAAK9Y,SAAS,iBACdqb,GAAG5V,SAAS4V,GAAGtU,KAAKtF,WAAWqX,KAAKrT,UACpCkI,KAAKrH,OAAO+U,GAAG7X,MAAMsV,KAAKtV,IAAI,IAS5BoY,kBAAkBA,CACtBP,IACAvC,SAEIA,WAAQuC,GAAGrb,SAAS,mBAAmB8Y,KAAK9Y,SAAS,kBAOrDoc,cAAef,CAAAA,OACfA,GAAGrb,SAAS;AAOF8c,SAAAA,cAAc1Y,QAAgByU,IAAsB;AAC5DC,QAAAA,OAAOkB,SAAS5V,MAAM;AACrB6H,SAAAA,IAAI7H,QAAQ,EAAK,GACxByU,GACAgB,GAAAA,OAAO5N,IAAI7H,QAAQ0U,IAAI;AACzB;AAEA,SAASmD,sBAAsB7X,QAAoC;AAC1D,SAAA;AAAA,IACLpE,MAAM;AAAA,IACNye,YAAY;AAAA,MAAC,GAAGra,OAAO6B;AAAAA,IAAS;AAAA,IAChC0Y,eAAe;AAAA,MAAC,GAAGva,OAAO6B;AAAAA,IAAAA;AAAAA,EAC5B;AACF;AAEA,SAASyX,yBACPtZ,QACA+B,WACwB;AACpBvF,MAAAA;AACAuF,SAAAA,UAAUnG,SAAS,mBAAmBoE,OAAO6B,YAC/CrF,QAAQwD,OAAOF,SAASE,OAAO6B,UAAUV,MAAM/B,KAAK,CAAC,CAAC,IAC7C,UAAU2C,cACnBvF,QAAQwD,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC,IAEpC5C;AACT;ACniBA,MAAMie,oBAcFA,CAAC;AAAA,EAACC;AAAAA,EAAUjK;AAAK,MAAM;AACb,cAAA;AAAA,IACVF,SAASE,MAAMF;AAAAA,IACfmK;AAAAA,IACA1J,aAAaP,MAAMO;AAAAA,IACnB5T,OAAOqT,MAAMrT;AAAAA,IACbud,cAAclK,MAAMkK;AAAAA,EAAAA,CACrB;AACH,GAEMC,iBAAiBC,aAAaJ,iBAAiB,GAcxCK,cAAcxK,MAAM;AAAA,EAC/B7R,OAAO;AAAA,IACL8R,SAAS,CAAC;AAAA,IAUVE,OAAO,CAAC;AAAA,IAMRD,QAAQ,CAAC;AAAA,IAgBTE,SAAS,CAAA;AAAA,EAOX;AAAA,EACAC,SAAS;AAAA,IACP,+BAA+BM,OAAO;AAAA,MACpC8J,oBAAoB;AAAA,IAAA,CACrB;AAAA,IACD,mBAAmB9J,OAAO;AAAA,MACxB9K,UAAUA,CAAC;AAAA,QAACqB;AAAAA,MACVwT,OAAAA,YAAYxT,OAAO,iBAAiB,GAC7BA,MAAMrB;AAAAA,IAAAA,CAEhB;AAAA,IACD,wBAAwB8K,OAAO;AAAA,MAC7BgK,cAAcA,CAAC;AAAA,QAACzT;AAAAA,MACdwT,OAAAA,YAAYxT,OAAO,cAAc,GAC1BA,MAAMpK;AAAAA,IAAAA,CAEhB;AAAA,IACD,uBAAuB6T,OAAO;AAAA,MAC5BgK,cAAcza;AAAAA,IAAAA,CACf;AAAA,IACD,yBAAyByQ,OAAO;AAAA,MAC9BiK,eAAeA,CAAC;AAAA,QAAC1T;AAAAA,MACfwT,OAAAA,YAAYxT,OAAO,cAAc,GAC1BA,MAAMpK;AAAAA,IAAAA,CAEhB;AAAA,IACD,mCAAmCwT,KAAK;AAAA,MACtChV,MAAM;AAAA,IACP,CAAA;AAAA,EACH;AAAA,EACAuV,QAAQ;AAAA,IACN,wBAAwBgK,CAAC;AAAA,MAAC5K;AAAAA,UAAaA,QAAQwK;AAAAA,IAC/C,WAAWK,CAAC;AAAA,MAAC7K;AAAAA,IAAAA,MAET,CAACA,QAAQpK,aACRoK,QAAQ8K,6BACN1G,mBAAmBpE,QAAQS,WAAW,KAAK;AAAA,IAGlD,+BAA+BsK,CAAC;AAAA,MAAC/K;AAAAA,MAAS/I;AAAAA,IAAAA,OACxCwT,YAAYxT,OAAO,cAAc,GAC1B+I,QAAQ0K,iBAAiBzT,MAAMpK;AAAAA,IAExC,uCAAuCme,CAAC;AAAA,MAAChL;AAAAA,IACvC,MAAA,EACEA,QAAQ2K,kBAAkB1a,UAC1B+P,QAAQ0K,iBAAiBza,WACtBM,QAAQyP,QAAQ0K,cAAc1K,QAAQ2K,aAAa;AAAA,EAC5D;AAAA,EACAM,QAAQ;AAAA,IACN,cAAcZ;AAAAA,EAAAA;AAElB,CAAC,EAAEtJ,cAAc;AAAA,EACfC,IAAI;AAAA,EACJhB,SAASA,CAAC;AAAA,IAACE;AAAAA,EAAAA,OAAY;AAAA,IACrBsK,oBAAoB;AAAA,IACpBM,0BAA0B;AAAA,IAC1BtJ,cAActB,MAAMsB;AAAAA,IACpBzT,QAAQmS,MAAMnS;AAAAA,IACd6H,UAAUsK,MAAMtK;AAAAA,IAChB6K,aAAaP,MAAMO;AAAAA,IACnBiK,cAAcza;AAAAA,IACd0a,eAAe1a;AAAAA,EAAAA;AAAAA,EAEjBkR,IAAI;AAAA,IACF,uBAAuB;AAAA,MACrBf,SAASM,OAAO;AAAA,QACdoK,0BAA0B;AAAA,MAC3B,CAAA;AAAA,IACH;AAAA,IACA,UAAY;AAAA,MACV1K,SAASM,OAAO;AAAA,QACdoK,0BAA0B;AAAA,MAC3B,CAAA;AAAA,IACH;AAAA,IACA,mBAAmB;AAAA,MACjB1K,SAAS,CAAC,iBAAiB;AAAA,IAAA;AAAA,EAE/B;AAAA,EACA/U,MAAM;AAAA,EACN6V,QAAQ;AAAA,IACN,cAAc;AAAA,MACZD,SAAS;AAAA,MACTC,QAAQ;AAAA,QACN,yBAAyB;AAAA,UACvBgK,QAAQ;AAAA,YACN7J,OAAO;AAAA,YACPtH,QAAQ;AAAA,UAAA;AAAA,QAEZ;AAAA,QACA,8BAA8B;AAAA,UAC5BoR,OAAO,CAAC,iCAAiC;AAAA,UACzC9f,MAAM;AAAA,QAAA;AAAA,MACR;AAAA,IAEJ;AAAA,IACA,SAAW;AAAA,MACT4V,SAAS;AAAA,MACTC,QAAQ;AAAA,QACNkK,MAAM;AAAA,UACJjK,IAAI;AAAA,YACF,gBAAgB,CACd;AAAA,cACEE,OAAO;AAAA,cACPtH,QAAQ;AAAA,cACRqG,SAAS,CAAC,sBAAsB;AAAA,YAAA,GAElC;AAAA,cACErG,QAAQ;AAAA,cACRqG,SAAS,CAAC,sBAAsB;AAAA,YACjC,CAAA;AAAA,UAAA;AAAA,QAGP;AAAA,QACAiL,MAAM;AAAA,UACJjK,OAAO;AAAA,YACL,KAAM,CACJ;AAAA,cACEC,OAAO;AAAA,cACPC,SAAS;AAAA,YAAA,GAEX;AAAA,cACEvH,QAAQ;AAAA,YACT,CAAA;AAAA,UAEL;AAAA,UACAoH,IAAI;AAAA,YACF,gBAAgB,CACd;AAAA,cACEf,SAAS,CAAC,sBAAsB;AAAA,YACjC,CAAA;AAAA,UAAA;AAAA,QAGP;AAAA,QACAkL,SAAS;AAAA,UACPJ,QAAQ;AAAA,YACN7J,OAAO;AAAA,YACPtH,QAAQ;AAAA,YACRqG,SAAS,CAAC,uBAAuB,6BAA6B;AAAA,UAChE;AAAA,UACAmL,QAAQ;AAAA,YACNC,KAAK;AAAA,YACLxK,IAAI;AAAA,YACJd,OAAOA,CAAC;AAAA,cAACF;AAAAA,YAAAA,OACA;AAAA,cACLA,SAAS;AAAA,gBACPwB,cAAcxB,QAAQwB;AAAAA,gBACtBmJ,eAAe3K,QAAQ2K;AAAAA,gBACvB/U,UAAUoK,QAAQpK;AAAAA,gBAClB7H,QAAQiS,QAAQjS;AAAAA,cAClB;AAAA,cACA0S,aAAaT,QAAQS;AAAAA,cACrB2J,cAAc,CAACpK,QAAQwK;AAAAA,cACvB3d,OAAOmT,QAAQ0K;AAAAA,YACjB;AAAA,UAEJ;AAAA,UACAvJ,IAAI;AAAA,YACF,gBAAgB;AAAA,cACdf,SAAS,CAAC,sBAAsB;AAAA,YAClC;AAAA,YACA,OAAS;AAAA,cACPA,SAAS,CAACC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAK,MAAMA,KAAK,CAAC;AAAA,YACpC;AAAA,YACA,iBAAiB;AAAA,cACfmJ,SAAS,CAACC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAK,MAAMA,KAAK,CAAC;AAAA,YACpC;AAAA,YACA,iBAAiB;AAAA,cACfmJ,SAAS,CAACC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAK,MAAMA,KAAK,CAAC;AAAA,YACpC;AAAA,YACA,gBAAgB,CACd;AAAA,cACEoK,OAAO;AAAA,cACPjB,SAAS,CACP,yBACA,6BAA6B;AAAA,cAE/BkB,SAAS;AAAA,YAAA,GAEX;AAAA,cACEvH,QAAQ;AAAA,cACRqG,SAAS,CACP,uBACA,yBACA,6BAA6B;AAAA,YAEhC,CAAA;AAAA,UAAA;AAAA,QAEL;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEJ,CAAC,GAEK9R,UAAQC,cAAc,mBAAmB;AAE/C,eAAekd,YAAY;AAAA,EACzBzL;AAAAA,EACAmK;AAAAA,EACA1J;AAAAA,EACA2J;AAAAA,EACAvd;AAYF,GAAG;AACG6e,MAAAA,YAAY,IACZC,UAAU;AAERC,QAAAA,eAAe,CAAC,CAACnL,YAAYnP;AAG/B,OAAA,CAACzE,SAASA,MAAMC,WAAW,OAC7BwB,QAAM,gBAAgB,GACtBqB,OAAOuY,mBAAmBzH,aAAa,MAAM;AAC3C0H,kBAAc1H,aAAa,MAAM;AAC/B6D,sBAAgB7D,aAAa,MAAM;AAC7BmL,wBACFvS,WAAWiP,SAAS7H,WAAW;AAE3BoL,cAAAA,iBAAiBpL,YAAYlR,SAASzC;AAC5C2T,oBAAYlR,SAASyW,QAAQ,CAAC8F,GAAG5J,UAAU;AACzC7I,qBAAW0S,YAAYtL,aAAa;AAAA,YAClC5Q,IAAI,CAACgc,iBAAiB,IAAI3J,KAAK;AAAA,UAAA,CAChC;AAAA,QACF,CAAA,GACD7I,WAAW2S,YACTvL,aACAA,YAAYwL,mBAAmB;AAAA,UAACpgB,YAAY,CAAA;AAAA,QAAA,CAAG,GAC/C;AAAA,UAACgE,IAAI,CAAC,CAAC;AAAA,QAAA,CACT,GAEI+b,gBACFvS,WAAW6S,OAAOzL,aAAa,CAAC,GAAG,CAAC,CAAC;AAAA,MAAA,CAExC;AAAA,IAAA,CACF;AAAA,EAAA,CACF,GACDiL,YAAY,KAGV7e,SAASA,MAAMC,SAAS,GAAG;AACvBqf,UAAAA,sBAAsBtZ,aAAahG,OAAO;AAAA,MAC9CiG,aAAakN,QAAQjS;AAAAA,IAAAA,CACtB;AAEK,UAAA,IAAIqe,QAAeC,CAAY,YAAA;AAC5BnE,aAAAA,mBAAmBzH,aAAa,MAAM;AAC3CwD,0BAAkBxD,aAAa,MAAM;AACnC6D,0BAAgB7D,aAAa,YAAY;AACjCoL,kBAAAA,iBAAiBpL,YAAYlR,SAASzC;AAGxCqf,gBAAAA,oBAAoBrf,SAAS+e,gBAAgB;AAC/C,uBACMS,IAAIT,iBAAiB,GACzBS,IAAIH,oBAAoBrf,SAAS,GACjCwf;AAEAjT,2BAAW0S,YAAYtL,aAAa;AAAA,kBAClC5Q,IAAI,CAACyc,CAAC;AAAA,gBAAA,CACP;AAES,0BAAA;AAAA,YAAA;AAGd,6BAAiB,CAACC,cAAcC,iBAAiB,KAAKC,UAAU;AAAA,cAC9DC,YAAYP;AAAAA,cACZ/B;AAAAA,YAAAA,CACD,GAAG;AAEI,oBAAA;AAAA,gBAACuC;AAAAA,gBAAcC;AAAAA,kBAAcC,UAAU;AAAA,gBAC3C7M;AAAAA,gBACAmK;AAAAA,gBACAle,OAAOsgB;AAAAA,gBACPrK,OAAOsK;AAAAA,gBACP/L;AAAAA,gBACA5T;AAAAA,cAAAA,CACD;AACW8f,0BAAAA,gBAAgBjB,WAC5BC,UAAUA,WAAWiB;AAAAA,YAAAA;AAGf,oBAAA;AAAA,UAAA,CACT;AAAA,QAAA,CACF;AAAA,MAAA,CACF;AAAA,IAAA,CACF;AAAA,EAAA;AAGH,MAAI,CAACjB,SAAS;AACNrd,YAAA,0BAA0B,GAChC6b,SAAS;AAAA,MAAC9e,MAAM;AAAA,MAAgBwB;AAAAA,IAAAA,CAAM;AACtC;AAAA,EAAA;AAGF,MAAI6e,WAAW;AACbpd,YAAM,sCAAsC;AACxC,QAAA;AACFmS,kBAAYjH,SAAS;AAAA,aACd6O,KAAK;AACJyE,cAAAA,MAAMzE,GAAG,GACjB8B,SAAS;AAAA,QACP9e,MAAM;AAAA,QACNoW,YAAY;AAAA,QACZ5U;AAAAA,MACD,CAAA,GACDsd,SAAS;AAAA,QAAC9e,MAAM;AAAA,QAAgBwB;AAAAA,MAAAA,CAAM;AACtC;AAAA,IAAA;AAEE+e,oBAAgB,CAACnL,YAAYnP,cAC/B+H,WAAW6S,OAAOzL,aAAa;AAAA,MAC7B9P,QAAQ;AAAA,QAAC9B,MAAM,CAAC,GAAG,CAAC;AAAA,QAAGiC,QAAQ;AAAA,MAAC;AAAA,MAChCF,OAAO;AAAA,QAAC/B,MAAM,CAAC,GAAG,CAAC;AAAA,QAAGiC,QAAQ;AAAA,MAAA;AAAA,IAC/B,CAAA,GACD2P,YAAYjH,aAEd2Q,SAAS;AAAA,MAAC9e,MAAM;AAAA,MAAiBwB;AAAAA,IAAAA,CAAM;AAAA,EACzC;AACEyB,YAAM,0DAA0D;AAGzD,WAAA;AAAA,IAACjD,MAAM;AAAA,IAAgBwB;AAAAA,EAAAA,CAAM;AACxC;AAEA,gBAAgB4f,UAAU;AAAA,EACxBC;AAAAA,EACAtC;AAIF,GAAG;AACD,MAAIlI,QAAQ;AACZ,mBAAiBjW,SAASygB;AACpBtC,oBACF,MAAM,IAAIgC,QAAeC,aAAYU,WAAWV,SAAS,CAAC,CAAC,GAE7D,MAAM,CAACpgB,OAAOiW,KAAK,GACnBA;AAEJ;AAEA,SAAS2K,UAAU;AAAA,EACjB7M;AAAAA,EACAmK;AAAAA,EACAle;AAAAA,EACAiW;AAAAA,EACAzB;AAAAA,EACA5T;AAaF,GAAG;AACG8f,MAAAA,eAAe,IACfC,aAAa;AACjB,QAAML,eAAetgB,OACfugB,oBAAoBtK,OACpB8K,WAAWvM,YAAYlR,SAASid,iBAAiB,GACjDS,aAAaD,YAAY,CAACzc,QAAQgc,cAAcS,QAAQ;AAEvD9E,SAAAA,OAAAA,mBAAmBzH,aAAa,MAAM;AAC3CwD,sBAAkBxD,aAAa,MAAM;AACnC6D,sBAAgB7D,aAAa,MAAM;AACjC,YAAIwM,cAAcL,YAAY;AAC5B,gBAAMM,kBAAkB,CAACrgB,MAAM2f,iBAAiB,CAAC,GAC3CW,aAAa5L,cACjB2L,iBACAlN,QAAQjS,QACRiS,QAAQwB,YACV;AAGE,WAAC2L,WAAWzL,SACZyL,WAAW1L,YAAYoB,eACvBsK,WAAW1L,YAAYnB,QAAQxT,SAAS,KAItC,CAACkT,QAAQpK,YACToK,QAAQ2K,iBACR3K,QAAQ2K,kBAAkB9d,UAG1BugB,QAAQzO,KACN,GAAGwO,WAAW1L,WAAWM,MAAM,yBAAyBmL,gBAAgB,CAAC,EAAEne,IAAI,MAAMoe,WAAW1L,YAAYK,WAAW,EACzH,GACAqL,WAAW1L,WAAWnB,QAAQ0F,QAASrF,CAAU,UAAA;AACtC,qBAAA;AAAA,cAACtV,MAAM;AAAA,cAASsV;AAAAA,YAAAA,CAAM;AAAA,UAAA,CAChC,IAGDwM,WAAWzL,SAASyL,WAAW1L,YAAYoB,eACzCmK,SAASje,SAASwd,aAAaxd,QAC7BT,QAAMG,WAASH,QAAM,kBAAkB0e,UAAUT,YAAY,GACjEc,aACE5M,aACA8L,cACAS,UACAR,iBACF,MAEIle,QAAMG,WACRH,QAAM,mBAAmB0e,UAAUT,YAAY,GACjDe,cAAc7M,aAAa8L,cAAcC,iBAAiB,IAE5DG,eAAe,OAEfxC,SAAS;AAAA,YACP9e,MAAM;AAAA,YACNoW,YAAY0L,WAAW1L;AAAAA,YACvB5U;AAAAA,UAAAA,CACD,GACD+f,aAAa;AAAA,QAAA;AAIb,YAAA,CAACI,YAAYJ,YAAY;AAC3B,gBAAMM,kBAAkB,CAACrgB,MAAM2f,iBAAiB,CAAC,GAC3CW,aAAa5L,cACjB2L,iBACAlN,QAAQjS,QACRiS,QAAQwB,YACV;AACIlT,kBAAMG,WACRH,QACE,8DACAie,YACF,GACEY,WAAWzL,SAASyL,WAAW1L,YAAYoB,cAC7CxJ,WAAW2S,YAAYvL,aAAa8L,cAAc;AAAA,YAChD1c,IAAI,CAAC2c,iBAAiB;AAAA,UACvB,CAAA,KAEDle,QAAM,WAAW6e,UAAU,GAC3BhD,SAAS;AAAA,YACP9e,MAAM;AAAA,YACNoW,YAAY0L,WAAW1L;AAAAA,YACvB5U;AAAAA,UAAAA,CACD,GACD+f,aAAa;AAAA,QAAA;AAAA,MAEjB,CACD;AAAA,IAAA,CACF;AAAA,EAAA,CACF,GAEM;AAAA,IAACD;AAAAA,IAAcC;AAAAA,EAAU;AAClC;AAMA,SAASU,cACP7M,aACA8L,cACAC,mBACA;AAGMe,QAAAA,mBAAmB9M,YAAYnP,WAC/Bkc,wBACJD,oBAAoBA,iBAAiB3c,MAAM/B,KAAK,CAAC,MAAM2d;AACrDgB,2BACFnU,WAAWiP,SAAS7H,WAAW,GAEjCpH,WAAW0S,YAAYtL,aAAa;AAAA,IAAC5Q,IAAI,CAAC2c,iBAAiB;AAAA,EAAE,CAAA,GAC7DnT,WAAW2S,YAAYvL,aAAa8L,cAAc;AAAA,IAAC1c,IAAI,CAAC2c,iBAAiB;AAAA,EAAA,CAAE,GAC3E/L,YAAYjH,YACRgU,yBACFnU,WAAW6S,OAAOzL,aAAa8M,gBAAgB;AAEnD;AAMA,SAASF,aACP5M,aACA8L,cACAS,UACAR,mBACA;AAEAnT,MAAAA,WAAWoU,SAAShN,aAAa8L,cAA+B;AAAA,IAC9D1c,IAAI,CAAC2c,iBAAiB;AAAA,EAAA,CACvB,GAGC/L,YAAYiN,YAAYnB,YAAY,KACpC9L,YAAYiN,YAAYV,QAAQ,GAChC;AACMW,UAAAA,yBAAyBX,SAASzd,SAASzC;AAC7Cyf,iBAAahd,SAASzC,SAAS6gB,0BAEjCte,MAAMK,KACJL,MAAMse,yBAAyBpB,aAAahd,SAASzC,MAAM,CAC7D,EAAEkZ,QAAQ,CAAC8F,GAAG5J,UAAU;AAChB7R,YAAAA,aAAasd,yBAAyB,IAAIzL;AAC5C7R,mBAAa,MACf/B,QAAM,gBAAgB,GACtB+K,WAAW0S,YAAYtL,aAAa;AAAA,QAClC5Q,IAAI,CAAC2c,mBAAmBnc,UAAU;AAAA,MAAA,CACnC;AAAA,IAAA,CAEJ,GAEHkc,aAAahd,SAASyW,QACpB,CAAC4H,mBAAmBC,2BAA2B;AACvCC,YAAAA,gBAAgBd,SAASzd,SAASse,sBAAsB,GACxDE,iBAAiB,CAACxd,QAAQqd,mBAAmBE,aAAa,GAC1DE,gBAAgB,CAACzd,QACrBqd,kBAAkBxb,MAClB0b,eAAe1b,IACjB,GACMvD,OAAO,CAAC2d,mBAAmBqB,sBAAsB;AACnDE,UAAAA;AAEEH,YAAAA,kBAAkB7e,SAAS+e,eAAe/e,MAAM;AAClDT,kBAAM,0BAA0Bsf,mBAAmBE,aAAa,GAChEzU,WAAWoU,SACThN,aACAmN,mBACA;AAAA,YACE/d,IAAIhB;AAAAA,UAAAA,CAER;AACA,gBAAMof,aACJ5Z,KAAKC,OAAOsZ,iBAAiB,KAC7BA,kBAAkB5e,UAAU,UAC5BqF,KAAKC,OAAOwZ,aAAa,KACzBA,cAAc9e,UAAU;AACtBif,wBAAcD,iBAChB3U,WAAWd,OAAOkI,aAAa;AAAA,YAC7B5Q,IAAI;AAAA,cACFe,OAAO;AAAA,gBAAC/B;AAAAA,gBAAMiC,QAAQ;AAAA,cAAC;AAAA,cACvBH,QAAQ;AAAA,gBAAC9B;AAAAA,gBAAMiC,QAAQgd,cAAc1b,KAAKtF;AAAAA,cAAAA;AAAAA,YAAM;AAAA,UAEnD,CAAA,GACDuM,WAAW6U,WAAWzN,aAAamN,kBAAkBxb,MAAM;AAAA,YACzDvC,IAAIhB;AAAAA,UACL,CAAA,GACD4R,YAAYjH,SACFyU,KAAAA,eAEV3f,QAAM,wCAAwCsf,iBAAiB,GAC/DvU,WAAWoU,SACThN,aACA;AAAA,YAAC1R,MAAM0D;AAAAA,UAAAA,GACP;AAAA,YACE5C,IAAI,CAAC,GAAGhB,MAAM,CAAC;AAAA,YACfsf,OAAO;AAAA,UAAA,CAEX;AAAA,QAAA,MAGOL,kBACTxf,QAAM,mBAAmBsf,iBAAiB,GAC1CvU,WAAW0S,YAAYtL,aAAa;AAAA,UAClC5Q,IAAI,CAAC2c,mBAAmBqB,sBAAsB;AAAA,QAC/C,CAAA,GACDxU,WAAW2S,YAAYvL,aAAamN,mBAA2B;AAAA,UAC7D/d,IAAI,CAAC2c,mBAAmBqB,sBAAsB;AAAA,QAC/C,CAAA,GACDpN,YAAYjH,SAEFsU,KAAAA,kBACVxf,QAAM,uBAAuBsf,iBAAiB,GAC9CvU,WAAW2S,YAAYvL,aAAamN,mBAA2B;AAAA,UAC7D/d,IAAI,CAAC2c,mBAAmBqB,sBAAsB;AAAA,QAAA,CAC/C,GACDpN,YAAYjH;IAAS,CAI7B;AAAA,EAAA;AAEJ;AC3sBA,MAAMlL,UAAQC,cAAc,2CAA2C;AAchE,SAAA6f,aAAAlZ,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,EAAA,GACL;AAAA,IAAAuR;AAAAA,IAAAhF;AAAAA,EAAmCvL,IAAAA,OAEnCrI,QAAcwhB,YAAYnZ,MAAKuQ,aAAA6I,KAAoC,GACnE1Y,WAAiByY,YAAYnZ,MAAKuQ,aAAA8I,MAElC;AAACnZ,MAAAA;AAAAD,IAAA,CAAA,MAAAD,MAAAuQ,eAGiBrQ,KAAAF,MAAKuQ,YAAAkB,eAA0BxR,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,OAAAC,MAAAA,KAAAD,EAAA,CAAA;AAA/BK,QAAAA,KAAAJ,GAA+B4K,QAAAwB;AAAqBpL,MAAAA;AAAAjB,IAAA,CAAA,MAAAD,MAAAuQ,eACxDrP,KAAAlB,MAAKuQ,YAAAkB,YACA,EAACC,QAAA;AAAA,IAAA,aACS;AAAA,EAAY,CAAA,GAACzR,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAlB,IAAA,CAAA,MAAAD,MAAAuQ,eAC9BpP,KAAAnB,MAAKuQ,YAAAkB,eAA0BxR,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,OAAAkB,MAAAA,KAAAlB,EAAA,CAAA;AAAAmB,MAAAA;AAAAnB,WAAAsL,eAAAtL,EAAAC,CAAAA,MAAAA,GAAA4K,QAAAwB,gBAAArM,EAAA,CAAA,MAAAiB,MAAAjB,SAAAkB,GAAA2J,QAAAjS,UANGuI,KAAA;AAAA,IAAA4J,OAAA;AAAA,MAAAsB,cAE5BhM;AAAAA,MAAoDI,UACxDQ;AAAAA,MAE4BrI,QAC9BsI,GAA+B2J,QAAAjS;AAAAA,MAAA0S;AAAAA,IAAAA;AAAAA,EAAA,GAG1CtL,OAAAsL,aAAAtL,EAAAC,CAAAA,IAAAA,GAAA4K,QAAAwB,cAAArM,OAAAiB,IAAAjB,EAAAkB,CAAAA,IAAAA,GAAA2J,QAAAjS,QAAAoH,QAAAmB,MAAAA,KAAAnB,EAAA,EAAA;AATDqZ,QAAAA,eAAqBC,YAAAlE,aAAyBjU,EAS7C;AAACI,MAAAA;AAAAvB,YAAAsQ,eAGU/O,KAAA+O,YAAWkB,eAAcxR,QAAAsQ,aAAAtQ,QAAAuB,MAAAA,KAAAvB,EAAA,EAAA;AAAAwB,MAAAA;AAAAxB,IAAAsL,EAAAA,MAAAA,eAAAtL,UAAAuB,GAAAsJ,QAAAjS,UAFiB4I,KAAA;AAAA,IAAAuJ,OAAA;AAAA,MAAAnS,QAE1C2I,GAAyBsJ,QAAAjS;AAAAA,MAAA0S;AAAAA,IAAAA;AAAAA,EAAA,GAGpCtL,QAAAsL,aAAAtL,EAAAuB,EAAAA,IAAAA,GAAAsJ,QAAAjS,QAAAoH,QAAAwB,MAAAA,KAAAxB,EAAA,EAAA;AALDuZ,QAAAA,mBAAyBD,YAAA3O,iBAA6BnJ,EAKrD;AAAC,MAAAK,IAAAiB;AAAA9C,IAAAsQ,EAAAA,MAAAA,eAAAtQ,UAAAuZ,oBAAAvZ,EAAA,EAAA,MAAAqZ,gBAEQxX,KAAAA,MAAA;AACR,UAAA2X,eAAqBD,iBAAgBvN,GAAI,KAAGlK,CAAA,UAAA;AACtCA,YAAK5L,SAAU,yBACjBmjB,aAAYI,KAAA;AAAA,QAAAvjB,MAAa;AAAA,MAAsB,CAAA,GAE7C4L,MAAK5L,SAAU,eACjBmjB,aAAYI,KAAA;AAAA,QAAAvjB,MAAa;AAAA,MAAA,CAAW,GACpCoa,YAAWmJ,KAAA;AAAA,QAAAvjB,MACH;AAAA,QAAUiV,SACPrJ,MAAKqJ;AAAAA,QAAAE,UACJvJ,MAAKuJ;AAAAA,QAAA3T,OACRoK,MAAKuJ;AAAAA,MAAAA,CACb;AAAA,IAAA,CAEJ;AAAC,WAAA,MAAA;AAGAmO,mBAAYnI,YAAa;AAAA,IAAC;AAAA,EAAA,GAE3BvO,KAACyW,CAAAA,kBAAkBF,cAAc/I,WAAW,GAACtQ,QAAAsQ,aAAAtQ,QAAAuZ,kBAAAvZ,QAAAqZ,cAAArZ,QAAA6B,IAAA7B,QAAA8C,OAAAjB,KAAA7B,EAAA,EAAA,GAAA8C,KAAA9C,EAAA,EAAA,IAnBhD4B,UAAUC,IAmBPiB,EAA6C;AAAC,MAAAyB,KAAAvB;AAAAhD,YAAAD,MAAAuQ,eAAAtQ,UAAAqZ,gBAEvCrW,KAAAA,MAAA;AACR,UAAA0W,iBAAqBL,aAAYrN,GAAI,KAAG/I,CAAA,YAAA;AACjCqN,YAAAA,YAAAmJ,KAAkB3X,OAAK;AAAA,IAAA,CAC7B;AAAC,WAAA,MAAA;AAGA0X,qBAAYnI,YAAa;AAAA,IAAC;AAAA,EAAA,GAE3B9M,MAACxE,CAAAA,MAAKuQ,aAAc+I,YAAY,GAACrZ,EAAA,EAAA,IAAAD,MAAAuQ,aAAAtQ,QAAAqZ,cAAArZ,QAAAuE,KAAAvE,QAAAgD,OAAAuB,MAAAvE,EAAA,EAAA,GAAAgD,KAAAhD,EAAA,EAAA,IARpC4B,UAAUoB,IAQPuB,GAAiC;AAAC,MAAAG,KAAAM;AAAAhF,IAAAS,EAAAA,MAAAA,YAAAT,UAAAqZ,gBAE3B3U,MAAAA,MAAA;AACR2U,iBAAYI,KAAA;AAAA,MAAAvjB,MAAa;AAAA,MAAiBuK;AAAAA,IAAAA,CAAW;AAAA,EACpDuE,GAAAA,MAAA,CAACqU,cAAc5Y,QAAQ,GAACT,QAAAS,UAAAT,QAAAqZ,cAAArZ,QAAA0E,KAAA1E,QAAAgF,QAAAN,MAAA1E,EAAA,EAAA,GAAAgF,MAAAhF,EAAA,EAAA,IAF3B4B,UAAU8C,KAEPM,GAAwB;AAAC,MAAAqB,KAAAE;AAAAvG,IAAAqZ,EAAAA,MAAAA,gBAAArZ,UAAAtI,SAElB2O,MAAAA,MAAA;AACFlN,YAAA,6CAA6C,GACnDkgB,aAAYI,KAAA;AAAA,MAAAvjB,MAAa;AAAA,MAAcwB;AAAAA,IAAAA,CAAQ;AAAA,EAC9C6O,GAAAA,MAAA,CAAC8S,cAAc3hB,KAAK,GAACsI,QAAAqZ,cAAArZ,QAAAtI,OAAAsI,QAAAqG,KAAArG,QAAAuG,QAAAF,MAAArG,EAAA,EAAA,GAAAuG,MAAAvG,EAAA,EAAA,IAHxB4B,UAAUyE,KAGPE,GAAqB;AAACK,MAAAA;AAAA5G,IAAAsQ,EAAAA,MAAAA,eAAAtQ,UAAAuZ,oBAGf3S,MAAAA,MAAA;AACRzN,YAAM,6BAA6B;AACnC,UAAAwX,MAAYL,YAAWtE,GAAI,SAAOxH,CAAA,YAAA;AAChC+U,uBAAgBE,KAAM3X,OAAK;AAAA,IAAA,CAC5B;AAAC,WAAA,MAAA;AAEM3I,cAAA,+BAA+B,GACrCwX,IAAGU,YAAa;AAAA,IAAC;AAAA,EAEpBrR,GAAAA,QAAAsQ,aAAAtQ,QAAAuZ,kBAAAvZ,QAAA4G,OAAAA,MAAA5G,EAAA,EAAA;AAAA6G,MAAAA;AAAA,SAAA7G,EAAAsQ,EAAAA,MAAAA,eAAAtQ,UAAAuZ,oBAAAvZ,EAAA,EAAA,MAAAsL,eAAEzE,MAACyJ,CAAAA,aAAaiJ,kBAAkBjO,WAAW,GAACtL,QAAAsQ,aAAAtQ,QAAAuZ,kBAAAvZ,QAAAsL,aAAAtL,QAAA6G,OAAAA,MAAA7G,EAAA,EAAA,GAT/C4B,UAAUgF,KASPC,GAA4C,GAAC;AAAA;AA1E3C,SAAAuS,OAAAO,KAAA;AAAA,SAKHC,IAACnI,QAAA;AAAA,IAAA,aAAuB;AAAA,EAAA,CAAY;AAAC;AALlC,SAAA0H,MAAAS,GAAA;AAAA,SAG+CA,EAAC/O,QAAAnT;AAAA;AA4EvDuhB,aAAa3Y,cAAc;ACtE3B,MAAMnH,UAAQC,cAAc,oBAAoB;AAEzC,SAASygB,yBACd9gB,OACgB;AACV+gB,QAAAA,gBAAgB/gB,MAAMjC,MAAMd;AACzB+jB,WAAAA,gBACPzf,QACA+B,WACA2d,aACA;AACI7gB,YAAMG,WACRH,QAAM,aAAa4K,KAAKC,UAAU3H,WAAW,MAAM,CAAC,CAAC;AAEvD,UAAMvF,QACJwD,OAAOie,YAAYje,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC,CAAC,KACrDY,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AACnC,QAAI,CAAC5C;AACG,YAAA,IAAItB,MAAM,sBAAsB;AAElCykB,UAAAA,YACJ3f,OAAOie,YAAYzhB,KAAK,KACxBwD,OAAO4f,WAAWpjB,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,CAAC,KAClD5C,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AACnC,QAAI,CAACugB;AACG,YAAA,IAAIzkB,MAAM,sBAAsB;AAExC,UAAMkE,OAAa,CACjB;AAAA,MAACE,MAAM9C,MAAM8C;AAAAA,OACb,YACA;AAAA,MAACA,MAAMqgB,UAAUrgB;AAAAA,IAAAA,GACjB,MAAM,GAEFugB,YAAYH,YAAY3d,UAAU3C,KAAK,CAAC,CAAC,GACzC0gB,YACJ9f,OAAOie,YAAY4B,SAAS,KAAKA,UAAU/f,SAASiC,UAAU3C,KAAK,CAAC,CAAC,GACjE2gB,WAAW/f,OAAO4f,WAAWE,SAAS,IAAIA,UAAUnd,OAAO,IAC3DuO,QAAQ8O,iBAAeD,UAAUJ,UAAUhd,MAAMvD,IAAI;AAC3D,WAAO8R,MAAM9T,MAAMC,SAAS,CAAC6T,KAAK,IAAI,CAAE;AAAA,EAAA;AAGjC+O,WAAAA,gBACPjgB,QACA+B,WACA2d,aACA;AACA,UAAMljB,QAAQwD,UAAUA,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AACzD,QAAI,CAAC5C;AACG,YAAA,IAAItB,MAAM,sBAAsB;AAExC,UAAMyE,QACHK,OAAOie,YAAYzhB,KAAK,KAAKA,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,KAC9DoB,QACImf,YAA0C3f,OAAO4f,WAAWjgB,KAAK,IACnEA,QACAa;AACJ,QAAIb,SAAS,CAACggB;AACN,YAAA,IAAIzkB,MAAM,eAAe;AAEjC,QAAI,CAACykB;AACG,YAAA,IAAIzkB,MAAM,sBAAsB;AAExC,UAAMkE,OAAa,CACjB;AAAA,MAACE,MAAM9C,MAAM8C;AAAAA,OACb,YACA;AAAA,MAACA,MAAMqgB,UAAUrgB;AAAAA,IAAAA,GACjB,MAAM,GAEF4gB,cAAcR,YAAY3d,UAAU3C,KAAK,CAAC,CAAC,GAC3C+gB,gBACJngB,OAAOie,YAAYiC,WAAW,KAAKA,YAAYpgB,SAASiC,UAAU3C,KAAK,CAAC,CAAC,GACrE2gB,WAAW/f,OAAO4f,WAAWO,aAAa,KAAKA,cAAcxd,MAC7DuO,QAAQ8O,iBAAeD,YAAY,IAAIJ,UAAUhd,MAAMvD,IAAI;AACjE,WAAO8R,MAAM9T,QAAQ,CAAC8T,KAAK,IAAI,CAAE;AAAA,EAAA;AAG1BkP,WAAAA,aACPpgB,QACA+B,WACA;AACIA,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AAC/B,YAAMb,QAAQwD,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAC3C,UAAA,OAAO5C,MAAM8C,QAAS;AAClB,cAAA,IAAIpE,MAAM,+BAA+B;AAEjD,YAAMmlB,UAAUC,OACd;AAAA,QAAC,GAAGtgB,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAAA,QAAG,GAAG2C,UAAUwY;AAAAA,SACrDgG,WACF;AACO,aAAA,CACL1Y,IAAI3D,eAAe,CAACmc,OAAO,GAAGb,aAAa,EAAE,CAAC,GAAG,CAAC;AAAA,QAAClgB,MAAM9C,MAAM8C;AAAAA,MAAK,CAAA,CAAC,CAAC;AAAA,IAE/DyC,WAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AACtC,YAAMb,QAAQwD,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAC3CY,UAAAA,OAAOie,YAAYzhB,KAAK,GAAG;AAC7B,cAAMmD,QAAQnD,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAC9C,YAAIO,OAAO;AACT,gBAAM2C,WAAW9F,MAAM8C,MACjBiD,WAAW5C,MAAML,MACjBuR,UAAmB,CAAA,GACnB2P,OAAOzR,OAAOyR,KAAKze,UAAUwY,aAAa;AAChDiG,iBAAAA,KAAKjK,QAASkK,CAAY,YAAA;AAExB,gBAAID,KAAKnjB,WAAW,KAAKojB,YAAY,QAAQ;AAC3C,oBAAMC,MAAMhiB,IAAIqD,UAAUwY,eAAekG,OAAO;AACxChe,sBAAAA,KACNoF,IAAI6Y,KAAK,CACP;AAAA,gBAACphB,MAAMgD;AAAAA,cAAAA,GACP,YACA9F,MAAMsD,SAAS6gB,QAAQhhB,KAAK,GAC5B8gB,OAAO,CACR,CACH;AAAA,YAAA,OACK;AACL,oBAAMC,MAAMhiB,IAAIqD,UAAUwY,eAAekG,OAAO;AACxChe,sBAAAA,KACNoF,IAAI6Y,KAAK,CACP;AAAA,gBAACphB,MAAMgD;AAAAA,iBACP,YACA;AAAA,gBAAChD,MAAMiD;AAAAA,cAAAA,GACPke,OAAO,CACR,CACH;AAAA,YAAA;AAAA,UAEH,CAAA,GACM5P;AAAAA,QAAAA;AAEH,cAAA,IAAI3V,MAAM,8BAA8B;AAAA,MAAA;AAE1C,YAAA,IAAIA,MAAM,8BAA8B;AAAA,IAChD;AACQ,YAAA,IAAIA,MACR,gCAAgCuO,KAAKC,UAAU3H,UAAU3C,IAAI,CAAC,EAChE;AAAA,EAAA;AAIKwhB,WAAAA,gBACP5gB,QACA+B,WACA2d,aACS;AACHljB,UAAAA,QAAQkjB,YAAY3d,UAAU3C,KAAK,CAAC,CAAC,GACrC6e,cAAcje,OAAOie,YAAYzhB,KAAK;AACxCuF,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AACzB8N,YAAAA,WAAWpJ,UAAU3C,KAAK,CAAC,MAAM,IAAI,WAAW,SAChD8gB,cAAcR,YAAY3d,UAAU3C,KAAK,CAAC,IAAI,CAAC,GAC/CyhB,YACJ9e,UAAU3C,KAAK,CAAC,MAAM,IAAI5C,OAAO8C,OAAO4gB,aAAa5gB;AACvD,aAAIuhB,YACK,CACLvN,OACE,CAACpP,eAAe,CAACnC,UAAUgM,IAAI,GAAiByR,aAAa,EAAE,CAAC,CAAC,GACjErU,UACA,CAAC;AAAA,QAAC7L,MAAMuhB;AAAAA,MAAAA,CAAU,CACpB,CAAC,IAGE,CACLxN,aAAaqM,aAAa,CAAE,CAAA,GAC5BpM,OACE,CAACpP,eAAe,CAACnC,UAAUgM,IAAI,GAAiByR,aAAa,EAAE,CAAC,CAAC,GACjE,UACA,CAACzd,UAAU3C,KAAK,CAAC,CAAC,CACpB,CAAC;AAAA,IAGH6e,WAAAA,eACAlc,UAAU3C,KAAK/B,WAAW,KAC1B2C,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC,GACjC;AACA,YAAM+L,WACJ3O,MAAMsD,SAASzC,WAAW,KAAK,CAACb,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,IAChE,WACA,SACA2O,OAAO;AAAA,QAAC,GAAGhM,UAAUgM;AAAAA,MAAI;AAC3B,OAACA,KAAKxO,SAASqF,KAAKC,OAAOkJ,IAAI,MACjCA,KAAKxO,QAAQ,QACbwO,KAAK7P,QAAQ,CAAA;AAYTyB,YAAAA,QAVMuE,eACV,CACE;AAAA,QACE5E,MAAM;AAAA,QACNC,OAAOigB;AAAAA,QACP1f,UAAU,CAACiO,IAAI;AAAA,MAChB,CAAA,GAEHyR,aACF,EAAE,CAAC,EACe1f,SAAS,CAAC;AAC5B,aAAO,CACLwT,OAAO,CAAC3T,KAAK,GAAGwL,UAAU,CACxB;AAAA,QAAC7L,MAAM9C,MAAM8C;AAAAA,MACb,GAAA,YACA9C,MAAMsD,SAASzC,UAAU,KAAK,CAACb,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,IAC/D,IACA;AAAA,QAACE,MAAM9C,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,EAAEE;AAAAA,MAAK,CAAA,CACvD,CAAC;AAAA,IAAA;AAIJ,WAAAT,QAAA,yEACF,GACO,CAAE;AAAA,EAAA;AAGFiiB,WAAAA,eACP9gB,QACA+B,WACA2d,aACA;AACM7O,UAAAA,UAAmB,CACnBkQ,GAAAA,aAAa/gB,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAChD,QAAA,CAACY,OAAOie,YAAY8C,UAAU;AAC1B,YAAA,IAAI7lB,MACR,mBAAmBuO,KAAKC,UACtB3H,UAAU3C,KAAK,CAAC,CAClB,CAAC,yCACH;AAEE2C,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AAC/B,YAAMkgB,WAAWmC,YAAY3d,UAAU3C,KAAK,CAAC,CAAC;AAC1CY,UAAAA,OAAOie,YAAYV,QAAQ,GAAG;AAChC,cAAMyD,cAAc9c,eAClB,CAAClE,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,CAAC,GACvCogB,aACF,EAAE,CAAC;AACCwB,wBACFnQ,QAAQpO,KACN6Q,OAAO,CAAC0N,WAAW,GAAG,SAAS,CAAC;AAAA,UAAC1hB,MAAMyhB,WAAWzhB;AAAAA,QAAAA,CAAK,CAAC,CAC1D,GACqBie,SAASzd,SAASJ,MAAMqC,UAAUoJ,QAAQ,EAClDoL,QAAS9Z,CAAS,SAAA;AAC7B,gBAAM2C,OAAO,CAAC;AAAA,YAACE,MAAMie,SAASje;AAAAA,aAAO,YAAY;AAAA,YAACA,MAAM7C,KAAK6C;AAAAA,UAAAA,CAAK;AAC1DmD,kBAAAA,KAAK2P,MAAMhT,IAAI,CAAC;AAAA,QAAA,CACzB;AAAA,MAAA;AAGEyR,aAAAA;AAAAA,IAAAA;AAEL9O,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AAC/B,YAAM4jB,YAAYF,WAAWjhB,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AACnDY,UAAAA,OAAO4f,WAAWqB,SAAS,GAAG;AAC1BC,cAAAA,cACJhd,eACE,CACE;AAAA,UACE,GAAG6c;AAAAA,UACHjhB,UAAUihB,WAAWjhB,SAASJ,MAC5BqC,UAAU3C,KAAK,CAAC,IAAI,GACpB2C,UAAU3C,KAAK,CAAC,IAAI,CACtB;AAAA,QACD,CAAA,GAEHogB,aACF,EAAE,CAAC,EACH1f;AAEF+Q,gBAAQpO,KACN6Q,OAAO4N,aAAa,SAAS,CAC3B;AAAA,UAAC5hB,MAAMyhB,WAAWzhB;AAAAA,WAClB,YACA;AAAA,UAACA,MAAM2hB,UAAU3hB;AAAAA,QAAAA,CAAK,CACvB,CACH,GACAuR,QAAQpO,KACNoF,IAAIoZ,UAAUte,MAAM,CAClB;AAAA,UAACrD,MAAMyhB,WAAWzhB;AAAAA,WAClB,YACA;AAAA,UAACA,MAAM2hB,UAAU3hB;AAAAA,QAAAA,GACjB,MAAM,CACP,CACH;AAAA,MAAA;AAEKuR,aAAAA;AAAAA,IAAAA;AAEFA,WAAAA;AAAAA,EAAAA;AAGAsQ,WAAAA,gBACPnhB,QACA+B,WACA2d,aACA;AACA,UAAMljB,QAAQkjB,YAAY3d,UAAU3C,KAAK,CAAC,CAAC;AACvC2C,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AAE/B,UAAIb,SAASA,MAAM8C;AACV,eAAA,CAAC8S,MAAM,CAAC;AAAA,UAAC9S,MAAM9C,MAAM8C;AAAAA,QAAK,CAAA,CAAC,CAAC;AAE/B,YAAA,IAAIpE,MAAM,iBAAiB;AAAA,IAAA,WACxB8E,OAAOie,YAAYzhB,KAAK,KAAKuF,UAAU3C,KAAK/B,WAAW,GAAG;AACnE,YAAM+jB,eAAe5kB,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAErD,aAAIgiB,eACuB5kB,MAAMsD,SAAS9D,OACrCS,CAASA,SAAAA,KAAK6C,SAASyC,UAAUgM,KAAKzO,IACzC,EAEqBjC,SAAS,KAC5BsgB,QAAQzO,KACN,gCAAgCnN,UAAUgM,KAAKzO,IAAI,yCACnDmK,KAAKC,UAAUlN,OAAO,MAAM,CAAC,CAC/B,GACO,CAAA,KAGF,CACL4V,MAAM,CAAC;AAAA,QAAC9S,MAAM9C,MAAM8C;AAAAA,SAAO,YAAY;AAAA,QAACA,MAAM8hB,aAAa9hB;AAAAA,MAAK,CAAA,CAAC,CAAC,KAGtET,QAAM,gDAAgD,GAC/C,CAAA;AAAA,IACT;AACQ,aAAAA,QAAA,wCAAwC,GACvC,CAAE;AAAA,EAAA;AAIJwiB,WAAAA,eACPrhB,QACA+B,WACA2d,aACA;AACA,UAAM7O,UAAmB,CAAA,GAEnBrU,QAAQkjB,YAAY3d,UAAU3C,KAAK,CAAC,CAAC,GACrCkiB,eAAethB,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AAElD2C,QAAAA,UAAU3C,KAAK/B,WAAW;AAC5B,UAAIb,OAAO8C,MAAM;AACf,cAAMiiB,WAAWrd,eACf,CAAClE,OAAOF,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,CAAC,GACvCogB,aACF,EAAE,CAAC;AACK/c,gBAAAA,KAAKoF,IAAI0Z,UAAU,CAAC;AAAA,UAACjiB,MAAMiiB,SAASjiB;AAAAA,QAAK,CAAA,CAAC,CAAC,GACnDuR,QAAQpO,KAAK2P,MAAM,CAAC;AAAA,UAAC9S,MAAM9C,MAAM8C;AAAAA,QAAK,CAAA,CAAC,CAAC;AAAA,MAC1C;AACQ,cAAA,IAAIpE,MAAM,uBAAuB;AAAA,aAGzC8E,OAAOie,YAAYzhB,KAAK,KACxBwD,OAAOie,YAAYqD,YAAY,KAC/Bvf,UAAU3C,KAAK/B,WAAW,GAC1B;AACMmkB,YAAAA,cACJF,aAAaxhB,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,KAC3CY,OAAO4f,WAAW0B,aAAaxhB,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,CAAC,IAC1DkiB,aAAaxhB,SAASiC,UAAU3C,KAAK,CAAC,IAAI,CAAC,IAC3CoB,QACAihB,cACJjlB,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,KAChCY,OAAO4f,WAAWpjB,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,CAAC,IAC/C5C,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,IAChCoB;AAEFghB,sBACuBhlB,MAAMsD,SAAS9D,OACrCS,CAAAA,SAASA,KAAK6C,SAASkiB,YAAYliB,IACtC,EAEqBjC,WAAW,IAC9BwT,QAAQpO,KACNoF,IAAI2Z,YAAY7e,MAAM,CACpB;AAAA,QAACrD,MAAM9C,MAAM8C;AAAAA,SACb,YACA;AAAA,QAACA,MAAMkiB,YAAYliB;AAAAA,MAAAA,GACnB,MAAM,CACP,CACH,IAEAqe,QAAQzO,KACN,gCAAgCsS,YAAYliB,IAAI,yCAChDmK,KAAKC,UAAUlN,OAAO,MAAM,CAAC,CAC/B,IAIAilB,gBACuBjlB,MAAMsD,SAAS9D,OACrCS,UAASA,KAAK6C,SAASmiB,YAAYniB,IACtC,EAEqBjC,WAAW,IAC9BwT,QAAQpO,KACN2P,MAAM,CAAC;AAAA,QAAC9S,MAAM9C,MAAM8C;AAAAA,SAAO,YAAY;AAAA,QAACA,MAAMmiB,YAAYniB;AAAAA,MAAAA,CAAK,CAAC,CAClE,IAEAqe,QAAQzO,KACN,gCAAgCuS,YAAYniB,IAAI,yCAChDmK,KAAKC,UAAUlN,OAAO,MAAM,CAAC,CAC/B;AAAA,IAGN;AACEqC,cAAM,sDAAsD;AAEvDgS,WAAAA;AAAAA,EAAAA;AAGA6Q,WAAAA,cACP1hB,QACA+B,WACA2d,aACA;AACA,UAAM7O,UAAmB,CACnBrU,GAAAA,QAAQkjB,YAAY3d,UAAU3C,KAAK,CAAC,CAAC,GACrCwJ,cAAc8W,YAAY3d,UAAUK,QAAQ,CAAC,CAAC;AAEpD,QAAI,CAACwG;AACIiI,aAAAA;AAGL9O,QAAAA,UAAU3C,KAAK/B,WAAW,GAAG;AACzB8N,YAAAA,WACJpJ,UAAU3C,KAAK,CAAC,IAAI2C,UAAUK,QAAQ,CAAC,IAAI,WAAW;AAChDK,cAAAA,KAAK2P,MAAM,CAAC;AAAA,QAAC9S,MAAM9C,MAAM8C;AAAAA,MAAK,CAAA,CAAC,CAAC,GACxCuR,QAAQpO,KACN6Q,OAAO,CAACpP,eAAe,CAAC1H,KAAK,GAAGgjB,aAAa,EAAE,CAAC,CAAC,GAAGrU,UAAU,CAC5D;AAAA,QAAC7L,MAAMsJ,YAAYtJ;AAAAA,MAAK,CAAA,CACzB,CACH;AAAA,IAEAyC,WAAAA,UAAU3C,KAAK/B,WAAW,KAC1B2C,OAAOie,YAAYzhB,KAAK,KACxBwD,OAAOie,YAAYrV,WAAW,GAC9B;AACA,YAAMjJ,QAAQnD,MAAMsD,SAASiC,UAAU3C,KAAK,CAAC,CAAC,GACxCuiB,cAAc/Y,YAAY9I,SAASiC,UAAUK,QAAQ,CAAC,CAAC,GACvD+I,WACJpJ,UAAUK,QAAQ,CAAC,MAAMwG,YAAY9I,SAASzC,SAC1C,UACA,UACAukB,gBACJ1d,eAAe,CAAC1H,KAAK,GAAGgjB,aAAa,EAAE,CAAC,EACxC1f,SAASiC,UAAU3C,KAAK,CAAC,CAAC;AACpBqD,cAAAA,KAAK2P,MAAM,CAAC;AAAA,QAAC9S,MAAM9C,MAAM8C;AAAAA,SAAO,YAAY;AAAA,QAACA,MAAMK,MAAML;AAAAA,MAAAA,CAAK,CAAC,CAAC,GACxEuR,QAAQpO,KACN6Q,OAAO,CAACsO,aAAa,GAAGzW,UAAU,CAChC;AAAA,QAAC7L,MAAMsJ,YAAYtJ;AAAAA,SACnB,YACA;AAAA,QAACA,MAAMqiB,YAAYriB;AAAAA,MAAK,CAAA,CACzB,CACH;AAAA,IAAA;AAEKuR,WAAAA;AAAAA,EAAAA;AAGF,SAAA;AAAA,IACL+P;AAAAA,IACAnB;AAAAA,IACA4B;AAAAA,IACAK;AAAAA,IACAP;AAAAA,IACAlB;AAAAA,IACAG;AAAAA,IACAU;AAAAA,EACF;AACF;ACxeA,MAAMe,mDACA7c,QAAQ;AAEE8c,SAAAA,4BAA4B9hB,QAAgByU,IAAgB;AACpEC,QAAAA,OAAOqN,0BAA0B/hB,MAAM;AAChB6H,+BAAAA,IAAI7H,QAAQ,EAAI,GAC7CyU,GACAoN,GAAAA,6BAA6Bha,IAAI7H,QAAQ0U,IAAI;AAC/C;AAEO,SAASqN,0BAA0B/hB,QAAgB;AACjD6hB,SAAAA,6BAA6BnjB,IAAIsB,MAAM,KAAK;AACrD;ACPgBgiB,SAAAA,yBACdhM,aACAI,eACA;AACA,SAAO,SAA4BpW,QAAgB;AACjD,QAAIgW,YAAYkB,YAAAA,EAAc3G,QAAQ0R,cAAczhB;AAC3CR,aAAAA;AAGToW,kBAAc3T,KAAK,MAAM;AACvB,YAAMyc,eAAelJ,YAAYtE,GAAG,KAAMlK,CAAU,UAAA;AAClD,gBAAQA,MAAM5L,MAAI;AAAA,UAChB,KAAK,kBAAkB;AACrBoa,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNyC,YAAYmJ,MAAMnJ;AAAAA,cACpB;AAAA,cACA2B;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,qBAAqB;AACxBgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNyC,YAAYmJ,MAAMnJ;AAAAA,cACpB;AAAA,cACA2B;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,QAAQ;AACXgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,cACR;AAAA,cACAoE;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,YAAY;AACfgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe1a,MAAMA;AAAAA,cACrBxH;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,oBAAoB;AACvBgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNuC,WAAWqJ,MAAMrJ;AAAAA,cACnB;AAAA,cACA6B;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,SAAS;AACZgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,cACR;AAAA,cACAoE;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,uBAAuB;AAC1BgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNumB,WAAW3a,MAAM2a;AAAAA,gBACjBvkB,aAAa4J,MAAM5J;AAAAA,cACrB;AAAA,cACAoC;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,wBAAwB;AAC3BgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNmC,cAAcyJ,MAAMzJ;AAAAA,cACtB;AAAA,cACAiC;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,oBAAoB;AACvBgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACN+S,UAAUnH,MAAMmH;AAAAA,cAClB;AAAA,cACA3O;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,UAAU;AACbgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNiG,WAAW2F,MAAM3F;AAAAA,cACnB;AAAA,cACA7B;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,UAEF,KAAK,gBAAgB;AACnBgW,wBAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNsmB,eAAe;AAAA,gBACbtmB,MAAM;AAAA,gBACNuB,OAAOqK,MAAMrK;AAAAA,cACf;AAAA,cACA6C;AAAAA,YAAAA,CACD;AACD;AAAA,UAAA;AAAA,QACF;AAAA,MACF,CACD;AAED,aAAO,MAAM;AACXkf,qBAAanI,YAAY;AAAA,MAC3B;AAAA,IAAA,CACD;AAEK,UAAA;AAAA,MACJqL,gBAAAA;AAAAA,MACAC,eAAAA;AAAAA,MACAC;AAAAA,MACAC;AAAAA,MACA9D,YAAAA;AAAAA,MACAhC;AAAAA,IAAAA,IACEzc;AAEJA,WAAAA,OAAOoiB,iBAAkBI,CAAS,SAAA;AAC5BT,UAAAA,0BAA0B/hB,MAAM,GAAG;AACrCoiB,QAAAA,gBAAeI,IAAI;AACnB;AAAA,MAAA;AAGFxM,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACN4mB;AAAAA,QACF;AAAA,QACAxiB;AAAAA,MAAAA,CACD;AAAA,IAAA,GAIHA,OAAOqiB,gBAAiBG,CAAS,SAAA;AAC3BT,UAAAA,0BAA0B/hB,MAAM,GAAG;AACrCqiB,QAAAA,eAAcG,IAAI;AAClB;AAAA,MAAA;AAGFxM,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACN4mB;AAAAA,QACF;AAAA,QACAxiB;AAAAA,MAAAA,CACD;AAAA,IAAA,GAIHA,OAAOsiB,cAAc,MAAM;AACrBP,UAAAA,0BAA0B/hB,MAAM,GAAG;AACzB,oBAAA;AACZ;AAAA,MAAA;AAGFgW,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,QACR;AAAA,QACAoE;AAAAA,MAAAA,CACD;AAAA,IAAA,GAIHA,OAAOuiB,kBAAkB,MAAM;AACzBR,UAAAA,0BAA0B/hB,MAAM,GAAG;AACrB,wBAAA;AAChB;AAAA,MAAA;AAGFgW,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,QACR;AAAA,QACAoE;AAAAA,MAAAA,CACD;AAAA,IAIHA,GAAAA,OAAOye,aAAa,CAAC9b,MAAM1F,YAAY;AACjC8kB,UAAAA,0BAA0B/hB,MAAM,GAAG;AACrCye,QAAAA,YAAW9b,MAAM1F,OAAO;AACxB;AAAA,MAAA;AAGF+Y,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACN+G;AAAAA,UACA1F;AAAAA,QACF;AAAA,QACA+C;AAAAA,QACAyiB,uBAAuBA,MAAM;AAC3BhE,UAAAA,YAAW9b,MAAM1F,OAAO;AAAA,QAAA;AAAA,MAC1B,CACD;AAAA,IAAA,GAIH+C,OAAOyc,SAAUiG,CAAa,aAAA;AACxBX,UAAAA,0BAA0B/hB,MAAM,GAAG;AACrCyc,eAAOiG,QAAQ;AACf;AAAA,MAAA;AAGF,YAAMzhB,QAAQf,OAAOe,MAAMjB,QAAQ0iB,QAAQ;AAE3C1M,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACNiG,WAAWb,oBACTkD,eACElE,OAAOF,UACPkW,YAAYkB,YAAAA,EAAc3G,QAAQjS,OAAO9B,MAAMd,MAC/C4J,qBAAqB5G,IAAIsB,MAAM,CACjC,GACAiB,OACA+U,YAAYkB,cAAc3G,QAAQjS,MACpC;AAAA,QACF;AAAA,QACA0B;AAAAA,QACAyiB,uBAAuBA,MAAM;AAC3BhG,iBAAOiG,QAAQ;AAAA,QAAA;AAAA,MACjB,CACD;AAAA,IAAA,GAII1iB;AAAAA,EACT;AACF;ACvQO,SAAS2iB,oBAAoB3M,aAA0B;AAC5D,SAAO,SACLhW,QACyB;AACnB,UAAA;AAAA,MAACgX,OAAAA;AAAAA,IAAAA,IAAShX;AAChBA,WAAAA,OAAOgX,QAASjV,CAAc,cAAA;AACxBiU,UAAAA,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC,aAAa;AAAA,MAAA,CAAY,GAAG;AACjEH,QAAAA,OAAMjV,SAAS;AACf;AAAA,MAAA;AAOE4S,UAAAA,mBAAmB3U,MAAM,GAAG;AAC9BgX,QAAAA,OAAMjV,SAAS;AACf;AAAA,MAAA;AAOF,UAAIqT,UAAUpV,MAAM,KAAKuV,UAAUvV,MAAM,GAAG;AAC1CgX,QAAAA,OAAMjV,SAAS;AACf;AAAA,MAAA;AAGF,YAAM6gB,OAAO5M,YAAYkB,YAAY,EAAE3G,QAAQ0R,aAAa;AACxDW,aAAO,KAAK5iB,OAAOF,SAASzC,UAAUulB,SAErC7gB,UAAUnG,SAAS,iBAClBmG,UAAUnG,SAAS,iBACrBmG,UAAU3C,KAAK/B,WAAW,KAK9B2Z,OAAMjV,SAAS;AAAA,IAAA,GAEV/B;AAAAA,EACT;AACF;ACvCgB6iB,SAAAA,qBACd7M,aACA3S,aACA;AACA,SAAO,SACLrD,QACyB;AACnB,UAAA;AAAA,MAACgX,OAAAA;AAAAA,MAAO8L;AAAAA,IAAAA,IAAiB9iB;AAK/BA,WAAAA,OAAOgX,QAASjV,CAAc,cAAA;AAKxB4S,UAAAA,mBAAmB3U,MAAM,GAAG;AAC9BgX,QAAAA,OAAMjV,SAAS;AACf;AAAA,MAAA;AAOF,UAAIqT,UAAUpV,MAAM,KAAKuV,UAAUvV,MAAM,GAAG;AAC1CgX,QAAAA,OAAMjV,SAAS;AACf;AAAA,MAAA;AAGEA,UAAAA,UAAUnG,SAAS,cAAc;AAC7B,QAAAob,OAAA;AAAA,UACJ,GAAGjV;AAAAA,UACHsY,YAAY;AAAA,YACV,GAAGtY,UAAUsY;AAAAA,YACb/a,MAAM0W,YAAYkB,YAAY,EAAE3G,QAAQwB,aAAa;AAAA,UAAA;AAAA,QACvD,CACD;AAED;AAAA,MAAA;AAGEhQ,UAAAA,UAAUnG,SAAS,iBACjB,CAACsE,OAAO6iB,SAAShhB,UAAUgM,IAAI,GAAG;AAC9B,QAAAiJ,OAAA;AAAA,UACJ,GAAGjV;AAAAA,UACHgM,MAAM;AAAA,YACJ,GAAGhM,UAAUgM;AAAAA,YACbzO,MAAM0W,YAAYkB,YAAY,EAAE3G,QAAQwB,aAAa;AAAA,UAAA;AAAA,QACvD,CACD;AAED;AAAA,MAAA;AAIJiF,MAAAA,OAAMjV,SAAS;AAAA,IAAA,GAGjB/B,OAAO8iB,gBAAiBpH,CAAU,UAAA;AAC1B,YAAA,CAAC3N,MAAM3O,IAAI,IAAIsc;AACjBjb,UAAAA,UAAQC,UAAUqN,IAAI,KAAKA,KAAKxO,UAAU8D,YAAY7G,MAAMd,MAAM;AAEhE,YAAA,CAACqS,KAAKzO,MAAM;AACd0W,sBAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,YAACV,MAAM0W,YAAYkB,YAAY,EAAE3G,QAAQwB,aAAa;AAAA,UAAA,GACtD;AAAA,YAAC3R,IAAIhB;AAAAA,UAAAA,CACP,GACA4W,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAmB;AAC3C;AAAA,QAAA;AAGF,mBAAW,CAAC+D,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQZ,IAAI;AACrD,cAAA,CAACO,MAAML,MAAM;AACf0W,wBAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,cAACV,MAAM0W,YAAYkB,YAAY,EAAE3G,QAAQwB,aAAa;AAAA,YAAA,GACtD;AAAA,cAAC3R,IAAIX;AAAAA,YAAAA,CACP,GACAuW,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAmB;AAC3C;AAAA,UAAA;AAAA,MACF;AAGJknB,oBAAcpH,KAAK;AAAA,IAAA,GAGd1b;AAAAA,EACT;AACF;AClEA,MAAMnB,UAAQC,cAAc,cAAc,GACpCmkB,eAAepkB,QAAMG,WAAW;AAK/B,SAASkkB,iBACd7f,aAC4D;AACrD,SAAA,CAACrD,QAAiCkR,UAA0B;AACjE,QAAIiS,UAAU;AAGVF,qBACFpkB,QACE;AAAA;AAAA,wEACF,GACAA,QAAM4K,KAAKC,UAAUwH,OAAO,MAAM,CAAC,CAAC;AAGlC,QAAA;AACF,cAAQA,MAAMtV,MAAI;AAAA,QAChB,KAAK;AACOwnB,oBAAAA,YAAYpjB,QAAQkR,OAAO7N,WAAW;AAChD;AAAA,QACF,KAAK;AACOggB,oBAAAA,WAAWrjB,QAAQkR,KAAK;AAClC;AAAA,QACF,KAAK;AACOoS,oBAAAA,SAAStjB,QAAQkR,KAAK;AAChC;AAAA,QACF,KAAK;AACO8O,oBAAAA,eAAehgB,QAAQkR,KAAK;AACtC;AAAA,QACF;AACQrS,kBAAA,mBAAmBqS,MAAMtV,IAAI;AAAA,MAAA;AAAA,aAEhCgd,KAAK;AACZ+E,cAAQN,MAAMzE,GAAG;AAAA,IAAA;AAGZuK,WAAAA;AAAAA,EACT;AACF;AAWgBnD,SAAAA,eACdhgB,QAIAkR,OACS;AACH,QAAA;AAAA,IAAC1U;AAAAA,IAAOmD;AAAAA,IAAOF;AAAAA,EAAa8jB,IAAAA,0BAChCvjB,QACAkR,MAAM9R,IACR;AACA,MAAI,CAAC5C;AACHqC,WAAAA,QAAM,iBAAiB,GAChB;AAEL,MAAA,CAACc,SAAS,CAACF;AACbZ,WAAAA,QAAM,iBAAiB,GAChB;AASL,MAAA,EANFrC,SACAwD,OAAOie,YAAYzhB,KAAK,KACxB0U,MAAM9R,KAAK/B,WAAW,KACtB6T,MAAM9R,KAAK,CAAC,MAAM,cAClB8R,MAAM9R,KAAK,CAAC,MAAM,WAEa,CAACwF,KAAKC,OAAOlF,KAAK;AAC1C,WAAA;AAGHkR,QAAAA,UAAU0I,MAAWrI,MAAM9T,KAAK,GAChC,CAAComB,QAAQ,IAAIC,MAA2B5S,SAASlR,MAAMgD,MAAM;AAAA,IACjE+gB,uBAAuB;AAAA,EAAA,CACxB,GACK7J,SAAO8J,kBAAkBC,KAASjkB,MAAMgD,MAAM6gB,QAAQ,GAAG,CAAC;AAEhEK,aAAW7jB,QAAQ,QAAQ;AAC3B,MAAIqB,SAAS;AACF,aAAA,CAAC4V,IAAItU,IAAI,KAAKkX;AACnB5C,WAAO8C,eACT/Z,OAAOgX,MAAM;AAAA,MAACpb,MAAM;AAAA,MAAewD,MAAMK;AAAAA,MAAW4B;AAAAA,MAAQsB;AAAAA,IAAAA,CAAK,GACjEtB,UAAUsB,KAAKtF,UACN4Z,OAAO+C,cAChBha,OAAOgX,MAAM;AAAA,MAACpb,MAAM;AAAA,MAAewD,MAAMK;AAAAA,MAAW4B;AAAAA,MAAgBsB;AAAAA,IAAK,CAAA,IAChEsU,OAAOgD,eAChB5Y,UAAUsB,KAAKtF;AAGR2C,SAAAA,WAAAA,QAAQ,OAAO,GAEnB;AACT;AAEA,SAASojB,YACPpjB,QACAkR,OACA7N,aACA;AACM,QAAA;AAAA,IACJ7G,OAAOoM;AAAAA,IACPjJ,OAAOgiB;AAAAA,IACPxiB,WAAW2kB;AAAAA,IACXrkB,WAAWskB;AAAAA,EACTR,IAAAA,0BAA0BvjB,QAAQkR,MAAM9R,IAAI;AAC5C,MAAA,CAACwJ,eAAe,CAACkb;AACnBjlB,WAAAA,QAAM,iBAAiB,GAChB;AAET,MAAIqS,MAAM9R,KAAK/B,SAAS,KAAK6T,MAAM9R,KAAK,CAAC,MAAM;AAC7CP,WAAAA,QAAM,qCAAqC,GACpC;AAGLqS,MAAAA,MAAM9R,KAAK/B,WAAW,GAAG;AACrB,UAAA;AAAA,MAAC6b,OAAAA;AAAAA,MAAO/N,UAAAA;AAAAA,IAAY+F,IAAAA,OACpB8S,iBAAiB5gB,aACrB8V,QACA;AAAA,MAAC7V;AAAAA,IACDgC,GAAAA,qBAAqB3G,IAAIsB,MAAM,CACjC,GACMikB,mBAAmBH,gBAAgB,CAAC,GACpCI,iBACJ/Y,cAAa,UAAU8Y,mBAAmB,IAAIA;AAC1C,WAAAplB,QAAA,6BAA6BqlB,cAAa,GAAG,GACnDL,WAAW7jB,QAAQ,QAAQ,GAC3B4J,WAAW2S,YAAYvc,QAAQgkB,gBAAgB;AAAA,MAAC5jB,IAAI,CAAC8jB,cAAa;AAAA,IAAE,CAAA,GACpEL,WAAW7jB,QAAQ,OAAO,GACnB;AAAA,EAAA;AAGH,QAAA;AAAA,IAACkZ;AAAAA,IAAO/N;AAAAA,EAAAA,IAAY+F;AACtB,MAAA,CAACyQ,eAAe,CAACoC;AACnBllB,WAAAA,QAAM,iBAAiB,GAChB;AAEHslB,QAAAA,mBACJvb,eACAxF,aACE,CAAC;AAAA,IAAC,GAAGwF;AAAAA,IAAa9I,UAAUoZ;AAAAA,EAAAA,CAA6B,GACzD;AAAA,IAAC7V;AAAAA,EAAAA,GACDgC,qBAAqB3G,IAAIsB,MAAM,CACjC,GACIokB,mBAAmBL,gBAAgB,CAAC,GACpCG,gBACJ/Y,aAAa,UAAUiZ,mBAAmB,IAAIA,kBAC1CC,kBAAkB,CAACN,gBAAgB,CAAC,GAAGG,aAAa;AACpD,SAAArlB,QAAA,8BAA8BwlB,eAAe,EAAE,GACrDR,WAAW7jB,QAAQ,QAAQ,GACvBmkB,oBAAoB1jB,UAAQC,UAAUyjB,iBAAiB,CAAC,CAAC,KAC3Dva,WAAW2S,YAAYvc,QAAQmkB,iBAAiB,CAAC,EAAErkB,UAAU;AAAA,IAC3DM,IAAIikB;AAAAA,EACL,CAAA,GAEHR,WAAW7jB,QAAQ,OAAO,GACnB;AACT;AAEA,SAASsjB,SAAStjB,QAAiCkR,OAAiB;AAClE,MAAI9T,QAAQ8T,MAAM9T;AACd,SAAO8T,MAAM9R,KAAK,CAAC,KAAM,aAC3BhC,QAAQ,CAAA,GACRA,MAAM8T,MAAM9R,KAAK,CAAC,CAAC,IAAI8R,MAAM9T;AAEzB,QAAA;AAAA,IAACZ;AAAAA,IAAO2C;AAAAA,IAAWQ;AAAAA,IAAOF;AAAAA,EAAa8jB,IAAAA,0BAC3CvjB,QACAkR,MAAM9R,IACR;AAEA,MAAI,CAAC5C;AACHqC,WAAAA,QAAM,iBAAiB,GAChB;AAEHof,QAAAA,cAAcje,OAAOie,YAAYzhB,KAAK;AAGxCyhB,MAAAA,eAAe/M,MAAM9R,KAAK/B,SAAS,KAAK6T,MAAM9R,KAAK,CAAC,MAAM;AAC5DP,WAAAA,QAAM,6BAA6B,GAC5B;AAMT,MAHAglB,WAAW7jB,QAAQ,QAAQ,GAGvBie,eAAete,SAASF,WAAW;AACrC,QAAImF,KAAKC,OAAOzH,KAAK,KAAKwH,KAAKC,OAAOlF,KAAK,GAAG;AAC5C,YAAM2kB,UAAU3kB,MAAMgD;AACNvF,YAAMuF,SACN2hB,YACdzlB,QAAM,uBAAuB,GAC7BmB,OAAOgX,MAAM;AAAA,QACXpb,MAAM;AAAA,QACNwD,MAAMK;AAAAA,QACN4B,QAAQ;AAAA,QACRsB,MAAM2hB;AAAAA,MAAAA,CACP,GACDtkB,OAAOgX,MAAM;AAAA,QACXpb,MAAM;AAAA,QACNwD,MAAMK;AAAAA,QACN4B,QAAQ;AAAA,QACRsB,MAAMvF,MAAMuF;AAAAA,MAAAA,CACb,GAGD3C,OAAO+J;IAEX;AACQlL,cAAA,2BAA2B,GACjCmB,OAAOgX,MAAM;AAAA,QACXpb,MAAM;AAAA,QACNwD,MAAMK;AAAAA,QACN4a,YAAY,CAAC;AAAA,QACbE,eAAend;AAAAA,MAAAA,CAChB;AAEI,WAAA;AAAA,EAAA,WACEqD,UAAQC,UAAUlE,KAAK,KAAK0U,MAAM9R,KAAK/B,WAAW,KAAK8B,WAAW;AAC3EN,YAAM,wBAAwB;AACxB,UAAA;AAAA,MAACiB;AAAAA,MAAU,GAAGykB;AAAAA,QAAYnnB,OAC1B;AAAA,MAAC0C,UAAU0kB;AAAAA,MAAc,GAAGC;AAAAA,QAAYjoB,SAAS;AAAA,MAACsD,UAAUU;AAAAA,IAAS;AAE3ER,WAAOgX,MAAM;AAAA,MACXpb,MAAM;AAAA,MACNwD,MAAMD;AAAAA,MACNkb,YAAY;AAAA,QAAC,GAAGoK;AAAAA,MAAQ;AAAA,MACxBlK,eAAegK;AAAAA,IAAAA,CAChB,GAGD1lB,QAAM,kBAAkB,GACxBrC,MAAMsD,SAASyW,QAAQ,CAACmO,IAAGrQ,WAAW;AACpCrU,aAAOgX,MAAM;AAAA,QACXpb,MAAM;AAAA,QACNwD,MAAMD,UAAU4B,OAAOvE,MAAMsD,SAASzC,SAAS,IAAIgX,MAAM;AAAA,QACzDtG,MAAM2W;AAAAA,MAAAA,CACP;AAAA,IAAA,CACF,GACG9kB,MAAMC,QAAQC,QAAQ,KACxBA,SAASyW,QAAQ,CAACmO,IAAGrQ,WAAW;AAC9BrU,aAAOgX,MAAM;AAAA,QACXpb,MAAM;AAAA,QACNwD,MAAMD,UAAU4B,OAAOsT,MAAM;AAAA,QAC7BtG,MAAM2W;AAAAA,MAAAA,CACP;AAAA,IAAA,CACF;AAAA,EAAA,WAEMloB,SAAS,WAAWA,OAAO;AAC9BmoB,UAAAA,SAASC,SAAS,CAACpoB,MAAMY,KAAK,GAAG,CAAC8T,KAAK,CAAC,EAAE,CAAC;AACjDtH,WAAAA,WAAWoU,SAAShe,QAAQ;AAAA,MAAC,GAAGxD;AAAAA,MAAOY,OAAOunB;AAAAA,IAAAA,GAAS;AAAA,MAACvkB,IAAIjB;AAAAA,IAAU,CAAA,GAC/D;AAAA,EAAA;AAEEa,SAAAA,WAAAA,QAAQ,OAAO,GACnB;AACT;AAEA,SAASqjB,WAAWrjB,QAAiCkR,OAAmB;AAElEA,MAAAA,MAAM9R,KAAK/B,WAAW,GAAG;AAC3BwB,YAAM,qBAAqB,GAC3BglB,WAAW7jB,QAAQ,QAAQ;AAC3B,UAAM6kB,oBAAoB7kB,OAAO6B;AACtBgX,WAAAA,WAAAA,SAAS7Y,MAAM,GAC1BA,OAAOF,SAASyW,QAAQ,CAACuO,QAAQjI,MAAM;AACrCjT,iBAAW0S,YAAYtc,QAAQ;AAAA,QAACI,IAAI,CAACyc,CAAC;AAAA,MAAA,CAAE;AAAA,IACzC,CAAA,GACDjT,WAAW2S,YAAYvc,QAAQA,OAAOwc,mBAAmB;AAAA,MAACpgB,YAAY,CAAA;AAAA,IAAG,CAAA,CAAC,GACtEyoB,qBACFjb,WAAW6S,OAAOzc,QAAQ;AAAA,MACxBkB,QAAQ;AAAA,QAAC9B,MAAM,CAAC,GAAG,CAAC;AAAA,QAAGiC,QAAQ;AAAA,MAAC;AAAA,MAChCF,OAAO;AAAA,QAAC/B,MAAM,CAAC,GAAG,CAAC;AAAA,QAAGiC,QAAQ;AAAA,MAAA;AAAA,IAAC,CAChC,GAGHrB,OAAO+J,YACP8Z,WAAW7jB,QAAQ,OAAO,GACnB;AAAA,EAAA;AAEH,QAAA;AAAA,IAACxD;AAAAA,IAAO2C;AAAAA,IAAWQ;AAAAA,IAAOF;AAAAA,EAAa8jB,IAAAA,0BAC3CvjB,QACAkR,MAAM9R,IACR;AAGI8R,MAAAA,MAAM9R,KAAK/B,WAAW,GAAG;AACvB,QAAA,CAACb,SAAS,CAAC2C;AACbN,aAAAA,QAAM,iBAAiB,GAChB;AAEH2b,UAAAA,aAAarb,UAAU,CAAC;AACxB,WAAAN,QAAA,2BAA2B2b,UAAU,GAAG,GAC9CqJ,WAAW7jB,QAAQ,QAAQ,GAE3B4J,WAAW0S,YAAYtc,QAAQ;AAAA,MAACI,IAAI,CAACoa,UAAU;AAAA,IAAE,CAAA,GACjDqJ,WAAW7jB,QAAQ,OAAO,GACnB;AAAA,EAAA;AAKPA,SAAAA,OAAOie,YAAYzhB,KAAK,KACxB0U,MAAM9R,KAAK,CAAC,MAAM,cAClB8R,MAAM9R,KAAK/B,WAAW,IAElB,CAACsC,SAAS,CAACF,aACbZ,QAAM,iBAAiB,GAChB,OAETA,QAAM,2BAA2B4K,KAAKC,UAAUjK,SAAS,CAAC,EAAE,GAC5DokB,WAAW7jB,QAAQ,QAAQ,GACvBijB,gBACFpkB,QAAM,0BAA0B4K,KAAKC,UAAUjK,SAAS,CAAC,EAAE,GAE7DmK,WAAW0S,YAAYtc,QAAQ;AAAA,IAACI,IAAIX;AAAAA,EAAAA,CAAU,GAC9CokB,WAAW7jB,QAAQ,OAAO,GACnB,MAEF;AACT;AAEA,SAAS+kB,eAAeC,SAA+C;AAC9D,SAAA,OAAOA,WAAY,YAAY,UAAUA;AAClD;AAEA,SAASnB,WACP7jB,QAIAilB,WACA;AACKhC,mBAILpkB,QAAM,YAAYomB,SAAS,KAAKxb,KAAKC,UAAU1J,OAAOF,UAAU,MAAM,CAAC,CAAC,GACxEjB,QAAM,aAAaomB,SAAS,MAAMxb,KAAKC,UAAU1J,OAAO6B,WAAW,MAAM,CAAC,CAAC;AAC7E;AAEA,SAASqjB,kBACPllB,QAIAZ,MACwC;AACxC,MAAIob,aAAa;AACjB,QAAMhe,QAAQwD,OAAOF,SAASzE,KAAK,CAAC0S,MAAkB0E,UAAkB;AACtE,UAAM0S,UAAUJ,eAAe3lB,KAAK,CAAC,CAAC,IAClC2O,KAAKzO,SAASF,KAAK,CAAC,EAAEE,OACtBmT,UAAUrT,KAAK,CAAC;AAChB+lB,WAAAA,YACF3K,aAAa/H,QAER0S;AAAAA,EAAAA,CACR;AACD,SAAK3oB,QAGE;AAAA,IAACA;AAAAA,IAAO4C,MAAM,CAACob,UAAU;AAAA,EAAA,IAFvB,CAAC;AAGZ;AAEA,SAAS+I,0BACPvjB,QAIAZ,MAMA;AACM,QAAA;AAAA,IAAC5C;AAAAA,IAAO4C,MAAMD;AAAAA,EAAAA,IAAa+lB,kBAAkBllB,QAAQZ,IAAI;AAC/D,MAAI,EAAEqB,UAAQC,UAAUlE,KAAK,KAAK4C,KAAK,CAAC,MAAM;AACrC,WAAA;AAAA,MAAC5C;AAAAA,MAAO2C;AAAAA,MAAWQ,OAAOa;AAAAA,MAAWf,WAAWe;AAAAA,IAAS;AAElE,MAAII,aAAa;AACjB,QAAMjB,QAAQnD,MAAMsD,SAASzE,KAAK,CAAC0S,MAAM0E,UAAkB;AACzD,UAAM0S,UAAUJ,eAAe3lB,KAAK,CAAC,CAAC,IAClC2O,KAAKzO,SAASF,KAAK,CAAC,EAAEE,OACtBmT,UAAUrT,KAAK,CAAC;AAChB+lB,WAAAA,YACFvkB,aAAa6R,QAER0S;AAAAA,EAAAA,CACR;AACD,SAAKxlB,QAGE;AAAA,IACLnD;AAAAA,IACAmD;AAAAA,IACAR;AAAAA,IACAM,WAAWN,WAAW4B,OAAOH,UAAU;AAAA,EAAA,IANhC;AAAA,IAACpE;AAAAA,IAAO2C;AAAAA,IAAWQ,OAAOa;AAAAA,IAAWf,WAAWe;AAAAA,EAAS;AAQpE;AC/ZA,MAAM3B,UAAQC,cAAc,oBAAoB;AAqDzC,SAASsmB,kBAAkB;AAAA,EAChCpP;AAAAA,EACAqP;AAAAA,EACAhiB;AAAAA,EACA+S;AACO,GAAiE;AAGpEkP,MAAAA;AAEEC,QAAAA,aAAarC,iBAAiB7f,WAAW;AAE/C,SAAO,SAAqBrD,QAAiC;AAC3D+E,iCAA6B8C,IAAI7H,QAAQ,EAAK,GAC9C4U,SAAS/M,IAAI7H,QAAQ,EAAI,GACzBslB,mBAAmB,CAAC,GAAGtlB,OAAOF,QAAQ;AAEhC,UAAA;AAAA,MAACkX,OAAAA;AAAAA,IAAAA,IAAShX;AAChB,QAAIwlB,kBAA2B,CAAE;AAEjC,UAAMC,8BAA8BA,MAAM;AACxC,UAAID,gBAAgBnoB,WAAW;AAC7B;AAEF,YAAMwT,UAAU2U;AAChBA,wBAAkB,CAAE;AACpB,UAAIrC,UAAU;AACd3O,wBAAkBxU,QAAQ,MAAM;AACvByY,eAAAA,mBAAmBzY,QAAQ,MAAM;AACtC6U,0BAAgB7U,QAAQ,MAAM;AAC5B0Y,0BAAc1Y,QAAQ,MAAM;AAC1B6Q,sBAAQ0F,QAASrF,CAAU,UAAA;AACrBrS,wBAAMG,WACRH,QAAM,yBAAyB4K,KAAKC,UAAUwH,KAAK,CAAC,EAAE,GACxDiS,UAAUoC,WAAWvlB,QAAQkR,KAAK;AAAA,cAAA,CACnC;AAAA,YAAA,CACF;AAAA,UAAA,CACF;AAAA,QAAA,CACF,GACGiS,YACFnjB,OAAO2Y,UAAU,GACjB3Y,OAAO+J;MAAS,CAEnB;AAAA,IACH,GAEM2b,gBAAgBA,CAAC;AAAA,MAAC7U;AAAAA,IAAAA,MAAiC;AACvD,YAAMsF,gBAAgBtF,QAAQ7U,OAAQ2pB,CAAMA,MAAAA,EAAEnP,WAAW,OAAO;AAC5DL,oBAAc9Y,WAAW,MAG7BmoB,kBAAkBA,gBAAgBzkB,OAAOoV,aAAa,GACtDsP;IACF;AAEArP,WAAAA,cAAc3T,KAAK,MAAM;AACvB5D,cAAM,+BAA+B;AACrC,YAAMwX,MAAML,YAAYtE,GAAG,WAAWgU,aAAa;AACnD,aAAO,MAAM;AACL7mB,gBAAA,iCAAiC,GACvCwX,IAAIU,YAAY;AAAA,MAClB;AAAA,IACD,CAAA,GAED/W,OAAOgX,QAASjV,CAAwC,cAAA;AACtD,UAAI8O,UAAmB,CAAE;AAGzByU,yBAAmBtlB,OAAOF;AAEpB8lB,YAAAA,iBAAiBjhB,qBAAqB2gB,kBAAkBjiB,WAAW;AAGzE2T,MAAAA,OAAMjV,SAAS;AAEf,YAAM8jB,gBAAgBlhB,qBAAqB3E,OAAOF,UAAUuD,WAAW;AAEnE,UAAA,CAACyR,WAAW9U,MAAM;AAChBijB,eAKGjjB;AAYT,cAPE4lB,kBACA,CAACC,iBACD9jB,UAAUnG,SAAS,mBAEnBiV,QAAQpO,KAAK6Q,OAAOgS,kBAAkB,UAAU,CAAC,CAAC,CAAC,CAAC,GAG9CvjB,UAAUnG,MAAI;AAAA,QACpB,KAAK;AACO,oBAAA,CACR,GAAGiV,SACH,GAAGwU,eAAe5F,gBAChBzf,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAepF,gBAChBjgB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAelE,gBAChBnhB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAevE,eAChB9gB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAezE,gBAChB5gB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAejF,aAAapgB,QAAQ+B,WAAWujB,gBAAgB,CAAC;AAErE;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAehE,eAChBrhB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,QACF,KAAK;AACO,oBAAA,CACR,GAAGzU,SACH,GAAGwU,eAAe3D,cAChB1hB,QACA+B,WACAujB,gBACF,CAAC;AAEH;AAAA,MACF;AAMA,aAAA,CAACM,kBACDC,iBACA,CAAC,cAAc,YAAY,eAAe,aAAa,EAAEhT,SACvD9Q,UAAUnG,IACZ,MAEAiV,UAAU,CAAC,GAAGA,SAASuB,MAAM,EAAE,CAAC,GAChC4D,YAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsf,eAAehX,eACbohB,kBACAjiB,YAAY7G,MAAMd,MAClB4J,qBAAqB5G,IAAIsB,MAAM,CACjC;AAAA,MAAA,CACD,IAIC4lB,kBAAkB/U,QAAQxT,SAAS,MACrCwT,UAAU,CAACwC,aAAa,IAAI,CAAA,CAAE,GAAG,GAAGxC,OAAO,IAIzCA,QAAQxT,SAAS,KACnBwT,QAAQ0F,QAASrF,CAAU,UAAA;AACzB8E,oBAAYmJ,KAAK;AAAA,UACfvjB,MAAM;AAAA,UACNsV,OAAO;AAAA,YAAC,GAAGA;AAAAA,YAAOsF,QAAQ;AAAA,UAAA;AAAA,QAAO,CAClC;AAAA,MACF,CAAA,GAEIxW;AAAAA,IAAAA,GAEFA;AAAAA,EACT;AACF;ACpSA,MAAMnB,UAAQC,cAAc,6BAA6B;AAMlD,SAASgnB,2BACd9P,aAC8D;AAC9D,SAAO,SACLhW,QACyB;AACnB,UAAA;AAAA,MAACgX,OAAAA;AAAAA,IAAAA,IAAShX;AAEhBA,WAAAA,OAAOgX,QAASC,CAAO,OAAA;AACjBjB,UAAAA,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC,aAAa;AAAA,MAAA,CAAY,GAAG;AACjEH,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAOEtC,UAAAA,mBAAmB3U,MAAM,GAAG;AAC9BgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAOF,UAAI7B,UAAUpV,MAAM,KAAKuV,UAAUvV,MAAM,GAAG;AAC1CgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAGEA,UAAAA,GAAGrb,SAAS,eAAe;AAC7B,cAAMmS,OAAOkJ,GAAGlJ;AACZkJ,YAAAA,GAAG7X,KAAK,CAAC,MAAM,KAAKc,OAAOS,OAAOX,QAAQ+N,IAAI,GAAG;AAEnD,gBAAMgY,WAAWxc,KAAKyc,KAAK/O,GAAG7X,IAAI;AAE7BY,iBAAOF,SAASimB,SAAS,CAAC,CAAC,MAC9BlnB,QAAM,0BAA0B,GAChCqB,OAAO+lB,WACLjmB,QACAA,OAAOwc,mBAAmB;AAAA,YAACpgB,YAAY,CAAA;AAAA,UAAG,CAAA,CAC5C;AAAA,QAAA;AAAA,MAEJ;AAEF4a,MAAAA,OAAMC,EAAE;AAAA,IAAA,GAEHjX;AAAAA,EACT;AACF;ACzDA,MAAMnB,UAAQC,cAAc,mCAAmC;AAE/ConB,SAAAA,iCACdlQ,aACAvX,OAC8D;AAC9D,QAAM0nB,eAAe1nB,MAAMvC,OAAO,CAAC,EAAEkB;AACrC,SAAO,SACL4C,QACyB;AAGnB,UAAA;AAAA,MAAC8iB;AAAAA,IAAAA,IAAiB9iB;AAExBA,WAAAA,OAAO8iB,gBAAiBsD,CAAc,cAAA;AAC9B,YAAA,CAAA,EAAGhnB,IAAI,IAAIgnB;AAEjB,iBAAWnP,MAAMjX,OAAOoX;AACtB,YACEH,GAAGrb,SAAS,gBACZqb,GAAG7X,KAAK/B,WAAW,KACnB2C,OAAOie,YAAYhH,GAAGoD,UAAU,KAChCpD,GAAGoD,WAAWld,UAAUgpB,gBACxBlP,GAAG7X,KAAK,CAAC,MAAMA,KAAK,CAAC,KACrB,CAACmK,KAAKrH,OAAO9C,MAAM6X,GAAG7X,IAAI,GAC1B;AACA,gBAAM,CAACO,KAAK,IAAIO,OAAO6N,KAAK/N,QAAQ,CAACiX,GAAG7X,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;AACvD,cAAIinB,KAAUxhB,OAAOlF,KAAK,KAAKA,MAAMgD,SAAS,IAAI;AAChD9D,oBAAM,6BAA6BsnB,YAAY,UAAUlP,EAAE,GAC3DjB,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,cAAC7C,OAAOgpB;AAAAA,YAAAA,GACR;AAAA,cAAC/lB,IAAI,CAAC6W,GAAG7X,KAAK,CAAC,IAAI,CAAC;AAAA,cAAGsf,OAAO;AAAA,YAAA,CAChC,GACA1I,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAmB;AAC3C;AAAA,UAAA;AAAA,QACF;AAIJknB,oBAAcsD,SAAS;AAAA,IAAA,GAGlBpmB;AAAAA,EACT;AACF;ACtCO,SAASsmB,mBACdvY,MAC0B;AAExB,SAAAA,KAAKxO,oBACL,UAAUwO,QACV,OAAOA,KAAKpL,QAAS,oBACboL,KAAK7P,QAAU,OACpB0B,MAAMC,QAAQkO,KAAK7P,KAAK,KAAK6P,KAAK7P,MAAMgc,MAAOlG,UAAS,OAAOA,QAAS,QAAQ;AAEvF;AAQO,SAASuS,oBACdxY,MAC2B;AAC3B;AAAA;AAAA;AAAA,IAGE,OAAOA,KAAKxO,SAAU;AAAA,IAEtBwO,KAAKxO,MAAM,CAAC,MAAM;AAAA,KAEjB,EAAE,cAAcwO,SACdA,CAAAA,KAAKnK,YACLhE,MAAMC,QAAQkO,KAAKnK,QAAQ;AAAA,IAE1BmK,KAAKnK,SAASsW,MAAOvG,SAAQ,OAAOA,IAAIrU,QAAS,QAAQ;AAAA,IAE7D,cAAcyO,QACdnO,MAAMC,QAAQkO,KAAKjO,QAAQ;AAAA,IAE3BiO,KAAKjO,SAASoa,MAAOva,WAAU,OAAOA,SAAU,YAAY,WAAWA,KAAK;AAAA;AAEhF;ACnDO,SAAS6mB,gBAAgB;AAAA,EAC9BxmB;AAAAA,EACAb;AAAAA,EACAsnB;AAKF,GAAiC;AAC3BC,MAAAA;AAEJ,aAAW,CAAC/mB,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQb,WAAW;AAAA,IAChEqZ,SAAS;AAAA,EAAA,CACV;AACMxY,QAAAA,OAAO4f,WAAWjgB,KAAK,KAIxB4J,KAAKD,SAAS7J,WAAWgnB,QAAQ,GAAG;AACvB9mB,qBAAAA;AACf;AAAA,IAAA;AAIG+mB,SAAAA;AACT;AAEO,SAASC,YAAY;AAAA,EAC1B3mB;AAAAA,EACAb;AAAAA,EACAsnB;AAKF,GAAiC;AAC3BG,MAAAA;AAEJ,aAAW,CAACjnB,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQb,SAAS;AACzDa,QAAAA,OAAO4f,WAAWjgB,KAAK,KAIxB4J,KAAKsd,QAAQpnB,WAAWgnB,QAAQ,GAAG;AAC1B9mB,iBAAAA;AACX;AAAA,IAAA;AAIGinB,SAAAA;AACT;ACjCA,MAAM/nB,UAAQC,cAAc,kCAAkC;AAE9CgoB,SAAAA,gCACd9Q,aACAvX,OAC8D;AAC9D,SAAO,SAAmCuB,QAAiC;AACnE,UAAA;AAAA,MAACgX,OAAAA;AAAAA,MAAO8L;AAAAA,IAAAA,IAAiB9iB,QACzB5D,aAAaqC,MAAMrC,WAAWuB,IAAK4G,CAAAA,MAAMA,EAAEnH,KAAK;AAGtD4C,WAAAA,OAAO8iB,gBAAiBsD,CAAc,cAAA;AAC9B,YAAA,CAACrY,MAAM3O,IAAI,IAAIgnB;AAEjBpmB,UAAAA,OAAOie,YAAYlQ,IAAI,GAAG;AAC5B,cAAMjO,WAAWkjB,KAAKljB,SAASE,QAAQZ,IAAI;AAE3C,mBAAW,CAACO,OAAOF,SAAS,KAAKK,UAAU;AACzC,gBAAMinB,WAAWhZ,KAAKjO,SAASL,UAAU,CAAC,IAAI,CAAC;AAG7CO,cAAAA,OAAO4f,WAAWjgB,KAAK,KACvBK,OAAO4f,WAAWmH,QAAQ,KAC1BpnB,MAAMzB,OAAOgc,MAAOlG,CAAS+S,SAAAA,SAAS7oB,OAAO2U,SAASmB,IAAI,CAAC,KAC3D+S,SAAS7oB,OAAOgc,MAAOlG,CAASrU,SAAAA,MAAMzB,OAAO2U,SAASmB,IAAI,CAAC,GAC3D;AACAnV,oBACE,iBACA4K,KAAKC,UAAU/J,OAAO,MAAM,CAAC,GAC7B8J,KAAKC,UAAUqd,UAAU,MAAM,CAAC,CAClC,GACA/Q,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAc,GACtCgO,WAAWod,WAAWhnB,QAAQ;AAAA,cAC5BI,IAAI,CAACX,UAAU,CAAC,GAAGA,UAAU,CAAC,IAAI,CAAC;AAAA,cACnCif,OAAO;AAAA,YAAA,CACR,GACD1I,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAmB;AAC3C;AAAA,UAAA;AAAA,QACF;AAAA,MACF;AAMEoE,UAAAA,OAAOie,YAAYlQ,IAAI,KAAK,CAACnO,MAAMC,QAAQkO,KAAKnK,QAAQ,GAAG;AACvD/E,gBAAA,gCAAgC,GACtCmX,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAc,GACtCgO,WAAWoU,SAAShe,QAAQ;AAAA,UAAC4D,UAAU,CAAA;AAAA,QAAA,GAAK;AAAA,UAACxD,IAAIhB;AAAAA,QAAAA,CAAK,GACtD4W,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAmB;AAC3C;AAAA,MAAA;AAMEoE,UAAAA,OAAO4f,WAAW7R,IAAI,KAAK,CAACnO,MAAMC,QAAQkO,KAAK7P,KAAK,GAAG;AACnDW,gBAAA,4BAA4B,GAClCmX,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAc,GACtCgO,WAAWoU,SAAShe,QAAQ;AAAA,UAAC9B,OAAO,CAAA;AAAA,QAAA,GAAK;AAAA,UAACkC,IAAIhB;AAAAA,QAAAA,CAAK,GACnD4W,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAmB;AAC3C;AAAA,MAAA;AAMEoE,UAAAA,OAAO4f,WAAW7R,IAAI,GAAG;AAC3B,cAAM5O,YAAYoK,KAAK0d,OAAO7nB,IAAI,GAC5B,CAAC5C,KAAK,IAAI0D,OAAO6N,KAAK/N,QAAQb,SAAS,GACvC/C,cAAaqC,MAAMrC,WAAWuB,IAAKQ,CAAcA,cAAAA,UAAUf,KAAK,GAChEP,cAAckR,KAAK7P,OAAOlC,OAC7BgY,CAAS,SAAA,CAAC5X,YAAWyW,SAASmB,IAAI,CACrC;AAEIhU,YAAAA,OAAOie,YAAYzhB,KAAK,KACtBuR,KAAKpL,SAAS,MAAM9F,eAAeA,YAAYQ,SAAS,GAAG;AACvDwB,kBAAA,2CAA2C,GACjDmX,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,YAAC9B,OAAO6P,KAAK7P,OAAOlC,OAAQgY,UAAS5X,YAAWyW,SAASmB,IAAI,CAAC;AAAA,UAAA,GAC9D;AAAA,YAAC5T,IAAIhB;AAAAA,UAAAA,CACP,GACA4W,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAmB;AAC3C;AAAA,QAAA;AAAA,MACF;AAOAoE,UAAAA,OAAOie,YAAYlQ,IAAI,GAAG;AAC5B,cAAM3R,cAAaqC,MAAMrC,WAAWuB,IAAKQ,CAAAA,cAAcA,UAAUf,KAAK;AAEtE,mBAAW,CAACuC,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQZ,IAAI;AACrDY,cAAAA,OAAO4f,WAAWjgB,KAAK,GAAG;AACtBzB,kBAAAA,QAAQyB,MAAMzB,SAAS,IACvBgpB,sBAAsBhpB,MAAMlC,OAAQgY,CAAAA,SAEtC,CAAC5X,YAAWyW,SAASmB,IAAI,KACzB,CAACjG,KAAKnK,UAAUvI,KAAMsY,CAAQA,QAAAA,IAAIrU,SAAS0U,IAAI,CAElD;AAEGkT,gBAAAA,oBAAoB7pB,SAAS,GAAG;AAC5BwB,sBAAA,8CAA8C,GACpDmX,YAAYmJ,KAAK;AAAA,gBAACvjB,MAAM;AAAA,cAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,gBACE9B,OAAOA,MAAMlC,OACVgY,CAAAA,SAAS,CAACkT,oBAAoBrU,SAASmB,IAAI,CAC9C;AAAA,cAAA,GAEF;AAAA,gBAAC5T,IAAIX;AAAAA,cAAAA,CACP,GACAuW,YAAYmJ,KAAK;AAAA,gBAACvjB,MAAM;AAAA,cAAA,CAAmB;AAC3C;AAAA,YAAA;AAAA,UACF;AAAA,MACF;AAOAoE,UAAAA,OAAO4f,WAAW7R,IAAI,GAAG;AACrB5O,cAAAA,YAAYoK,KAAK0d,OAAO7nB,IAAI,GAC5B,CAAC5C,KAAK,IAAI0D,OAAO6N,KAAK/N,QAAQb,SAAS;AAEzCa,YAAAA,OAAOie,YAAYzhB,KAAK,GAAG;AAC7B,gBAAMJ,cAAaqC,MAAMrC,WAAWuB,IACjCQ,CAAcA,cAAAA,UAAUf,KAC3B,GACMc,QAAQ6P,KAAK7P,SAAS,IACtBgpB,sBAAsBhpB,MAAMlC,OAAQgY,CAAAA,SAEtC,CAAC5X,YAAWyW,SAASmB,IAAI,KACzB,CAACxX,MAAMoH,UAAUvI,KAAMsY,CAAAA,QAAQA,IAAIrU,SAAS0U,IAAI,CAEnD;AAEGkT,cAAAA,oBAAoB7pB,SAAS,GAAG;AAC5BwB,oBAAA,8CAA8C,GACpDmX,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,cACE9B,OAAOA,MAAMlC,OACVgY,CAAAA,SAAS,CAACkT,oBAAoBrU,SAASmB,IAAI,CAC9C;AAAA,YAAA,GAEF;AAAA,cAAC5T,IAAIhB;AAAAA,YAAAA,CACP,GACA4W,YAAYmJ,KAAK;AAAA,cAACvjB,MAAM;AAAA,YAAA,CAAmB;AAC3C;AAAA,UAAA;AAAA,QACF;AAAA,MACF;AAIEoE,UAAAA,OAAOie,YAAYlQ,IAAI,GAAG;AACtBnK,cAAAA,WAAWmK,KAAKnK,YAAY,CAAA,GAC5BujB,cAAkBC,oBAAAA,OAClBC,cAAyC,CAAE;AAEjD,mBAAWC,WAAW1jB;AACfujB,sBAAYI,IAAID,QAAQhoB,IAAI,MAC/B6nB,YAAYK,IAAIF,QAAQhoB,IAAI,GAC5B+nB,YAAY5kB,KAAK6kB,OAAO;AAIxB1jB,YAAAA,SAASvG,WAAWgqB,YAAYhqB,QAAQ;AACpCwB,kBAAA,6BAA6B,GACnCmX,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAc,GACtCgO,WAAWoU,SAAShe,QAAQ;AAAA,YAAC4D,UAAUyjB;AAAAA,UAAAA,GAAc;AAAA,YAACjnB,IAAIhB;AAAAA,UAAAA,CAAK,GAC/D4W,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAmB;AAC3C;AAAA,QAAA;AAAA,MACF;AAIF,UACEoE,OAAOie,YAAYlQ,IAAI,KACvB,CAAC/N,OAAOoX,WAAW5E,KAChByE,CAAAA,OACCA,GAAGrb,SAAS,gBACZ,cAAcqb,GAAGoD,cACjBpD,GAAG7X,KAAK/B,WAAW,CACvB,GACA;AACMgqB,cAAAA,eAAetZ,KAAKnK,YAAY,CAAA,GAAI5H,OAAQ2X,CAAAA,QACzC5F,KAAKjO,SAASzE,KAAMsE,CAAAA,UAEvBiF,KAAKC,OAAOlF,KAAK,KACjBC,MAAMC,QAAQF,MAAMzB,KAAK,KACzByB,MAAMzB,MAAM2U,SAASc,IAAIrU,IAAI,CAEhC,CACF;AACD,YAAIyO,KAAKnK,YAAY,CAAC9C,QAAQumB,aAAatZ,KAAKnK,QAAQ,GAAG;AACnD/E,kBAAA,6BAA6B,GACnCmX,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,YACE4D,UAAUyjB;AAAAA,UAAAA,GAEZ;AAAA,YAACjnB,IAAIhB;AAAAA,UAAAA,CACP,GACA4W,YAAYmJ,KAAK;AAAA,YAACvjB,MAAM;AAAA,UAAA,CAAmB;AAC3C;AAAA,QAAA;AAAA,MACF;AAGFknB,oBAAcsD,SAAS;AAAA,IAAA,GAGzBpmB,OAAOgX,QAASC,CAAO,OAAA;AAKjBtC,UAAAA,mBAAmB3U,MAAM,GAAG;AAC9BgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAOF,UAAI7B,UAAUpV,MAAM,KAAKuV,UAAUvV,MAAM,GAAG;AAC1CgX,QAAAA,OAAMC,EAAE;AACR;AAAA,MAAA;AAGEA,UAAAA,GAAGrb,SAAS,mBACAsE,OAAOhC,MAAM8B,MAAM,KAI/BiX,GAAGoD,cACHpD,GAAGsD,iBACHtD,GAAGoD,WAAWnZ,UACd+V,GAAGoD,WAAWlZ,SACd8V,GAAGsD,cAAcrZ,UACjB+V,GAAGsD,cAAcpZ,OACjB;AACMsmB,cAAAA,+BAA+BhmB,MAAMkM,YAAY;AAAA,UACrDzM,QAAQ+V,GAAGoD,WAAWnZ;AAAAA,UACtBC,OAAO8V,GAAGoD,WAAWlZ;AAAAA,QAAAA,CACtB,GACKumB,0BAA0BjmB,MAAMkM,YAAY;AAAA,UAChDzM,QAAQ+V,GAAGsD,cAAcrZ;AAAAA,UACzBC,OAAO8V,GAAGsD,cAAcpZ;AAAAA,QAAAA,CACzB;AAED,YAAIsmB,gCAAgCC,yBAAyB;AAC3D,gBAAMC,YAA0C/nB,MAAMK,KACpDC,OAAOC,MAAMH,QAAQ;AAAA,YACnB4nB,MAAM;AAAA,YACNxnB,IAAI6W,GAAGoD,WAAWlZ;AAAAA,YAClBd,OAAQC,CAAAA,MAAMN,OAAO4f,WAAWtf,CAAC;AAAA,YACjCoe,OAAO;AAAA,UACR,CAAA,CACH,EAAE,CAAC,IAAI,CAAC,GACFmJ,eAA6CjoB,MAAMK,KACvDC,OAAOC,MAAMH,QAAQ;AAAA,YACnB4nB,MAAM;AAAA,YACNxnB,IAAI6W,GAAGsD,cAAcpZ;AAAAA,YACrBd,OAAQC,CAAAA,MAAMN,OAAO4f,WAAWtf,CAAC;AAAA,YACjCoe,OAAO;AAAA,UAAA,CACR,CACH,EAAE,CAAC,IAAI,CAAC,GACFoJ,kBACJH,aACAE,gBACA5Q,GAAGsD,cAAcpZ,MAAM/B,KAAK,CAAC,MAAM6X,GAAGoD,WAAWlZ,MAAM/B,KAAK,CAAC,KAC7D6X,GAAGsD,cAAcpZ,MAAM/B,KAAK,CAAC,MAC3B6X,GAAGoD,WAAWlZ,MAAM/B,KAAK,CAAC,IAAI,KAChCuoB,UAAUhlB,KAAKtF,WAAW4Z,GAAGoD,WAAWlZ,MAAME,UAC9C4V,GAAGsD,cAAcpZ,MAAME,WAAW,GAC9B0mB,sBACJJ,aACAE,gBACA5Q,GAAGsD,cAAcpZ,MAAM/B,KAAK,CAAC,MAAM6X,GAAGoD,WAAWlZ,MAAM/B,KAAK,CAAC,KAC7D6X,GAAGsD,cAAcpZ,MAAM/B,KAAK,CAAC,MAC3B6X,GAAGoD,WAAWlZ,MAAM/B,KAAK,CAAC,IAAI,KAChC6X,GAAGoD,WAAWlZ,MAAME,WAAW,KAC/BwmB,aAAallB,KAAKtF,WAAW4Z,GAAGsD,cAAcpZ,MAAME;AAMtD,cAAIymB,mBAAmBC;AACrB;AAAA,QAAA;AAAA,MAEJ;AAIA9Q,UAAAA,GAAGrb,SAAS,eAAe;AACvB,cAAA;AAAA,UAACiG;AAAAA,QAAAA,IAAa7B;AAEpB,YAAI6B,WAAW;AACb,gBAAM,CAACmmB,QAAQ7oB,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQ6B,WAAW;AAAA,YAACmM,OAAO;AAAA,UAAA,CAAE,GAC/D0Y,eAAeF,gBAAgB;AAAA,YACnCxmB;AAAAA,YACAb;AAAAA,YACAsnB,UAAUxP,GAAG7X;AAAAA,UAAAA,CACd,GACK6oB,0BAA0BvB,eAC5BA,aAAaxoB,OAAOlC,OAAQgY,CAAAA,SAAS,CAAC5X,WAAWyW,SAASmB,IAAI,CAAC,IAC/D,CAAE,GAEA4S,WAAWD,YAAY;AAAA,YAC3B3mB;AAAAA,YACAb;AAAAA,YACAsnB,UAAU,CAACxP,GAAG7X,KAAK,CAAC,GAAG6X,GAAG7X,KAAK,CAAC,IAAI,CAAC;AAAA,UACtC,CAAA,GACK8oB,sBAAsBtB,WACxBA,SAAS1oB,OAAOlC,OAAQgY,CAAAA,SAAS,CAAC5X,WAAWyW,SAASmB,IAAI,CAAC,IAC3D,CAEEmU,GAAAA,oBACJF,yBAAyBjsB,OACtBqC,CAAe,eAAA,CAAC6pB,qBAAqBrV,SAASxU,UAAU,CAC3D,KAAK,CAAA,GACD+pB,uBAAuBD,kBAAkB9qB,SAAS;AAExD,cACE+qB,wBACA9B,mBAAmBrP,GAAGlJ,IAAI,KAC1BkJ,GAAGlJ,KAAK7P,OAAOsU,KAAMwB,CAASmU,SAAAA,kBAAkBtV,SAASmB,IAAI,CAAC,GAC9D;AACApK,uBAAW2S,YAAYvc,QAAQ;AAAA,cAC7B,GAAGiX,GAAGlJ;AAAAA,cACN7P,OACE+Y,GAAGlJ,KAAK7P,OAAOlC,OACZgY,CAAAA,SAAS,CAACmU,kBAAkBtV,SAASmB,IAAI,CAC5C,KAAK,CAAA;AAAA,YAAA,CACR;AACD;AAAA,UAAA;AAGF,gBAAMqU,sBACJH,qBAAqBlsB,OAClBqC,CAAAA,eAAe,CAAC4pB,yBAAyBpV,SAASxU,UAAU,CAC/D,KAAK,CACDiqB,GAAAA,yBAAyBD,oBAAoBhrB,SAAS;AAE5D,cACEirB,0BACAhC,mBAAmBrP,GAAGlJ,IAAI,KAC1BkJ,GAAGlJ,KAAK7P,OAAOsU,KAAMwB,CAASqU,SAAAA,oBAAoBxV,SAASmB,IAAI,CAAC,GAChE;AACApK,uBAAW2S,YAAYvc,QAAQ;AAAA,cAC7B,GAAGiX,GAAGlJ;AAAAA,cACN7P,OACE+Y,GAAGlJ,KAAK7P,OAAOlC,OACZgY,CAAAA,SAAS,CAACqU,oBAAoBxV,SAASmB,IAAI,CAC9C,KAAK,CAAA;AAAA,YAAA,CACR;AACD;AAAA,UAAA;AAGIuU,gBAAAA,qBACJ3B,UAAU1oB,OAAOlC,OAAQgY,CAAAA,SAAS5X,WAAWyW,SAASmB,IAAI,CAAC,KAAK,CAAE;AAGpE,cAF0BuU,mBAAmBlrB,SAAS,KAIpD+qB,wBACA,CAACE,0BACDhC,mBAAmBrP,GAAGlJ,IAAI,KAC1BkJ,GAAGlJ,KAAK7P,OAAOb,WAAW,GAC1B;AACAuM,uBAAW2S,YAAYvc,QAAQ;AAAA,cAC7B,GAAGiX,GAAGlJ;AAAAA,cACN7P,OAAOqqB;AAAAA,YAAAA,CACR;AACD;AAAA,UAAA;AAAA,QACF;AAAA,MACF;AAGEtR,UAAAA,GAAGrb,SAAS,eAAe;AACvB,cAAA;AAAA,UAACiG;AAAAA,QAAAA,IAAa7B,QACdwoB,qBAAqB3mB,YACvBJ,MAAMkM,YAAY9L,SAAS,IAC3B;AAEJ,YAAIA,aAAa2mB,oBAAoB;AACnC,gBAAM,CAACR,QAAQ7oB,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQ6B,WAAW;AAAA,YACzDmM,OAAO;AAAA,UAAA,CACR,GAEK,CAACvR,MAAMgqB,QAAQ,IACnB7mB,MAAMK,KACJC,OAAOC,MAAMH,QAAQ;AAAA,YACnB4nB,MAAM;AAAA,YACNxnB,IAAIyB,UAAUV;AAAAA,YACdd,OAAQC,CAAAA,MAAMN,OAAO4f,WAAWtf,CAAC;AAAA,YACjCoe,OAAO;AAAA,UAAA,CACR,CACH,EAAE,CAAC,KAAM,CAACle,QAAWA,MAAS,GAE1BtC,QAAQzB,KAAKyB,SAAS,IACtBuqB,0BAA0BvqB,MAAMlC,OAAQgY,CAC5C5X,SAAAA,WAAWyW,SAASmB,IAAI,CAC1B,GACM0U,qBACJxqB,MAAMb,SAASorB,wBAAwBprB,QAEnCsrB,cAAclsB,KAAKkG,KAAKtF,WAAW,GAEnCurB,uBAAuB/mB,UAAUX,OAAOG,WAAW,GACnDwnB,iBAAiBhnB,UAAUX,OAAOG,WAAW5E,KAAKkG,KAAKtF,QAEvDqpB,eAAeF,gBAAgB;AAAA,YAACxmB;AAAAA,YAAQb;AAAAA,YAAWsnB;AAAAA,UAAAA,CAAS,GAC5DG,WAAWD,YAAY;AAAA,YAAC3mB;AAAAA,YAAQb;AAAAA,YAAWsnB;AAAAA,UAAAA,CAAS,GACpDyB,sBACJtB,UAAU1oB,OAAOlC,OAAQgY,CAAAA,SAAS,CAAC5X,WAAWyW,SAASmB,IAAI,CAAC,KAAK,IAC7D8U,kBAAkB5qB,MAAMlC,OAC3BgY,CAAAA,SAAS,CAAC5X,WAAWyW,SAASmB,IAAI,CACrC,GAEM+U,6BAA6BrC,eAC/BA,aAAaxoB,OAAOsU,KAAMwB,CAAAA,SAAS,CAAC5X,WAAWyW,SAASmB,IAAI,CAAC,IAC7D,IACEgV,iCAAiCtC,eACnCA,aAAaxoB,OACTlC,OAAQgY,CAAS,SAAA,CAAC5X,WAAWyW,SAASmB,IAAI,CAAC,EAC5CkG,MAAOlG,CAAS9V,SAAAA,MAAM2U,SAASmB,IAAI,CAAC,IACvC,IACEiV,gCAAgCvC,eAClCA,aAAaxoB,OAAOsU,KACjBwB,CAAS,SAAA,CAAC5X,WAAWyW,SAASmB,IAAI,KAAK9V,MAAM2U,SAASmB,IAAI,CAC7D,IACA,IAEEkV,2BAA2BxC,eAC7BA,aAAaxoB,OAAOgc,MAAOlG,UAAS9V,MAAM2U,SAASmB,IAAI,CAAC,IACxD,IACEmV,gCAAgCL,gBAAgBtW,KAAMwB,CAC1DkU,SAAAA,qBAAqBrV,SAASmB,IAAI,CACpC;AAEI0U,cAAAA,sBAAsB,CAACC,aAAa;AAClCC,gBAAAA;AACF,kBAAIM,0BAA0B;AAC5Btf,2BAAW2S,YAAYvc,QAAQ;AAAA,kBAC7BT,OAAO;AAAA,kBACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,kBACrDpP,MAAMsU,GAAGtU;AAAAA,kBACTzE,OAAOwoB,cAAcxoB,SAAS,CAAA;AAAA,gBAAA,CAC/B;AACD;AAAA,yBACS8qB,gCAAgC;AACzCpf,2BAAW2S,YAAYvc,QAAQ;AAAA,kBAC7BT,OAAO;AAAA,kBACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,kBACrDpP,MAAMsU,GAAGtU;AAAAA,kBACTzE,OAAOwoB,cAAcxoB,SAAS,CAAA;AAAA,gBAAA,CAC/B;AACD;AAAA,yBACS+qB,+BAA+B;AACxCjS,gBAAAA,OAAMC,EAAE;AACR;AAAA,cAAA,WACS,CAACyP,cAAc;AACxB9c,2BAAW2S,YAAYvc,QAAQ;AAAA,kBAC7BT,OAAO;AAAA,kBACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,kBACrDpP,MAAMsU,GAAGtU;AAAAA,kBACTzE,OAAO,CAAA;AAAA,gBAAA,CACR;AACD;AAAA,cAAA;AAAA;AAIJ,gBAAI2qB,gBAAgB;AAClB,kBACGjC,YACCuC,iCACAjB,oBAAoB7qB,SAASyrB,gBAAgBzrB,UAC/C,CAAC8rB,+BACD;AACAvf,2BAAW2S,YAAYvc,QAAQ;AAAA,kBAC7BT,OAAO;AAAA,kBACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,kBACrDpP,MAAMsU,GAAGtU;AAAAA,kBACTzE,OAAO0oB,UAAU1oB,SAAS,CAAA;AAAA,gBAAA,CAC3B;AACD;AAAA,cAAA;AAGF,kBAAI,CAAC0oB,UAAU;AACbhd,2BAAW2S,YAAYvc,QAAQ;AAAA,kBAC7BT,OAAO;AAAA,kBACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,kBACrDpP,MAAMsU,GAAGtU;AAAAA,kBACTzE,OAAO,CAAA;AAAA,gBAAA,CACR;AACD;AAAA,cAAA;AAAA,YACF;AAAA,UACF;AAGE0qB,cAAAA,wBAAwB,CAACD,eAAiBjC,cAAc;AAC1D9c,uBAAW2S,YAAYvc,QAAQ;AAAA,cAC7BT,OAAO;AAAA,cACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,cACrDpP,MAAMsU,GAAGtU;AAAAA,cACTzE,OAAO6qB,6BACH,MACCrC,aAAaxoB,SAAS,IAAIlC,OAAQgY,CAAAA,SACjC5X,WAAWyW,SAASmB,IAAI,CAC1B;AAAA,YAAA,CACL;AACD;AAAA,UAAA;AAAA,QACF;AAAA,MACF;AAGEiD,UAAAA,GAAGrb,SAAS,eAAe;AACvB,cAAA;AAAA,UAACiG;AAAAA,QAAAA,IAAa7B;AAEpB,YAAI6B,aAAaJ,MAAM2nB,WAAWvnB,SAAS,GAAG;AAC5C,gBAAM,CAACrF,OAAO2C,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQ6B,WAAW;AAAA,YACxDmM,OAAO;AAAA,UAAA,CACR,GACK,CAACvR,MAAMgqB,QAAQ,IACnB7mB,MAAMK,KACJC,OAAOC,MAAMH,QAAQ;AAAA,YACnB4nB,MAAM;AAAA,YACNxnB,IAAI;AAAA,cAAChB,MAAM6X,GAAG7X;AAAAA,cAAMiC,QAAQ4V,GAAG5V;AAAAA,YAAM;AAAA,YACrChB,OAAQC,CAAAA,MAAMN,OAAO4f,WAAWtf,CAAC;AAAA,YACjCoe,OAAO;AAAA,UACR,CAAA,CACH,EAAE,CAAC,KAAM,CAACle,QAAWA,MAAS;AAEhC,cAAI/D,QAAQD,SAAS+pB,oBAAoB/pB,KAAK,GAAG;AAC/C,kBAAMoH,WAAWpH,MAAMoH,YAAY,CAAE,GAC/B1F,QAAQzB,KAAKyB,SAAS,CAAE,GACxBwqB,qBAAqBxqB,MAAMsU,KAAMwB,CACrCpQ,SAAAA,SAASvI,KAAMisB,CAAYA,YAAAA,QAAQhoB,SAAS0U,IAAI,CAClD,GACMqV,qBACJpS,GAAG5V,SAAS4V,GAAGtU,KAAKtF,WAAWZ,KAAKkG,KAAKtF,QACrCisB,kBAAkBrS,GAAG5V,WAAW,KAAKgoB,oBAErC3C,eAAeF,gBAAgB;AAAA,cAACxmB;AAAAA,cAAQb;AAAAA,cAAWsnB;AAAAA,YAAAA,CAAS,GAC5DG,WAAWD,YAAY;AAAA,cAAC3mB;AAAAA,cAAQb;AAAAA,cAAWsnB;AAAAA,YAAAA,CAAS,GAEpDwC,gCAAgCvC,eAClCA,aAAaxoB,OAAOsU,KACjBwB,CAAS,SAAA,CAAC5X,WAAWyW,SAASmB,IAAI,KAAK9V,MAAM2U,SAASmB,IAAI,CAC7D,IACA,IACEuV,4BAA4B3C,WAC9BA,SAAS1oB,OAAOsU,KACbwB,CAAS,SAAA,CAAC5X,WAAWyW,SAASmB,IAAI,KAAK9V,MAAM2U,SAASmB,IAAI,CAC7D,IACA;AAEJ,gBACE0U,sBACAY,mBACA,CAACL,iCACD,CAACM,2BACD;AACA,oBAAMC,+BACJ;AAAA,gBACE,GAAItpB,OAAOhC,MAAM8B,MAAM,KAAK,CAAA;AAAA,cAAC,EAC7B9B,SAAS,CAAA,GACXlC,OAAQgY,CAAS5X,SAAAA,WAAWyW,SAASmB,IAAI,CAAC;AAErCyE,qBAAAA,mBAAmBzY,QAAQ,MAAM;AACtCgX,gBAAAA,OAAMC,EAAE,GACRrN,WAAWoU,SACThe,QACA;AAAA,kBAAC9B,OAAOsrB;AAAAA,gBAAAA,GACR;AAAA,kBAACppB,IAAI6W,GAAG7X;AAAAA,gBAAAA,CACV;AAAA,cAAA,CACD,GAEDY,OAAO+J,SAAS;AAChB;AAAA,YAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAMF,UACEkN,GAAGrb,SAAS,gBACZqb,GAAG7X,KAAK/B,WAAW,KACnB,cAAc4Z,GAAGoD,cACjBpD,GAAGoD,WAAW9a,UAAUd,MAAMjC,MAAMd,QACpCkE,MAAMC,QAAQoX,GAAGoD,WAAWzW,QAAQ,KACpCqT,GAAGoD,WAAWzW,SAASvG,SAAS,KAChC4Z,GAAG7X,KAAK,CAAC,IAAI,KAAK,GAClB;AACA,cAAM,CAACwJ,aAAaO,UAAU,IAAIjJ,OAAO6N,KAAK/N,QAAQ,CAACiX,GAAG7X,KAAK,CAAC,IAAI,CAAC,CAAC;AAElEY,YAAAA,OAAOie,YAAYrV,WAAW,GAAG;AACnC,gBAAM6gB,UACH7pB,MAAMC,QAAQ+I,YAAYhF,QAAQ,KAAKgF,YAAYhF,YAAa,IAC7DyjB,cAAc7T,KAAK,CAAC,GAAGiW,SAAS,GAAGxS,GAAGoD,WAAWzW,QAAQ,CAAC;AAEhE/E,kBAAM,yCAAyCoY,EAAE,GACjDrN,WAAWoU,SACThe,QACA;AAAA,YAAC4D,UAAUyjB;AAAAA,UAAAA,GACX;AAAA,YAACjnB,IAAI+I;AAAAA,YAAYuV,OAAO;AAAA,UAAA,CAC1B,GACA1H,OAAMC,EAAE;AACR;AAAA,QAAA;AAAA,MACF;AAGFD,MAAAA,OAAMC,EAAE;AAAA,IAAA,GAGHjX;AAAAA,EACT;AACF;AAEO,MAAM0pB,mCAETA,CAAC;AAAA,EAACpX;AAAM,MAAM;AAChB,QAAMtS,SAASsS,OAAOtS,QAChBgU,OAAO1B,OAAOnU;AAEpB,MAAI6B,OAAO6B,WAAW;AACpB,QAAIJ,MAAM2nB,WAAWppB,OAAO6B,SAAS,GAAG;AAE3Bmc,iBAAAA,SACThe,QACA,IACA;AAAA,QAACK,OAAOuE,KAAKC;AAAAA,QAAQ8kB,OAAO;AAAA,QAAMC,SAAS;AAAA,MAAA,CAC7C;AAEMC,YAAAA,iBAAiBpoB,MAAMC,QAAQ1B,OAAO6B,SAAS,IACjD,CACE,GAAG3B,OAAOC,MAAMH,QAAQ;AAAA,QACtBI,IAAIJ,OAAO6B;AAAAA,QACXxB,OAAOuE,KAAKC;AAAAA,MACb,CAAA,CAAC,IAEJ,CAAE;AAEJglB,qBAAexsB,SAAS,KACxBwsB,eAAe3P,MAAOnM,UAASA,KAAK,CAAC,EAAE7P,OAAO2U,SAASmB,IAAI,CAAC,IAG5DhU,OAAO8pB,WAAW9V,IAAI,IAEtB6V,eAAetT,QAAQ,CAAC,CAACxI,MAAM3O,IAAI,MAAM;AACvC,cAAMlB,QAAQ,CACZ,IAAI0B,MAAMC,QAAQkO,KAAK7P,KAAK,IAAI6P,KAAK7P,QAAQ,CAAA,GAAIlC,OAC9C+tB,WAAkBA,UAAU/V,IAC/B,GACAA,IAAI;AAENpK,mBAAWoU,SACThe,QACA;AAAA,UAAC9B;AAAAA,QAAAA,GACD;AAAA,UAACkC,IAAIhB;AAAAA,UAAMiB,OAAOuE,KAAKC;AAAAA,UAAQ8kB,OAAO;AAAA,UAAMC,SAAS;AAAA,QAAA,CACvD;AAAA,MAAA,CACD;AAAA,IAAA,OAEE;AACC,YAAA,CAACptB,OAAO2C,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQA,OAAO6B,WAAW;AAAA,QAC/DmM,OAAO;AAAA,MACR,CAAA,GACKgc,kBACJhqB,OAAOie,YAAYzhB,KAAK,KACxBA,MAAMsD,SAASzC,WAAW,KAC1B2C,OAAO4f,WAAWpjB,MAAMsD,SAAS,CAAC,CAAC,KACnCtD,MAAMsD,SAAS,CAAC,EAAE6C,SAAS,KACvBnG,MAAMsD,SAAS,CAAC,IAChBU;AAEN,UAAIwpB,iBAAiB;AACbC,cAAAA,gBAAgBD,gBAAgB9rB,SAAS,IACzCgsB,gCAAgCD,cAAcjuB,OACjDmuB,CAAiBA,iBAAAA,iBAAiBnW,IACrC;AAEApK,mBAAWoU,SACThe,QACA;AAAA,UACE9B,OACE+rB,cAAc5sB,WAAW6sB,8BAA8B7sB,SACnD,CAAC,GAAG4sB,eAAejW,IAAI,IACvBkW;AAAAA,QAAAA,GAER;AAAA,UACE9pB,IAAIjB;AAAAA,UACJkB,OAAQ0N,CAAAA,SAAS/N,OAAO4f,WAAW7R,IAAI;AAAA,QAAA,CAE3C;AAAA,MAAA,OACK;AACL,cAAMkc,gBACJ;AAAA,UACE,GAAI/pB,OAAOhC,MAAM8B,MAAM,KAAK,CAAA;AAAA,QAAC,EAC7B9B,SAAS,CAAE,GACTA,QAAQ;AAAA,UACZ,GAAIgC,OAAOhC,MAAM8B,MAAM,KAAK,CAAC;AAAA,UAC7B9B,OAAO,CAAC,GAAG+rB,eAAejW,IAAI;AAAA,QAChC;AACAhU,eAAO9B,QAAQA;AAAAA,MAAAA;AAAAA,IACjB;AAGF,QAAI8B,OAAO6B,WAAW;AAEpB,YAAMA,YAAY7B,OAAO6B;AACzB7B,aAAO6B,YAAY;AAAA,QAAC,GAAGA;AAAAA,MAAS;AAAA,IAAA;AAAA,EAClC;AAEJ,GAEauoB,sCAETA,CAAC;AAAA,EAAC9X;AAAM,MAAM;AAChB,QAAMtS,SAASsS,OAAOtS,QAChBgU,OAAO1B,OAAOnU,WACd;AAAA,IAAC0D;AAAAA,EAAAA,IAAa7B;AAEpB,MAAI6B,WAAW;AACTJ,QAAAA,MAAM2nB,WAAWvnB,SAAS;AAEjBmc,iBAAAA,SACThe,QACA,IACA;AAAA,QAACK,OAAOuE,KAAKC;AAAAA,QAAQ8kB,OAAO;AAAA,QAAMC,SAAS;AAAA,MAAA,CAC7C,GACI5pB,OAAO6B,aACc,CACrB,GAAG3B,OAAOC,MAAMH,QAAQ;AAAA,QACtBI,IAAIJ,OAAO6B;AAAAA,QACXxB,OAAOuE,KAAKC;AAAAA,MACb,CAAA,CAAC,EAEW0R,QAAQ,CAAC,CAACxI,MAAM3O,IAAI,MAAM;AACvC,cAAM5C,QAAQwD,OAAOF,SAASV,KAAK,CAAC,CAAC;AACjCqB,kBAAQC,UAAUlE,KAAK,KAAKA,MAAMsD,SAAS+S,SAAS9E,IAAI,KAC1DnE,WAAWoU,SACThe,QACA;AAAA,UACE9B,QAAQ0B,MAAMC,QAAQkO,KAAK7P,KAAK,IAAI6P,KAAK7P,QAAQ,CAAE,GAAElC,OAClD+tB,CAAAA,UAAkBA,UAAU/V,IAC/B;AAAA,UACAzU,OAAO;AAAA,QAAA,GAET;AAAA,UAACa,IAAIhB;AAAAA,QAAAA,CACP;AAAA,MAAA,CAEH;AAAA,SAEE;AACL,YAAM,CAAC5C,OAAO2C,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQ6B,WAAW;AAAA,QACxDmM,OAAO;AAAA,MACR,CAAA,GACKgc,kBACJhqB,OAAOie,YAAYzhB,KAAK,KACxBA,MAAMsD,SAASzC,WAAW,KAC1B2C,OAAO4f,WAAWpjB,MAAMsD,SAAS,CAAC,CAAC,KACnCtD,MAAMsD,SAAS,CAAC,EAAE6C,SAAS,KACvBnG,MAAMsD,SAAS,CAAC,IAChBU;AAEN,UAAIwpB,iBAAiB;AAEbE,cAAAA,iCADgBF,gBAAgB9rB,SAAS,CAAA,GACKlC,OACjDmuB,CAAAA,iBAAiBA,iBAAiBnW,IACrC;AAEApK,mBAAWoU,SACThe,QACA;AAAA,UACE9B,OAAOgsB;AAAAA,QAAAA,GAET;AAAA,UACE9pB,IAAIjB;AAAAA,UACJkB,OAAQ0N,CAAAA,SAAS/N,OAAO4f,WAAW7R,IAAI;AAAA,QAAA,CAE3C;AAAA,MAAA,OACK;AACL,cAAMkc,gBACJ;AAAA,UACE,GAAI/pB,OAAOhC,MAAM8B,MAAM,KAAK,CAAA;AAAA,QAAC,EAC7B9B,SAAS,CAAE,GACTA,QAAQ;AAAA,UACZ,GAAIgC,OAAOhC,MAAM8B,MAAM,KAAK,CAAC;AAAA,UAC7B9B,OAAO+rB,cAAcjuB,OAAQ+tB,CAAAA,UAAUA,UAAU/V,IAAI;AAAA,QACvD;AACAhU,eAAO9B,QAAQ;AAAA,UAACA,OAAOA,MAAMA;AAAAA,UAAOqB,OAAO;AAAA,QAAM;AAAA,MAAA;AAAA,IACnD;AAGF,QAAIS,OAAO6B,WAAW;AAEpB,YAAMA,aAAY7B,OAAO6B;AACzB7B,aAAO6B,YAAY;AAAA,QAAC,GAAGA;AAAAA,MAAS;AAAA,IAAA;AAAA,EAClC;AAEJ;AAEO,SAASwoB,kBAAkB;AAAA,EAChCrqB;AAAAA,EACA7B;AAIF,GAAG;AACD,MAAI,CAAC6B,OAAO6B;AACH,WAAA;AAGT,QAAMyoB,oBAAoB1qB,MAAMK,KAC9BC,OAAOC,MAAMH,QAAQ;AAAA,IAACK,OAAOuE,KAAKC;AAAAA,IAAQzE,IAAIJ,OAAO6B;AAAAA,EAAAA,CAAU,CACjE;AAEIyoB,SAAAA,kBAAkBjtB,WAAW,IACxB,KAGLoE,MAAM2nB,WAAWppB,OAAO6B,SAAS,IAC5ByoB,kBAAkBpQ,MAAO5Z,CAAM,MAAA;AAC9B,UAAA,CAACyN,IAAI,IAAIzN;AAERyN,WAAAA,KAAK7P,OAAO2U,SAAS1U,SAAS;AAAA,EACtC,CAAA,KAID;AAAA,IACE,GAAI+B,OAAOhC,MAAM8B,MAAM,KAAK,CAAA;AAAA,EAC5B9B,EAAAA,SAAS,CAAA,GACX2U,SAAS1U,SAAS;AACtB;AAEO,MAAMosB,sCAETA,CAAC;AAAA,EAACha;AAAAA,EAAS+B;AAAM,MAAM;AACR+X,oBAAkB;AAAA,IACjCrqB,QAAQsS,OAAOtS;AAAAA,IACf7B,WAAWmU,OAAOnU;AAAAA,EACnB,CAAA,IAGCisB,oCAAoC;AAAA,IAClC7Z;AAAAA,IACA+B,QAAQ;AAAA,MACN1W,MAAM;AAAA,MACNoE,QAAQsS,OAAOtS;AAAAA,MACf7B,WAAWmU,OAAOnU;AAAAA,IAAAA;AAAAA,EAErB,CAAA,IAEDurB,iCAAiC;AAAA,IAC/BnZ;AAAAA,IACA+B,QAAQ;AAAA,MACN1W,MAAM;AAAA,MACNoE,QAAQsS,OAAOtS;AAAAA,MACf7B,WAAWmU,OAAOnU;AAAAA,IAAAA;AAAAA,EACpB,CACD;AAEL;ACt3BcW,cAAc,mCAAmC;AAI/C0rB,SAAAA,iCACdxU,aACAvX,OAC8D;AAC9D,MAAIgsB,gBAAkC;AACtC,SAAO,SACLzqB,QACyB;AACzB,UAAM0qB,4BAA4BA,MAAM;AAClCD,UAAAA,kBAAkBzqB,OAAO6B,WAAW;AACtC,YAAI8oB,UAA2B;AAC/B,YAAI3qB,OAAO6B,WAAW;AACpB,gBAAM+oB,WAAWrlB,6BAA6B7G,IAAIsB,OAAO6B,SAAS;AAC9D+oB,cAAAA;AACQA,sBAAAA;AAAAA,eACL;AACL,kBAAMxtB,QAAQ4C,OAAOF;AACXkB,sBAAAA,oBAAoB5D,OAAO4C,OAAO6B,WAAWpD,KAAK,GAC5D8G,6BAA6BsC,IAAI7H,OAAO6B,WAAW8oB,OAAO;AAAA,UAAA;AAAA,QAC5D;AASEA,kBACF3U,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,UAAaiG,WAAW8oB;AAAAA,QAAAA,CAAQ,IAExD3U,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,UAAaiG,WAAW;AAAA,QAAA,CAAK;AAAA,MAAA;AAGzD4oB,sBAAgBzqB,OAAO6B;AAAAA,IAAAA,GAGnB;AAAA,MAACkI;AAAAA,IAAAA,IAAY/J;AACnBA,WAAAA,OAAO+J,WAAW,MAAM;AACtBA,kBACKiM,YAAYkB,YAAY,EAAEC,QAAQ;AAAA,QAAC7G,OAAO;AAAA,MAAa,CAAA,KAC1Doa,0BAA0B;AAAA,IAAA,GAGvB1qB;AAAAA,EACT;AACF;AChDA,MAAMnB,UAAQC,cAAc,wBAAwB;AAK7C,SAAS+rB,sBAAsB;AAAA,EACpC7U;AAAAA,EACA3S;AAIF,GAAG;AACD,SAAO,SACLrD,QACyB;AACzBA,WAAOie,cAAe7gB,CAElB6V,UAAAA,wBAAwB7V,KAAK,KAAKA,MAAMmC,UAAU8D,YAAY7G,MAAMd,MAGxEsE,OAAO4f,aAAcxiB,CAAAA,UACZkpB,qBAAmBlpB,KAAK,KAAKA,MAAMmC,UAAU8D,YAAY5G,KAAKf,MAEvEsE,OAAO4O,cAAexR,CAElB0tB,UAAAA,wBAAwB1tB,KAAK,KAAKA,MAAMmC,UAAU8D,YAAY7G,MAAMd,MAGxEsE,OAAOW,SAAUuF,CAEb7C,YAAAA,YAAY7G,MAAMd,SAASwK,QAAQ3G,UAClC8D,YAAYzG,aACVe,IAAKotB,CAAAA,QAAQA,IAAIrvB,IAAI,EACrBmX,SAAS3M,QAAQ3G,KAAK,KACvB8D,YAAY1G,cACTgB,IAAKotB,SAAQA,IAAIrvB,IAAI,EACrBmX,SAAS3M,QAAQ3G,KAAK,IAG/BS,OAAO8G,WAAYZ,CAAAA,YACS7C,YAAY1G,cAAcgB,IAAKotB,CAAQA,QAAAA,IAAIrvB,IAAI,EAErDmX,SAAS3M,QAAQ3G,KAAK,KACxC,cAAc2G,WACdA,QAAQjC,aAAa;AAKnB,UAAA;AAAA,MAAC6e;AAAAA,IAAAA,IAAiB9iB;AACxBA,WAAAA,OAAO8iB,gBAAiBpH,CAAU,UAAA;AAC1B,YAAA,CAAC3N,MAAM3O,IAAI,IAAIsc;AAGrB,UAAI3N,KAAKxO,UAAUiB,UAAapB,KAAK/B,WAAW,GAAG;AACjDwB,gBAAM,+CAA+C;AAC/CpC,cAAAA,OAAOsR,MACPgF,MACJtW,KAAK6C,QAAQ0W,YAAYkB,YAAAA,EAAc3G,QAAQwB,aAAa;AAC9DiE,oBAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAc,GACtCgO,WAAWoU,SACThe,QACA;AAAA,UAAC,GAAGvD;AAAAA,UAAM8C,OAAO8D,YAAY5G,KAAKf;AAAAA,UAAM4D,MAAMyT;AAAAA,QAAAA,GAC9C;AAAA,UAAC3S,IAAIhB;AAAAA,QAAAA,CACP,GACA4W,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAmB;AAC3C;AAAA,MAAA;AAIEmS,UAAAA,KAAKzO,SAASkB,WAAcpB,KAAK/B,WAAW,KAAK+B,KAAK/B,WAAW,IAAI;AACvEwB,gBAAM,iDAAiD;AACvD,cAAMkU,MAAMiD,YAAYkB,YAAY,EAAE3G,QAAQwB,aAAa;AAC3DiE,oBAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAc,GACtCgO,WAAWoU,SAAShe,QAAQ;AAAA,UAACV,MAAMyT;AAAAA,QAAAA,GAAM;AAAA,UAAC3S,IAAIhB;AAAAA,QAAAA,CAAK,GACnD4W,YAAYmJ,KAAK;AAAA,UAACvjB,MAAM;AAAA,QAAA,CAAmB;AAC3C;AAAA,MAAA;AAGFknB,oBAAcpH,KAAK;AAAA,IAAA,GAEd1b;AAAAA,EACT;AACF;AC1FA,MAAMnB,UAAQC,cAAc,kBAAkB;AAUvC,SAASksB,gBAAgB;AAAA,EAAChV;AAAAA,EAAa3S;AAAoB,GAAG;AACnE,SAAO,SACLrD,QACyB;AAEzBA,WAAAA,OAAOirB,kBAAkB,MAAM;AACvB,YAAA;AAAA,QAACppB;AAAAA,MAAAA,IAAa7B;AACpB,UAAI6B,aAAa,CAACJ,MAAM2nB,WAAWvnB,SAAS,GAAG;AAC7C,cAAM,CAACqpB,QAAQ,IAAIhrB,OAAO6N,KAAK/N,QAAQ6B,UAAUV,OAAO;AAAA,UAAC6M,OAAO;AAAA,QAAA,CAAE;AAC9D,YAAA,CAACkd,YAAY,CAACtmB,KAAKC,OAAOqmB,QAAQ,KAAKA,SAASvoB,KAAKtF,WAAW,GAAG;AACrEwB,kBAAM,4CAA4C;AAClD;AAAA,QAAA;AAEI,cAAA;AAAA,UAACsC;AAAAA,QAASU,IAAAA,WACVspB,cAAchqB,MAAME,QACpB+pB,cAAcF,SAASvoB,KAAKjD,MAAM,GAAGyrB,WAAW,GAChDE,aAAaH,SAASvoB,KAAKjD,MAAMyrB,aAAa,EAAE,GAChDG,UAAWC,CAAgBA,QAAAA,IAAIlrB,MAAM,KAAK,GAC1CmrB,wBAAwBJ,YAC3BzB,MAAM,EAAE,EACRnR,QAAAA,EACA3X,UAAW0qB,CAAQD,QAAAA,QAAQC,GAAG,CAAC,GAC5BE,iBACJD,wBAAwB,KACpBJ,YAAY/tB,SAASmuB,wBACrB,GACAE,uBAAuBL,WAC1B1B,MAAM,EAAE,EACR9oB,UAAWkqB,CAAAA,QAAQO,QAAQP,GAAG,CAAC,GAC5BY,eACJP,YAAY/tB,UACXquB,uBAAuB,KACpBA,uBACAL,WAAWhuB,SAAS;AAExB,YAAA,EACEouB,mBAAmBE,gBACnBC,OAAOC,MAAMJ,cAAc,KAC3BG,OAAOC,MAAMF,YAAY,IAE3B;AACA9sB,kBAAM,4CAA4C,GAClD+K,WAAWkiB,aAAa9rB,QAAQ;AAAA,YAC9BkB,QAAQ;AAAA,cAAC,GAAGW,UAAUX;AAAAA,cAAQG,QAAQoqB;AAAAA,YAAc;AAAA,YACpDtqB,OAAO;AAAA,cAAC,GAAGU,UAAUV;AAAAA,cAAOE,QAAQsqB;AAAAA,YAAAA;AAAAA,UAAY,CACjD;AACD;AAAA,QAAA;AAEF9sB,gBAAM,4CAA4C;AAAA,MAAA;AAAA,IAItDmB,GAAAA,OAAOwc,qBAAsBvf,CAAAA,YAKbmG,aACZ,CACE;AAAA,MACE7D,OAAO8D,YAAY7G,MAAMd;AAAAA,MACzB4D,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,MACrD5U,OAAOkG,YAAYnH,OAAO,CAAC,EAAEkB,SAAS;AAAA,MACtC,GAAIH,QAAQ0R,WAAW;AAAA,QAACA,UAAU1R,QAAQ0R;AAAAA,MAAAA,IAAY,CAAC;AAAA,MACvD,GAAI1R,QAAQyR,QAAQ;AAAA,QAACA,OAAOzR,QAAQyR;AAAAA,MAAAA,IAAS,CAAC;AAAA,MAC9C9K,UAAU,CAAE;AAAA,MACZ9D,UAAU,CACR;AAAA,QACEP,OAAO;AAAA,QACPD,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,QACrDpP,MAAM;AAAA,QACNzE,OAAOjB,QAAQb,WAAWJ,OAAQmC,eAChCkF,YAAYjH,WAAWf,KAAK,CAAC;AAAA,UAAC+B;AAAAA,QAAAA,MAAWA,UAAUe,SAAS,CAC9D;AAAA,MACD,CAAA;AAAA,IAAA,CAEJ,GAEH;AAAA,MAACkF;AAAAA,IAAAA,CACH,EAAE,CAAC,GAGErD;AAAAA,EACT;AACF;AC5Ea+rB,MAAAA,cAAcA,CACzB/rB,QACA/C,YAC4B;AAC5B,QAAM+uB,IAAIhsB,QACJ;AAAA,IAACgW;AAAAA,EAAAA,IAAe/Y,SAChBoG,cAAc2S,YAAYkB,YAAY,EAAE3G,QAAQjS,QAChD2tB,qBAAqB1M,yBAAyBlc,WAAW,GACzD6oB,iBAAiBrJ,qBAAqB7M,aAAa3S,WAAW,GAC9D8oB,kBAAkBtB,sBAAsB;AAAA,IAC5C7U;AAAAA,IACA3S;AAAAA,EAAAA,CACD,GACK+oB,cAAchH,kBAAkB;AAAA,IACpCpP;AAAAA,IACAqP,gBAAgB4G;AAAAA,IAChB5oB;AAAAA,IACA+S,eAAenZ,QAAQmZ;AAAAA,EAAAA,CACxB,GACKiW,gBAAgB1J,oBAAoB3M,WAAW,GAC/CsW,eAAevW,mBAAmB;AAAA,IACtCC;AAAAA,IACAC,iBAAiB5S,YAAY7G;AAAAA,IAC7B4Z,eAAenZ,QAAQmZ;AAAAA,EAAAA,CACxB,GACKmW,4BAA4BzF,gCAChC9Q,aACA3S,WACF,GACMmpB,6BAA6BtG,iCACjClQ,aACA3S,WACF,GAEMopB,uBAAuB3G,2BAA2B9P,WAAW,GAE7D0W,YAAY1B,gBAAgB;AAAA,IAChChV;AAAAA,IACA3S;AAAAA,EACD,CAAA,GACKspB,6BAA6BnC,iCACjCxU,aACA3S,WACF;AAC2B2e,SAAAA,yBACzBhM,aACA/Y,QAAQmZ,aACV,EAIE+V,gBACED,eACEK,0BACEC,2BACEC,qBACEC,UACEL,cACEC,aAAaF,YAAYO,2BAA2BX,CAAC,CAAC,CAAC,CACzD,CACF,CACF,CACF,CACF,CACF,CACF,CACF;AACF,GCnFMntB,UAAQC,cAAc,6CAA6C,GAcnE8tB,mCAAmB5nB,QAAkC;AAEpD,SAAS6nB,kBAAkBC,QAAwC;AACxE,QAAMC,sBAAsBH,aAAaluB,IAAIouB,OAAO9W,WAAW;AAE3D+W,MAAAA;AACFluB,WAAAA,QAAM,0CAA0CiuB,OAAO9W,YAAYzE,EAAE,GAC9Dwb;AAGHluB,UAAA,sCAAsCiuB,OAAO9W,YAAYzE,EAAE;AAE3Dyb,QAAAA,kBAAqC,IACrC5W,gBAAyC,CAEzC6W,GAAAA,WAAWlB,YAAYmB,UAAUC,eAAa,CAAC,GAAG;AAAA,IACtDnX,aAAa8W,OAAO9W;AAAAA,IACpBI;AAAAA,EAAAA,CACD;AAEoBvO,uBAAAA,IAAIolB,UAAU,CAAE,CAAA,GACrC5nB,qBAAqBwC,IAAIolB,UAAU,EAAE;AAErC,aAAW/N,gBAAgB9I;AACT3T,oBAAAA,KAAKyc,cAAc;AAG/BkO,QAAAA,eAAe,CAACH,SAASzQ,mBAAmB;AAAA,IAACpgB,YAAY,CAAA;AAAA,EAAA,CAAG,CAAC,GAE7D4U,cAA2B;AAAA,IAC/Bic;AAAAA,IACAG;AAAAA,EACF;AAEAR,SAAAA,aAAa/kB,IAAIilB,OAAO9W,aAAahF,WAAW,GAEzCA;AACT;AC1DO,MAAMqc,qCAETA,CAAC;AAAA,EAAC9c;AAAAA,EAAS+B;AAAM,MAAM;AACRgb,mBAAiB;AAAA,IAChCttB,QAAQsS,OAAOtS;AAAAA,IACf2O,UAAU2D,OAAO3D;AAAAA,EAClB,CAAA,IAGC4e,mCAAmC;AAAA,IACjChd;AAAAA,IACA+B,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ1W,MAAM;AAAA,IAAA;AAAA,EAC3B,CAAA,IAED4xB,gCAAgC;AAAA,IAC9Bjd;AAAAA,IACA+B,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ1W,MAAM;AAAA,IAAA;AAAA,EAAe,CAC1C;AAEL,GAEa2xB,qCAETA,CAAC;AAAA,EAAChd;AAAAA,EAAS+B;AAAM,MAAM;AACrB,MAAA,CAACA,OAAOtS,OAAO6B;AACjB;AAGIsP,QAAAA,SAASsc,aAAald,OAAO,GAE7Bmd,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC7BI,IAAIkS,OAAOtS,OAAO6B;AAAAA,IAClBxB,OAAQ0N,CAAAA,SAASoD,OAAOvC,YAAYb,IAAI;AAAA,EAAA,CACzC,CAAC;AAGO,aAAA,CAAA,EAAG3N,EAAE,KAAKstB;AACnB9jB,eAAW+jB,WAAWrb,OAAOtS,QAAQ,CAAC,YAAY,OAAO,GAAG;AAAA,MAACI;AAAAA,IAAAA,CAAG;AAEpE,GAEaotB,kCAETA,CAAC;AAAA,EAACjd;AAAAA,EAAS+B;AAAM,MAAM;AACrB,MAAA,CAACA,OAAOtS,OAAO6B;AACjB;AAGIsP,QAAAA,SAASsc,aAAald,OAAO,GAE7Bmd,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC7BI,IAAIkS,OAAOtS,OAAO6B;AAAAA,IAClBxB,OAAQ0N,CAAAA,SAASoD,OAAO8M,YAAYlQ,IAAI;AAAA,EAAA,CACzC,CAAC;AAGO,aAAA,CAAA,EAAG3N,EAAE,KAAKstB;AACR1P,eAAAA,SACT1L,OAAOtS,QACP;AAAA,MACE0O,OAAO;AAAA,MACPC,UAAU2D,OAAO3D;AAAAA,IAAAA,GAEnB;AAAA,MAACvO;AAAAA,IAAAA,CACH;AAEJ;AAEO,SAASktB,iBAAiB;AAAA,EAC/BttB;AAAAA,EACA2O;AAIF,GAAY;AACV,MAAI,CAAC3O,OAAO6B;AACH,WAAA;AAGT,QAAM6rB,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMH,QAAQ;AAAA,IACtBI,IAAIJ,OAAO6B;AAAAA,IACXxB,OAAQ0N,CAAAA,SAAS/N,OAAOie,YAAYlQ,IAAI;AAAA,EAAA,CACzC,CAAC;AAGJ,SAAI2f,eAAerwB,SAAS,IACnBqwB,eAAexT,MACpB,CAAC,CAACnM,IAAI,MAAM/N,OAAO4O,YAAYb,IAAI,KAAKA,KAAKY,aAAaA,QAC5D,IAGK;AACT;AC/FO,MAAMif,kCAETA,CAAC;AAAA,EAACrd;AAAAA,EAAS+B;AAAM,MAAM;AACRub,gBAAc;AAAA,IAC7B7tB,QAAQsS,OAAOtS;AAAAA,IACf7C,OAAOmV,OAAOnV;AAAAA,EACf,CAAA,IAGC2wB,gCAAgC;AAAA,IAC9Bvd;AAAAA,IACA+B,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ1W,MAAM;AAAA,IAAA;AAAA,EAC3B,CAAA,IAEDmyB,6BAA6B;AAAA,IAC3Bxd;AAAAA,IACA+B,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ1W,MAAM;AAAA,IAAA;AAAA,EAAW,CACtC;AAEL,GAEakyB,kCAETA,CAAC;AAAA,EAACvd;AAAAA,EAAS+B;AAAM,MAAM;AACrB,MAAA,CAACA,OAAOtS,OAAO6B;AACjB;AAGF,QAAMskB,eAAe5V,QAAQjS,OAAOpC,OAAO,CAAC,EAAEkB,OACxC+T,SAASsc,aAAald,OAAO,GAE7Bmd,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC7BI,IAAIkS,OAAOtS,OAAO6B;AAAAA,IAClBxB,OAAQ0N,CAAAA,SAASoD,OAAO8M,YAAYlQ,IAAI;AAAA,EAAA,CACzC,CAAC;AAGO,aAAA,CAAA,EAAG3N,EAAE,KAAKstB;AACR1P,eAAAA,SACT1L,OAAOtS,QACP;AAAA,MACE7C,OAAOgpB;AAAAA,IAAAA,GAET;AAAA,MACE/lB;AAAAA,IAAAA,CAEJ;AAEJ,GAEa2tB,+BAETA,CAAC;AAAA,EAACxd;AAAAA,EAAS+B;AAAM,MAAM;AACrB,MAAA,CAACA,OAAOtS,OAAO6B;AACjB;AAGIsP,QAAAA,SAASsc,aAAald,OAAO,GAE7Bmd,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC7BI,IAAIkS,OAAOtS,OAAO6B;AAAAA,IAClBxB,OAAQ0N,CAAAA,SAASoD,OAAO8M,YAAYlQ,IAAI;AAAA,EAAA,CACzC,CAAC;AAGO,aAAA,CAAA,EAAG3N,EAAE,KAAKstB;AACR1P,eAAAA,SACT1L,OAAOtS,QACP;AAAA,MACE7C,OAAOmV,OAAOnV;AAAAA,IAAAA,GAEhB;AAAA,MACEiD;AAAAA,IAAAA,CAEJ;AAEJ;AAEO,SAASytB,cAAc;AAAA,EAC5B7tB;AAAAA,EACA7C;AAIF,GAAY;AACV,MAAI,CAAC6C,OAAO6B;AACH,WAAA;AAGT,QAAM6rB,iBAAiB,CACrB,GAAGxtB,OAAOC,MAAMH,QAAQ;AAAA,IACtBI,IAAIJ,OAAO6B;AAAAA,IACXxB,OAAQ0N,CAAAA,SAAS/N,OAAOie,YAAYlQ,IAAI;AAAA,EAAA,CACzC,CAAC;AAGJ,SAAI2f,eAAerwB,SAAS,IACnBqwB,eAAexT,MAAM,CAAC,CAACnM,IAAI,MAAMA,KAAK5Q,UAAUA,KAAK,IAGvD;AACT;ACpEA,MAAM0B,UAAQC,cAAc,cAAc;AAE1BkvB,SAAAA,kBACdhuB,QACAgW,aACA;AACA,QAAMvX,QAAQuX,YAAYkB,YAAY,EAAE3G,QAAQjS;AAEf,SAAA;AAAA,IAC/B6C,OAAOA,MAAY;AACjB6U,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,QACR;AAAA,QACAoE;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACAiuB,MAAMA,MAAY;AAChBjY,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,QACR;AAAA,QACAoE;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACAkuB,YAAala,CAAuB,SAAA;AAClCgC,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACNuC,WAAW6V;AAAAA,QACb;AAAA,QACAhU;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACAmuB,YAAaxf,CAA2B,aAAA;AACtCqH,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACN+S;AAAAA,QACF;AAAA,QACA3O;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACAouB,kBAAmBjxB,CAAwB,UAAA;AACzC6Y,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACNuB;AAAAA,QACF;AAAA,QACA6C;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACAquB,cAAera,CAA0B,SAAA;AAGnC,UAAA;AACF,eAAOqW,kBAAkB;AAAA,UAACrqB;AAAAA,UAAQ7B,WAAW6V;AAAAA,QAAAA,CAAK;AAAA,eAC3C4E,KAAK;AACJ1J,eAAAA,QAAAA,KAAK0J,GAAG,GACT;AAAA,MAAA;AAAA,IAEX;AAAA,IACA1a,OAAOA,OAEH;AAAA,MACE,GAAIgC,OAAOhC,MAAM8B,MAAM,KAAK,CAAA;AAAA,IAC9B,GAAE9B,SAAS,CAAE;AAAA,IAGjB+Z,MAAMA,MAAYjY,OAAOiY,KAAK;AAAA,IAC9Bc,MAAMA,MAAY/Y,OAAO+Y,KAAK;AAAA,IAC9B0D,QAAS5a,CAAqC,cAAA;AACtCysB,YAAAA,iBAAiB1sB,aAAaC,WAAW7B,MAAM;AACjDsuB,uBACF1kB,WAAW6S,OAAOzc,QAAQsuB,cAAc,IAExC1kB,WAAWiP,SAAS7Y,MAAM,GAE5BA,OAAO+J,SAAS;AAAA,IAClB;AAAA,IACAwkB,YAAYA,MAAqC;AAC/C,UAAIvuB,OAAO6B,WAAW;AACdrF,cAAAA,QAAQwmB,KAAKwL,WACjBxuB,QACAA,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,CACxC;AACIlD,YAAAA;AACF,iBAAO0H,eACL,CAAC1H,KAAK,GACNiC,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,EAAE,CAAC;AAAA,MAAA;AAAA,IAIT;AAAA,IACAyuB,YAAYA,MAAqC;AAC/C,UAAIzuB,OAAO6B,WAAW;AACdrF,cAAAA,QAAQwmB,KAAKwL,WACjBxuB,QACAA,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,CACxC;AACIlD,YAAAA,SAASwD,OAAOie,YAAYzhB,KAAK;AACnB0H,iBAAAA,eACd,CAAC1H,KAAK,GACNiC,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,EAAE,CAAC,EACYF,SAASE,OAAO6B,UAAUV,MAAM/B,KAAK,CAAC,CAAC;AAAA,MAAA;AAAA,IAI5D;AAAA,IACAsvB,aAAaA,CACX9yB,MACAwB,UACS;AACLxB,UAAAA,KAAKF,SAAS+C,MAAMhC,KAAKf;AAC3Bsa,eAAAA,YAAYmJ,KAAK;AAAA,UACfvjB,MAAM;AAAA,UACNsmB,eAAe;AAAA,YACbtmB,MAAM;AAAA,YACNmC,cAAc;AAAA,cACZrC,MAAME,KAAKF;AAAAA,cACX0B;AAAAA,YAAAA;AAAAA,UAEJ;AAAA,UACA4C;AAAAA,QAAAA,CACD,GAGCgB,oBACEkD,eACElE,OAAOF,UACPrB,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,GACAA,OAAO6B,WACPpD,KACF,GAAG0C,MAAM/B,QAAQ,CAAE;AAIvB,UAAI,CAACY,OAAO6B;AACJ,cAAA,IAAI3G,MAAM,6BAA6B;AAE/C,YAAM,CAACqzB,UAAU,IAAI3uB,MAAMK,KACzBC,OAAOC,MAAMH,QAAQ;AAAA,QACnBI,IAAIJ,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC;AAAA,QAC1CW,OAAQC,CAAAA,MAAMA,EAAEf,UAAUd,MAAMjC,MAAMd;AAAAA,MACvC,CAAA,CACH,EAAE,CAAC,KAAK,CAAC8E,MAAS;AAClB,UAAI,CAAC+tB;AACG,cAAA,IAAIrzB,MAAM,uBAAuB;AAEzC,UACEU,KAAKF,SAAS+C,MAAMhC,KAAKf,QACzB,CAAC+C,MAAM9B,cAAc6V,KAAMjO,CAAAA,MAAMA,EAAE7I,SAASE,KAAKF,IAAI;AAE/C,cAAA,IAAIR,MACR,yDACF;AAkBIyE,YAAAA,QAhBQyD,aACZ,CACE;AAAA,QACE9D,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,QACrDxS,OAAOd,MAAMjC,MAAMd;AAAAA,QACnBoE,UAAU,CACR;AAAA,UACER,MAAM0W,YAAYkB,cAAc3G,QAAQwB,aAAa;AAAA,UACrDxS,OAAO3D,KAAKF;AAAAA,UACZ,GAAI0B,SAAgB,CAAA;AAAA,QACrB,CAAA;AAAA,MAAA,CAEJ,GAEH;AAAA,QAACiG,aAAa2S,YAAYkB,YAAY,EAAE3G,QAAQjS;AAAAA,MAClD,CAAA,EAAE,CAAC,EACiBwB,SAAS,CAAC,GACxB6uB,iBAAiB3uB,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,GACvD8e,aAAa7e,MAAMJ,UAAUd,MAAMhC,KAAKf,MACxCkzB,YAAY5L,KAAKtkB,IAAIsB,QAAQ2uB,cAAc;AAI7CnQ,aAAAA,cAAcoQ,UAAUrvB,UAAUd,MAAMhC,KAAKf,SAC/CmD,QACE,wEACF,GACAmB,OAAO6uB,KAAK;AAAA,QAACC,UAAU;AAAA,QAAGtM,MAAM;AAAA,MAAY,CAAA,IAG9C5Y,WAAW2S,YAAYvc,QAAQL,OAAO;AAAA,QACpC8c,QAAQ;AAAA,QACRrc,IAAIJ,OAAO6B;AAAAA,MAAAA,CACZ,GACD7B,OAAO+J,SAAAA,GAGL/I,oBACEkD,eACElE,OAAOF,UACPrB,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,GACAA,OAAO6B,WACPpD,KACF,GAAG0C,MAAM/B,QAAQ,CAAE;AAAA,IAEvB;AAAA,IACA2vB,aAAaA,CACXnzB,MACAwB,WAEA4Y,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNsmB,eAAe;AAAA,QACbtmB,MAAM;AAAA,QACNgC,aAAa;AAAA,UACXlC,MAAME,KAAKF;AAAAA,UACX0B;AAAAA,QACF;AAAA,QACA+kB,WAAW;AAAA,MACb;AAAA,MACAniB;AAAAA,IAAAA,CACD,GAGCgB,oBACEkD,eACElE,OAAOF,UACPrB,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,GACAA,OAAO6B,WACPpD,KACF,GAAG0C,MAAM/B,QAAQ;IAGrB4vB,eAAgB7xB,CAA2B,UAAA;AACrC,UAAA;AACF,eAAO0wB,cAAc;AAAA,UAAC7tB;AAAAA,UAAQ7C;AAAAA,QAAAA,CAAM;AAAA,MAAA,QAC9B;AAEC,eAAA;AAAA,MAAA;AAAA,IAEX;AAAA,IACA8xB,cAAetgB,CAA8B,aAAA;AACvC,UAAA;AACF,eAAO2e,iBAAiB;AAAA,UAACttB;AAAAA,UAAQ2O;AAAAA,QAAAA,CAAS;AAAA,MAAA,QACpC;AAEC,eAAA;AAAA,MAAA;AAAA,IAEX;AAAA,IACAhO,QAASuF,CAAAA,YACA,CAAC,CAACzH,MAAMjC,MAAMd,MAAM+C,MAAMhC,KAAKf,IAAI,EAAEmX,SAAS3M,QAAQ3G,KAAK;AAAA,IAEpE2vB,YACE9vB,CAIG,SAAA;AACH,YAAM+vB,YAAYvtB,aAChB;AAAA,QAACT,OAAO;AAAA,UAAC/B;AAAAA,UAAMiC,QAAQ;AAAA,QAAC;AAAA,QAAGH,QAAQ;AAAA,UAAC9B;AAAAA,UAAMiC,QAAQ;AAAA,QAAA;AAAA,SAClDrB,MACF;AACA,UAAImvB,WAAW;AACb,cAAM,CAAC3yB,OAAO2C,SAAS,IAAIe,OAAO6N,KAChC/N,QACAmvB,UAAUhuB,MAAM/B,KAAKM,MAAM,GAAG,CAAC,CACjC;AACA,YAAIlD,SAAS2C,aAAa,OAAO3C,MAAM8C,QAAS,UAAU;AACxD,cAAIF,KAAK/B,WAAW,KAAK8xB,UAAUhuB,MAAM/B,KAAK/B,WAAW;AAChD,mBAAA,CACL6G,eAAe,CAAC1H,KAAK,GAAGiC,MAAMjC,MAAMd,IAAI,EAAE,CAAC,GAC3C,CAAC;AAAA,cAAC4D,MAAM9C,MAAM8C;AAAAA,YAAAA,CAAK,CAAC;AAGxB,gBAAM8vB,UAAUlrB,eACd,CAAC1H,KAAK,GACNiC,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,EAAE,CAAC;AACCA,cAAAA,OAAOie,YAAYmR,OAAO,GAAG;AAC/B,kBAAMC,UAAUD,QAAQtvB,SAASqvB,UAAUhuB,MAAM/B,KAAK,CAAC,CAAC;AACpDiwB,gBAAAA;AACK,qBAAA,CACLA,SACA,CAAC;AAAA,gBAAC/vB,MAAM9C,MAAM8C;AAAAA,iBAAO,YAAY;AAAA,gBAACA,MAAM+vB,QAAQ/vB;AAAAA,cAAAA,CAAK,CAAC;AAAA,UAAA;AAAA,QAG5D;AAAA,MACF;AAEK,aAAA,CAACkB,QAAWA,MAAS;AAAA,IAC9B;AAAA,IACA8uB,aACEppB,CACwB,YAAA;AACpB6H,UAAAA;AACA,UAAA;AACF,cAAM,CAACU,IAAI,IAAI7O,MAAMK,KACnBC,OAAOC,MAAMH,QAAQ;AAAA,UACnBI,IAAI,CAAE;AAAA,UACNC,OAAQC,CAAAA,MAAMA,EAAEhB,SAAS4G,QAAQ5G;AAAAA,QAClC,CAAA,KAAK,CAAA,CACR,EAAE,CAAC,KAAK,CAACkB,MAAS;AACX4G,eAAAA,YAAYC,UAAUrH,QAAQyO,IAAI;AAAA,MAAA,QACnC;AAAA,MAAA;AAGDV,aAAAA;AAAAA,IACT;AAAA,IACAwhB,mBAAmBA,MAA4B;AAC7C,UAAI,CAACvvB,OAAO6B,aAAa7B,OAAO6B,UAAUV,MAAM/B,KAAK/B,SAAS;AAC5D,eAAO,CAAE;AAEP,UAAA;AACF,cAAMkyB,oBAA0C,CAAA,GAC1CC,QAAQtvB,OAAOC,MAAMH,QAAQ;AAAA,UACjCI,IAAIJ,OAAO6B;AAAAA,UACXxB,OAAQ0N,CACNnJ,SAAAA,KAAKC,OAAOkJ,IAAI,KAChBA,KAAK7P,UAAUsC,UACfZ,MAAMC,QAAQkO,KAAK7P,KAAK,KACxB6P,KAAK7P,MAAMb,SAAS;AAAA,QAAA,CACvB;AACD,mBAAW,CAACZ,MAAM2C,IAAI,KAAKowB,OAAO;AAChC,gBAAM,CAAChzB,KAAK,IAAI0D,OAAO6N,KAAK/N,QAAQZ,MAAM;AAAA,YAAC4O,OAAO;AAAA,UAAA,CAAE;AAChDhO,iBAAOie,YAAYzhB,KAAK,KAC1BA,MAAMoH,UAAU2S,QAAS5C,CAAQ,QAAA;AAE7B/O,iBAAKC,OAAOpI,IAAI,KAChBA,KAAKyB,SACL0B,MAAMC,QAAQpD,KAAKyB,KAAK,KACxBzB,KAAKyB,MAAM2U,SAASc,IAAIrU,IAAI,KAE5BiwB,kBAAkB9sB,KAAKkR,GAAG;AAAA,UAAA,CAE7B;AAAA,QAAA;AAGE4b,eAAAA;AAAAA,MAAAA,QACD;AACN,eAAO,CAAE;AAAA,MAAA;AAAA,IAEb;AAAA,IACAE,oBACEC,oBAEOD,mBAAmB;AAAA,MAACzvB;AAAAA,MAAQ3B,YAAY;AAAA,QAAC3C,MAAMg0B;AAAAA,MAAAA;AAAAA,IAAc,CAAE;AAAA,IAExEC,eAAeA,CAAC/zB,MAAMwB,UAAU;AAC1BwyB,UAAAA;AAEGnX,aAAAA,OAAAA,mBAAmBzY,QAAQ,MAAM;AACtC4vB,gBAAQC,kCAAkC;AAAA,UACxCtf,SAAS;AAAA,YACPwB,cAAciE,YAAYkB,YAAY,EAAE3G,QAAQwB;AAAAA,YAChDzT,QAAQG;AAAAA,UACV;AAAA,UACA6T,QAAQ;AAAA,YACN1W,MAAM;AAAA,YACNyC,YAAY;AAAA,cAAC3C,MAAME,KAAKF;AAAAA,cAAM0B,OAAOA,SAAS,CAAA;AAAA,YAAE;AAAA,YAChD4C;AAAAA,UAAAA;AAAAA,QACF,CACD;AAAA,MAAA,CACF,GACDA,OAAO+J,SAAAA,GAEA6lB;AAAAA,IACT;AAAA,IACA9mB,QAAQA,CACNjH,WACA5E,YACS;AACT,UAAI4E,WAAW;AACPZ,cAAAA,QAAQW,aAAaC,WAAW7B,MAAM;AAGxC,YAAA,EADFiB,SAASA,MAAMC,OAAO9B,KAAK/B,SAAS,KAAK4D,MAAME,MAAM/B,KAAK/B,SAAS;AAE7D,gBAAA,IAAInC,MAAM,eAAe;AAEjC,YAAI+F,OAAO;AACT,cAAI,CAAChE,SAAS2qB,QAAQ3qB,SAAS2qB,SAAS,YAAY;AAClD/oB,oBAAM,+BAA+B,GACrC+K,WAAWd,OAAO9I,QAAQ;AAAA,cACxBI,IAAIa;AAAAA,cACJ2oB,SAAS;AAAA,cACTlL,OAAO;AAAA,YAAA,CACR,GACD1e,OAAO+J,SAAS;AAChB;AAAA,UAAA;AAEE9M,mBAAS2qB,SAAS,aACpB/oB,QAAM,sCAAsC,GAC5C+K,WAAW0S,YAAYtc,QAAQ;AAAA,YAC7BI,IAAIa;AAAAA,YACJyd,OAAO;AAAA,YACPre,OAAQ0N,CAAAA,SAEJ/N,OAAOie,YAAYlQ,IAAI,KACtB,CAAC/N,OAAOie,YAAYlQ,IAAI,KAAKG,UAAaxN,UAAUqN,IAAI;AAAA,UAAA,CAG9D,IAEC9Q,SAAS2qB,SAAS,eACpB/oB,QAAM,wCAAwC,GAC9C+K,WAAW0S,YAAYtc,QAAQ;AAAA,YAC7BI,IAAIa;AAAAA,YACJyd,OAAO;AAAA,YACPre,OAAQ0N,CAAAA,SAEJA,KAAKxO,UAAUd,MAAMhC,KAAKf;AAAAA,YACzB,CAACsE,OAAOie,YAAYlQ,IAAI,KAAKG,UAAaxN,UAAUqN,IAAI;AAAA,UAAA,CAG9D,IAOC/N,OAAOF,SAASzC,WAAW,MAC7B2C,OAAOF,WAAW,CAACE,OAAOwc,mBAAmB;AAAA,YAACpgB,YAAY,CAAA;AAAA,UAAA,CAAG,CAAC,IAEhE4D,OAAO+J,SAAS;AAAA,QAAA;AAAA,MAClB;AAAA,IAEJ;AAAA,IACA+lB,kBACEl0B,CACS,SAAA;AACToa,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNsmB,eAAe;AAAA,UACbtmB,MAAM;AAAA,UACNyC,YAAY;AAAA,YAAC3C,MAAME,KAAKF;AAAAA,UAAAA;AAAAA,QAC1B;AAAA,QACAsE;AAAAA,MAAAA,CACD;AAAA,IACH;AAAA,IACA+vB,cAAcA,MAA8B;AAC1C,UAAIpF,UAA2B;AAC/B,UAAI3qB,OAAO6B,WAAW;AACpB,cAAM+oB,WAAWrlB,6BAA6B7G,IAAIsB,OAAO6B,SAAS;AAC9D+oB,YAAAA;AACKA,iBAAAA;AAEC5pB,kBAAAA,oBACRkD,eACElE,OAAOF,UACPrB,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC,GACAA,OAAO6B,WACPpD,KACF,GACA8G,6BAA6BsC,IAAI7H,OAAO6B,WAAW8oB,OAAO;AAAA,MAAA;AAErDA,aAAAA;AAAAA,IACT;AAAA,IACAqF,UAAUA,MACD9rB,eACLlE,OAAOF,UACPrB,MAAMjC,MAAMd,MACZ4J,qBAAqB5G,IAAIsB,MAAM,CACjC;AAAA,IAEFiwB,sBAAsBA,MACb,CAAC,CAACjwB,OAAO6B,aAAaJ,MAAMkM,YAAY3N,OAAO6B,SAAS;AAAA,IAEjEquB,qBAAqBA,MACZ,CAAC,CAAClwB,OAAO6B,aAAaJ,MAAM2nB,WAAWppB,OAAO6B,SAAS;AAAA,IAEhEygB,aAAaA,MAAM;AACVA,aAAAA,YAAAA,GACPtiB,OAAO+J,SAAS;AAAA,IAClB;AAAA,IACAomB,aAAaA,MACJjsB,eAAelE,OAAOmwB,eAAe1xB,MAAMjC,MAAMd,IAAI;AAAA,IAE9D00B,yBAAyBA,CACvBC,YACAC,eACG;AAEGC,YAAAA,SAAS3uB,aAAayuB,YAAYrwB,MAAM,GACxCwwB,SAAS5uB,aAAa0uB,YAAYtwB,MAAM;AAGxByB,aAAAA,MAAMC,QAAQ6uB,MAAM,KAAK9uB,MAAMC,QAAQ8uB,MAAM,KAG5B/uB,MAAMoR,SAAS0d,QAAQC,MAAM;AAAA,IAAA;AAAA,EAIxE;AAGF;AAEA,SAASf,mBAAmB;AAAA,EAC1BzvB;AAAAA,EACA3B;AAMF,GAAG;AACD,MAAI,CAAC2B,OAAO6B,aAAa7B,OAAO6B,UAAUV,MAAM/B,KAAK/B,SAAS;AACrD,WAAA;AAGL,MAAA;AACF,UAAMmyB,QAAQ,CACZ,GAAGtvB,OAAOC,MAAMH,QAAQ;AAAA,MACtBI,IAAIJ,OAAO6B;AAAAA,MACXxB,OAAQ0N,CAAAA,SAASnJ,KAAKC,OAAOkJ,IAAI;AAAA,IAAA,CAClC,CAAC;AAGAyhB,QAAAA,MAAMnyB,WAAW,KAKnBmyB,MAAMhd,KACJ,CAAC,CAAC/V,IAAI,MACJ,CAAC6pB,qBAAmB7pB,IAAI,KAAK,CAACA,KAAKyB,SAASzB,KAAKyB,OAAOb,WAAW,CACvE,EAEO,QAAA;AAEHozB,UAAAA,oBAAoBjB,MAAMkB,OAAO,CAACC,aAAa,CAAGvxB,EAAAA,IAAI,MAAM;AAChE,YAAM,CAAC5C,KAAK,IAAI0D,OAAO6N,KAAK/N,QAAQZ,MAAM;AAAA,QAAC4O,OAAO;AAAA,MAAA,CAAE;AACpD,aAAIhO,OAAOie,YAAYzhB,KAAK,KAAKA,MAAMoH,WAC9B,CAAC,GAAG+sB,aAAa,GAAGn0B,MAAMoH,QAAQ,IAEpC+sB;AAAAA,IACT,GAAG,EAA0B;AAEtBnB,WAAAA,MAAMtV,MAAM,CAAC,CAACzd,IAAI,MAClB6pB,qBAAmB7pB,IAAI,IAEPA,KAAKyB,OAAOP,IAC9BizB,CAAAA,YACCH,kBAAkBp1B,KAAMsY,CAAAA,QAAQA,KAAKrU,SAASsxB,OAAO,GAAGrxB,KAC5D,GAEqBsT,SAASxU,WAAW3C,IAAI,IAPP,EAQvC;AAAA,EAAA,QACK;AACC,WAAA;AAAA,EAAA;AAEX;AAoBO,MAAMm0B,oCAGTA,CAAC;AAAA,EAACtf;AAAAA,EAAS+B;AAAM,MAAM;AACnBtS,QAAAA,SAASsS,OAAOtS,QAChB;AAAA,IAAC6B,WAAWgvB;AAAAA,EAAAA,IAAqB7wB;AACnC4vB,MAAAA;AAEJ,MAAIiB,sBACEpvB,MAAMkM,YAAYkjB,iBAAiB,MACrC7wB,OAAOirB,gBAAgB,GACvBjrB,OAAO+J,SAAAA,IAIL/J,OAAO6B,YAAW;AACpB,QAAI4kB,UACAqK;AACJ,UAAMC,eAAuB,CAAE;AAE/B,QAAI,CAAC/wB,OAAO6B;AACV;AAGI6rB,UAAAA,iBAAiBxtB,OAAOC,MAAMH,QAAQ;AAAA,MAC1CI,IAAIJ,OAAO6B;AAAAA,MACXxB,OAAQ0N,CAAAA,SAAS/N,OAAOie,YAAYlQ,IAAI;AAAA,MACxCyK,SAAS/W,MAAME,WAAW3B,OAAO6B,SAAS;AAAA,IAAA,CAC3C;AAED,eAAW,CAACrF,OAAO2C,SAAS,KAAKuuB,gBAAgB;AAK/C,UAJIlxB,MAAMsD,SAASzC,WAAW,KAI1Bb,MAAMsD,SAASzC,WAAW,KAAKb,MAAMsD,SAAS,CAAC,EAAE6C,SAAS;AAC5D;AAGF,YAAMquB,gBAAgBzgB,QAAQwB,aAAAA,GACxBnO,WAAWpH,MAAMoH,YAAY,CAAE;AACbA,eAASvI,KAC9BisB,CACCA,YAAAA,QAAQ/nB,UAAU+S,OAAOjU,WAAW3C,QACpC4rB,QAAQhoB,SAAS0xB,aACrB,MAEwBxwB,WACtBoJ,WAAWoU,SACThe,QACA;AAAA,QACE4D,UAAU,CACR,GAAGA,UACH;AAAA,UACErE,OAAO+S,OAAOjU,WAAW3C;AAAAA,UACzB4D,MAAM0xB;AAAAA,UACN,GAAG1e,OAAOjU,WAAWjB;AAAAA,QACtB,CAAA;AAAA,MAAA,GAGL;AAAA,QAACgD,IAAIjB;AAAAA,MAAAA,CACP,GAEA2xB,cAAc,CAAC;AAAA,QAACxxB,MAAM9C,MAAM8C;AAAAA,SAAO,YAAY;AAAA,QAACA,MAAM0xB;AAAAA,MAAAA,CAAc,GAChEvvB,MAAME,WAAW3B,OAAO6B,SAAS,IACnCkvB,aAAaE,QAAQH,WAAW,IAEhCC,aAAatuB,KAAKquB,WAAW,IAIjClnB,WAAWoU,SAAShe,QAAQ,IAAI;AAAA,QAACK,OAAOuE,KAAKC;AAAAA,QAAQ8kB,OAAO;AAAA,MAAA,CAAK;AAEjE,YAAM7pB,WAAWkjB,KAAKljB,SAASE,QAAQb,SAAS;AAEhD,iBAAW,CAAC1C,MAAM2C,IAAI,KAAKU,UAAU;AAC/B,YAAA,CAACE,OAAO4f,WAAWnjB,IAAI,KAIvB,CAACgF,MAAMoR,SAAS7S,OAAO6B,WAAWzC,IAAI;AACxC;AAGIlB,cAAAA,QAAQzB,KAAKyB,SAAS,IACtBgzB,8BAA8BhzB,MAAMlC,OAAQgY,CAChDpQ,SAAAA,SAAS4O,KACN8U,CACCA,YAAAA,QAAQhoB,SAAS0U,QACjBsT,QAAQ/nB,UAAU+S,OAAOjU,WAAW3C,IACxC,CACF;AAEAkO,mBAAWoU,SACThe,QACA;AAAA,UACE9B,OAAO,CACL,GAAGA,MAAMlC,OACNgY,CAAAA,SAAS,CAACkd,4BAA4Bre,SAASmB,IAAI,CACtD,GACAgd,aAAa;AAAA,QAAA,GAGjB;AAAA,UAAC5wB,IAAIhB;AAAAA,QAAAA,CACP,GACAqnB,WAAW,CAAC;AAAA,UAACnnB,MAAM9C,MAAM8C;AAAAA,WAAO,YAAY;AAAA,UAACA,MAAM7C,KAAK6C;AAAAA,QAAAA,CAAK;AAAA,MAAA;AAAA,IAC/D;AAGEwxB,mBAAerK,aACjBmJ,QAAQ;AAAA,MACNkB;AAAAA,MACAC;AAAAA,MACAtK;AAAAA,IAAAA;AAAAA,EACF;AAICmJ,SAAAA;AACT,GAEauB,uCAETA,CAAC;AAAA,EAAC7e;AAAM,MAAM;AAChB,QAAMtS,SAASsS,OAAOtS;AAItB,MAFAnB,QAAM,uBAAuByT,OAAOjU,WAAW3C,IAAI,GAE/C,EAACsE,OAAO6B;AAIZ,QAAIJ,MAAMkM,YAAY3N,OAAO6B,SAAS,GAAG;AACjC,YAAA,CAACrF,OAAO2C,SAAS,IAAIe,OAAO6N,KAAK/N,QAAQA,OAAO6B,WAAW;AAAA,QAC/DmM,OAAO;AAAA,MAAA,CACR;AAEG,UAAA,CAAChO,OAAOie,YAAYzhB,KAAK;AAC3B;AAII40B,YAAAA,wBADW50B,MAAMoH,YAAY,CAAA,GACG5H,OACnCsrB,CAAAA,YAAYA,QAAQ/nB,UAAU+S,OAAOjU,WAAW3C,IACnD,GAEM,CAAC21B,eAAeC,iBAAiB,IAAIpxB,OAAO6N,KAChD/N,QACAA,OAAO6B,WACP;AAAA,QACEmM,OAAO;AAAA,MAAA,CAEX;AAEI,UAAA,CAAChO,OAAO4f,WAAWyR,aAAa;AAClC;AAGIE,YAAAA,qBAAqBF,cAAcnzB,OAAO7C,KAAM2Y,CAAAA,SACpDod,qBAAqB5e,KAAM8U,CAAYA,YAAAA,QAAQhoB,SAAS0U,IAAI,CAC9D;AAEA,UAAI,CAACud;AACH;AAGF,YAAMC,kCAEF,CAAE;AAEN,iBAAW,CAAC7xB,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQb,WAAW;AAAA,QAChEqZ,SAAS;AAAA,MAAA,CACV;AACC,YAAKxY,OAAO4f,WAAWjgB,KAAK,KAIvB8xB,KAAUnoB,SAAS7J,WAAW6xB,iBAAiB;AAIhD3xB,cAAAA,MAAMzB,OAAO2U,SAAS0e,kBAAkB;AAC1CC,4CAAgC/uB,KAAK,CAAC9C,OAAOF,SAAS,CAAC;AAAA;AAEvD;AAIJ,YAAMiyB,8BAEF,CAAE;AAEN,iBAAW,CAAC/xB,OAAOF,SAAS,KAAKujB,KAAKljB,SAASE,QAAQb,SAAS;AAC9D,YAAKa,OAAO4f,WAAWjgB,KAAK,KAIvB8xB,KAAU5K,QAAQpnB,WAAW6xB,iBAAiB;AAI/C3xB,cAAAA,MAAMzB,OAAO2U,SAAS0e,kBAAkB;AAC1CG,wCAA4BjvB,KAAK,CAAC9C,OAAOF,SAAS,CAAC;AAAA;AAEnD;AAIJ,iBAAW,CAACE,OAAOF,SAAS,KAAK,CAC/B,GAAG+xB,iCACH,CAACH,eAAeC,iBAAiB,GACjC,GAAGI,2BAA2B;AAE9B9nB,mBAAWoU,SACThe,QACA;AAAA,UACE9B,OAAOyB,MAAMzB,OAAOlC,OAAQgY,CAAAA,SAASA,SAASud,kBAAkB;AAAA,QAAA,GAElE;AAAA,UAACnxB,IAAIX;AAAAA,QAAAA,CACP;AAAA,IAAA,OAEG;AACMue,iBAAAA,SACThe,QACA,IACA;AAAA,QACEK,OAAQ0N,CAAAA,SAAS/N,OAAO4f,WAAW7R,IAAI;AAAA,QACvC4b,OAAO;AAAA,QACPC,SAAS;AAAA,MAAA,CAEb;AAEM+H,YAAAA,SAASzxB,OAAOC,MAAMH,QAAQ;AAAA,QAClCI,IAAIJ,OAAO6B;AAAAA,QACXxB,OAAQ0N,CAAAA,SAAS/N,OAAOie,YAAYlQ,IAAI;AAAA,MAAA,CACzC;AAED,iBAAW,CAACvR,OAAO2C,SAAS,KAAKwyB,QAAQ;AACvC,cAAM7xB,WAAWkjB,KAAKljB,SAASE,QAAQb,SAAS;AAEhD,mBAAW,CAACQ,OAAOF,SAAS,KAAKK,UAAU;AACrC,cAAA,CAACE,OAAO4f,WAAWjgB,KAAK,KAIxB,CAAC8B,MAAMoR,SAAS7S,OAAO6B,WAAWpC,SAAS;AAC7C;AAGImE,gBAAAA,WAAWpH,MAAMoH,YAAY,IAC7B1F,QAAQyB,MAAMzB,SAAS,CAAA,GACvB0zB,yBAAyB1zB,MAAMlC,OAAQgY,CAC3BpQ,SAAAA,SAASvI,KAAMisB,CAAAA,aAAYA,SAAQhoB,SAAS0U,IAAI,GAChDzU,UAAU+S,OAAOjU,WAAW3C,IAC7C;AAEGk2B,iCAAuBv0B,WAAWa,MAAMb,UAC1CuM,WAAWoU,SACThe,QACA;AAAA,YACE9B,OAAO0zB;AAAAA,UAAAA,GAET;AAAA,YAACxxB,IAAIX;AAAAA,UAAAA,CACP;AAAA,QAAA;AAAA,MAEJ;AAAA,IACF;AAEJ,GAEaoyB,uCAGTA,CAAC;AAAA,EAACthB;AAAAA,EAAS+B;AAAM,MAAM;AAMzB,MALiBmd,mBAAmB;AAAA,IAClCzvB,QAAQsS,OAAOtS;AAAAA,IACf3B,YAAY;AAAA,MAAC3C,MAAM4W,OAAOjU,WAAW3C;AAAAA,IAAAA;AAAAA,EAAI,CAC1C;AAGsC,yCAAA;AAAA,MACnC6U;AAAAA,MACA+B,QAAQ;AAAA,QACN1W,MAAM;AAAA,QACNyC,YAAYiU,OAAOjU;AAAAA,QACnB2B,QAAQsS,OAAOtS;AAAAA,MAAAA;AAAAA,IACjB,CACD;AAAA;AAED,WAAO6vB,kCAAkC;AAAA,MACvCtf;AAAAA,MACA+B,QAAQ;AAAA,QACN1W,MAAM;AAAA,QACNyC,YAAYiU,OAAOjU;AAAAA,QACnB2B,QAAQsS,OAAOtS;AAAAA,MAAAA;AAAAA,IACjB,CACD;AAEL;ACv5BO,SAAS+uB,YAAY;AAAA,EAC1BvyB;AAAAA,EACA2lB;AAAAA,EACAniB;AAAAA,EACA1B;AAMF,GAAG;AACD,MAAK0B,OAAO6B,WAkBL;AACC,UAAA,CAAC0sB,YAAYuD,cAAc,IAAIlyB,MAAMK,KACzCC,OAAOC,MAAMH,QAAQ;AAAA,MACnBI,IAAIJ,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC;AAAA,MAC1CW,OAAQC,CAAAA,MAAM,CAACJ,OAAO6iB,SAASziB,CAAC;AAAA,IACjC,CAAA,CACH,EAAE,CAAC,KAAK,CAACE,QAAWA,MAAS;AAE7B,QAAI2hB,cAAc,SAAS;AACzB,YAAM4D,WAAW,CAAC+L,eAAe,CAAC,IAAI,CAAC;AAE5BvV,iBAAAA,YAAYvc,QAAQxD,OAAO;AAAA,QAAC4D,IAAI2lB;AAAAA,MAAAA,CAAS,GACpDnc,WAAW6S,OAAOzc,QAAQ;AAAA,QACxBkB,QAAQ;AAAA,UAAC9B,MAAM,CAAC2mB,SAAS,CAAC,GAAG,CAAC;AAAA,UAAG1kB,QAAQ;AAAA,QAAC;AAAA,QAC1CF,OAAO;AAAA,UAAC/B,MAAM,CAAC2mB,SAAS,CAAC,GAAG,CAAC;AAAA,UAAG1kB,QAAQ;AAAA,QAAA;AAAA,MAAC,CAC1C;AAAA,IAAA,MACQ8gB,eAAc,WACvBvY,WAAW2S,YAAYvc,QAAQxD,OAAO;AAAA,MAAC4D,IAAI0xB;AAAAA,IAAe,CAAA,IAE1D5xB,OAAO+lB,WAAWjmB,QAAQxD,KAAK;AAG7B+xB,kBAAc5pB,qBAAqB,CAAC4pB,UAAU,GAAGjwB,MAAM,KACzDsL,WAAW0S,YAAYtc,QAAQ;AAAA,MAACI,IAAI0xB;AAAAA,IAAAA,CAAe;AAAA,EAAA,OAzChC;AACrB,UAAMC,YAAYnyB,MAAMK,KACtBC,OAAOC,MAAMH,QAAQ;AAAA,MACnBK,OAAQC,CAAAA,MAAM,CAACJ,OAAO6iB,SAASziB,CAAC;AAAA,MAChCF,IAAI,CAAE;AAAA,MACNoY,SAAS;AAAA,IAAA,CACV,CACH,EAAE,CAAC;AAIHtY,WAAO+lB,WAAWjmB,QAAQxD,KAAK,GAE3Bu1B,aAAaptB,qBAAqB,CAACotB,UAAU,CAAC,CAAC,GAAGzzB,MAAM,KAG1DsL,WAAW0S,YAAYtc,QAAQ;AAAA,MAACI,IAAI2xB,UAAU,CAAC;AAAA,IAAA,CAAE;AAAA,EAAA;AA4BvD;ACxDO,MAAMC,wCAETA,CAAC;AAAA,EAACzhB;AAAAA,EAAS+B;AAAM,MAAM;AACnB9V,QAAAA,QAAQ4G,aACZ,CACE;AAAA,IACE9D,MAAMiR,QAAQwB,aAAa;AAAA,IAC3BxS,OAAO+S,OAAO1U,YAAYlC;AAAAA,IAC1B,GAAI4W,OAAO1U,YAAYR,QAAQkV,OAAO1U,YAAYR,QAAQ,CAAA;AAAA,EAAC,CAC5D,GAEH;AAAA,IAACiG,aAAakN,QAAQjS;AAAAA,EACxB,CAAA,EAAE,CAAC;AAES,cAAA;AAAA,IACV9B;AAAAA,IACA2lB,WAAW7P,OAAO6P;AAAAA,IAClBniB,QAAQsS,OAAOtS;AAAAA,IACf1B,QAAQiS,QAAQjS;AAAAA,EAAAA,CACjB;AACH,GCnBa2zB,kCAETA,CAAC;AAAA,EAAC1hB;AAAAA,EAAS+B;AAAM,MAAM;AACzB,QAAMP,eAAexB,QAAQwB,cACvBzT,SAASiS,QAAQjS,QACjB0B,SAASsS,OAAOtS;AAEtB,MAAI,CAACA,OAAO6B;AACV;AAGF,QAAM,CAAC8lB,SAAS,IAAI/nB,MAAMK,KACxBC,OAAOC,MAAMH,QAAQ;AAAA,IACnB4nB,MAAM;AAAA,IACNxnB,IAAIJ,OAAO6B,UAAUV;AAAAA,IACrBd,OAAQC,CAAAA,MAAMN,OAAO4f,WAAWtf,CAAC;AAAA,IACjCoe,OAAO;AAAA,EACR,CAAA,CACH,EAAE,CAAC,KAAK,CAACle,MAAS,GACZ0xB,kBACJvK,WAAWzpB,OAAOlC,OAAQgY,CACxB1V,SAAAA,OAAOlC,WAAWoW,KAAMrU,CAAcA,cAAAA,UAAUf,UAAU4W,IAAI,CAChE,KAAK,CAAE,GACHme,mBACJxK,WAAWzpB,OAAOlC,OACfgY,UACC,CAAC1V,OAAOlC,WAAWoW,KAAMrU,CAAcA,cAAAA,UAAUf,UAAU4W,IAAI,CACnE,KAAK,CAAE,GAEHoe,kBAAkBpyB,OAAO6B,UAAUX,OAAO9B,KAAKM,MAAM,GAAG,CAAC,GACzDoyB,iBAAiB9xB,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,GACvD6uB,aAAavL,KAAKwL,WAAWxuB,QAAQ8xB,cAAc;AAIrD9xB,MAAAA,OAAOie,YAAYsQ,UAAU,GAAG;AAClC,UAAM,CAAC8D,OAAOC,GAAG,IAAI7wB,MAAM8wB,MAAMvyB,OAAO6B,SAAS,GAC3C2wB,sBACJjE,WAAWzuB,SAASyuB,WAAWzuB,SAASzC,SAAS,CAAC,GAC9Co1B,kBAAkB3xB,QAAQuxB,OAAO;AAAA,MACrCjzB,MAAM,CAAC,GAAG0yB,gBAAgBvD,WAAWzuB,SAASzC,SAAS,CAAC;AAAA,MACxDgE,QAAQrB,OAAO4f,WAAW4S,mBAAmB,IACzCA,oBAAoB7vB,KAAKtF,SACzB;AAAA,IAAA,CACL,GACKq1B,oBAAoB5xB,QAAQwxB,KAAK;AAAA,MACrClzB,MAAM,CAAC,GAAG0yB,gBAAgB,CAAC;AAAA,MAC3BzwB,QAAQ;AAAA,IAAA,CACT;AAED,QAAIoxB,mBAAmBhxB,MAAMkM,YAAY3N,OAAO6B,SAAS,GAAG;AACnDokB,aAAAA,WACLjmB,QACAA,OAAOwc,mBAAmB;AAAA,QACxBpgB,YAAY,CAAE;AAAA,QACduS,UAAU4f,WAAW5f;AAAAA,QACrBD,OAAO6f,WAAW7f;AAAAA,MAAAA,CACnB,CACH;AAEA;AAAA,IAAA;AAGF,QAAIgkB,qBAAqBjxB,MAAMkM,YAAY3N,OAAO6B,SAAS,GAAG;AACrDokB,aAAAA,WACLjmB,QACAA,OAAOwc,mBAAmB;AAAA,QACxBpgB,YAAY+1B,iBAAiB90B,WAAW,IAAI60B,kBAAkB,CAAE;AAAA,QAChEvjB,UAAU4f,WAAW5f;AAAAA,QACrBD,OAAO6f,WAAW7f;AAAAA,MAAAA,CACnB,CACH;AAEA,YAAM,CAACikB,aAAa,IAAIppB,KAAKyc,KAAK8L,cAAc;AAEhDloB,iBAAW6S,OAAOzc,QAAQ;AAAA,QACxBkB,QAAQ;AAAA,UAAC9B,MAAM,CAACuzB,eAAe,CAAC;AAAA,UAAGtxB,QAAQ;AAAA,QAAC;AAAA,QAC5CF,OAAO;AAAA,UAAC/B,MAAM,CAACuzB,eAAe,CAAC;AAAA,UAAGtxB,QAAQ;AAAA,QAAA;AAAA,MAAC,CAC5C;AAED;AAAA,IAAA;AAGF,UAAMuxB,wBAAwBR,gBAAgB,CAAC,MAAMN,eAAe,CAAC;AAIrE,QAF4B,CAACY,qBAAqB,CAACD,mBAExB,CAACG,uBAAuB;AAC1Cna,aAAAA,mBAAmBzY,QAAQ,MAAM;AACtC,YAAI,CAACA,OAAO6B;AACV;AAGF+H,mBAAWipB,WAAW7yB,QAAQ;AAAA,UAC5BI,IAAIJ,OAAO6B;AAAAA,QAAAA,CACZ;AAEK,cAAA,CAACklB,UAAU+L,YAAY,IAAI5yB,OAAO6N,KACtC/N,QACAuJ,KAAKyc,KAAK8L,cAAc,GACxB;AAAA,UAAC9jB,OAAO;AAAA,QAAA,CACV;AAEApE,YAAAA,WAAWkiB,aAAa9rB,QAAQ;AAAA,UAC9BkB,QAAQ;AAAA,YAAC9B,MAAM,CAAC,GAAG0zB,cAAc,CAAC;AAAA,YAAGzxB,QAAQ;AAAA,UAAC;AAAA,UAC9CF,OAAO;AAAA,YAAC/B,MAAM,CAAC,GAAG0zB,cAAc,CAAC;AAAA,YAAGzxB,QAAQ;AAAA,UAAA;AAAA,QAC7C,CAAA,GAMCrB,OAAOie,YAAY8I,QAAQ,KAC3BA,SAASnjB,YACTmjB,SAASnjB,SAASvG,SAAS,GAC3B;AACA,gBAAM01B,iBAAiB,oBAAIC,IAAoB,GAEzCC,gBAAgBrzB,MAAMK,KAC1B+iB,KAAKljB,SAASE,QAAQ8xB,cAAc,CACtC,EACGn0B,IAAK+d,CAAAA,UAAUA,MAAM,CAAC,CAAC,EACvB1f,OAAQ+R,CAAAA,SAAS/N,OAAO4f,WAAW7R,IAAI,CAAC,GACrCjO,WAAWkjB,KAAKljB,SAASE,QAAQ8yB,YAAY;AAEnD,qBAAW,CAACnzB,OAAOF,SAAS,KAAKK,UAAU;AACrC,gBAAA,CAACE,OAAO4f,WAAWjgB,KAAK;AAC1B;AAGIzB,kBAAAA,QAAQyB,MAAMzB,SAAS,CAAE;AAK/B,uBAAW8V,QAAQ9V;AAEfI,qBAAOlC,WAAWoW,KAAMrU,CAAcA,cAAAA,UAAUf,UAAU4W,IAAI,KAM9Dif,cAAczgB,KAAM0gB,CAAAA,iBAClBA,aAAah1B,OAAO2U,SAASmB,IAAI,CACnC,KACA,CAAC+e,eAAexL,IAAIvT,IAAI,KAIxB+e,eAAelrB,IAAImM,MAAMjC,aAAAA,CAAc;AAIrCohB,kBAAAA,WAAWj1B,MAAMP,IACpBqW,CAAAA,SAAS+e,eAAer0B,IAAIsV,IAAI,KAAKA,IACxC;AAGKlT,oBAAQ5C,OAAOi1B,QAAQ,KAC1BvpB,WAAWoU,SACThe,QACA;AAAA,cAAC9B,OAAOi1B;AAAAA,YAAAA,GACR;AAAA,cACE/yB,IAAIX;AAAAA,YAAAA,CAER;AAAA,UAAA;AAMJ,gBAAM4nB,cAAcN,SAASnjB,SAASjG,IAAK2pB,CAAa,aAAA;AAAA,YACtD,GAAGA;AAAAA,YACHhoB,MAAMyzB,eAAer0B,IAAI4oB,QAAQhoB,IAAI,KAAKgoB,QAAQhoB;AAAAA,UAAAA,EAClD;AAGGwB,kBAAQimB,SAASnjB,UAAUyjB,WAAW,KACzCzd,WAAWoU,SACThe,QACA;AAAA,YAAC4D,UAAUyjB;AAAAA,UAAAA,GACX;AAAA,YACEjnB,IAAI0yB;AAAAA,YACJzyB,OAAQ0N,CAAAA,SAAS/N,OAAOie,YAAYlQ,IAAI;AAAA,UAAA,CAE5C;AAAA,QAAA;AAAA,MAEJ,CACD,GACD/N,OAAO+J,SAAS;AAChB;AAAA,IAAA;AAAA,EACF;AAGFH,aAAWipB,WAAW7yB,QAAQ;AAAA,IAACyb,QAAQ;AAAA,EAAA,CAAK;AAC9C,GAEa2X,sCAETA,CAAC;AAAA,EAAC7iB;AAAAA,EAAS+B;AAAM,MAAM;AAGO,kCAAA;AAAA,IAC9B/B;AAAAA,IACA+B,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ1W,MAAM;AAAA,IAAA;AAAA,EAAc,CACzC;AACH,GChNay3B,yCAETA,CAAC;AAAA,EAAC9iB;AAAAA,EAAS+B;AAAM,MAAM;AAEvB,MAAA,CAAC/B,QAAQjS,OAAO3B,cAAc6V,KAC3BzU,CAAiBA,iBAAAA,aAAarC,SAAS4W,OAAOvU,aAAarC,IAC9D,GACA;AACAiiB,YAAQN,MAAM,wCAAwC;AACtD;AAAA,EAAA;AAGE,MAAA,CAAC/K,OAAOtS,OAAO6B,WAAW;AAC5B8b,YAAQN,MAAM,kDAAkD;AAChE;AAAA,EAAA;AAGI,QAAA,CAACiW,cAAc,IAAI1zB,MAAMK,KAC7BC,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC1BI,IAAIkS,OAAOtS,OAAO6B,UAAUV,MAAM/B;AAAAA,IAClCiB,OAAQ0N,CAAAA,SAASuE,OAAOtS,OAAOie,YAAYlQ,IAAI;AAAA,EAAA,CAChD,CACH,EAAE3N,GAAG,CAAC,KAAK,CAACI,QAAWA,MAAS;AAEhC,MAAI,CAAC8yB,gBAAgB;AACnB3V,YAAQN,MAAM,mDAAmD;AACjE;AAAA,EAAA;AAmBI1d,QAAAA,QAhBQyD,aACZ,CACE;AAAA,IACE7D,OAAOgR,QAAQjS,OAAO9B,MAAMd;AAAAA,IAC5B4D,MAAMiR,QAAQwB,aAAa;AAAA,IAC3BjS,UAAU,CACR;AAAA,MACEP,OAAO+S,OAAOvU,aAAarC;AAAAA,MAC3B4D,MAAMiR,QAAQwB,aAAa;AAAA,MAC3B,GAAIO,OAAOvU,aAAaX,SAAS,CAAA;AAAA,IAClC,CAAA;AAAA,EAAA,CAEJ,GAEH;AAAA,IAACiG,aAAakN,QAAQjS;AAAAA,EAAAA,CACxB,EAAE8B,GAAG,CAAC,GACeN,SAASM,GAAG,CAAC;AAElC,MAAI,CAACT,OAAO;AACVge,YAAQN,MAAM,gCAAgC;AAC9C;AAAA,EAAA;AAGSd,aAAAA,YAAYjK,OAAOtS,QAAQL,KAAK;AAC7C,GCtDa4zB,iCAETA,CAAC;AAAA,EAAChjB;AAAAA,EAAS+B;AAAM,MAAM;AACrB,MAAA,CAACA,OAAOtS,OAAO6B,WAAW;AACpBwb,YAAAA,MAAM,8CAA8C/K,MAAM;AAClE;AAAA,EAAA;AAGI,QAAA,CAACic,YAAYuD,cAAc,IAAIlyB,MAAMK,KACzCC,OAAOC,MAAMmS,OAAOtS,QAAQ;AAAA,IAC1BI,IAAIkS,OAAOtS,OAAO6B,UAAUV,MAAM/B;AAAAA,IAClCiB,OAAQ0N,CAAAA,SAASuE,OAAOtS,OAAOie,YAAYlQ,IAAI;AAAA,EAChD,CAAA,CACH,EAAE,CAAC,KAAK,CAACvN,QAAWA,MAAS;AAEzB,MAAA,CAAC+tB,cAAc,CAACuD,gBAAgB;AAC1BzU,YAAAA,MAAM,gDAAgD/K,MAAM;AACpE;AAAA,EAAA;AAGI1O,QAAAA,WAAW2qB,WAAW3qB,YAAY,CAAE,GACpC/G,cAAcyV,OAAOzV,cACvByV,OAAOzV,YAAYc,IAAKU,CAAgB,gBAAA;AAAA,IACtCkB,OAAOlB,WAAW3C;AAAAA,IAClB4D,MAAMiR,QAAQwB,aAAa;AAAA,IAC3B,GAAG1T,WAAWjB;AAAAA,IACd,IACFoD;AAEA3D,iBAAeA,YAAYQ,SAAS,KACtCuM,WAAWoU,SAAS1L,OAAOtS,QAAQ;AAAA,IACjC4D,UAAU,CAAC,GAAGA,UAAU,GAAG/G,WAAW;AAAA,EACvC,CAAA,GAGH+M,WAAW2S,YAAYjK,OAAOtS,QAAQ;AAAA,IACpCT,OAAO;AAAA,IACPD,MAAMiR,QAAQwB,aAAa;AAAA,IAC3BpP,MAAM2P,OAAO3P;AAAAA,IACbzE,OAAO,CACL,GAAIrB,aAAac,IAAKU,CAAeA,eAAAA,WAAWiB,IAAI,KAAK,CACzD,GAAA,GAAIgT,OAAOlW,cAAc,CAAG,CAAA;AAAA,EAAA,CAE/B;AACH,GC3Cao3B,mCAETA,CAAC;AAAA,EAAClhB;AAAM,MAAM;AAChB,QAAMlS,KAAKwB,aACT;AAAA,IACEV,QAAQ;AAAA,MAAC9B,MAAMkT,OAAOlS;AAAAA,MAAIiB,QAAQ;AAAA,IAAC;AAAA,IACnCF,OAAO;AAAA,MAAC/B,MAAMkT,OAAOlS;AAAAA,MAAIiB,QAAQ;AAAA,IAAA;AAAA,EAAC,GAEpCiR,OAAOtS,MACT;AAEWge,aAAAA,SACT1L,OAAOtS,QACP;AAAA,IACE,GAAIsS,OAAOnV,QAAQ;AAAA,MAACA,OAAOmV,OAAOnV;AAAAA,IAAAA,IAAS,CAAC;AAAA,IAC5C,GAAImV,OAAO3D,WAAW;AAAA,MAACA,UAAU2D,OAAO3D;AAAAA,IAAAA,IAAY,CAAC;AAAA,IACrD,GAAI2D,OAAO5D,QAAQ;AAAA,MAACA,OAAO4D,OAAO5D;AAAAA,IAAAA,IAAS,CAAA;AAAA,EAAC,GAE9C;AAAA,IAACtO;AAAAA,EAAAA,CACH;AACF,GCpBaqzB,qCAETA,CAAC;AAAA,EAACnhB;AAAM,MAAM;AAChB,QAAMlS,KAAKwB,aACT;AAAA,IACEV,QAAQ;AAAA,MAAC9B,MAAMkT,OAAOlS;AAAAA,MAAIiB,QAAQ;AAAA,IAAC;AAAA,IACnCF,OAAO;AAAA,MAAC/B,MAAMkT,OAAOlS;AAAAA,MAAIiB,QAAQ;AAAA,IAAA;AAAA,EAAC,GAEpCiR,OAAOtS,MACT;AAEA4J,aAAW+jB,WAAWrb,OAAOtS,QAAQsS,OAAO7M,OAAO;AAAA,IAACrF;AAAAA,EAAAA,CAAG;AACzD,GCsDMszB,gCAA+D;AAAA,EACnE,kBAAkB7D;AAAAA,EAClB,qBAAqBsB;AAAAA,EACrB,qBAAqBU;AAAAA,EACrB,MAAQ5D,CAAC;AAAA,IAAC3b;AAAAA,EAAAA,MAAY;AACR2b,gBAAAA,KAAK3b,OAAOtS,MAAM;AAAA,EAChC;AAAA,EACA,iBAAiB0pB;AAAAA,EACjB,oBAAoBU;AAAAA,EACpB,oBAAoBG;AAAAA,EACpB,OAASppB,CAAC;AAAA,IAACmR;AAAAA,EAAAA,MAAY;AACTnR,gBAAAA,MAAMmR,OAAOtS,MAAM;AAAA,EACjC;AAAA,EACA,mBAAmB2zB,CAAC;AAAA,IAACrhB;AAAAA,EAAAA,MAAY;AAChBA,mBAAAA,OAAOtS,QAAQsS,OAAOkQ,IAAI;AAAA,EAC3C;AAAA,EACA,kBAAkBoR,CAAC;AAAA,IAACthB;AAAAA,EAAAA,MAAY;AAChBA,kBAAAA,OAAOtS,QAAQsS,OAAOkQ,IAAI;AAAA,EAC1C;AAAA,EACA,gBAAgBqR,CAAC;AAAA,IAACvhB;AAAAA,EAAAA,MAAY;AAC5B,UAAMrR,QAAQW,aACZ;AAAA,MACEV,QAAQ;AAAA,QAAC9B,MAAMkT,OAAOnT;AAAAA,QAAWkC,QAAQ;AAAA,MAAC;AAAA,MAC1CF,OAAO;AAAA,QAAC/B,MAAMkT,OAAOnT;AAAAA,QAAWkC,QAAQ;AAAA,MAAA;AAAA,IAAC,GAE3CiR,OAAOtS,MACT;AAEA,QAAI,CAACiB,OAAO;AACV0c,cAAQN,MAAM,kDAAkD;AAChE;AAAA,IAAA;AAGSf,eAAAA,YAAYhK,OAAOtS,QAAQ;AAAA,MACpCI,IAAIa;AAAAA,IAAAA,CACL;AAAA,EACH;AAAA,EACA,eAAe6yB,CAAC;AAAA,IAACvjB;AAAAA,IAAS+B;AAAAA,EAAAA,MAAY;AACpC,UAAMlV,QAAQ8G,eACZoO,OAAOtS,OAAOF,UACdyQ,QAAQjS,OAAO9B,MAAMd,MACrB4J,qBAAqB5G,IAAI4T,OAAOtS,MAAM,CACxC,GAEMkB,SAAS6yB,gCAAgC;AAAA,MAC7C32B;AAAAA,MACA42B,aAAa1hB,OAAOpR;AAAAA,IAAAA,CACrB,GACKC,QAAQ4yB,gCAAgC;AAAA,MAC5C32B;AAAAA,MACA42B,aAAa1hB,OAAOnR;AAAAA,IAAAA,CACrB;AAEG,QAAA,CAACD,UAAU,CAACC,OAAO;AACrBwc,cAAQN,MAAM,gDAAgD;AAC9D;AAAA,IAAA;AAGF,UAAMpc,QAAQW,aACZ;AAAA,MACEV;AAAAA,MACAC;AAAAA,IAAAA,GAEFmR,OAAOtS,MACT;AAEA,QAAI,CAACiB,OAAO;AACV0c,cAAQN,MAAM,kDAAkD;AAChE;AAAA,IAAA;AAGSvU,eAAAA,OAAOwJ,OAAOtS,QAAQ;AAAA,MAC/BI,IAAIa;AAAAA,IAAAA,CACL;AAAA,EACH;AAAA,EACA,uBAAuB+wB;AAAAA,EACvB,gBAAgBC;AAAAA,EAChB,wBAAwBoB;AAAAA,EACxB,qBAAqBD;AAAAA,EACrB,eAAeG;AAAAA,EACf,eAAeU,CAAC;AAAA,IAAC3hB;AAAAA,EAAAA,MAAY;AAChBA,eAAAA,OAAOtS,QAAQsS,OAAO3P,IAAI;AAAA,EACvC;AAAA,EACA,qBAAqBuxB,CAAC;AAAA,IAAC3jB;AAAAA,IAAS+B;AAAAA,EAAAA,MAAY;AACpC9V,UAAAA,QAAQ4G,aACZ,CACE;AAAA,MACE9D,MAAMiR,QAAQwB,aAAa;AAAA,MAC3BxS,OAAOgR,QAAQjS,OAAO9B,MAAMd;AAAAA,MAC5ByB,OAAOoT,QAAQjS,OAAOpC,OAAO,CAAC,EAAEkB,SAAS;AAAA,MACzCwG,UAAU,CAAE;AAAA,MACZ9D,UAAUwS,OAAO9O,WAAW1D,UAAUnC,IAAKgC,CAAW,WAAA;AAAA,QACpD,GAAGA;AAAAA,QACHL,MAAMiR,QAAQwB,aAAa;AAAA,MAC7B,EAAE,KAAK,CACL;AAAA,QACExS,OAAOgR,QAAQjS,OAAO7B,KAAKf;AAAAA,QAC3B4D,MAAMiR,QAAQwB,aAAa;AAAA,QAC3BpP,MAAM;AAAA,MACP,CAAA;AAAA,IAAA,CAEJ,GAEH;AAAA,MAACU,aAAakN,QAAQjS;AAAAA,IACxB,CAAA,EAAE,CAAC;AAES,gBAAA;AAAA,MACV9B;AAAAA,MACAwD,QAAQsS,OAAOtS;AAAAA,MACf1B,QAAQiS,QAAQjS;AAAAA,MAChB6jB,WAAW7P,OAAO6P;AAAAA,IAAAA,CACnB;AAAA,EACH;AAAA,EACA,QAAUgS,CAAC;AAAA,IAAC7hB;AAAAA,EAAAA,MAAY;AACtBA,WAAO6hB,OAAO;AAAA,EAChB;AAAA,EACA,iBAAiB3G;AAAAA,EACjB,oBAAoBD;AAAAA,EACpB,oBAAoBF;AAAAA,EACpB,cAAc+G,CAAC;AAAA,IAAC9hB;AAAAA,EAAAA,MAAY;AACpBlS,UAAAA,KAAK,CAACL,YAAYuS,OAAOlS,IAAIkS,OAAOtS,MAAM,EAAE,CAAC,CAAC,GAC9C8J,KAAK,CAAC/J,YAAYuS,OAAOxI,IAAIwI,OAAOtS,MAAM,EAAE,CAAC,CAAC;AAEzC6J,eAAAA,UAAUyI,OAAOtS,QAAQ;AAAA,MAClCI;AAAAA,MACA0J;AAAAA,MACA8d,MAAM;AAAA,IAAA,CACP;AAAA,EACH;AAAA,EACA,mBAAmByM,CAAC;AAAA,IAAC/hB;AAAAA,EAAAA,MAAY;AAC/B,UAAMlS,KAAK,CAACL,YAAYuS,OAAOlS,IAAIkS,OAAOtS,MAAM,EAAE,CAAC,CAAC,GAC9C8J,KAAK,CAACP,KAAKyc,KAAK5lB,EAAE,EAAE,CAAC,CAAC;AAEjByJ,eAAAA,UAAUyI,OAAOtS,QAAQ;AAAA,MAClCI;AAAAA,MACA0J;AAAAA,MACA8d,MAAM;AAAA,IAAA,CACP;AAAA,EACH;AAAA,EACA,iBAAiB0M,CAAC;AAAA,IAAChiB;AAAAA,EAAAA,MAAY;AACvBlS,UAAAA,KAAK,CAACL,YAAYuS,OAAOlS,IAAIkS,OAAOtS,MAAM,EAAE,CAAC,CAAC;AAEhD,QAAA,CAACuJ,KAAKgrB,YAAYn0B,EAAE;AACtB;AAGF,UAAM0J,KAAK,CAACP,KAAKirB,SAASp0B,EAAE,EAAE,CAAC,CAAC;AAErByJ,eAAAA,UAAUyI,OAAOtS,QAAQ;AAAA,MAClCI;AAAAA,MACA0J;AAAAA,MACA8d,MAAM;AAAA,IAAA,CACP;AAAA,EACH;AAAA,EACA,MAAQ6M,MAAM;AAAA,EAAC;AAAA,EACf,QAAUhY,CAAC;AAAA,IAACnK;AAAAA,EAAAA,MAAY;AACtB,UAAMoiB,eAAe9yB,aAAa0Q,OAAOzQ,WAAWyQ,OAAOtS,MAAM;AAE7D00B,mBACF9qB,WAAW6S,OAAOnK,OAAOtS,QAAQ00B,YAAY,IAE7C9qB,WAAWiP,SAASvG,OAAOtS,MAAM;AAAA,EAErC;AAAA,EACA,yBAAyB20B,CAAC;AAAA,IAACriB;AAAAA,EAAAA,MAAY;AACjC,QAAA,CAACA,OAAOtS,OAAO6B,WAAW;AAC5B8b,cAAQN,MAAM,qDAAqD;AACnE;AAAA,IAAA;AAGIle,UAAAA,YAAYmT,OAAOtS,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC;AAE/D,QAAI,CAAC6J,KAAKgrB,YAAYp1B,SAAS,GAAG;AAChCwe,cAAQN,MAAM,qCAAqC;AACnD;AAAA,IAAA;AAGIuX,UAAAA,oBAAoBrrB,KAAKirB,SAASr1B,SAAS;AAEtCsd,eAAAA,OAAOnK,OAAOtS,QAAQ40B,iBAAiB;AAAA,EACpD;AAAA,EACA,qBAAqBC,CAAC;AAAA,IAACviB;AAAAA,EAAAA,MAAY;AAC7B,QAAA,CAACA,OAAOtS,OAAO6B,WAAW;AAC5B8b,cAAQN,MAAM,iDAAiD;AAC/D;AAAA,IAAA;AAIF,UAAMsV,gBAAgB,CADJrgB,OAAOtS,OAAO6B,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,EAC9B,CAAC,IAAI,CAAC;AAE5B+c,eAAAA,OAAOnK,OAAOtS,QAAQ2yB,aAAa;AAAA,EAChD;AAAA,EACA,gBAAgB/E;AAAAA,EAChB,aAAaG;AAAAA,EACb,gBAAgBD;AAAAA,EAChB,kBAAkB0F;AAAAA,EAClB,oBAAoBC;AACtB;AAEO,SAASqB,cAAc;AAAA,EAC5BvkB;AAAAA,EACA+B;AAIF,GAAG;AACD,UAAQA,OAAO1W,MAAI;AAAA,IACjB,KAAK,qBAAqB;AACxB83B,oCAA8B,mBAAmB,EAAE;AAAA,QACjDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,iBAAiB;AACpBohB,oCAA8B,eAAe,EAAE;AAAA,QAC7CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,oBAAoB;AACvBohB,oCAA8B,kBAAkB,EAAE;AAAA,QAChDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,gBAAgB;AACnBohB,oCAA8B,cAAc,EAAE;AAAA,QAC5CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,eAAe;AAClBohB,oCAA8B,aAAa,EAAE;AAAA,QAC3CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,eAAe;AAClBohB,oCAA8B,aAAa,EAAE;AAAA,QAC3CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,qBAAqB;AACxBohB,oCAA8B,mBAAmB,EAAE;AAAA,QACjDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,iBAAiB;AACpBohB,oCAA8B,eAAe,EAAE;AAAA,QAC7CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,oBAAoB;AACvBohB,oCAA8B,kBAAkB,EAAE;AAAA,QAChDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,cAAc;AACjBohB,oCAA8B,YAAY,EAAE;AAAA,QAC1CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,mBAAmB;AACtBohB,oCAA8B,iBAAiB,EAAE;AAAA,QAC/CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,iBAAiB;AACpBohB,oCAA8B,eAAe,EAAE;AAAA,QAC7CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK;AAKH;AAAA,IAEF,KAAK,UAAU;AACbohB,oCAA8BS,OAAO;AAAA,QACnC5jB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,UAAU;AACbohB,oCAA8BjX,OAAO;AAAA,QACnClM;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,yBAAyB;AAC5BohB,oCAA8B,uBAAuB,EAAE;AAAA,QACrDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,qBAAqB;AACxBohB,oCAA8B,mBAAmB,EAAE;AAAA,QACjDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,aAAa;AAChBohB,oCAA8B,WAAW,EAAE;AAAA,QACzCnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,gBAAgB;AACnBohB,oCAA8B,cAAc,EAAE;AAAA,QAC5CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,kBAAkB;AACrBohB,oCAA8B,gBAAgB,EAAE;AAAA,QAC9CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,oBAAoB;AACvBohB,oCAA8B,kBAAkB,EAAE;AAAA,QAChDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF;AACuB,2BAAA;AAAA,QAAC/B;AAAAA,QAAS+B;AAAAA,MAAAA,CAAO;AAAA,EAAA;AAG5C;AAEA,SAASyiB,qBAAqB;AAAA,EAC5BxkB;AAAAA,EACA+B;AAIF,GAAG;AACD,UAAQA,OAAO1W,MAAI;AAAA,IACjB,KAAK,kBAAkB;AACrB83B,oCAA8B,gBAAgB,EAAE;AAAA,QAC9CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,qBAAqB;AACxBohB,oCAA8B,mBAAmB,EAAE;AAAA,QACjDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,QAAQ;AACXohB,oCAA8BzF,KAAK;AAAA,QACjC1d;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,oBAAoB;AACvBohB,oCAA8B,kBAAkB,EAAE;AAAA,QAChDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,mBAAmB;AACtBohB,oCAA8B,iBAAiB,EAAE;AAAA,QAC/CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,kBAAkB;AACrBohB,oCAA8B,gBAAgB,EAAE;AAAA,QAC9CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,SAAS;AACZohB,oCAA8BvyB,MAAM;AAAA,QAClCoP;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,uBAAuB;AAC1BohB,oCAA8B,qBAAqB,EAAE;AAAA,QACnDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,wBAAwB;AAC3BohB,oCAA8B,sBAAsB,EAAE;AAAA,QACpDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,gBAAgB;AACnBohB,oCAA8B,cAAc,EAAE;AAAA,QAC5CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,qBAAqB;AACxBohB,oCAA8B,mBAAmB,EAAE;AAAA,QACjDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,eAAe;AAClBohB,oCAA8B,aAAa,EAAE;AAAA,QAC3CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,oBAAoB;AACvBohB,oCAA8B,kBAAkB,EAAE;AAAA,QAChDnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF,KAAK,UAAU;AACbohB,oCAA8BjX,OAAO;AAAA,QACnClM;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AACD;AAAA,IAAA;AAAA,IAEF;AACEohB,oCAA8B,cAAc,EAAE;AAAA,QAC5CnjB;AAAAA,QACA+B;AAAAA,MAAAA,CACD;AAAA,EAAA;AAGP;AC3hBO,SAAS0iB,oBAAoB;AAAA,EAClC12B;AAAAA,EACA22B;AAIF,GAAG;AACD,QAAM74B,aAAakC,OAAOlC,WAAWuB,IAAKQ,CAAAA,cAAcA,UAAUf,KAAK;AAGrE,UAAA;AAAA,IACE,GAAI8C,OAAOhC,MAAM+2B,mBAAmB,KAAK,CAAA;AAAA,EAAC,EAC1C/2B,SAAS,CAAE,GAEFlC,OAAQgY,CAAS5X,SAAAA,WAAWyW,SAASmB,IAAI,CAAC;AACzD;ACuLO,MAAMkhB,gBAAgB5kB,MAAM;AAAA,EACjC7R,OAAO;AAAA,IACL8R,SAAS,CAAC;AAAA,IAUVC,QAAQ,CAAC;AAAA,IACTE,SAAS,CAAC;AAAA,IACVD,OAAO,CAAA;AAAA,EAQT;AAAA,EACAE,SAAS;AAAA,IACP,2BAA2BM,OAAO;AAAA,MAChCkkB,WAAWA,CAAC;AAAA,QAAC5kB;AAAAA,QAAS/I;AAAAA,MACpBwT,OAAAA,YAAYxT,OAAO,cAAc,GAE1B,oBAAI4f,IAAI,CAAC,GAAG7W,QAAQ4kB,WAAW3tB,MAAM4tB,QAAQ,CAAC;AAAA,IAAA,CAExD;AAAA,IACD,gCAAgCnkB,OAAO;AAAA,MACrCkkB,WAAWA,CAAC;AAAA,QAAC5kB;AAAAA,QAAS/I;AAAAA,MAAAA,OACpBwT,YAAYxT,OAAO,iBAAiB,GAEpC+I,QAAQ4kB,UAAUrsB,OAAOtB,MAAM4tB,QAAQ,GAE5BhO,oBAAAA,IAAI,CAAC,GAAG7W,QAAQ4kB,SAAS,CAAC;AAAA,IAAA,CAExC;AAAA,IACD,oBAAoBlkB,OAAO;AAAA,MACzBkkB,WAAWA,CAAC;AAAA,QAAC3tB;AAAAA,MAAAA,OACXwT,YAAYxT,OAAO,kBAAkB,GAC9B,IAAI4f,IAAI5f,MAAM2tB,SAAS;AAAA,IAAA,CAEjC;AAAA,IACD,iBAAiBlkB,OAAO;AAAA,MACtB3S,QAAQA,CAAC;AAAA,QAACkJ;AAAAA,MACRwT,OAAAA,YAAYxT,OAAO,eAAe,GAC3BA,MAAMlJ;AAAAA,IAAAA,CAEhB;AAAA,IACD,oBAAoBsS,KAAK,CAAC;AAAA,MAACpJ;AAAAA,IACzBwT,OAAAA,YAAYxT,OAAO,OAAO,GACnBA,MACR;AAAA,IACD,uBAAuBoJ,KAAK,CAAC;AAAA,MAACpJ;AAAAA,IAC5BwT,OAAAA,YAAYxT,OAAO,UAAU,GACtBA,MACR;AAAA,IACD,kBAAkBoJ,KAAK;AAAA,MAAChV,MAAM;AAAA,IAAA,CAAY;AAAA,IAC1C,iBAAiBgV,KAAK;AAAA,MAAChV,MAAM;AAAA,IAAA,CAAW;AAAA,IACxC,eAAeqV,OAAO;AAAA,MACpBokB,eAAeA,CAAC;AAAA,QAAC9kB;AAAAA,QAAS/I;AAAAA,MAAAA,OACxBwT,YAAYxT,OAAO,CAAC,SAAS,UAAU,CAAC,GACjC,CAAC,GAAG+I,QAAQ8kB,eAAe7tB,KAAK;AAAA,IAAA,CAE1C;AAAA,IACD,uBAAuB8tB,eAAe,CAAC;AAAA,MAAC/kB;AAAAA,MAASglB;AAAAA,IAAAA,MAAa;AAC5D,iBAAW/tB,SAAS+I,QAAQ8kB;AAClBzkB,gBAAAA,KAAKpJ,KAAK,CAAC;AAAA,IAAA,CAEtB;AAAA,IACD,cAAcoJ,KAAK;AAAA,MAAChV,MAAM;AAAA,IAAA,CAAQ;AAAA,IAClC,wBAAwBqV,OAAO;AAAA,MAC7BokB,eAAe,CAAA;AAAA,IAAA,CAChB;AAAA,IACD,yBAAyBC,eAAe,CAAC;AAAA,MAAC/kB;AAAAA,MAAS/I;AAAAA,MAAO+tB;AAAAA,IAAAA,MAAa;AACrEva,kBAAYxT,OAAO,CAAC,kBAAkB,uBAAuB,CAAC;AAExDguB,YAAAA,gBACJhuB,MAAM5L,SAAS,2BACf4L,MAAM0a,cAActmB,SAAS,UAC7B4L,MAAM0a,cAActmB,SAAS,cAC7B4L,MAAM0a,cAActmB,SAAS,YAC7B4L,MAAM0a,cAActmB,SAAS,UACzB4E,SACC;AAAA,QACC,GAAGgH,MAAM0a;AAAAA,QACTliB,QAAQwH,MAAMxH;AAAAA,MAAAA,GAEhByiB,wBACJjb,MAAM5L,SAAS,mBACX4L,MAAMib,wBACNjiB,QAEAi1B,iBAAiB,CAAC,GAAGllB,QAAQ4kB,UAAUviB,OAAAA,CAAQ,EAAE5W,OACpDo5B,cAAaA,SAAS1jB,OAAOlK,MAAM0a,cAActmB,IACpD;AAEI65B,UAAAA,eAAep4B,WAAW,GAAG;AAC/B,YAAIolB,uBAAuB;AACGjb,sCAAAA,MAAMxH,QAAQ,MAAM;AACvCyY,mBAAAA,mBAAmBjR,MAAMxH,QAAQ,MAAM;AACxC,kBAAA;AACoB,sCAAA;AAAA,uBACfqd,OAAO;AACNA,wBAAAA,MACN,IAAIniB,MACF,sBAAsBsM,MAAM0a,cAActmB,IAAI,oBAAoByhB,MAAMqY,OAAO,EACjF,CACF;AAAA,cAAA;AAAA,YACF,CACD;AAAA,UAAA,CACF;AACD;AAAA,QAAA;AAGF,YAAI,CAACF;AACH;AAG0BhuB,oCAAAA,MAAMxH,QAAQ,MAAM;AACvCyY,iBAAAA,mBAAmBjR,MAAMxH,QAAQ,MAAM;AACxC,gBAAA;AACY,4BAAA;AAAA,gBACZuQ;AAAAA,gBACA+B,QAAQkjB;AAAAA,cAAAA,CACT;AAAA,qBACMnY,OAAO;AACdM,sBAAQN,MACN,IAAIniB,MACF,sBAAsBs6B,cAAc55B,IAAI,qBAAqB4L,MAAM0a,cAActmB,IAAI,oBAAoByhB,MAAMqY,OAAO,EACxH,CACF;AAAA,YAAA;AAAA,UACF,CACD;AAAA,QAAA,CACF,GACDluB,MAAMxH,OAAO+J,SAAS;AACtB;AAAA,MAAA;AAGI3M,YAAAA,QAAQ8G,eACZsD,MAAMxH,OAAOF,UACbyQ,QAAQjS,OAAO9B,MAAMd,MACrB4J,qBAAqB5G,IAAI8I,MAAMxH,MAAM,CACvC,GACM6B,YAAYb,oBAChB5D,OACAoK,MAAMxH,OAAO6B,WACb0O,QAAQjS,MACV,GAEMq3B,gBAAgB;AAAA,QACpBC,kBAAkBZ,oBAAoB;AAAA,UACpC12B,QAAQiS,QAAQjS;AAAAA,UAChB22B,qBAAqBztB,MAAMxH;AAAAA,QAAAA,CAC5B;AAAA,QACD+R,cAAcxB,QAAQwB;AAAAA,QACtBzT,QAAQiS,QAAQjS;AAAAA,QAChBuD;AAAAA,QACAzE;AAAAA,MACF;AAEA,UAAIy4B,sBAAsB;AAE1B,iBAAWC,iBAAiBL,gBAAgB;AAC1C,cAAMM,YACJD,cAAclkB,UAAUpR,UACxBs1B,cAAclkB,MAAM;AAAA,UAClBrB,SAASolB;AAAAA,UACTnuB,OAAOA,MAAM0a;AAAAA,QAAAA,CACd;AAEH,YAAI,CAAC6T;AACH;AAGF,cAAMC,mBAAmBF,cAAcnlB,QAAQhT,IAAKs4B,eAClDA,UACE;AAAA,UAAC1lB,SAASolB;AAAAA,UAAenuB,OAAOA,MAAM0a;AAAAA,QAAa,GACnD6T,SACF,CACF;AAEA,mBAAWG,iBAAiBF;AAC1BH,gCACEA,uBACCK,cAAc74B,SAAS,KACtB64B,cAAc1jB,KACX2jB,CAAAA,iBAAiBA,aAAav6B,SAAS,QAC1C,GAEJkmB,4BAA4Bta,MAAMxH,QAAQ,MAAM;AACvCyY,mBAAAA,mBAAmBjR,MAAMxH,QAAQ,MAAM;AAC5C,yBAAWm2B,gBAAgBD,eAAe;AACpCC,oBAAAA,aAAav6B,SAAS,SAAS;AAC7Bw6B,wCAAsBD,aAAa3uB,KAAK,IAC1C+tB,QAAQc,MAAM;AAAA,oBACZz6B,MAAM;AAAA,oBACNsmB,eAAeiU,aAAa3uB;AAAAA,oBAC5BxH,QAAQwH,MAAMxH;AAAAA,kBAAAA,CACf,IAEDu1B,QAAQc,MAAM;AAAA,oBACZz6B,MAAM;AAAA,oBACNsmB,eAAeiU,aAAa3uB;AAAAA,oBAC5BxH,QAAQwH,MAAMxH;AAAAA,kBAAAA,CACf;AAEH;AAAA,gBAAA;AAGF,sBAAMsS,SAAS;AAAA,kBACb,GAAG6jB;AAAAA,kBACHn2B,QAAQwH,MAAMxH;AAAAA,gBAChB;AAEI,oBAAA;AACY,gCAAA;AAAA,oBAACuQ;AAAAA,oBAAS+B;AAAAA,kBAAAA,CAAO;AAAA,yBACxB+K,OAAO;AACdM,0BAAQN,MACN,IAAIniB,MACF,sBAAsBoX,OAAO1W,IAAI,qBAAqB4L,MAAM0a,cAActmB,IAAI,oBAAoByhB,MAAMqY,OAAO,EACjH,CACF;AACA;AAAA,gBAAA;AAAA,cACF;AAAA,YACF,CACD;AAAA,UAAA,CACF,GACDluB,MAAMxH,OAAO+J,SAAS;AAGxB,YAAI8rB,qBAAqB;AACvBruB,gBAAM8uB,aAAa5uB,eAAe;AAClC;AAAA,QAAA;AAAA,MACF;AAGF,UAAI,CAACmuB,qBAAqB;AACxB,YAAIpT,uBAAuB;AACGjb,sCAAAA,MAAMxH,QAAQ,MAAM;AACvCyY,mBAAAA,mBAAmBjR,MAAMxH,QAAQ,MAAM;AACxC,kBAAA;AACoB,sCAAA;AAAA,uBACfqd,OAAO;AACNA,wBAAAA,MACN,IAAIniB,MACF,eAAesM,MAAM0a,cAActmB,IAAI,oBAAoByhB,MAAMqY,OAAO,EAC1E,CACF;AAAA,cAAA;AAAA,YACF,CACD;AAAA,UAAA,CACF;AACD;AAAA,QAAA;AAGF,YAAI,CAACF;AACH;AAG0BhuB,oCAAAA,MAAMxH,QAAQ,MAAM;AACvCyY,iBAAAA,mBAAmBjR,MAAMxH,QAAQ,MAAM;AACxC,gBAAA;AACY,4BAAA;AAAA,gBACZuQ;AAAAA,gBACA+B,QAAQkjB;AAAAA,cAAAA,CACT;AAAA,qBACMnY,OAAO;AACdM,sBAAQN,MACN,IAAIniB,MACF,sBAAsBs6B,cAAc55B,IAAI,qBAAqB4L,MAAM0a,cAActmB,IAAI,oBAAoByhB,MAAMqY,OAAO,EACxH,CACF;AAAA,YAAA;AAAA,UACF,CACD;AAAA,QAAA,CACF,GACDluB,MAAMxH,OAAO+J,SAAS;AAAA,MAAA;AAAA,IAEzB,CAAA;AAAA,EAAA;AAEL,CAAC,EAAEuH,cAAc;AAAA,EACfC,IAAI;AAAA,EACJhB,SAASA,CAAC;AAAA,IAACE;AAAAA,EAAAA,OAAY;AAAA,IACrB0kB,WAAW,IAAI/N,IAAI3W,MAAM0kB,aAAaoB,aAAa;AAAA,IACnDxkB,cAActB,MAAMsB;AAAAA,IACpBsjB,eAAe,CAAE;AAAA,IACjB/2B,QAAQmS,MAAMnS;AAAAA,IACduD,WAAW;AAAA,IACX20B,iBAAiB/lB,MAAMtK,YAAY;AAAA,IACnC8b,WAAWxR,MAAMwR;AAAAA,IACjB7kB,OAAOqT,MAAMrT;AAAAA,EAAAA;AAAAA,EAEfsU,IAAI;AAAA,IACF,gBAAgB;AAAA,MAACf,SAAS;AAAA,IAAyB;AAAA,IACnD,mBAAmB;AAAA,MAACA,SAAS;AAAA,IAA8B;AAAA,IAC3D,OAAS;AAAA,MAACA,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IAC3C,iBAAiB;AAAA,MAACmJ,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IACnD,iBAAiB;AAAA,MAACmJ,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IACnD,OAAS;AAAA,MAACmJ,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IAC3C,WAAa;AAAA,MACXmJ,SAAS,CACPM,OAAO;AAAA,QAACpP,WAAWA,CAAC;AAAA,UAAC2F;AAAAA,cAAWA,MAAM3F;AAAAA,MAAAA,CAAU,GAChD+O,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAK,MAAMA,KAAK,CAAC;AAAA,IAE5B;AAAA,IACA,SAAW;AAAA,MAACmJ,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IAC7C,SAAW;AAAA,MAACmJ,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IAC7C,SAAW;AAAA,MAACmJ,SAASC,KAAK;AAAA,QAAChV,MAAM;AAAA,MAAU,CAAA;AAAA,IAAC;AAAA,IAC5C,SAAW;AAAA,MAAC+U,SAASC,KAAK,CAAC;AAAA,QAACpJ;AAAAA,MAAAA,MAAWA,KAAK;AAAA,IAAC;AAAA,IAC7C,gBAAgB;AAAA,MAACmJ,SAASC,KAAK;AAAA,QAAChV,MAAM;AAAA,MAAe,CAAA;AAAA,IAAC;AAAA,IACtD,oBAAoB;AAAA,MAAC+U,SAAS;AAAA,IAAkB;AAAA,IAChD,iBAAiB;AAAA,MAACA,SAAS;AAAA,IAAe;AAAA,IAC1C,gBAAgB;AAAA,MAACA,SAASM,OAAO;AAAA,QAAC7T,OAAOA,CAAC;AAAA,UAACoK;AAAAA,cAAWA,MAAMpK;AAAAA,MAAM,CAAA;AAAA,IAAC;AAAA,IACnE,oBAAoB;AAAA,MAClBuT,SAASM,OAAO;AAAA,QAACgR,WAAWA,CAAC;AAAA,UAACza;AAAAA,cAAWA,MAAMya;AAAAA,MAAU,CAAA;AAAA,IAAA;AAAA,EAE7D;AAAA,EACArmB,MAAM;AAAA,EACN6V,QAAQ;AAAA,IACN,aAAa;AAAA,MACXD,SAAS;AAAA,MACTC,QAAQ;AAAA,QACN,aAAa;AAAA,UACXD,SAAS;AAAA,UACTC,QAAQ;AAAA,YACN,+BAA+B;AAAA,cAC7BC,IAAI;AAAA,gBACF,8BAA8B,CAC5B;AAAA,kBACEpH,QAAQ;AAAA,kBACRsH,OAAOA,CAAC;AAAA,oBAACrB;AAAAA,wBAAaA,QAAQimB;AAAAA,gBAAAA,GAEhC;AAAA,kBACElsB,QAAQ;AAAA,gBACT,CAAA;AAAA,cAAA;AAAA,YAGP;AAAA,YACA,aAAa;AAAA,cACXoH,IAAI;AAAA,gBACF,mBAAmB;AAAA,kBACjBE,OAAOA,CAAC;AAAA,oBAACpK;AAAAA,kBAAAA,MAAW,CAACA,MAAMrB;AAAAA,kBAC3BmE,QAAQ;AAAA,kBACRqG,SAAS,CAAC,eAAe;AAAA,gBAAA;AAAA,cAC3B;AAAA,YACF;AAAA,UACF;AAAA,QAEJ;AAAA,QACA,UAAY;AAAA,UACVe,IAAI;AAAA,YACF,mBAAmB;AAAA,cACjBE,OAAOA,CAAC;AAAA,gBAACpK;AAAAA,oBAAWA,MAAMrB;AAAAA,cAC1BmE,QAAQ;AAAA,cACRqG,SAAS,CAAC,gBAAgB;AAAA,YAC5B;AAAA,YACA,kBAAkB;AAAA,cAChBA,SAAS;AAAA,YACX;AAAA,YACA,yBAAyB;AAAA,cACvBA,SAAS;AAAA,YACX;AAAA,YACA,gBAAgB;AAAA,cACdA,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,MAAQ;AAAA,cACNmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,YAAY;AAAA,cACVmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,OAAY;AAAA,gBAAC5L,MAAM;AAAA,gBAAY4L;AAAAA,cAAAA,EAAO;AAAA,YACxD;AAAA,YACA,eAAe;AAAA,cACbmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,OAAS;AAAA,cACPmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,YAAY;AAAA,cACVmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,eAAe;AAAA,cACbmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,QAAU;AAAA,cACRmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAClC;AAAA,YACA,WAAW;AAAA,cACTmJ,SAASC,KAAK,CAAC;AAAA,gBAACpJ;AAAAA,cAAAA,MAAWA,KAAK;AAAA,YAAA;AAAA,UAClC;AAAA,QACF;AAAA,MACF;AAAA,IAEJ;AAAA,IACA,OAAS;AAAA,MACPgK,SAAS;AAAA,MACTC,QAAQ;AAAA,QACN,cAAc;AAAA,UACZglB,MAAM,CAAC,YAAY;AAAA,UACnB/kB,IAAI;AAAA,YACF,OAAS;AAAA,cACPf,SAAS;AAAA,YACX;AAAA,YACA,UAAY;AAAA,cACVA,SAAS;AAAA,YACX;AAAA,YACA,8BAA8B;AAAA,cAC5BrG,QAAQ;AAAA,YAAA;AAAA,UACV;AAAA,QAEJ;AAAA,QACA,UAAY;AAAA,UACVkH,SAAS;AAAA,UACTC,QAAQ;AAAA,YACNkK,MAAM;AAAA,cACJjK,IAAI;AAAA,gBACFglB,aAAa;AAAA,kBACXpsB,QAAQ;AAAA,gBACV;AAAA,gBACA4G,OAAO;AAAA,kBACLP,SAAS;AAAA,kBACTrG,QAAQ;AAAA,gBACV;AAAA,gBACAqsB,UAAU;AAAA,kBACRhmB,SAAS;AAAA,kBACTrG,QAAQ;AAAA,gBAAA;AAAA,cACV;AAAA,YAEJ;AAAA,YACAosB,aAAa;AAAA,cACXhlB,IAAI;AAAA,gBACF,oBAAoB;AAAA,kBAClBpH,QAAQ;AAAA,gBACV;AAAA,gBACA,OAAS;AAAA,kBACPqG,SAAS;AAAA,gBACX;AAAA,gBACA,UAAY;AAAA,kBACVA,SAAS;AAAA,gBAAA;AAAA,cACX;AAAA,YACF;AAAA,UACF;AAAA,QAEJ;AAAA,QACA,OAAS;AAAA,UACP+K,OAAO,CAAC,uBAAuB,sBAAsB;AAAA,UACrDhK,IAAI;AAAA,YACFR,OAAO;AAAA,cACLP,SAAS;AAAA,YACX;AAAA,YACAgmB,UAAU;AAAA,cACRhmB,SAAS;AAAA,YAAA;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEJ,CAAC;AChpBM,SAASqf,SAAS;AAAA,EACvB4G;AAAAA,EACA3B;AAIF,GAAG;AACM/wB,SAAAA,eACL+wB,oBAAoBn1B,UACpB82B,oBAAoBrmB,QAAQjS,OAAO9B,MAAMd,MACzC4J,qBAAqB5G,IAAIu2B,mBAAmB,CAC9C;AACF;ACTA,SAAS4B,eAAkBC,GAAMC,GAAM;AACrC,SAAOD,MAAMC;AACf;AAUOC,SAAAA,kBAAAh3B,QAAAi3B,UAAAtxB,IAAA;AAAA,QAAAD,IAAAjB,EAAA,CAAA,GAGLyyB,UAAAvxB,OAAiEnF,SAAAq2B,iBAAjElxB;AAAiEI,MAAAA;AAAA,SAAAL,EAAA,CAAA,MAAA1F,OAAAm3B,UAAAnmB,YAAAic,YAAAvnB,EAAA,CAAA,MAAAuxB,YAI/DlxB,KAAA6wB,CAAA,wBAAA;AACE,UAAA7lB,WAAiBqmB,kBAAA;AAAA,MAAAR;AAAAA,MAAA3B,qBAEMj1B,OAAMm3B,UAAAnmB,YAAAic;AAAAA,IAAAA,CAC5B;AAAC,WAEKgK,SAASlmB,QAAQ;AAAA,EAAC,GAC1BrL,OAAA1F,OAAAm3B,UAAAnmB,YAAAic,UAAAvnB,OAAAuxB,UAAAvxB,OAAAK,MAAAA,KAAAL,EAAA,CAAA,GATIkZ,YACL5e,OAAMm3B,UAAAnhB,aACNjQ,IAQAmxB,OACF;AAAC;AAGI,SAASE,kBAAkB;AAAA,EAChCR;AAAAA,EACA3B;AAIF,GAAmB;AACV,SAAA;AAAA,IACL1kB,SAAS;AAAA,MACPqlB,kBAAkBZ,oBAAoB;AAAA,QACpC12B,QAAQs4B,oBAAoBrmB,QAAQjS;AAAAA,QACpC22B;AAAAA,MAAAA,CACD;AAAA,MACDljB,cAAc6kB,oBAAoBrmB,QAAQwB;AAAAA,MAC1CzT,QAAQs4B,oBAAoBrmB,QAAQjS;AAAAA,MACpCuD,WAAW+0B,oBAAoBrmB,QAAQ1O;AAAAA,MACvCzE,OAAO4yB,SAAS;AAAA,QAAC4G;AAAAA,QAAqB3B;AAAAA,MAAoB,CAAA;AAAA,IAAA;AAAA,EAE9D;AACF;ACrDaoC,MAAAA,sBAAsBA,MAAcC,UAAU,EAAE,GAEvDC,kBAAyB,uBAAA;AACzBC,MAAAA;AACJ,SAAO,MAAM;AACPA,QAAAA;AACKA,aAAAA;AAGTA,YAAQ,CAAE;AACV,aAAS3a,IAAI,GAAGA,IAAI,KAAK,EAAEA;AACnBA,YAAAA,CAAC,KAAKA,IAAI,KAAO/I,SAAS,EAAE,EAAEpU,MAAM,CAAC;AAEtC83B,WAAAA;AAAAA,EACT;AACF,GAAG;AAGH,SAASC,UAAUp6B,SAAS,IAAI;AACxBq6B,QAAAA,QAAQ,IAAIC,WAAWt6B,MAAM;AACnCu6B,SAAAA,gBAAgBF,KAAK,GACdA;AACT;AAEA,SAASJ,UAAUj6B,QAAyB;AAC1C,QAAMm6B,QAAQD,gBAAgB;AAC9B,SAAOE,UAAUp6B,MAAM,EACpBqzB,OAAO,CAACnF,KAAKjrB,MAAMirB,MAAMiM,MAAMl3B,CAAC,GAAG,EAAE,EACrCZ,MAAM,GAAGrC,MAAM;AACpB;ACiEO,SAAS8vB,aAAaL,QAA8B;AACnD9W,QAAAA,cAAc6hB,YAAY3C,eAAe;AAAA,IAC7CzkB,OAAOqnB,2BAA2BhL,MAAM;AAAA,EAAA,CACzC;AACWuF,SAAAA,YAAAA,SAEL0F,sBAAsB/hB,WAAW;AAC1C;AAEO,SAAAgiB,gBAAAlL,QAAA;AAAApnB,QAAAA,IAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAD,WAAAonB,UAEInnB,KAAAmyB,2BAA2BhL,MAAM,GAACpnB,OAAAonB,QAAApnB,OAAAC,MAAAA,KAAAD,EAAA,CAAA;AAAAK,MAAAA;AAAAL,WAAAC,MADII,KAAA;AAAA,IAAA0K,OACtC9K;AAAAA,EAAkC,GAC1CD,OAAAC,IAAAD,OAAAK,MAAAA,KAAAL,EAAA,CAAA;AAFDsQ,QAAAA,cAAoBgJ,YAAAkW,eAA2BnvB,EAE9C;AAAC,MAAAY,IAAAC;AAAAlB,SAAAA,SAAAsQ,eAEmBpP,KAAAmxB,sBAAsB/hB,WAAW,GAACtQ,OAAAsQ,aAAAtQ,OAAAkB,MAAAA,KAAAlB,EAAA,CAAA,GAAAiB,KAAlCC,IAAdD;AAAgE;AAGzE,SAASmxB,2BAA2BhL,QAAsB;AACjD,SAAA;AAAA,IACLqI,WAAWrI,OAAOqI;AAAAA,IAClBpjB,cAAc+a,OAAO/a,gBAAgBslB;AAAAA,IACrCpV,WAAW6K,OAAO7K;AAAAA,IAClB9b,UAAU2mB,OAAO3mB;AAAAA,IACjB7H,QAAQwuB,OAAOmL,mBACXv6B,wBAAwBovB,OAAOmL,gBAAgB,IAC/Cj9B,mBACE8xB,OAAOxuB,OAAO45B,eAAe,UAAU,IACnCpL,OAAOxuB,SACPwR,YAAYgd,OAAOxuB,MAAM,CAC/B;AAAA,IACJlB,OAAO0vB,OAAOM;AAAAA,EAChB;AACF;AAEA,SAAS2K,sBAAsB/hB,aAAkC;AAC/D,QAAMhF,cAAc6b,kBAAkB;AAAA,IAAC7W;AAAAA,EAAY,CAAA,GAC7CmiB,WAAWnK,kBAAkBhd,YAAYic,UAAUjX,WAAW;AAE7D,SAAA;AAAA,IACLkB,aAAaA,MACXkgB,kBAAkB;AAAA,MAChBR,qBAAqB5gB,YAAYkB,YAAY;AAAA,MAC7C+d,qBAAqBjkB,YAAYic;AAAAA,IAAAA,CAClC;AAAA,IACHmL,kBAAmBtL,CACjB9W,YAAAA,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNw5B,UAAUtI,OAAOsI;AAAAA,IAClB,CAAA,GAEM,MAAM;AACXpf,kBAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNw5B,UAAUtI,OAAOsI;AAAAA,MAAAA,CAClB;AAAA,IAAA;AAAA,IAGLjW,MAAO3X,CAAU,UAAA;AACfwO,kBAAYmJ,KAAK3X,KAAK;AAAA,IACxB;AAAA,IACAkK,IAAIA,CAAClK,OAAO6wB,aACVriB,YAAYtE;AAAAA,MACVlK;AAAAA;AAAAA,MAEA6wB;AAAAA,IACF;AAAA,IACFlB,WAAW;AAAA,MACTgB;AAAAA,MACAniB;AAAAA,MACAhF;AAAAA,IAAAA;AAAAA,EAEJ;AACF;ACxKasnB,MAAAA,qBAAqB/oB,cAA2B,EAAiB,GCWxEgpB,qCACJhpB,cAAsC,IAAI,GAO/BipB,iCAAiCA,MAAA;AAC5C32B,QAAAA,YAAkB4N,WAAA8oB,kCAA6C;AAAC,MAE5D12B,cAASrB;AAActF,UAAAA,IAAAA,MAEvB,6GAA+G;AAG5G2G,SAAAA;AAAS,GAEZhD,UAAQC,cAAc,gDAAgD;AAMrE,SAAA25B,oCAAAhzB,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA,GAKL,CAAA5C,WAAAiqB,YAAA,IAAkCplB,aAA8B;AAAC,MAAAf,IAAAI;AAAAL,IAAA,CAAA,MAAAD,MAAAuQ,eAGvDrQ,KAAAA,MAAA;AACR9G,YAAM,kCAAkC;AACxC,UAAAqgB,eAAqBzZ,MAAKuQ,YAAAtE,GAAgB,aAAWlK,CAAA,UAAA;AAEnDkxB,sBAAA,MAAA;AAEE5M,qBAAatkB,MAAK3F,SAAU;AAAA,MAAA,CAC7B;AAAA,IAAA,CACF;AAAC,WAAA,MAAA;AAGMhD,cAAA,oCAAoC,GAC1CqgB,aAAYnI,YAAa;AAAA,IAAC;AAAA,EAE3BhR,GAAAA,KAAA,CAACN,MAAKuQ,WAAA,GAAatQ,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,OAAAC,IAAAD,OAAAK,OAAAJ,KAAAD,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,IAdtB4B,UAAU3B,IAcPI,EAAmB;AAACY,MAAAA;AAAA,SAAAjB,SAAAD,MAAA3F,YAAA4F,SAAA7D,aAGrB8E,KAAA,oBAAA,mCAAA,UAAA,EAAoD9E,OAAQ,WACzD4D,UAAAA,MAAK3F,SACR,CAAA,GAA8C4F,EAAA,CAAA,IAAAD,MAAA3F,UAAA4F,OAAA7D,WAAA6D,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAF9CiB;AAE8C;AC3BlD,MAAM9H,UAAQC,cAAc,8BAA8B;AAyEnD,MAAM65B,2BAA2BC,UAEtC;AAAA,EACA,OAAc5yB,cAAc;AAAA;AAAA;AAAA;AAAA,EAIrB6yB,UAAyB,IAAIC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc5CC,YAAYtzB,OAAgC;AACpCA,UAAAA,KAAK,GAEPA,MAAMzF,SACR,KAAKA,SAASyF,MAAMzF,SAEpB,KAAKA,SAASmtB,aAAa;AAAA,MACzBpb,cAActM,MAAMsM,gBAAgBslB;AAAAA,MACpC/4B,QAAQmH,MAAMwI;AAAAA,MACdmf,cAAc3nB,MAAMrI;AAAAA,MACpB6kB,WACExc,MAAMwc,cAAczhB,SAChBA,SACAorB,OAAOoN,SAASvzB,MAAMwc,UAAUnO,SAAS,GAAG,EAAE;AAAA,MACpD3N,UAAUV,MAAMU;AAAAA,IAAAA,CACjB,GAGH,KAAK9C,cACH,KAAKrD,OAAOm3B,UAAUnhB,YAAYkB,YAAY,EAAE3G,QAAQjS,QAC1D,KAAK65B,WAAW,KAAKn4B,OAAOm3B,UAAUgB;AAAAA,EAAAA;AAAAA,EAGxCc,mBAAmBC,WAAoC;AAGnD,KAAC,KAAKzzB,MAAMzF,UACZ,CAACk5B,UAAUl5B,UACX,KAAKyF,MAAMwI,eAAeirB,UAAUjrB,eAEpC,KAAK5K,cAAcrI,mBACjB,KAAKyK,MAAMwI,WAAWiqB,eAAe,UAAU,IAC3C,KAAKzyB,MAAMwI,aACX6B,YAAY,KAAKrK,MAAMwI,UAAU,CACvC,GAEA,KAAKjO,OAAOm3B,UAAUnhB,YAAYmJ,KAAK;AAAA,MACrCvjB,MAAM;AAAA,MACN0C,QAAQ,KAAK+E;AAAAA,IAAAA,CACd,IAGC,CAAC,KAAKoC,MAAMzF,UAAU,CAACk5B,UAAUl5B,WAC/B,KAAKyF,MAAMU,aAAa+yB,UAAU/yB,YACpC,KAAKnG,OAAOm3B,UAAUnhB,YAAYmJ,KAAK;AAAA,MACrCvjB,MAAM;AAAA,MACNuK,UAAU,KAAKV,MAAMU,YAAY;AAAA,IAClC,CAAA,GAGC,KAAKV,MAAMwc,cAAciX,UAAUjX,aACrC,KAAKjiB,OAAOm3B,UAAUnhB,YAAYmJ,KAAK;AAAA,MACrCvjB,MAAM;AAAA,MACNqmB,WACE,KAAKxc,MAAMwc,cAAczhB,SACrBA,SACAorB,OAAOoN,SAAS,KAAKvzB,MAAMwc,UAAUnO,YAAY,EAAE;AAAA,IAC1D,CAAA,GAGC,KAAKrO,MAAMrI,UAAU87B,UAAU97B,SACjC,KAAK4C,OAAOm3B,UAAUnhB,YAAYmJ,KAAK;AAAA,MACrCvjB,MAAM;AAAA,MACNwB,OAAO,KAAKqI,MAAMrI;AAAAA,IAAAA,CACnB,GAID,KAAKqI,MAAM0zB,cAAcD,UAAUC,aACnC,KAAK1zB,MAAM0zB,cAEX,KAAK1zB,MAAM0zB,UAAUhyB,UAAU;AAAA,EAAA;AAAA,EAK9BiyB,cAAejB,CAA0B,aAAA;AACzCn4B,SAAAA,OAAOm3B,UAAUgB,WAAW;AAAA,MAC/B,GAAG,KAAKn4B,OAAOm3B,UAAUgB;AAAAA,MACzB,GAAGA;AAAAA,IACL;AAAA,EACF;AAAA,EAEAkB,SAAS;AACDC,UAAAA,gBAAiB,KAAK7zB,MAAMzF,SAE9BQ,SADC,KAAKiF,MAAM8zB,oBAAoB,KAAK9zB,MAAM+zB;AAG/C,WAEKF,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,MACC,gBAAA,oBAAC,uCACC,aAAa,KAAKt5B,OAAOm3B,UAAUnhB,aACnC,UAAUsjB,cAAAA,CACV,IACA;AAAA,MACJ,oBAAC,wBACC,aAAa,KAAKt5B,OAAOm3B,UAAUnhB,aACnC,UAAWyjB,CAAW,WAAA;AACf,aAAKh0B,MAAMzF,UACd,KAAKyF,MAAMsE,SAAS0vB,MAAM,GAM5B,KAAKZ,QAAQ7S,KAAKyT,MAAM;AAAA,MAAA,GACxB;AAAA,MAEH,oBAAA,cAAA,EACC,aAAa,KAAKz5B,OAAOm3B,UAAUnhB,aACnC,aAAa,KAAKhW,OAAOm3B,UAAUnmB,YAAYic,SAAS,CAAA;AAAA,0BAEzD,mBAAmB,UAAnB,EAA4B,OAAO,KAAKjtB,OAAOm3B,UAAUnhB,aACxD,UAAC,oBAAA,OAAA,EACC,QAAQ,KAAKhW,OAAOm3B,UAAUnmB,YAAYic,UAC1C,cAAc,KAAKjtB,OAAOm3B,UAAUnmB,YAAYoc,cAEhD,UAAC,oBAAA,0BAA0B,UAA1B,EAAmC,OAAO,MACzC,UAAC,oBAAA,qCAAA,EACC,aAAa,KAAKptB,OAAOm3B,UAAUnhB,aAElC,UAAA,KAAKvQ,MAAM3F,SACd,CAAA,GACF,GACF,EACF,CAAA;AAAA,IAAA,GACF;AAAA,EAAA;AAAA;AAAA,EAKJ,OAAOyvB,oBACLvvB,CAAAA,WAEOA,UAAUA,OAAOm4B,WAAWn4B,OAAOm4B,SAAS5I,kBAAkB,IAAI,CAAE;AAAA,EAE7E,OAAOE,qBAAqBA,CAC1BzvB,QACA0vB,mBAEO1vB,UAAUA,OAAOm4B,WACpBn4B,OAAOm4B,SAAS1I,mBAAmBC,cAAc,IACjD;AAAA,EAEN,OAAOC,gBAAgBA,CACrB3vB,QACApE,MACAwB,UAEA4C,OAAOm4B,UAAUxI,cAAc/zB,MAAMwB,KAAK;AAAA,EAC5C,OAAO6wB,OAAQjuB,CAAqC,WAAA;AAClDnB,YAAM,cAAc,GACpBmB,OAAOm4B,UAAUlK,KAAK;AAAA,EACxB;AAAA,EACA,OAAOnlB,SAASA,CACd9I,QACA6B,WACA5E,YACG+C,OAAOm4B,UAAUrvB,OAAOjH,WAAW5E,OAAO;AAAA,EAC/C,OAAOqyB,cAAcA,CACnBtvB,QACAkG,YAEOlG,OAAOm4B,UAAU7I,YAAYppB,OAAO;AAAA,EAE7C,OAAOgpB,aAAaA,CAAClvB,QAA4BZ,SACxCY,OAAOm4B,UAAUjJ,WAAW9vB,IAAI,KAAK,CAAE;AAAA,EAEhD,OAAO+B,QAASnB,CAAqC,WAAA;AACnDnB,YAAM,uBAAuB,GAC7BmB,OAAOm4B,UAAUh3B,MAAM;AAAA,EACzB;AAAA,EACA,OAAOotB,aAAcvuB,CACZA,WAAAA,OAAOm4B,UAAU5J,WAAW;AAAA,EAErC,OAAOE,aACLzuB,CAEOA,WAAAA,OAAOm4B,UAAU1J,WAAW;AAAA,EAErC,OAAOsB,eAAgB/vB,CACdA,WAAAA,OAAOm4B,WAAWn4B,OAAOm4B,SAASpI,iBAAiB;AAAA,EAE5D,OAAOC,WAAYhwB,CACVA,WAAAA,OAAOm4B,UAAUnI,SAAS;AAAA,EAEnC,OAAOhB,gBAAgBA,CAAChvB,QAA4B05B,eAC3C15B,OAAOm4B,UAAUnJ,cAAc0K,UAAU;AAAA,EAElD,OAAOzK,eAAeA,CAACjvB,QAA4B25B,cAC1C35B,OAAOm4B,UAAUlJ,aAAa0K,SAAS;AAAA,EAEhD,OAAO1J,uBAAwBjwB,CAC7BA,WAAAA,OAAOm4B,UAAUlI,qBAAqB;AAAA,EACxC,OAAOC,sBAAuBlwB,CAC5BA,WAAAA,OAAOm4B,UAAUjI,oBAAoB;AAAA,EACvC,OAAO7B,eAAeA,CAACruB,QAA4BgU,SACjDhU,OAAOm4B,UAAU9J,aAAara,IAAI;AAAA,EACpC,OAAO0a,cAAcA,CACnB1uB,QACApE,MACAwB,WAEAyB,QAAM,sBAAsB,GACrBmB,OAAOm4B,UAAUzJ,YAAY9yB,MAAMwB,KAAK;AAAA,EAEjD,OAAO2xB,cAAcA,CACnB/uB,QACApE,MACAwB,UAEO4C,OAAOm4B,UAAUpJ,YAAYnzB,MAAMwB,KAAK;AAAA,EAEjD,OAAOklB,cAAetiB,CACbA,WAAAA,OAAOm4B,UAAU7V,YAAY;AAAA,EAEtC,OAAO3hB,SAASA,CACdX,QACAkG,YAEOlG,OAAOm4B,UAAUx3B,OAAOuF,OAAO;AAAA,EAExC,OAAO0zB,eAAeA,CAACC,SAA6Bz6B,SAAwB;AAC1E,QAAI,CAACA,QAAQ,CAACQ,MAAMC,QAAQT,IAAI,EAAU,QAAA;AAC1C,UAAM06B,wBAAwB16B,KAAK/B,SAAS,KAAK+B,KAAK,CAAC,MAAM;AAE7D,WAD8BA,KAAK/B,SAAS,KAAK+B,KAAK,CAAC,MAAM,cAC7B06B;AAAAA,EAClC;AAAA,EACA,OAAO57B,QAAS8B,CACPA,WAAAA,OAAOm4B,UAAUj6B,MAAM;AAAA,EAEhC,OAAOue,SAASA,CACdzc,QACA6B,cACG;AACHhD,YAAM,0BAA0BgD,SAAS,GACzC7B,OAAOm4B,UAAU1b,OAAO5a,SAAS;AAAA,EACnC;AAAA,EACA,OAAOiuB,mBAAmBA,CACxB9vB,QACApE,SACGoE,OAAOm4B,UAAUrI,iBAAiBl0B,IAAI;AAAA,EAC3C,OAAOwyB,mBAAmBA,CACxBpuB,QACA05B,gBAEA76B,QAAM,8BAA8B,GAC7BmB,OAAOm4B,UAAU/J,iBAAiBsL,UAAU;AAAA,EAErD,OAAOvL,aAAaA,CAACnuB,QAA4B25B,cACxC35B,OAAOm4B,UAAUhK,WAAWwL,SAAS;AAAA,EAE9C,OAAOzL,aAAaA,CAACluB,QAA4BgU,SAAuB;AACtEnV,YAAM,sBAAsBmV,IAAI,GAChChU,OAAOm4B,UAAUjK,WAAWla,IAAI;AAAA,EAClC;AAAA,EACA,OAAOmc,cACLnwB,CAEAnB,YAAAA,QAAM,uBAAuB,GACtBmB,OAAOm4B,UAAUhI;EAE1B,OAAOlY,OAAQjY,CAAqC,WAAA;AAClDnB,YAAM,cAAc,GACpBmB,OAAOm4B,UAAUlgB,KAAK;AAAA,EACxB;AAAA,EACA,OAAOc,OAAQ/Y,CAAqC,WAAA;AAClDnB,YAAM,cAAc,GACpBmB,OAAOm4B,UAAUpf,KAAK;AAAA,EACxB;AAAA,EACA,OAAOqX,0BAA0BA,CAC/BpwB,QACAqwB,YACAC,eAEOtwB,OAAOm4B,UAAU/H,wBAAwBC,YAAYC,UAAU;AAE1E;AAEA,SAAAyJ,oCAAAt0B,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA;AAAA,MAAAkB,IAAAI;AAAAL,SAAAA,EAAAD,CAAAA,MAAAA,MAAAuQ,eAAAtQ,EAAA,CAAA,MAAAD,MAAA+zB,YAIY7zB,KAAAA,MAAA;AACR,UAAAuZ,eAAqBzZ,MAAK+zB,SAAAQ,UAAAC,CAAA,YAAA;AACxBx0B,YAAKuQ,YAAAmJ,KAAA;AAAA,QAAAvjB,MACG;AAAA,QAAS,GACZq+B;AAAAA,MAAAA,CACJ;AAAA,IAAA,CACF;AAAC,WAAA,MAAA;AAGA/a,mBAAYnI,YAAa;AAAA,IAAC;AAAA,EAAA,GAE3BhR,MAACN,MAAKuQ,aAAcvQ,MAAK+zB,QAAA,GAAU9zB,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,EAAA,CAAA,IAAAD,MAAA+zB,UAAA9zB,OAAAC,IAAAD,OAAAK,OAAAJ,KAAAD,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,IAXtC4B,UAAU3B,IAWPI,EAAmC,GAAC;AAAA;AAKlC,SAAAm0B,qBAAAz0B,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAD,WAAAD,SAQ+BE,KAAA8zB,CAClCh0B,WAAAA,MAAKsE,SAAU0vB,MAAM,GAAC/zB,OAAAD,OAAAC,OAAAC,MAAAA,KAAAD,EAAA,CAAA;AADxBy0B,QAAAA,eAAqBC,eAAez0B,EAEpC;AAAC,MAAAI,IAAAY;AAAAjB,SAAAA,SAAAy0B,gBAAAz0B,EAAAD,CAAAA,MAAAA,MAAAuQ,eAESjQ,KAAAA,MAAA;AACRlH,YAAM,+BAA+B;AACrC,UAAAwX,MAAY5Q,MAAKuQ,YAAAtE,GAAgB,KAAGlK,CAAA,UAAA;AAAA,UAAA,SAC1BA,MAAK5L,MAAA;AAAA,QAAA,KACN,WAAS;AACA,uBAAA;AAAA,YAAAA,MAAQ;AAAA,YAAM4L,OAASA,MAAKA;AAAAA,UAAAA,CAAO;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAG7C,SAAO;AACVF,uBAAa3yB,KAAK;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAEhB,WAAS;AACA,uBAAA;AAAA,YAAAz+B,MAAQ;AAAA,YAAS0+B,WAAA;AAAA,UAAA,CAAkB;AAACD,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAG7C,gBAAc;AACL,uBAAA;AAAA,YAAAz+B,MAAQ;AAAA,YAAS0+B,WAAA;AAAA,UAAA,CAAmB;AAACD,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAG9C,WAAS;AACA,uBAAA;AAAA,YAAAz+B,MAAQ;AAAA,YAAO4L,OAASA,MAAKA;AAAAA,UAAAA,CAAO;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAG9C,iBAAe;AACN,uBAAA;AAAA,YAAAz+B,MAAQ;AAAA,YAAOwB,OAASoK,MAAKpK;AAAAA,UAAAA,CAAO;AAACi9B,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAG9C,iBAAe;AACN,uBAAA;AAAA,YAAAz+B,MACJ;AAAA,YAAcoW,YACRxK,MAAKwK;AAAAA,YAAA5U,OACVoK,MAAKpK;AAAAA,UAAAA,CACb;AAACi9B,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAGC,SAAO;AACE,uBAAA;AAAA,YAAA,GACP7yB;AAAAA,YAAKkH,OACD;AAAA,UAAA,CACR;AAAC2rB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAGC,YAAU;AACbF,uBAAa3yB,KAAK;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAGhB,SAAO;AACVF,uBAAa3yB,KAAK;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAGhB,aAAW;AACdF,uBAAa3yB,KAAK;AAAC6yB,gBAAAA;AAAAA,QAAAA;AAAAA,QAAA,KAGhB;AACHF,uBAAa3yB,KAAK;AAAA,MAAA;AAAA,IAAC,CAIxB;AAAC,WAAA,MAAA;AAEM3I,cAAA,0BAA0B,GAChCwX,IAAGU,YAAa;AAAA,IAAC;AAAA,EAAA,GAElBpQ,KAAClB,CAAAA,MAAKuQ,aAAcmkB,YAAY,GAACz0B,OAAAy0B,cAAAz0B,EAAA,CAAA,IAAAD,MAAAuQ,aAAAtQ,OAAAK,IAAAL,OAAAiB,OAAAZ,KAAAL,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IAhEpC4B,UAAUvB,IAgEPY,EAAiC,GAAC;AAAA;AC5dvC,MAAM9H,UAAQC,cAAc,iBAAiB,GAEvCy7B,cAAwB,CAAE,GAmBnBC,OAAQ/0B,CAAqB,UAAA;AAClC,QAAA;AAAA,IACJuQ;AAAAA,IACA/I;AAAAA,IACAnN;AAAAA,IACA26B;AAAAA,IACAp3B;AAAAA,IACA8J;AAAAA,IACAutB;AAAAA,IACAC;AAAAA,EACEl1B,IAAAA,OACEm1B,UAAUr0B,OAAoB,IAAI,GAClCs0B,qBAAqBrrB,yBACrBsrB,gBAAgBttB,YAAY,GAC5B,CAACE,SAASqtB,UAAU,IAAIr0B,SAAS,EAAK,GACtC,CAAC6G,UAAUytB,WAAW,IAAIt0B,SAAS,EAAK,GACxClK,QAAQsD,SAAS2F,MAAMwhB,QACvB7nB,OAAawO,QACjB,MAAOpR,QAAQ,CAAC;AAAA,IAAC8C,MAAM9C,OAAO8C;AAAAA,KAAO,YAAY;AAAA,IAACA,MAAMm7B,KAAKn7B;AAAAA,EAAAA,CAAK,IAAI,IACtE,CAAC9C,OAAOi+B,KAAKn7B,IAAI,CACnB,GACM27B,kBAAkBrtB,QACtB,MAAMvK,YAAYjH,WAAWuB,IAAKsW,CAAAA,QAAQA,IAAI7W,KAAK,GACnD,CAACiG,YAAYjH,UAAU,CACzB,GACM8B,QAAkB0P,QACtB,MACE4F,MACGinB,KAAKv8B,SAASq8B,aAAav+B,OAAQgY,CAAAA,SAClCinB,gBAAgBpoB,SAASmB,IAAI,CAC/B,CACF,GACF,CAACinB,iBAAiBR,KAAKv8B,KAAK,CAC9B,GACMg9B,kBAAkBt7B,MAAMC,QAAQ46B,KAAKv8B,KAAK,IAAIu8B,KAAKv8B,QAAQq8B,aAC3D19B,cAAc+Q,QAClB,MACEstB,gBACGv9B,IACEqW,YACC,CAACinB,gBAAgBpoB,SAASmB,MAAI,KAC9BxX,OAAOoH,UAAUvI,KAAMsY,CAAQA,QAAAA,IAAIrU,SAAS0U,MAAI,CACpD,EACChY,OAAOwF,OAAO,GACnB,CAAC05B,iBAAiB1+B,OAAOy+B,eAAe,CAC1C,GAEME,+BAA+Bt+B,YAAYQ,SAAS,KAAKy9B;AAE/DxzB,YAAU,MAAM;AACd,QAAI,CAAC6zB,8BAA8B;AACjCJ,iBAAW,EAAK;AAChB;AAAA,IAAA;AAEIK,UAAAA,MAAMzC,mBAAmB5I,aAAa8K,kBAAkB;AAE5DO,WACAt6B,QAAQs6B,IAAIj6B,MAAM/B,MAAMA,IAAI,KAC5Bu5B,mBAAmB1I,qBAAqB4K,kBAAkB,KAE1DnC,gBAAgB,MAAM;AACpBqC,iBAAW,EAAI;AAAA,IAAA,CAChB;AAAA,EAEF,GAAA,CAACI,8BAA8B/7B,MAAMy7B,kBAAkB,CAAC;AAGrDQ,QAAAA,uBAAuBC,YAAY,MAAM;AAC7C,QAAI,CAACH;AACH;AAEFt8B,YAAM,wCAAwC;AACxC08B,UAAAA,eAAeC,OAAOzL,aAAa;AACzC,QAAI,CAACwL,cAAc;AACjBP,kBAAY,EAAK;AACjB;AAAA,IAAA;AAEEO,QAAAA,gBAAgBA,aAAaE,aAAa,GAAG;AACzCx6B,YAAAA,QAAQs6B,aAAaG,WAAW,CAAC;AACnCd,cAAQzzB,WAAWlG,MAAM06B,eAAef,QAAQzzB,OAAO,IACzD6zB,YAAY,EAAI,IAEhBA,YAAY,EAAK;AAAA,IAErB;AACEA,kBAAY,EAAK;AAAA,EAAA,GAElB,CAACG,4BAA4B,CAAC;AAEjC7zB,YAAU,MAAM;AACd,QAAI,CAAC6zB;AACH;AAGF,UAAMS,SAAS5lB,YAAYtE,GAAG,QAAQ,MAAM;AAC/B,iBAAA,EAAK,GAChBspB,YAAY,EAAK;AAAA,IAClB,CAAA,GAEKa,UAAU7lB,YAAYtE,GAAG,SAAS,MAAM;AACtC0pB,YAAAA,QAAMzC,mBAAmB5I,aAAa8K,kBAAkB;AAE5DO,eACAt6B,QAAQs6B,MAAIj6B,MAAM/B,MAAMA,IAAI,KAC5Bu5B,mBAAmB1I,qBAAqB4K,kBAAkB,KAE1DE,WAAW,EAAI,GAEjBM,qBAAqB;AAAA,IAAA,CACtB,GAEKS,cAAc9lB,YAAYtE,GAAG,aAAclK,CAAU,UAAA;AAEvDA,YAAM3F,aACNf,QAAQ0G,MAAM3F,UAAUV,MAAM/B,MAAMA,IAAI,KACxCu5B,mBAAmB1I,qBAAqB4K,kBAAkB,IAE1DE,WAAW,EAAI,IAEfA,WAAW,EAAK,GAElBM,qBAAqB;AAAA,IAAA,CACtB;AAED,WAAO,MAAM;AACXO,aAAO7kB,eACP8kB,QAAQ9kB,YAAY,GACpB+kB,YAAY/kB,YAAY;AAAA,IAC1B;AAAA,EACC,GAAA,CACDf,aACA5W,MACAy7B,oBACAQ,sBACAF,4BAA4B,CAC7B,GAED7zB,UAAU,MAAM+zB,wBAAwB,CAACA,oBAAoB,CAAC;AAExDU,QAAAA,UAAUnuB,QAAQ,MAAM;AAC5B,QAAIouB,mBAAmBl8B;AAEnB8E,QAAAA,KAAKC,OAAO41B,IAAI,KAAKA,KAAKl7B,UAAU8D,YAAY5G,KAAKf,SACvDwC,MAAMqY,QAASvC,CAAS,WAAA;AACtB,YAAM/F,aAAa5K,YAAYjH,WAAWf,KACvC4Y,CAAQA,UAAAA,MAAI7W,UAAU4W,MACzB;AACA,UAAI/F,cAAcysB,iBAAiB;AAC3BrrB,cAAAA,SACJN,OAAOC,eACL;AAAA,UACElP,UAAUk8B;AAAAA,UACV1tB,kBAAkBssB;AAAAA,UAClBltB;AAAAA,UACAtO;AAAAA,UACAmO;AAAAA,UACAU;AAAAA,UACA7Q,OAAO4W;AAAAA,WAET,QACA;AAAA,UACE/E,YAAY;AAAA,UACZvQ,MAAM;AACIwQ,mBAAAA,QAAAA,KACN,0DACF,GACOjB;AAAAA,UAAAA;AAAAA,QACT,CAEJ;AACF+tB,2BAAmBtB,gBACjBrrB,MACF;AAAA,MAAA;AAAA,IACF,CACD,GAEG7S,SAASK,YAAYQ,SAAS,KAChCR,YAAY0Z,QAASlY,CAAe,eAAA;AAC5B4P,YAAAA,eAAa5K,YAAYxG,YAAYxB,KACxCkJ,OAAMA,EAAE7I,SAAS2C,WAAWkB,KAC/B;AACI0O,UAAAA;AACF,YAAI0sB,kBAAkB;AACdtrB,gBAAAA,WACJN,OAAOC,eACL;AAAA,YACExS;AAAAA,YACAsD,UAAUk8B;AAAAA,YACV1tB,kBAAkBssB;AAAAA,YAClBltB;AAAAA,YACAtO;AAAAA,YACAmO;AAAAA,YACAU,YAAAA;AAAAA,YACA7Q,OAAOiB;AAAAA,aAET,QACA;AAAA,YACE4Q,YAAY;AAAA,YACZvQ,MAAM;AACIwQ,qBAAAA,QAAAA,KACN,0DACF,GACOjB;AAAAA,YAAAA;AAAAA,UACT,CAEJ;AAEF+tB,iDACG,QAAK,EAAA,KAAKpB,SACRD,UAAAA,iBAAiBtrB,QAAoC,GACxD;AAAA,QAEJ;AAEI,6BAAA,oBAAC,qBAAkB,YACjB,UAAA,oBAAC,UAAK,KAAKurB,SAAUoB,4BAAiB,EACxC,CAAA;AAAA,IAAA,CAIP,GAECx/B,SAAS2Q,cAAa;AAClBxN,YAAAA,QAAQnD,MAAMsD,SAASzE,KAAMypB,YAAWA,OAAOxlB,SAASm7B,KAAKn7B,IAAI;AACvE,UAAIK,OAAO;AAEH0P,cAAAA,WACJN,OAAOC,eACL;AAAA,UACEnS;AAAAA,UACAiD,0CALqBk8B,UAAiB,iBAAA,CAAA;AAAA,UAMtC1tB,kBAAkBssB;AAAAA,UAClBltB;AAAAA,UACAtO;AAAAA,UACA6O,YAAY5K,YAAY5G;AAAAA,UACxB8Q;AAAAA,UACAnQ,OAAOuC;AAAAA,WAET,QACA;AAAA,UACEsP,YAAY;AAAA,UACZvQ,MAAM;AACIwQ,mBAAAA,QAAAA,KACN,0DACF,GACO7L,YAAY5G;AAAAA,UAAAA;AAAAA,QACrB,CAEJ;AACFu/B,2BAAmB7uB,YAAYkC,QAA+B;AAAA,MAAA;AAAA,IAChE;AAGG2sB,WAAAA;AAAAA,EAAAA,GACN,CACDn/B,aACAL,OACAsD,UACA4N,SACA+sB,MACAv8B,OACAkB,MACAu7B,kBACAxtB,aACAutB,iBACAr3B,YAAYxG,aACZwG,YAAYjH,YACZiH,YAAY5G,MACZ8Q,QAAQ,CACT;AACD,SAAOK,QACL,MACE,oBAAC,aAAyBX,YAAY,KAAK2tB,SACxCmB,UADQtB,QAAAA,GAAAA,KAAKn7B,IAEhB,GAEF,CAACm7B,MAAMxtB,YAAY8uB,OAAO,CAC5B;AACF;AAEAvB,KAAKx0B,cAAc;ACpUnB,MAAMnH,UAAQC,cAAc,oBAAoB;AAMhCm9B,SAAAA,kBACdjmB,aACA6kB,oBACAqB,oBACwD;AAClDC,QAAAA,kBAAkB,CAAC,SAAS,OAAO,SAAS,UAAU,KAAK,GAC3DC,gBAAgBF,sBAAsB,CAAC;AAC7C,SAAO,SAAqBl8B,QAA+C;AACzEA,WAAAA,OAAOq8B,iBAAkB70B,CAA+C,UAAA;AAEtEuH,aAAOyR,KAAK4b,aAAa,EAAE7lB,QAAS+lB,CAAQ,QAAA;AAC1C,YAAIA,QAAQ;AACCC,qBAAAA,UAAUH,cAAcE,GAAG,GAAG;AACnCH,gBAAAA,gBAAgBtpB,SAAS0pB,MAAM;AACjC,oBAAM,IAAIrhC,MAAM,cAAcqhC,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQ/0B,MAAM8uB,WAAW,GAAG;AACvC9uB,oBAAME,eAAe;AACf+0B,oBAAAA,eAAeL,cAAcE,GAAG;AACtC,kBAAIG,cAAc;AACVzoB,sBAAAA,OAAOyoB,aAAaF,MAAM;AAChC19B,wBAAM,UAAU09B,MAAM,cAAcvoB,IAAI,EAAE,GAC1CgC,YAAYmJ,KAAK;AAAA,kBACfvjB,MAAM;AAAA,kBACNsmB,eAAe;AAAA,oBACbtmB,MAAM;AAAA,oBACNuC,WAAW6V;AAAAA,kBACb;AAAA,kBACAhU;AAAAA,gBAAAA,CACD;AAAA,cAAA;AAAA,YACH;AAAA,UACF;AAGJ,YAAIs8B,QAAQ;AACCC,qBAAAA,UAAUH,cAAcE,GAAG,GAAG;AACnCH,gBAAAA,gBAAgBtpB,SAAS0pB,MAAM;AACjC,oBAAM,IAAIrhC,MAAM,cAAcqhC,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQ/0B,MAAM8uB,WAAW,GAAG;AACjCoG,oBAAAA,kBAAkBN,cAAcE,GAAG;AACzC,kBAAII,iBAAiB;AACbC,sBAAAA,UAAUD,gBAAgBH,MAAM;AACtCI,wBAAQn1B,OAAOqzB,kBAAkB;AAAA,cAAA;AAAA,YACnC;AAAA,UACF;AAAA,MACF,CAEH;AAAA,IAAA,GAEI76B;AAAAA,EACT;AACF;ACjDA,MAAMnB,UAAQC,cAAc,uBAAuB;AAMnC89B,SAAAA,qBACd5mB,aACA3S,aACA;AACA,SAAO,SACLrD,QACyB;AACzB,UAAM68B,gBAAgBx5B,YAAY7G,MAAMd,MAClCohC,eAAez5B,YAAY5G,KAAKf,MAChCqhC,wBACJ15B,YAAY7G,MAAMS,QAAQ+/B,gCAEtBC,cAAetL,CACZA,WAAAA,OACJh0B,IAAKnB,CAAAA,UACAwD,OAAOie,YAAYzhB,KAAK,IACnBA,MAAMsD,SACVnC,IAAKgC,CAAAA,UACAA,MAAMJ,UAAUu9B,eACXn9B,MAAMgD,OAER,IACLU,YAAY1G,cAActB,KAAMkJ,CAAMA,MAAAA,EAAE7I,SAASiE,MAAMJ,KAAK,GACxDzB,SAAS,QAAQ,GAExB,EACAgH,KAAK,EAAE,IAEL,IACLzB,YAAYzG,aAAavB,KAAMkJ,CAAAA,MAAMA,EAAE7I,SAASc,MAAM+C,KAAK,GACvDzB,SAAS,QAAQ,GAExB,EACAgH,KAAK;AAAA;AAAA,CAAM;AAGTo4B,WAAAA,OAAAA,kBAAkB,CAACC,MAAoBC,gBAAgB;AACtD,YAAA;AAAA,QAACv7B;AAAAA,MAAAA,IAAa7B;AAEpB,UAAI,CAAC6B;AACH;AAGI,YAAA,CAACwwB,OAAOC,GAAG,IAAI7wB,MAAM8wB,MAAM1wB,SAAS,GACpCw7B,YAAYn9B,OAAOo9B,KAAKt9B,QAAQ;AAAA,QAACI,IAAIiyB,MAAMjzB;AAAAA,MAAK,CAAA,GAChDm+B,UAAUr9B,OAAOo9B,KAAKt9B,QAAQ;AAAA,QAACI,IAAIkyB,IAAIlzB;AAAAA,MAAAA,CAAK;AAElD,UAAIqC,MAAMkM,YAAY9L,SAAS,KAAK,CAACw7B;AACnC;AAKF,YAAMG,WAAWp2B,YAAYq2B,WAAWz9B,QAAQ6B,SAAS;AACrD67B,UAAAA,WAAWF,SAASG,cAAc;AAItC,UAAIJ,SAAS;AACX,cAAM,CAACK,QAAQ,IAAIL,SACbM,IAAIL,SAASM,WAAW,GACxBC,UAAU32B,YAAYC,UAAUrH,QAAQ49B,QAAQ;AACtDC,UAAEG,YAAYD,OAAO,GACrBL,WAAWG,EAAEF,cAAc;AAAA,MAAA;AAI7B/9B,YAAMK,KAAKy9B,SAASO,iBAAiB,yBAAyB,CAAC,EAAE1nB,QAC9D2nB,CAAO,OAAA;AACN,cAAMC,YAAYD,GAAGE,aAAa,uBAAuB,MAAM;AAC/DF,WAAGG,cAAcF,YAAY;AAAA,IAAO;AAAA,MAAA,CAExC,GAEAv+B,MAAMK,KAAKy9B,SAASO,iBAAiB,GAAG,CAAC,EAAE1nB,QAAS+nB,CAAQ,QAAA;AAC1DA,YAAIC,gBAAgB,iBAAiB,GACrCD,IAAIC,gBAAgB,mBAAmB,GACvCD,IAAIC,gBAAgB,iBAAiB,GACrCD,IAAIC,gBAAgB,iBAAiB,GACrCD,IAAIC,gBAAgB,mBAAmB,GACvCD,IAAIC,gBAAgB,mBAAmB,GACvCD,IAAIC,gBAAgB,uBAAuB,GAC3CD,IAAIC,gBAAgB,WAAW;AAC/B,mBAAWxrB,OAAOurB,IAAIrxB;AAChBqxB,cAAIE,aAAazrB,GAAG,KACtBurB,IAAIC,gBAAgBxrB,GAAG;AAAA,MAAA,CAG5B;AACD,YAAM0rB,MAAMf,SAASgB,cAAcC,cAAc,KAAK;AACtDF,UAAInzB,YAAYoyB,QAAQ,GACxBe,IAAIvzB,aAAa,UAAU,MAAM,GACjCwyB,SAASgB,cAAc11B,KAAKsC,YAAYmzB,GAAG;AAC3C,YAAMG,SAASH,IAAII;AACVH,eAAAA,cAAc11B,KAAKC,YAAYw1B,GAAG;AAC3C,YAAMK,WAAW9+B,OAAOmwB,YAClBzzB,GAAAA,eAAewH,eAAe46B,UAAUjC,aAAa,GAErDkC,SAASt1B,KAAKC,UAAUhN,YAAY,GACpCsiC,cAAc/B,YAAYvgC,YAAY;AAC5CygC,WAAK8B,UAAU,GACf9B,KAAKvyB,QAAQ,cAAco0B,WAAW,GACtC7B,KAAKvyB,QAAQ,aAAag0B,MAAM,GAChCzB,KAAKvyB,QAAQ,oBAAoBm0B,MAAM,GACvC5B,KAAKvyB,QAAQ,+BAA+Bm0B,MAAM,GAClDlgC,QAAM,QAAQmgC,WAAW,GACzB7B,KAAKvyB,QACH,4CACAwyB,eAAe,UACjB,GACAv+B,QAAM,qBAAqBkgC,QAAQH,MAAM;AAAA,IAAA,GAG3C5+B,OAAOk/B,yBAA0B/B,CAAgC,SAAA;AAC/D,UAAI,CAACn9B,OAAO6B;AACH,eAAA;AAEHs9B,YAAAA,QAAQhC,KAAKiC,QAAQ,6BAA6B,GAClD5oB,SAAS2mB,KAAKiC,QAAQ,0CAA0C;AAEtE,UADAvgC,QAAM,gCAAgC2X,MAAM,UAAU2oB,KAAK,GACvDA,OAAO;AACHE,cAAAA,SAAS51B,KAAK61B,MAAMH,KAAK;AAC/B,YAAIv/B,MAAMC,QAAQw/B,MAAM,KAAKA,OAAOhiC,SAAS,GAAG;AAC9C,gBAAM4f,aAAasiB,gBACjBv/B,QACAoD,aAAai8B,QAAQ;AAAA,YAACh8B;AAAAA,UAAAA,CAAY,GAClC2S,YAAYkB,YAAc3G,EAAAA,QAAQwB,cAClC+qB,cACAz5B,WACF,GAEMqa,aAAa5L,cACjButB,QACAh8B,aACA2S,YAAYkB,YAAY,EAAE3G,QAAQwB,YACpC;AAEA,cAAI,CAAC2L,WAAWzL,SAAS,CAACyL,WAAW1L,YAAYoB,aAAa;AAC5D,kBAAMosB,mBAAmB,GAAG9hB,WAAW1L,YAAYK,WAAW;AAC9D2D,mBAAAA,YAAYmJ,KAAK;AAAA,cACfvjB,MAAM;AAAA,cACNF,MAAM;AAAA,cACN2W,aAAamtB;AAAAA,cACbrC,MAAMzf;AAAAA,YACP,CAAA,GACD7e,QAAM,yBAAyB6e,UAAU,GAClC;AAAA,UAAA;AAEO1d,iBAAAA,gBAAAA,QAAQid,YAAY5Z,WAAW,GACxC;AAAA,QAAA;AAAA,MACT;AAEK,aAAA;AAAA,IAAA,GAGTrD,OAAOy/B,uBAAwBtC,CAAgC,SAAA;AAC7D,UAAI,CAACn9B,OAAO6B;AACVhD,eAAAA,QAAM,6BAA6B,GAC5B;AAEH6gC,YAAAA,OAAOvC,KAAKiC,QAAQ,WAAW,GAC/Bz8B,OAAOw6B,KAAKiC,QAAQ,YAAY;AAEtC,UAAIM,QAAQ/8B,MAAM;AAChB9D,gBAAM,kBAAkBs+B,IAAI;AAC5B,YAAIzgC,cACAoiC,UACAa;AAEAD,YAAAA;AASF,cARAhjC,eAAekjC,aAAaF,MAAMr8B,YAAY3G,cAAc;AAAA,YAC1DsgC,gCAAgCD;AAAAA,UACjC,CAAA,EAAEp/B,IAAKnB,CAAAA,UACNqjC,eAAerjC,OAAO;AAAA,YAACqgC;AAAAA,UAAc,CAAA,CACvC,GACAiC,WAAW17B,aAAa1G,cAAc;AAAA,YAAC2G;AAAAA,UAAY,CAAA,GACnDs8B,eAAe,QAEXjjC,aAAaW,WAAW;AACnB,mBAAA;AAAA,eAEJ;AAUCyiC,gBAAAA,aAAa,eARJC,WAAWp9B,IAAI,EAC3BgnB,MAAM,QAAQ,EACdhsB,IAAKqiC,CACJA,SAAAA,OACI,MAAMA,KAAKC,QAAQ,mBAAmB,OAAO,CAAC,SAC9C,SACN,EACCn7B,KAAK,EAAE,CAC8B;AACzB86B,yBAAAA,aAAaE,YAAYz8B,YAAY3G,YAAY,EAAEiB,IAC/DnB,CAAAA,UAAUqjC,eAAerjC,OAAO;AAAA,YAACqgC;AAAAA,UAAc,CAAA,CAClD,GACAiC,WAAW17B,aAAa1G,cAAc;AAAA,YACpC2G;AAAAA,UAAAA,CACD,GACDs8B,eAAe;AAAA,QAAA;AAIXjiB,cAAAA,aAAa5L,cACjBpV,cACA2G,aACA2S,YAAYkB,YAAY,EAAE3G,QAAQwB,YACpC;AAGI,YAAA,CAAC2L,WAAWzL,OAAO;AACrB,gBAAMutB,mBAAmB;AAAA,EAA8D9hB,WAAW1L,YAAYK,WAAW;AAAA;AACzH2D,iBAAAA,YAAYmJ,KAAK;AAAA,YACfvjB,MAAM;AAAA,YACNF,MAAM;AAAA,YACN2W,aAAamtB;AAAAA,YACbrC,MAAMzf;AAAAA,UACP,CAAA,GACD7e,QAAM,yBAAyB6e,UAAU,GAClC;AAAA,QAAA;AAET7e,eAAAA,QACE,aAAa8gC,YAAY,gBAAgBl2B,KAAKC,UAAU1J,OAAO6B,SAAS,CAAC,EAC3E,GACAq+B,gBAAgBlgC,QAAQ8+B,UAAUz7B,WAAW,GACtC;AAAA,MAAA;AAEF,aAAA;AAAA,IAAA,GAGTrD,OAAOmgC,aAAchD,CAAuB,SAAA;AACrCn9B,aAAOk/B,uBAAuB/B,IAAI,KACrCn9B,OAAOy/B,qBAAqBtC,IAAI;AAAA,IAAA,GAIpCn9B,OAAOogC,qBAAsBjD,CAAgC,SAAA;AACrD2B,YAAAA,WAAW3B,KAAKiC,QAAQ,6BAA6B;AAC3D,UAAIN,UAAU;AACNO,cAAAA,SAAS51B,KAAK61B,MAAMR,QAAQ;AAC3BuB,eAAAA,OAAAA,eAAehB,MAAM,GACrB;AAAA,MAAA;AAEF,aAAA;AAAA,IAAA,GAGFr/B;AAAAA,EACT;AACF;AAEA,MAAMsgC,YAAoC;AAAA,EACxC,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AACA,SAASP,WAAWxU,KAAa;AACxB5Y,SAAAA,OAAO4Y,GAAG,EAAE0U,QAAQ,eAAgB3gB,CAAcghB,MAAAA,UAAUhhB,CAAC,CAAC;AACvE;AAOA,SAASigB,gBACPv/B,QACA8+B,UACA/sB,cACA+qB,cACAyD,aACc;AACPzB,SAAAA,SAASnhC,IAAKoQ,CAAS,SAAA;AAC5B,UAAMyyB,UAAsB;AAAA,MAAC,GAAGzyB;AAAAA,IAAI;AAEhC/N,QAAAA,OAAOie,YAAYuiB,OAAO,GAAG;AAC/B,YAAM3jC,cAAc0jC,YAAY1jC,YAAYc,IAAK4G,CAAAA,MAAMA,EAAE7I,IAAI;AAGzDmB,UAAAA,YAAYQ,WAAW,GAAG;AACtB,cAAA;AAAA,UAACuG;AAAAA,UAAU,GAAG68B;AAAAA,QAAAA,IAAiBD;AAE9B,eAAA;AAAA,UAAC,GAAGC;AAAAA,UAAenhC,MAAMyS,aAAa;AAAA,QAAC;AAAA,MAAA;AAShD,WALiCyuB,QAAQ58B,YAAY,CAAA,GAAI4O,KAAMmB,CAAAA,QACtD,CAAC9W,YAAYgW,SAASc,IAAIpU,KAAK,CACvC,GAG4B;AACrBmhC,cAAAA,sBAAsBF,QAAQ58B,YAAY,CAAA,GAAI5H,OAAQ2X,CAAAA,QACnD9W,YAAYgW,SAASc,IAAIpU,KAAK,CACtC;AAEM,eAAA;AAAA,UAAC,GAAGihC;AAAAA,UAAS58B,UAAU88B;AAAAA,UAAoBphC,MAAMyS,aAAa;AAAA,QAAC;AAAA,MAAA;AAGxEyuB,cAAQ58B,YAAY48B,QAAQ58B,YAAY,IAAIjG,IAAKgW,CAAQ,QAAA;AACvD,cAAMgtB,SAAShtB,IAAIrU,MACbshC,SAAS7uB,aAAa;AACpBjS,eAAAA,QAAAA,WAAW0gC,QAAQ1gC,SAASnC,IAAKgC,CAAAA,UACvCA,MAAMJ,UAAUu9B,gBAAgB98B,OAAO4f,WAAWjgB,KAAK,IACnD;AAAA,UACE,GAAGA;AAAAA,UACHzB,OACEyB,MAAMzB,SAASyB,MAAMzB,MAAM2U,SAAS8tB,MAAM,IACtC,CAAC,GAAGhhC,MAAMzB,KAAK,EACZlC,OAAQgY,CAASA,SAAAA,SAAS2sB,MAAM,EAChC5/B,OAAO6/B,MAAM,IAChBjhC,MAAMzB;AAAAA,QACd,IACAyB,KACN,GACO;AAAA,UAAC,GAAGgU;AAAAA,UAAKrU,MAAMshC;AAAAA,QAAM;AAAA,MAAA,CAC7B;AAAA,IAAA;AAEH,UAAMC,kBAAkB;AAAA,MAAC,GAAGL;AAAAA,MAASlhC,MAAMyS,aAAa;AAAA,IAAC;AACrD/R,WAAAA,OAAOie,YAAY4iB,eAAe,MACpCA,gBAAgB/gC,WAAW+gC,gBAAgB/gC,SAASnC,IAAKgC,CAAW,WAAA;AAAA,MAClE,GAAGA;AAAAA,MACHL,MAAMyS,aAAa;AAAA,IAAA,EACnB,IAEG8uB;AAAAA,EAAAA,CACR;AACH;AAOA,SAASX,gBACPlgC,QACA8+B,UACAz7B,aACA;AACArD,SAAOyY,mBAAmB,MAAM;AAC9B,QAAI,CAACzY,OAAO6B;AACV;AAGI,UAAA,CAAC0sB,YAAYjtB,SAAS,IAAIpB,OAAO6N,KAAK/N,QAAQA,OAAO6B,WAAW;AAAA,MACpEmM,OAAO;AAAA,IAAA,CACR;AACGhO,QAAAA,OAAOie,YAAYsQ,UAAU,KAAKvuB,OAAOie,YAAY6gB,SAAS,CAAC,CAAC,GAAG;AAC/D,YAAA;AAAA,QAACl7B;AAAAA,MAAAA,IAAY2qB;AACnB1vB,cACE,wDACA+E,UACAk7B,SAAS,CAAC,EAAEl7B,QACd,GACK9C,QAAQ8C,UAAUk7B,SAAS,CAAC,EAAEl7B,QAAQ,KACzCgG,WAAWoU,SACThe,QACA;AAAA,QACE4D,UAAU4P,KAAK,CACb,GAAIsrB,SAAS,CAAC,EAAEl7B,YAAY,CAC5B,GAAA,GAAIA,YAAY,EAAG,CACpB;AAAA,MAAA,GAEH;AAAA,QAACxD,IAAIkB;AAAAA,QAAWsmB,MAAM;AAAA,QAAUlJ,OAAO;AAAA,MAAA,CACzC;AAAA,IAAA;AAIyB/Z,yBAC3B3E,OAAOF,UACPuD,WACF,KASEuG,WAAWipB,WAAW7yB,QAAQ;AAAA,MAACI,IAAI,CAAC,GAAG,CAAC;AAAA,IAAA,CAAE,GAC1CJ,OAAOqgC,eAAevB,QAAQ,GAC9Bl1B,WAAW0S,YAAYtc,QAAQ;AAAA,MAACI,IAAI,CAAC,CAAC;AAAA,IAAA,CAAE,KAGxCJ,OAAOqgC,eAAevB,QAAQ;AAAA,EAAA,CAEjC,GAED9+B,OAAO+J,SAAS;AAClB;AC3ZO,SAAS+2B,yBAAyB;AAAA,EACvC9qB;AAAAA,EACAhF;AAAAA,EACA+vB;AAKF,GAAG;AACD,QAAMC,gBAAgBhwB,YAAYgG;AAElChG,SAAAA,YAAYgG,QAASC,CAAkB,OAAA;AACrC+pB,kBAAc/pB,EAAE,GAGd,CAACjB,YAAYkB,YAAAA,EAAcC,QAAQ;AAAA,MAAC,aAAa;AAAA,IAAY,CAAA,KAC7DF,GAAGrb,SAAS,mBAEZmlC,qBAAqB9pB,EAAE;AAAA,EAAA,GAIpB,MAAM;AACXjG,gBAAYgG,QAAQgqB;AAAAA,EACtB;AACF;AC2CA,MAAMniC,QAAQC,cAAc,oBAAoB,GAE1CmiC,oBAAmC;AAAA,EACvC91B,UAAU;AAAA,EACVrF,YAAY;AAAA,EACZo7B,eAAe;AAAA,EACf91B,MAAM;AAAA,EACN+1B,OAAO;AACT,GAkCaC,uBAAuBC,WAGlC,SAA8B57B,OAAO67B,cAAc;AAC7C,QAAA;AAAA,IACJC;AAAAA,IACA3F;AAAAA,IACAC;AAAAA,IACA2F;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAjH;AAAAA,IACAztB;AAAAA,IACAC;AAAAA,IACAutB;AAAAA,IACAttB;AAAAA,IACAy0B;AAAAA,IACAx0B;AAAAA,IACAxL,WAAWigC;AAAAA,IACXC;AAAAA,IACAz0B;AAAAA,IACA,GAAG00B;AAAAA,EACDv8B,IAAAA,OAEEo1B,qBAAqBrrB,sBAAAA,GACrByyB,MAAM17B,OAA8B,IAAI,GACxC,CAAC27B,iBAAiBC,kBAAkB,IAAIz7B,SAC5C,IACF,GACM,CAAC07B,iBAAiBC,kBAAkB,IAAI37B,SAAS,EAAK,GACtD,CAAC47B,sBAAsBC,wBAAwB,IAAI77B,SAEvD,CAAA,CAAE;AAIF46B,sBAAAA,cACA,MAAMW,IAAI96B,OACZ;AAEA,QAAMq7B,sBAAsBj8B,OAAOq7B,gBAAgB,GAE7C5rB,cAAcvG,WAAW6oB,kBAAkB,GAC3CnyB,WAAWyY,YAAY5I,aAAcsJ,CAAAA,MACzCA,EAAEnI,QAAQ;AAAA,IAAC,aAAa;AAAA,EAAA,CAAY,CACtC,GACM9T,cAAcub,YAAY5I,aAAcsJ,CAAMA,QAAAA,IAAE/O,QAAQjS,MAAM,GAC9D0S,cAAcyxB,SAAAA,GAEd5F,gBAAgBx5B,YAAY7G,MAAMd;AAKxCkS,UAAQ,MAAM;AAEN80B,UAAAA,iBAAiB9F,qBAAqB5mB,aAAa3S,WAAW;AAEhE8C,QAAAA;AACI,aAAA,MAAA,+BAA+B,GAC9Bu8B,eAAe1xB,WAAW;AAEnC,UAAM2xB,cAAc1G,kBAClBjmB,aACA6kB,oBACA0G,OACF;AAEA1iC,WAAAA,MAAM,0BAA0B,GACzB6jC,eAAeC,YAAY3xB,WAAW,CAAC;AAAA,EAAA,GAC7C,CACDgF,aACAurB,SACA1G,oBACA10B,UACA9C,aACA2N,WAAW,CACZ;AAEK4xB,QAAAA,gBAAgBtH,YACnBuH,CAAAA,WACE,oBAAA,SAAA,EACKA,GAAAA,QACJ,UACA,aACA,aACA,gBACA,aACA,aACA,WAEH,CAAA,GACD,CACEx/B,aACAiK,YACAnH,UACA+G,aACAC,aACAC,gBACAC,WAAW,CAEf,GAEMy1B,aAAaxH,YAEfyH,CAGG,WAAA;AACCA,QAAAA,OAAOtI,KAAKl7B,UAAU,QAAQ;AAC5ByjC,UAAAA,WACD,oBAAA,MAAA,EACKD,GAAAA,QACJ,aACA,aACA,kBACA,aACA,iBACA,SAEH,CAAA;AACD,UACElB,qBACAkB,OAAOtI,KAAKwI,eACZF,OAAOpgC,KAAKA,SAAS;AAErB,eAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,UAAA,oBAAC,UAAK,OAAOs+B,mBAAmB,iBAAiB,IAC9CY,+BACH;AAAA,UACCmB;AAAAA,QAAAA,GACH;AAGEE,YAAAA,aAAaH,OAAOtI,KAAK0I;AAC3BD,aAAAA,eACFF,WAAWE,WAAWE,UAAU;AAAA,QAACtjC,UAAUkjC;AAAAA,MAAS,CAAA,IAE/CA;AAAAA,IAAAA;AAET,WAAOD,OAAOjjC;AAAAA,EAEhB,GAAA,CACEkW,aACA7P,UACAw0B,kBACAxtB,aACAutB,iBACAmH,mBACAx+B,WAAW,CAEf,GAEMggC,4BAA4B/H,YAAY,MAAM;AAClD,QAAIwG,gBAAgB;AAClBjjC,YAAM,wBAAwB4K,KAAKC,UAAUo4B,cAAc,CAAC,EAAE;AAC9D,YAAMwB,sBAAsB1gC,mBAC1Bk/B,gBACA59B,eAAe8M,YAAYlR,UAAU+8B,aAAa,CACpD;AACA,UAAIyG,wBAAwB,MAAM;AAChCzkC,cACE,mCAAmC4K,KAAKC,UAAU45B,mBAAmB,CAAC,EACxE;AACMC,cAAAA,aAAa3hC,aAAa0hC,qBAAqBtyB,WAAW;AAC5DuyB,uBACF35B,WAAW6S,OAAOzL,aAAauyB,UAAU,GAGpCvyB,YAAYoG,WAAW5E,KAAMgxB,OAAMA,EAAE5nC,SAAS,eAAe,KAChEoa,YAAYmJ,KAAK;AAAA,UACfvjB,MAAM;AAAA,UACNiG,WAAWyhC;AAAAA,QAAAA,CACZ,GAEHtyB,YAAYjH;MAAS;AAAA,IAEzB;AAAA,EACF,GACC,CAAC8yB,eAAe7mB,aAAa8rB,gBAAgB9wB,WAAW,CAAC,GAEtD+vB,uBAAuBzF,YAC1Bv5B,CAA0B,cAAA;AACrB6/B,QAAAA,oBAAoBA,iBAAiBvkC,SAAS,GAAG;AACnD,YAAMomC,iBAA4C,CAAE;AACpD7B,UAAAA,iBAAiBrrB,QAASmtB,CAAwB,wBAAA;AAChD,cAAMH,eAAa3hC,aACjB8hC,oBAAoB7hC,WACpBmP,WACF;AACA,YAAI,CAAC2yB,MAAWjiC,QAAQ6hC,YAAU,GAAG;AAC/BG,8BAAoBE,WACtBF,oBAAoBE,QAAQ;AAAA,YAC1BlP,cAAc;AAAA,YACdyO,iBAAiBO;AAAAA,YACjBltB,QAAQ;AAAA,UAAA,CACT;AAEH;AAAA,QAAA;AAEEqtB,YAAAA;AACA9hC,YAAAA,cACF8hC,WAAW/hC,qBAAqByhC,cAAYxhC,SAAS,GAElD8hC,YAAYA,aAAaN,gBACzBM,aAAa,QAAQN,eACtB;AACMnmC,gBAAAA,QAAQu7B,mBAAmB3I,SAAS6K,kBAAkB,GACtDiJ,oBAAoB9iC,oBACxB5D,OACAymC,UACAxgC,WACF;AACIqgC,8BAAoBE,WACtBF,oBAAoBE,QAAQ;AAAA,YAC1BlP,cAAcoP;AAAAA,YACdX,iBAAiBO;AAAAA,YACjBltB,QAAQ;AAAA,UAAA,CACT;AAAA,QAAA;AAMHqtB,qBAAa,QACfJ,eAAehhC,KAAK;AAAA,UAClB,GAAIohC,YAAYN;AAAAA,UAChBJ,iBAAiBO;AAAAA,QAAAA,CAClB;AAAA,MAAA,CAEJ,GACGD,eAAepmC,SAAS,GAAG;AAC7BklC,iCAAyBkB,cAAc;AACvC;AAAA,MAAA;AAAA,IACF;AAEFlB,6BAA0BD,4BAEpBA,uBAAqBjlC,SAAS,IACzB,KAGFilC,sBACR;AAAA,KAEH,CAACzH,oBAAoB+G,kBAAkBv+B,aAAa2N,WAAW,CACjE;AAGA1J,YAAU,MAAM;AACd,UAAMy8B,UAAU/tB,YAAYtE,GAAG,SAAS,MAAM;AAC5CqvB,2BAAAA,GACAsC,0BAA0B;AAAA,IAC3B,CAAA,GACKW,iBAAiBhuB,YAAYtE,GAAG,iBAAiB,MAAM;AAC3D2wB,yBAAmB,EAAI;AAAA,IACxB,CAAA,GACK4B,iBAAiBjuB,YAAYtE,GAAG,iBAAiB,MAAM;AAC3D2wB,yBAAmB,EAAK;AAAA,IAAA,CACzB;AAED,WAAO,MAAM;AACX0B,cAAQhtB,eACRitB,eAAejtB,YAAY,GAC3BktB,eAAeltB,YAAY;AAAA,IAC7B;AAAA,EAAA,GACC,CAACf,aAAaqtB,2BAA2BtC,oBAAoB,CAAC,GAGjEz5B,UAAU,MAAM;AACVw6B,sBAAkB,CAACM,mBACrBiB,0BAA0B;AAAA,EAE3B,GAAA,CAACjB,iBAAiBN,gBAAgBuB,yBAAyB,CAAC;AAE/D,QAAM,CAACa,wBAAwBC,yBAAyB,IAAIz9B,SAAS,EAAK;AAC1EY,YAAU,MAAM;AACT48B,+BAEHC,0BAA0B,EAAI,GAC9BpD,qBAAqB;AAAA,KAEtB,CAACA,sBAAsBmD,sBAAsB,CAAC,GAEjD58B,UAAU,MAAM;AACTxG,YAAQ8gC,kBAAkBY,oBAAoBr7B,OAAO,KACxD45B,wBAEFyB,oBAAoBr7B,UAAUy6B;AAAAA,KAC7B,CAACA,kBAAkBb,oBAAoB,CAAC,GAG3Cz5B,UAAU,MAAM;AACd,UAAM88B,WAAWtD,yBAAyB;AAAA,MACxC9qB;AAAAA,MACAhF;AAAAA,MACA+vB;AAAAA,IAAAA,CACD;AACD,WAAO,MAAMqD,SAAS;AAAA,EACrB,GAAA,CAACpuB,aAAahF,aAAa+vB,oBAAoB,CAAC;AAG7CsD,QAAAA,aAAa/I,YAChB9zB,CAA8D,UAAA;AACzDk6B,aACaA,OAAOl6B,KAAK,MAEZhH,UACbgH,MAAME,eAAe,IAEdF,MAAM8uB,YAAYgO,iBAC3BtuB,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNsmB,eAAe;AAAA,QACbtmB,MAAM;AAAA,QACNuhC,MAAM31B,MAAM8uB,YAAYgO;AAAAA,MAC1B;AAAA,MACAtkC,QAAQgR;AAAAA,MACRslB,aAAa9uB;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAACk6B,QAAQ1rB,aAAahF,WAAW,CACnC,GAGMuzB,cAAcjJ,YACjB9zB,CAAgE,YAAA;AAC/D,UAAMpK,UAAQu7B,mBAAmB3I,SAAS6K,kBAAkB,GAMtDz7B,OALU4B,oBACd5D,SACA4T,YAAYnP,WACZwB,WACF,GACsBlC,MAAM/B,QAAQ,CAAE,GAChColC,gBAAgB/C,UAAU;AAAA,MAACj6B,OAAAA;AAAAA,MAAOpK,OAAAA;AAAAA,MAAOgC;AAAAA,MAAMiE;AAAAA,IAAAA,CAAY;AAE7DmhC,qBAAiB,CAACxzB,YAAYnP,aAChC2F,QAAME,eAAe,GAGrBsO,YAAYmJ,KAAK;AAAA,MAACvjB,MAAM;AAAA,IAAA,CAAU,GAElC+gB,QAAQC,QAAQ4nB,aAAa,EAC1BC,KAAMC,CAAW,aAAA;AACV,YAAA,8CAA8CA,QAAM,GAEtD,CAACA,YAAU,CAACA,SAAOpxB,UACrBzU,MAAM,uDAAuD,GAE7DmS,YAAYmvB,WAAW34B,QAAM88B,aAAa,KACjCI,SAAOpxB,SAChBtC,YAAYqvB,eACVj9B,aAAashC,SAAOpxB,QAA+B;AAAA,QACjDjQ;AAAAA,MACD,CAAA,CACH,IAEAsa,QAAQzO,KACN,wDACAw1B,QACF;AAAA,IAEH,CAAA,EACAC,MAAOtnB,CACNM,WAAAA,QAAQN,MAAMA,KAAK,GAEZA,MACR,EACAunB,QAAQ,MAAM;AACb5uB,kBAAYmJ,KAAK;AAAA,QAACvjB,MAAM;AAAA,MAAA,CAAe;AAAA,IACxC,CAAA,KACM4L,QAAM8uB,YAAYgO,iBAC3BtuB,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNsmB,eAAe;AAAA,QACbtmB,MAAM;AAAA,QACNuhC,MAAM31B,QAAM8uB,YAAYgO;AAAAA,MAC1B;AAAA,MACAtkC,QAAQgR;AAAAA,MACRslB,aAAa9uB;AAAAA,IAAAA,CACd,GAGH3I,MAAM,uDAAuD;AAAA,EAC/D,GACA,CAACmX,aAAayrB,SAAS5G,oBAAoBx3B,aAAa2N,WAAW,CACrE,GAEM6zB,gBAAmDvJ,YACtD9zB,CAAU,YAAA;AAIT,QAHIq0B,WACFA,QAAQr0B,OAAK,GAEX,CAACA,QAAMs9B,sBAAsB;AACzBjjC,YAAAA,YAAY82B,mBAAmB5I,aAAa8K,kBAAkB;AAEhEh5B,oBAAc,SAChB+H,WAAW6S,OAAOzL,aAAa9Q,OAAOmyB,MAAMrhB,aAAa,CAAE,CAAA,CAAC,GAC5DA,YAAYjH,SAAS,IAEvBiM,YAAYmJ,KAAK;AAAA,QAACvjB,MAAM;AAAA,QAAW4L,OAAAA;AAAAA,MAAAA,CAAM;AACnCktB,YAAAA,eAAeiE,mBAAmB5I,aAAa8K,kBAAkB;AAEnEh5B,oBAAc6yB,gBAChB1e,YAAYmJ,KAAK;AAAA,QACfvjB,MAAM;AAAA,QACNiG;AAAAA,MAAAA,CACD;AAAA,IAAA;AAAA,EAEL,GAEF,CAACmU,aAAa6lB,SAAShB,oBAAoB7pB,WAAW,CACxD,GAEMpB,cAAc0rB,YACjB9zB,CAAwD,YAAA;AACnDm6B,eACFA,QAAQn6B,OAAK;AAGTsqB,UAAAA,iBAAiB9gB,YAAYnP,YAC/BmP,YAAYnP,UAAUV,MAAM/B,KAAKM,MAAM,GAAG,CAAC,IAC3Cc,QACE+tB,aAAauD,iBACd9O,KAAKwL,WAAWxd,aAAa8gB,cAAc,IAG5CtxB,QACE,CAAC6b,GAAG0oB,YAAY,IAAI/hB,KAAKgiB,KAAKh0B,aAAa,CAAA,CAAE,GAC7Ci0B,gBAAgBF,aAAarlC,MAAM,GAAG,CAAC,GACvCwlC,kBAAkBpT,iBACpBvoB,KAAKrH,OAAO+iC,eAAenT,cAAc,IACzC,IACEqT,kBAAkB5W,aACpB,CAACvd,YAAYiN,YAAYsQ,UAAU,IACnC;AAEFvd,gBAAYnP,aAAa8hC,MAAWh2B,YAAYqD,YAAYnP,SAAS,KAE7CqjC,mBAAmBC,oBAC3Cv7B,WAAW2S,YACTvL,aACAA,YAAYwL,mBAAmB;AAAA,MAACpgB,YAAY,CAAA;AAAA,IAAA,CAAG,CACjD,GACA4U,YAAYjH;EAAS,GAGzB,CAAC43B,SAAS3wB,WAAW,CACvB,GAEMo0B,eAAkD9J,YACrD9zB,CAAU,YAAA;AACLo0B,cACFA,OAAOp0B,OAAK,GAETA,QAAM69B,qBAAqB,KAC9BrvB,YAAYmJ,KAAK;AAAA,MAACvjB,MAAM;AAAA,MAAW4L,OAAAA;AAAAA,IAAAA,CAAM;AAAA,EAAA,GAG7C,CAACwO,aAAa4lB,MAAM,CACtB,GAEM0J,sBAAsBhK,YACzB9zB,CAAsB,YAAA;AACjBg6B,qBACFA,cAAch6B,OAAK;AAAA,KAGvB,CAACg6B,aAAa,CAChB,GAkBM+D,oBAAoBjK,YAAY,MAAM;AAC1C,QAAI,CAACtqB,YAAYnP;AACf;AAEF,UAAM2jC,OAAOp+B,YAAYq+B,yBAAyBz0B,WAAW,GACvD;AAAA,MAAC00B;AAAAA,IAAAA,IAAiBF;AAExB,QAAIvD,IAAI96B,YAAYu+B;AAClB;AAGF,UAAMC,eADSv+B,YAAYw+B,UAAU50B,WAAW,EACpB+e,aAAa;AACrC,QAAA,CAAC4V,gBAAgBA,aAAalK,eAAe;AAC/C;AAEIoK,UAAAA,mBAAmBF,aAAajK,WAAW,CAAC;AAC9C,QAAA;AACF,YAAMoK,cAAc1+B,YAAYq2B,WAC9BzsB,aACAA,YAAYnP,SACd;AACA,OACEikC,YAAYC,gBAAgBF,iBAAiBE,eAC7CD,YAAYE,cAAcH,iBAAiBG,eAE3CnnC,MAAM,6CAA6C,GAEnD8mC,cAAcM,gBAEdN,GAAAA,aAAaO,SAASJ,WAAW;AAAA,IAAA,QAE7B;AACNjnC,YAAM,qDAAqD,GAE3D+K,WAAWiP,SAAS7H,WAAW,GAE3BA,YAAYlR,SAASzC,SAAS,KAChCuM,WAAW6S,OAAOzL,aAAa,CAAC,GAAG,CAAC,CAAC,GAEvCA,YAAYjH,SAAS;AAAA,IAAA;AAAA,EACvB,GACC,CAACk4B,KAAKjxB,WAAW,CAAC;AAIrB1J,YAAU,MAAM;AACd,QAAI46B,iBAAiB;AACbiE,YAAAA,mBAAmB,IAAIC,iBAAiBb,iBAAiB;AAC/DY,aAAAA,iBAAiBE,QAAQnE,iBAAiB;AAAA,QACxCoE,mBAAmB;AAAA,QACnBr5B,YAAY;AAAA,QACZs5B,eAAe;AAAA,QACfC,WAAW;AAAA,QACXC,SAAS;AAAA,MACV,CAAA,GACM,MAAM;AACXN,yBAAiBO,WAAW;AAAA,MAC9B;AAAA,IAAA;AAAA,EACF,GAEC,CAACnB,mBAAmBrD,eAAe,CAAC;AAEjCyE,QAAAA,gBAAgBrL,YACnB9zB,CAAyC,YAAA;AACpC/B,UAAMmhC,aACRnhC,MAAMmhC,UAAUp/B,OAAK,GAElBA,QAAMs9B,mBAAAA,KACT9zB,YAAYqrB,eAAe70B,OAAK,GAE7BA,QAAMs9B,mBAAmB,KAC5B9uB,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNsmB,eAAe;AAAA,QACbtmB,MAAM;AAAA,QACNirC,eAAe;AAAA,UACb9zB,KAAKvL,QAAMuL;AAAAA,UACX+zB,MAAMt/B,QAAMs/B;AAAAA,UACZC,QAAQv/B,QAAMu/B;AAAAA,UACdC,SAASx/B,QAAMw/B;AAAAA,UACfC,SAASz/B,QAAMy/B;AAAAA,UACfC,UAAU1/B,QAAM0/B;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACAlnC,QAAQgR;AAAAA,MACRslB,aAAa9uB;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAAC/B,OAAOuQ,aAAahF,WAAW,CAClC,GAEMm2B,cAAc7L,YACjB9zB,CAAyC,YAAA;AACpC/B,UAAM2hC,WACR3hC,MAAM2hC,QAAQ5/B,OAAK,GAEhBA,QAAMs9B,mBAAAA,KACT9uB,YAAYmJ,KAAK;AAAA,MACfvjB,MAAM;AAAA,MACNsmB,eAAe;AAAA,QACbtmB,MAAM;AAAA,QACNirC,eAAe;AAAA,UACb9zB,KAAKvL,QAAMuL;AAAAA,UACX+zB,MAAMt/B,QAAMs/B;AAAAA,UACZC,QAAQv/B,QAAMu/B;AAAAA,UACdC,SAASx/B,QAAMw/B;AAAAA,UACfC,SAASz/B,QAAMy/B;AAAAA,UACfC,UAAU1/B,QAAM0/B;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACAlnC,QAAQgR;AAAAA,MACRslB,aAAa9uB;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAAC/B,OAAOuQ,aAAahF,WAAW,CAClC,GAEMq2B,iCAAiCz5B,QAAQ,MAAM;AAEnD,QAAIm0B,4BAA4BvhC;AAIhC,aAAIuhC,4BAA4B,OACvBtN,OAGF,CAACoF,SAAsB2D,aAAoB;AAChDuE,gCAAwBlH,oBAAoB2C,QAAQ;AAAA,MACtD;AAAA,EAAA,GACC,CAAC3C,oBAAoBkH,uBAAuB,CAAC,GAE1CuF,WAA8ChM,YAClD,CAAC,CAAGl8B,EAAAA,MAAI,MAAM;AACRuF,QAAAA,qBAAqBqM,YAAYlR,UAAUuD,WAAW;AACxD,aAAO,CACL;AAAA,QACEnC,QAAQ;AAAA,UACN9B,MAAM,CAAC,GAAG,CAAC;AAAA,UACXiC,QAAQ;AAAA,QACV;AAAA,QACAF,OAAO;AAAA,UACL/B,MAAM,CAAC,GAAG,CAAC;AAAA,UACXiC,QAAQ;AAAA,QACV;AAAA,QACA4hC,aAAa;AAAA,MAAA,CACd;AAIL,QAAI7jC,OAAK/B,WAAW;AAClB,aAAO,CAAE;AAEX,UAAMqnC,WAASpC,qBAAqBtmC,OAAQyS,CAAAA,SAEtCk1B,MAAWh2B,YAAYc,IAAI,IAEzBrP,OAAK/B,WAAW,IACX,KAGPkM,KAAKrH,OAAOuM,KAAKtN,MAAM/B,MAAMA,MAAI,KACjCmK,KAAKrH,OAAOuM,KAAKvN,OAAO9B,MAAMA,MAAI,IAKpCukC,MAAW4D,aAAa94B,MAAM;AAAA,MAC5BvN,QAAQ;AAAA,QAAC9B,MAAAA;AAAAA,QAAMiC,QAAQ;AAAA,MAAC;AAAA,MACxBF,OAAO;AAAA,QAAC/B,MAAAA;AAAAA,QAAMiC,QAAQ;AAAA,MAAA;AAAA,IACvB,CAAA,KAAKsiC,MAAW9wB,SAASpE,MAAMrP,MAAI,CAEvC;AACD,WAAIslC,SAAOrnC,SAAS,IACXqnC,WAEF,CAAE;AAAA,EAEX,GAAA,CAAC1zB,aAAa3N,aAAai/B,oBAAoB,CACjD;AAaA,SARAh7B,UAAU,MAAM;AACVH,QAAAA,UAAUC,YAAYC,UACxB2J,aACAA,WACF,GACAmxB,mBAAmBF,IAAI96B,OAAO;AAAA,EAAA,GAC7B,CAAC6J,aAAaixB,GAAG,CAAC,GAEhBpH,qBAGEuH,kBAAkB,OACvB;AAAA,IAACoF;AAAAA,IAAA;AAAA,MACKxF,GAAAA;AAAAA,MACJ,WAAW;AAAA,MACX,WAAWA,UAAUl0B,aAAa;AAAA,MAClC;AAAA,MACA,QAAQs3B;AAAAA,MACR,QAAQf;AAAAA,MACR,SAASz0B;AAAAA,MACT,kBAAkB01B;AAAAA,MAClB,SAAST;AAAAA,MACT,WAAW8B;AAAAA,MACX,SAASQ;AAAAA,MACT,SAAS5C;AAAAA,MACT;AAAA,MAGA,mBAAmB/jC;AAAAA,MACnB;AAAA,MACA;AAAA,MACA,yBAAyB6mC;AAAAA,IAAAA;AAAAA,EAAAA,IAtBpB;AAyBX,CAAC;AAEDjG,qBAAqBp7B,cAAc;AChzBnC,MAAMyhC,gBAAgBC,MAAMn4B,cAAkC/O,MAAS;AAahE,SAAAmnC,eAAAliC,OAAA;AAAA,QAAAC,IAAAjB,EAAA,EAAA,GACLzE,SAAeg4B,gBAAgBvyB,MAAKmiC,aAAc,GAClD5xB,cAAoBhW,OAAMm3B,UAAAnhB,aAC1BhF,cAAoBhR,OAAMm3B,UAAAnmB;AAAsB,MAAArL,IAAAI;AAAAL,WAAA1F,UAG5C+F,SAAA4yB,mBAAA;AAAA,IAAA34B;AAAAA,EAAA,CAAA,GAEwC0F,OAAA1F,QAAA0F,OAAAK,MAAAA,KAAAL,EAAA,CAAA,GAAAC,KAFxCI;AAFJ,QAAA80B,qBAA2Bl1B;AAM1BgB,MAAAA;AAAAjB,IAAA,CAAA,MAAAm1B,mBAAAhC,WAMelyB,KAAA8yB,CAAA,WAAA;AACUZ,uBAAAA,QAAA7S,KAAcyT,MAAM;AAAA,EACvC/zB,GAAAA,EAAA,CAAA,IAAAm1B,mBAAAhC,SAAAnzB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAkB,MAAAA;AAAAlB,IAAAsQ,CAAAA,MAAAA,eAAAtQ,SAAAiB,MAJHC,KAAC,oBAAA,sBACcoP,EAAAA,aACH,UAAArP,GAAAA,CAGV,GAAAjB,OAAAsQ,aAAAtQ,OAAAiB,IAAAjB,OAAAkB,MAAAA,KAAAlB,EAAA,CAAA;AAAAmB,MAAAA;AAAAnB,WAAAsQ,eAAAtQ,EAAAsL,CAAAA,MAAAA,YAAAic,YACFpmB,KAAC,oBAAA,cACcmP,EAAAA,aACA,aAAAhF,YAAWic,SACxB,CAAA,GAAAvnB,OAAAsQ,aAAAtQ,EAAA,CAAA,IAAAsL,YAAAic,UAAAvnB,OAAAmB,MAAAA,KAAAnB,EAAA,CAAA;AAAAuB,MAAAA;AAAAvB,YAAAsQ,eAAAtQ,EAAAD,EAAAA,MAAAA,MAAA3F,YAOImH,KAAC,oBAAA,qCAAA,EAAiD+O,aAC/CvQ,UAAK3F,MAAAA,SACR,CAAA,GAAsC4F,QAAAsQ,aAAAtQ,EAAA,EAAA,IAAAD,MAAA3F,UAAA4F,QAAAuB,MAAAA,KAAAvB,EAAA,EAAA;AAAAwB,MAAAA;AAAAxB,IAAAm1B,EAAAA,MAAAA,sBAAAn1B,UAAAuB,MAHxCC,KAAA,oBAAA,0BAAA,UAAA,EAA2C2zB,OAAAA,oBACzC5zB,UAGF,GAAA,CAAA,GAAqCvB,QAAAm1B,oBAAAn1B,QAAAuB,IAAAvB,QAAAwB,MAAAA,KAAAxB,EAAA,EAAA;AAAA6B,MAAAA;AAAA7B,IAAA,EAAA,MAAAsL,YAAAoc,gBAAA1nB,EAAAsL,EAAAA,MAAAA,YAAAic,YAAAvnB,UAAAwB,MARvCK,KAAA,oBAAC,SACS,QAAAyJ,YAAWic,UACL,cAAAjc,YAAWoc,cAEzBlmB,UAKF,GAAA,CAAA,GAAQxB,EAAA,EAAA,IAAAsL,YAAAoc,cAAA1nB,EAAA,EAAA,IAAAsL,YAAAic,UAAAvnB,QAAAwB,IAAAxB,QAAA6B,MAAAA,KAAA7B,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,IAAAsQ,EAAAA,MAAAA,eAAAtQ,UAAA6B,MAVViB,KAAA,oBAAA,mBAAA,UAAA,EAAoCwN,OAAAA,aAClCzO,UAUF,GAAA,CAAA,GAA8B7B,QAAAsQ,aAAAtQ,QAAA6B,IAAA7B,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAgD,MAAAA;AAAAhD,SAAAA,EAAA,EAAA,MAAA1F,UAAA0F,EAAAkB,EAAAA,MAAAA,MAAAlB,EAAAmB,EAAAA,MAAAA,MAAAnB,UAAA8C,MAtBhCE,0BAA+B1I,cAAAA,UAAAA,EAAAA,OAAAA,QAC7B4G,UAAAA;AAAAA,IAAAA;AAAAA,IAMAC;AAAAA,IAIA2B;AAAAA,EAYF,EAAA,CAAA,GAAyB9C,QAAA1F,QAAA0F,QAAAkB,IAAAlB,QAAAmB,IAAAnB,QAAA8C,IAAA9C,QAAAgD,MAAAA,KAAAhD,EAAA,EAAA,GAvBzBgD;AAuByB;AAOtB,SAAAm/B,YAAA;AACL7nC,QAAAA,SAAe0nC,MAAAj4B,WAAAg4B,aAA8B;AAAC,MAAA,CAEzCznC;AAAM9E,UAAAA,IAAAA,MACO,+CAA+C;AAG1D8E,SAAAA;AAAM;ACpER,SAAA8nC,oBAAAriC,OAAA;AAAAC,QAAAA,IAAAjB,EAAA,CAAA,GAGLzE,SAAe6nC,UACfn2B,GAAAA,KAAW0oB,eAAe30B,MAAKiM,EAAG;AAAC,MAAA/L,IAAAI;AAAAL,SAAAA,EAAA1F,CAAAA,MAAAA,UAAA0F,SAAAgM,MAEzB/L,KAAAA,MAAA;AACR,UAAAuZ,eAAqBlf,OAAM0R,GAAI,KAAKA,EAAE;AAAC,WAAA,MAAA;AAGrCwN,mBAAYnI,YAAa;AAAA,IAAC;AAAA,EAE3BhR,GAAAA,KAAA,CAAC/F,QAAQ0R,EAAE,GAAChM,OAAA1F,QAAA0F,OAAAgM,IAAAhM,OAAAC,IAAAD,OAAAK,OAAAJ,KAAAD,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,IANf4B,UAAU3B,IAMPI,EAAY,GAAC;AAAA;","x_google_ignoreList":[18,32]}
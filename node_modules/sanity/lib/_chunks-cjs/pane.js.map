{"version":3,"file":"pane.js","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/util/toLowerCaseNoSpaces.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/Resizer.tsx","../../src/structure/panes/document/documentInspector/Resizable.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard\n                                      .writeText(documentId)\n                                      .then(() => {\n                                        toast.push({\n                                          status: 'success',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                          ),\n                                        })\n                                      })\n                                      .catch(() => {\n                                        toast.push({\n                                          status: 'error',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                          ),\n                                        })\n                                      })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(documentId, documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>(undefined)\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [handleInitialValue, hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const tabs = useMemo(() => showTabs && <DocumentHeaderTabs />, [showTabs])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={title}\n          tabs={tabs}\n          tabIndex={tabIndex}\n          backButton={backButton}\n          actions={renderedActions}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider __unstable_elements={portalElements}>\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    documentReady={ready}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useInsertionEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error(\n      'Attempted to patch the Sanity document during initial render or in an `useInsertionEffect`. Input components should only call `onChange()` in a useEffect or an event handler.',\n    )\n  })\n  useInsertionEffect(() => {\n    // note: this needs to happen in an insertion effect to make sure we're ready to receive patches from child components when they run their effects initially\n    // in case they do e.g. `useEffect(() => props.onChange(set(\"foo\")), [])`\n    // Note: although we discourage patch-on-mount, we still support it.\n    patchRef.current = (event: PatchEvent) => {\n      // when creating a new draft\n      if (!editState.draft && !editState.published) {\n        telemetry.log(CreatedDraft)\n      }\n      patch.execute(toMutationPatches(event.patches), initialValue.value)\n    }\n  }, [editState.draft, editState.published, initialValue.value, patch, telemetry])\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  useEffect(() => {\n    formStateRef.current = formState\n  }, [formState])\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","jsx","color","Fragment","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Text","Symbol","for","InfoOutlineIcon","t4","Tooltip","t5","jsxs","Inline","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","TooltipDelayGroupProvider","DocumentPreviewPresence","DocumentStatusIndicator","status","DocumentStatus","tooltip","getPreviewValueWithFallback","t6","SanityDefaultPreview","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","StateLink","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","PreviewCard","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","Translate","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","WarningOutlineIcon","t14","t15","Card","t16","Stack","map","item_0","borderTop","undefined","DocumentsIcon","documentCount","ChevronDownIcon","minWidth","filter","_temp","t17","index","projectId","datasetName","Button","CopyIcon","content","navigator","clipboard","writeText","then","push","catch","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","LoadingBlock","Dialog","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","ErrorBoundary","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","LegacyLayerProvider","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","BoundaryElementProvider","t25","t26","IsLastPaneProvider","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","MenuDivider","child","childIndex","key","child_0","childIndex_0","MenuGroup","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","MenuItem","TooltipOfDisabled","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","ContextMenuButton","nodeIndex","Menu","MenuButton","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","LayerProvider","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","StatusButton","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","IntentLink","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","InsufficientPermissionsMessage","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","ChevronRightIcon","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","RenderActionCollectionState","actionProps","onActionComplete","GetHookCollectionState","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsEnabledProvider","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","CommentsProvider","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","TextInput","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","Tab","TabList","outline","JsonInspector","ignoreCase","TabPanel","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","log","err","response","errMessage","finally","onSubmit","fullscreen","DialogProvider","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","Heading","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","Spinner","FormBuilder","changed","focused","members","readOnly","PresenceOverlay","Container","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","createPatchChannel","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","_portalElement","setPortalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","view","activeView","portalElement","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","PortalProvider","VirtualizerScrollInstanceProvider","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","Popover","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Grid","ModalDialog","footer","showCloseButton","header","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","Hotkeys","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","isRestoreAction","historyActions","toLowerCase","revTime","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","Badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","TextWithTone","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","RestoreIcon","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","useGlobalCopyPasteElementHandler","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","portalElements","GetFormValueProvider","FieldActionsResolver","FieldActionsProvider","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","useInsertionEffect","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","CopyPasteProvider","SourceProvider","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","ReferenceInputOptionsProvider","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","renderItem","noDocumentsContent","ErrorActions","CommandList","mainContent","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","Checkbox","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","Select","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","SearchHeader","Filters","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","createElement","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","SearchProvider","addSelectedStateToMenuItems","isEqual","previous","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","UserAvatar","AvatarStack","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","NoChanges","ChangeList","DocumentChangeContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAOaA,MAAAA,2BAA2B,aAO3BC,iCAAiCC,kCAA2B;AAAA,EACvEC,QAAQ;AAAA,EACRC,WAAWJ;AAAAA,EACXK,WAAWA,MAAM,QAAA,QAAA,EAAA,KAAA,WAAA;AAAA,WAAA,QAAO,iBAAa;AAAA,EAAA,CAAA;AACvC,CAAC;ACTM,SAAAC,SAAAC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAC,UAAAC;AAAAA,EAAAA,IAAkCJ,OAClCK,SAAeC,iBAAU;AAACC,MAAAA;AAAAN,WAAAG,cAAAI,SAAAP,SAAAI,UACPE,KAAAF,OAAMI,IAAKL,cAAaI,KAAM,GAACP,EAAA,CAAA,IAAAG,cAAAI,OAAAP,OAAAI,QAAAJ,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAlD,QAAAS,aAAmBH,IACnB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAEbG,KAAA;AAAA,IAAAH;AAAAA,IAAAI,OAE9BV;AAAAA,EACRH,GAAAA,OAAAG,eAAAH,OAAAS,YAAAT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,OAAAA,yBAAgBH,EAGtC;AAAC,MAAA,CAEGH,YAAU;AAAAO,QAAAA;AAAAhB,aAAAG,cAAAI,SAAAP,SAAAU,KACCM,MAAAN,EAAE,sCAAoC;AAAA,MAAAD,YAAeN,cAAaI;AAAAA,IAAAA,CAAO,GAACP,EAAA,CAAA,IAAAG,cAAAI,OAAAP,OAAAU,GAAAV,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,SAAAgB,OAAjFC,+CAAOD,UAAAA,KAA2E,GAAOhB,OAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAAzFiB;AAAAA,EAAAA;AAAyF,MAG9FH,OAAK;AAAAE,QAAAA;AAAAhB,cAAAc,MAAAI,WAAAlB,UAAAU,KACGM,MAAAN,EAAE,wBAAsB;AAAA,MAAAS,cAAiBL,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,UAAAgB,OAA3DC,MAAGD,2BAAAA,IAAAA,qBAAAA,EAAAA,UAAAA,KAAwD,GAAIhB,QAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAA/DiB;AAAAA,EAAAA;AAA+DD,MAAAA;AAAAhB,YAAAU,KAAAV,EAAAa,EAAAA,MAAAA,OAAAO,SAKnEJ,KAAAH,OAAKO,SACJC,2BAAA,IAAyF,UAA5E,OAAA;AAAA,IAAAC,OAAQ;AAAA,EAAA,GAAgCZ,YAAE,yBAAyB,EAAA,CAAE,GACnFV,QAAAU,GAAAV,EAAA,EAAA,IAAAa,OAAAO,OAAApB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,UAAAgB,MAHHC,KAAAI,2BAAA,IAAAE,qBAAA,EACGP,cAEA,GACAhB,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAJHiB;AAIG;ACzBMO,MAAAA,iBAAiBC,wBAAOC,MAAG;AAAA;AAAA,GAI3BC,gCAAgCF,iBAAAA,OAAOG;AAAAA;AAAAA;AAAAA,YAGxCJ,cAAc;AAAA;AAAA;AAAA,GAKbK,gCAAgCJ,iBAAAA,OAAOK;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAQvCC,UAAQN,iBAAAA,OAAOO;AAAAA;AAAAA;AAAAA,eAGb,CAAC;AAAA,EAACC,OAAAA;AAAK,MAAMC,GAAAA,IAAID,OAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,eAIvC,CAAC;AAAA,EAACH,OAAAA;AAAK,MAAMC,GAAAA,IAAID,OAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,iBAIrC,CAAC;AAAA,EAACH,OAAAA;AAAK,MAAMC,GAAAA,IAAID,OAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQ3CC,iBAAiBZ,wBAAOa,OAAI;AAAA;AAAA,GAI5BC,sBAAsBxC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACjC;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,sBAAAnB,wBAAuC,GACnDgD,aAAmBzC,MAAK0C,aAAc1C,MAAK2C,WAAAC;AAAkB,MAAA,CAExDH;AAAU,WAAA;AAAAlC,MAAAA;AAAAN,IAAAwC,CAAAA,MAAAA,cAAAxC,SAAAU,KAMNJ,KAAAI,EAAE,qDAAmD;AAAA,IAAAkC,OAAUJ;AAAAA,EAAAA,CAAW,GAACxC,OAAAwC,YAAAxC,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAM,MAD9EM,KAACS,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,SAAG,OAAA,IACZvC,cACH,GAAON,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAKIM,KAAAN,EAAE,qDAAqD,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEjE9B,KAACI,2BAAA,IAAAwB,GAAA,MAAA,EAAW,SAAG,OAAA,IACb,UAAAxB,2BAAA,IAAC2B,uBACH,CAAA,CAAA,EAAA,CAAA,GAAOhD,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAgB,MAPTiC,oCAACC,mCACC,EAAA,QAAK,IACK,WAAA,OACD,SAAAlC,IAETC,UAGF,GAAA,CAAA,GAAUjB,OAAAgB,IAAAhB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAiD,MAddE,KAAA9B,2BAAA,IAACK,UAAa,YACZ,UAAC0B,2BAAAA,KAAAC,GAAAA,QAAA,EAAc,UACbzC,UAAAA;AAAAA,IAAAA;AAAAA,IAIAqC;AAAAA,EAAAA,EASF,CAAA,EACF,CAAA,GAAMjD,QAAAY,IAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAhBNmD;AAgBM;ACtCH,SAAAG,gBAAAvD,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAsD;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAhD;AAAAA,IAAAI;AAAAA,EAAAA,IAAoDd,OACpDqB,QACGsC,gBAAS7C,MAAKO,KAAM,KAAKuC,MAAAA,eAAe9C,MAAKO,KAAM,KACpDwC,kBAAAA,QAAS/C,MAAKO,KAAM,KACpByC,kBAAAA,QAAShD,MAAKO,KAAM,IAChBP,MAAKO,QACD;AAAA,MAAAd,IAAAM;AAAAZ,IAAAD,CAAAA,MAAAA,MAAA+D,wBAAA9D,EAAAS,CAAAA,MAAAA,cAAAT,SAAAoB,SAAApB,EAAAa,CAAAA,MAAAA,MAAAkD,OAGFnD,KAAAoD,OAAAA,0BAA0BjE,MAAK+D,sBAAuBrD,YAAYI,MAAKkD,KAAM3C,KAAK,GAACpB,EAAA,CAAA,IAAAD,MAAA+D,sBAAA9D,OAAAS,YAAAT,OAAAoB,OAAApB,EAAA,CAAA,IAAAa,MAAAkD,KAAA/D,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAAnFM;AADR,QAAAqD,yBAA+B3D;AAG9BU,MAAAA;AAAAhB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC2E/B,KAAA;AAAA,IAAAkD,OAAA;AAAA,IAAAC,WAAA;AAAA,IAAAC,WAAA;AAAA,EAAA,GAI3EpE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAA;AAAA,IAAAkE;AAAAA,IAAAE;AAAAA,IAAAD;AAAAA,EAAAA,IAAsCE,QAAcJ,cAAAA,wBAAwBjD,EAI3E;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAAkE,SAAAlE,EAAAmE,CAAAA,MAAAA,aAAAnE,EAAAyD,CAAAA,MAAAA,YAAAzD,SAAAoE,aAEanD,KAAAkD,YAAS,OACtB9C,2BAAA,IAACiD,0BACC,2BAAA,EAAA,UAAAlB,2BAAAA,KAACd,GAAW,MAAA,EAAA,OAAA,UAAc,KAAC,GACxBmB,UAAAA;AAAAA,IAAAA,YAAYA,SAAQd,SAAA,KAAetB,2BAAAA,IAACkD,kCAAkCd,UAAQ;AAAA,IAC/EpC,2BAAAA,IAACmD,OAA+BN,yBAAAA,EAAAA,OAAkBE,UAAS,CAAA;AAAA,EAC7D,EAAA,CAAA,EACF,CAAA,GACDpE,OAAAkE,OAAAlE,OAAAmE,WAAAnE,OAAAyD,UAAAzD,OAAAoE,WAAApE,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAPD,QAAAyE,SAAexD;AAOdgC,MAAAA;AAAAjD,IAAAkE,EAAAA,MAAAA,SAAAlE,UAAAoE,aAEenB,KAAC5B,2BAAAA,IAAAqD,OAAAA,gBAAsBR,EAAAA,OAAkBE,UAAa,CAAA,GAAApE,QAAAkE,OAAAlE,QAAAoE,WAAApE,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAtE,QAAA2E,UAAgB1B;AAAsDE,MAAAA;AAAAnD,IAAAkE,EAAAA,MAAAA,SAAAlE,UAAAoE,aAAApE,EAAA,EAAA,MAAAa,SAI9DsC,KAAAyB,OAAAA,4BAAA;AAAA,IAAA/D;AAAAA,IAAAqD;AAAAA,IAAAE;AAAAA,EAAAA,CAAqD,GAACpE,QAAAkE,OAAAlE,QAAAoE,WAAApE,QAAAa,OAAAb,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA,SAAA7E,UAAAuD,QAAAvD,EAAAmE,EAAAA,MAAAA,aAAAnE,EAAAwD,EAAAA,MAAAA,UAAAxD,EAAA,EAAA,MAAAyE,UAAAzE,UAAAmD,MAAAnD,EAAA,EAAA,MAAA2E,WAD5DE,KAACxD,2BAAA,IAAAyD,OACK3B,sBAAAA,EAAAA,GAAAA,IACWgB,eAAAA,WACTZ,MACEC,QACAiB,QACCE,QAAAA,CACT,GAAA3E,QAAAuD,MAAAvD,QAAAmE,WAAAnE,QAAAwD,QAAAxD,QAAAyE,QAAAzE,QAAAmD,IAAAnD,QAAA2E,SAAA3E,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GAPF6E;AAOE;ACjEC,MAAME,WAAWC,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,CAAA,GAIjC;AAAA,IAAAiF;AAAAA,IAAAC;AAAAA,EAAAA,IAAuCC,MAAAA,WAAAC,YAAAA,iBAA4B;AAAC,MAAA/E,IAAAM;AAAAZ,IAAAmF,CAAAA,MAAAA,cAAAnF,SAAAkF,oBACxCtE,KAAAsE,iBAAgBI,MAAA,GAAUH,UAAU,GAACnF,OAAAmF,YAAAnF,OAAAkF,kBAAAlF,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAArCM;AAA5B,QAAA2E,QAAcjF;AAAoF,MAAAU,IAAAC;AAAAjB,WAAAuF,SACrEtE,KAAA;AAAA,IAAAsE;AAAAA,EAAOvF,GAAAA,OAAAuF,OAAAvF,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KAAPC;AAA7B,QAAAuE,SAAcxE;AAAiCiC,MAAAA;AAAA,SAAAjD,EAAAD,CAAAA,MAAAA,SAAAC,SAAAiF,OAAAjF,EAAA,CAAA,MAAAwF,UAExCvC,oCAACwC,SAAc1F,WAAAA,EAAAA,GAAAA,OAAYkF,KAAYO,OAAAA,OAAAA,CAAS,GAAAxF,OAAAD,OAAAC,OAAAiF,KAAAjF,OAAAwF,QAAAxF,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAAhDiD;AAAgD,CACxD;ACRM,SAAAyC,gBAAA;AACLC,QAAAA,QAAaP,iBAAAQ,6BAA4B;AAAC,MAAA,CAErCD;AAAIE,UAAAA,IAAAA,MACS,mCAAmC;AAG9CF,SAAAA;AAAI;ACRN,MAAMG,YAAYd,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA;AAAA8F,MAAAA,SAAAC,iBAAAC,cAAAC;AAAAlG,WAAAD,SAIlC;AAAA,IAAAgG;AAAAA,IAAAE;AAAAA,IAAAD;AAAAA,IAAA,GAAAE;AAAAA,EAAAA,IAA0DnG,OAAKC,OAAAD,OAAAC,OAAA+F,SAAA/F,OAAAgG,iBAAAhG,OAAAiG,cAAAjG,OAAAkG,SAAAH,UAAA/F,EAAA,CAAA,GAAAgG,kBAAAhG,EAAA,CAAA,GAAAiG,eAAAjG,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA;AAC/D,QAAA;AAAA,IAAAkF;AAAAA,IAAAC;AAAAA,EAAAA,IAAuCC,MAAAA,WAAAC,YAAAA,iBAA4B;AAAC/E,MAAAA;AAAAN,IAAAmF,CAAAA,MAAAA,cAAAnF,SAAAkF,oBAQzD5E,KAAA4E,iBAAgBI,MAAUH,GAAAA,cAAc,GAACnF,OAAAmF,YAAAnF,OAAAkF,kBAAAlF,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAA+F,CAAAA,MAAAA,WAAA/F,SAAAgG,mBAAAhG,EAAA,EAAA,MAAAiG,gBAC5CrF,KAAA,CAAA;AAAA,IAAAuF,IAAMJ;AAAAA,IAAOK,QAAUJ;AAAAA,IAAeK,SAAWJ;AAAAA,EAAAA,CAAY,GAAEjG,OAAA+F,SAAA/F,OAAAgG,iBAAAhG,QAAAiG,cAAAjG,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,IAAAM,EAAAA,MAAAA,MAAAN,UAAAY,MAH5DI,KAAA;AAAA,IAAAuE,OAAA,CAAA,GAEAjF,IACHM,EAA+D;AAAA,EAElEZ,GAAAA,QAAAM,IAAAN,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAiF,EAAAA,MAAAA,OAAAjF,UAAAkG,QAAAlG,EAAA,EAAA,MAAAgB,MARHC,KAACI,+BAAAoE,SAAAA,aACKS,GAAAA,MACCjB,KACE,OAAAjE,GAMP,CAAA,GAAAhB,QAAAiF,KAAAjF,QAAAkG,MAAAlG,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GATFiB;AASE,CAEL,GCdYqF,oBAAoBtB,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA,GAI1C;AAAA,IAAAiF,kBAAAqB;AAAAA,IAAApB;AAAAA,IAAAqB;AAAAA,EAAAA,IAAmEpB,MAAAA,WAAAC,YAAAA,iBAA4B;AAAC,MAAAe,QAAAC,SAAAH;AAAAlG,WAAAD,SAChG;AAAA,IAAAqG;AAAAA,IAAAC;AAAAA,IAAA,GAAAH;AAAAA,EAAmCnG,IAAAA,OAAKC,OAAAD,OAAAC,OAAAoG,QAAApG,OAAAqG,SAAArG,OAAAkG,SAAAE,SAAApG,EAAA,CAAA,GAAAqG,UAAArG,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA;AACxC,QAAAyG,aAAmBC,OAAAA,UAAUN,MAAM,GACnCO,cAAoBD,iBAAUL,OAAO;AAAC/F,MAAAA;AAGpC,QAAAsG,eAAqBL,aAAapB,UAAU,GAC5C0B,iBAAuBD,aAAaJ,YAAY,GAItC5F,KAAA6F,cAAcI,eAAcT,QAC3BpF,KAAA2F,eAAeE,eAAcR;AAAQpF,MAAAA;AAAAjB,IAAA6G,CAAAA,MAAAA,kBAAA7G,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MAH5BC,KAAA;AAAA,IAAA,GACf4F;AAAAA,IAAcT,QACTxF;AAAAA,IAAmCyF,SAClCrF;AAAAA,EAAAA,GACVhB,OAAA6G,gBAAA7G,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAJD,QAAA8G,cAAoB7F;AAInBgC,MAAAA;AAAAjD,IAAA4G,CAAAA,MAAAA,gBAAA5G,SAAAwG,gBAGIvD,KAAA2D,aAAYtB,MAAA,GAAUkB,YAAY,GAACxG,OAAA4G,cAAA5G,OAAAwG,cAAAxG,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,IAAA4G,EAAAA,MAAAA,gBAAA5G,UAAAwG,gBAEnCrD,KAAAyD,aAAYtB,MAAOkB,gBAAgB,GAACxG,QAAA4G,cAAA5G,QAAAwG,cAAAxG,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,IAAA8G,EAAAA,MAAAA,eAAA9G,UAAAiD,MAAAjD,EAAA,EAAA,MAAAmD,MAHvB0B,KACb5B,CAAAA,GAAAA,IACH6D,gBACG3D,EAAoC,GACxCnD,QAAA8G,aAAA9G,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAJD,QAAA+G,YAAkBlC;AAIjBmC,MAAAA;AAAAhH,IAAAuG,EAAAA,MAAAA,gBAAAvG,UAAAmF,cAGI6B,KAAAT,aAAYjB,MAAA,GAAUH,UAAU,GAACnF,QAAAuG,cAAAvG,QAAAmF,YAAAnF,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,IAAAuG,EAAAA,MAAAA,gBAAAvG,UAAAmF,cAEjC8B,KAAAV,aAAYjB,MAAOH,cAAc,GAACnF,QAAAuG,cAAAvG,QAAAmF,YAAAnF,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAA+G,EAAAA,MAAAA,aAAA/G,UAAAgH,MAAAhH,EAAA,EAAA,MAAAiH,MAHrBC,KACbF,CAAAA,GAAAA,IACHD,cACGE,EAAkC,GACtCjH,QAAA+G,WAAA/G,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAJD,QAAAmH,YAAkBD;AAIjBE,MAAAA;AAAApH,YAAAmH,aAEMC,MAAA;AAAA,IAAA7B,OAAQ4B;AAAAA,EAAUnH,GAAAA,QAAAmH,WAAAnH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAAzBM,KAAO8G;AAtBT,QAAAC,YAAkB/G;AAuBmDgH,MAAAA;AAAA,SAAAtH,EAAAqH,EAAAA,MAAAA,aAAArH,UAAAiF,OAAAjF,EAAA,EAAA,MAAAkG,QAE9DoB,MAACjG,+BAAAoE,SAAAA,aAAeR,KAASiB,GAAAA,MAAamB,OAAAA,UAAa,CAAA,GAAArH,QAAAqH,WAAArH,QAAAiF,KAAAjF,QAAAkG,MAAAlG,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAAnDsH;AAAmD,CAC3D,GC3CYC,qBAAqBvC,MAAAA,WAAW,SAAA1E,IAAA2E,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA;AAAA,MAAAuH,UAAAC,YAAAC,cAAAC,eAAAzB,MAAA0B;AAAA5H,WAAAM,MAC3C;AAAA,IAAAmH;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAH;AAAAA,IAAAI;AAAAA,IAAA,GAAA1B;AAAAA,EAAA,IAAA5F,IAA+FN,OAAAM,IAAAN,OAAAwH,UAAAxH,OAAAyH,YAAAzH,OAAA0H,cAAA1H,OAAA2H,eAAA3H,OAAAkG,MAAAlG,OAAA4H,aAAAJ,WAAAxH,EAAA,CAAA,GAAAyH,aAAAzH,EAAA,CAAA,GAAA0H,eAAA1H,EAAA,CAAA,GAAA2H,gBAAA3H,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA,GAAA4H,WAAA5H,EAAA,CAAA;AAQ7E,QAAAY,KAAAgH,UAAQxB;AAAQpF,MAAAA;AAAAhB,WAAA2H,iBAGb3G,KAAA6G,UAAAA,SAAaF,aAAa,GAAC3H,OAAA2H,eAAA3H,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAA4H,YACtC3G,KAAA2G,YAAQ;AAAA,IAAAA,UAAeA,UAAQzB;AAAAA,EAAA,GAAKnG,OAAA4H,UAAA5H,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,IAAA0H,EAAAA,MAAAA,gBAAA1H,UAAAgB,MAAAhB,EAAA,EAAA,MAAAiB,MAHzBgC,KAAA;AAAA,IAAA6E,MACTJ;AAAAA,IAAYC,eACH3G;AAAAA,IAA2B,GACtCC;AAAAA,EAAAA,GACLjB,QAAA0H,cAAA1H,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAA,SAAAnD,UAAAwH,YAAAxH,EAAAyH,EAAAA,MAAAA,cAAAzH,EAAAiF,EAAAA,MAAAA,OAAAjF,EAAA,EAAA,MAAAkG,QAAAlG,UAAAY,MAAAZ,EAAA,EAAA,MAAAiD,MATHE,KAAC9B,2BAAAA,IAAA,WAAA,EACK6E,GAAAA,MACCjB,KACIwC,qBACK,cAAA7G,IACG,iBAAAqC,IAMhBuE,SACH,CAAA,GAAYxH,QAAAwH,UAAAxH,QAAAyH,YAAAzH,QAAAiF,KAAAjF,QAAAkG,MAAAlG,QAAAY,IAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAZZmD;AAYY,CAEf;ACfM,SAAA4E,gBAAA;AAAA,SACE3C,MAAAA,WAAAC,YAAAA,iBAA4B;AAAC;ACEtC,MAAM2C,gBAAkB,CAAE;AAQnB,SAAAC,qBAAAlI,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAiI;AAAAA,IAAAJ;AAAAA,IAAAjH;AAAAA,EAAAA,IAA+Bd,OACIO,KAAAO,OAAKkD;AAAKnD,MAAAA;AAAAZ,WAAAM,MAAzBM,KAAAuH,OAAAA,eAAe7H,EAAU,GAACN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAC9C,QAAAoI,mBAAyBC,OAAAA,oBADLzH,EACoC,GACxDkD,uBAA6BwE,kCAC7B;AAAA,IAAAf,oBAAAA;AAAAA,MAA6BQ,cAAc;AAAC/G,MAAAA;AAAAhB,IAAA,CAAA,MAAAuH,uBAAAvH,EAAA8H,CAAAA,MAAAA,MAAAS,QAAAvI,EAAAa,CAAAA,MAAAA,OAAAkD,OAG1C/C,KAAA,SAAAwH,WAAA;AAEI,WAAAnH,2BAAA,IAACkG,qBACa,EAAA,YAAA1G,OAAKkD,KACH,cAAA+D,MAAIS,MACHP,eAAUA,eACrBQ,GAAAA,UACJ,CAAA;AAAA,EAAA,GAELxI,OAAAuH,qBAAAvH,EAAA,CAAA,IAAA8H,MAAAS,MAAAvI,EAAA,CAAA,IAAAa,OAAAkD,KAAA/D,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAKqCiB,QAAAA,KAf3BD,IAkBDiC,KAAA6E,MAAIvE,MAEAJ,KAAAiF,kBAAgBzF,SAAY,IAAGyF,mBAAgBJ;AAAcnD,MAAAA;AAAA7E,IAAA8D,CAAAA,MAAAA,wBAAA9D,EAAA,CAAA,MAAAiD,MAAAjD,EAAAmD,CAAAA,MAAAA,MAAAnD,EAAA,CAAA,MAAA8H,QAAA9H,UAAAa,SAJzEgE,KAACxD,2BAAAA,IAAA,iBACuByC,EAAAA,sBAChB,MAAAb,IACC,QAAA,WACG,UAAAE,IACE2E,YAAAA,MACLjH,MACP,CAAA,GAAAb,OAAA8D,sBAAA9D,OAAAiD,IAAAjD,OAAAmD,IAAAnD,OAAA8H,MAAA9H,QAAAa,OAAAb,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,SAAAA,EAAAkI,EAAAA,MAAAA,WAAAlI,UAAAiB,MAAAjB,EAAA,EAAA,MAAA6E,MARJmC,oCAACyB,oBAAY,EAAA,sBAAmB,IAAM,IAAAxH,IAAuB,WAAA,KAAaiH,SAAiB,QAAC,GAC1FrD,UAAAA,GAQF,CAAA,GAAc7E,QAAAkI,SAAAlI,QAAAiB,IAAAjB,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GATdgH;AASc;AClBX,SAAA0B,wBAAApI,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAiC;AAAA,IAAA0I;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAApG;AAAAA,IAAAqG;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAA3I,IAUtCF,SAAeC,OAAAA,UACf6I,GAAAA,QAAcC,eACd;AAAA,IAAAzI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAiJ,CAAAA,MAAAA,wBAAAjJ,SAAAI,UAAAJ,EAAA,CAAA,MAAAU,KAGlDE,KAAAwI,CAAA,SAAA;AACE,UAAAtB,OAAa1H,OAAMI,IAAK4I,KAAI7I,KAAM;AAC9BuH,WAAAA,sCACM,sBAA2BA,EAAAA,MAAasB,aAAeH,SAAAA,qBAAwB,CAAA,IAKtF5H,2BAAA,IAAAK,GAAA,KAAA,EAAa,SAAA,GACZ,UAAAL,2BAAA,IAACyD,6BACOuE,EAAAA,MAAUA,MACT,aAAA,OAAA3I,EAAE,8DAA8D,GAC7D,UAAAA,EAAE,mEAAiE;AAAA,MAAA+G,YAC/D2B,KAAIrF;AAAAA,IACjB,CAAA,GACM,QAAA,UAEX,CAAA,GAAA;AAAA,EAAA,GAEH/D,OAAAiJ,sBAAAjJ,OAAAI,QAAAJ,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AApBH,QAAAsJ,oBAA0B1I;AAsBzB,MAEGgI,oBAAkBnG,eAAA,KAAsBkG,wBAAsBlG,eAAkB,GAAA;AAAAzB,QAAAA;AAAAhB,aAAA6I,iBAOhE7H,MAAA;AAAA,MAAAuI,eAAAA,MAAsBlI,2BAAA,IAAA,UAAA,EAAqB,UAAE,cAAA,CAAA;AAAA,IAAS,GAACrB,OAAA6I,eAAA7I,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,EAAA8I,CAAAA,MAAAA,UAAA9I,SAAAU,KAAAV,EAAA,CAAA,MAAAgB,OALvEC,qCAAC4B,WAAQ,IAAA,KAAU,MAAA,GACjB,UAAAxB,2BAAA,IAACmI,kBACI9I,EAAAA,GACK,SAAA,2CACCoI,iBACG,YAAA9H,KAEhB,EAAA,CAAA,GAAOhB,OAAA8I,QAAA9I,OAAAU,GAAAV,OAAAgB,KAAAhB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAPPiB;AAAAA,EAAAA;AAOO,MAAAwI,IAAAC,IAAAC,IAAAvC,KAAAE,KAAAsC,KAAA5I,IAAAC,IAAAgC,IAAAE,IAAA0B,IAAAmC,IAAAC,IAAAC;AAAA,MAAAlH,EAAA8I,EAAAA,MAAAA,UAAA9I,UAAA2I,0BAAA3I,EAAA,EAAA,MAAA+I,gBAAA/I,UAAA6I,iBAAA7I,EAAAgJ,EAAAA,MAAAA,0BAAAhJ,UAAA4I,sBAAA5I,EAAA,EAAA,MAAAsJ,qBAAAtJ,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAAkJ,SAAAlJ,UAAAyC,YAAA;AAQX,UAAAoH,yBACKd,CAAAA,GAAAA,iBACCC,yBAAsB,CAAI,aAAa,IAAM,EAAA,GAGnDc,kBAAwBpJ,EAAE,8CAA4C;AAAA,MAAAkC,OAC7DiH,uBAAsBlH;AAAAA,MAAAoH,UACnBF,uBAAsBG,KAAM,IAAI;AAAA,MAACC,SAClCjB,0BAA0Ba,uBAAsBlH,SAAU,gBAAgB;AAAA,IAAA,CACpF;AAGEL,SAAAA,GAAAA,MAAe4E,KAAQ,UAAME,MAAA;AAAC8C,QAAAA;AAAAlK,MAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGzBmH,OAAC7I,2BAAA,IAAAwB,GAAA,MAAA,EAAiB,eAAA,QAAa,MAAA,GAC7B,UAAAxB,2BAAA,IAAC8I,0BACH,CAAA,CAAA,EAAA,CAAA,GAAOnK,QAAAkK,QAAAA,OAAAlK,EAAA,EAAA;AAAAoK,QAAAA;AAAApK,cAAA6I,iBAKWuB,OAAA;AAAA,MAAAb,eAAAA,MAAsBV;AAAAA,IAAa,GAAC7I,QAAA6I,eAAA7I,QAAAoK,QAAAA,OAAApK,EAAA,EAAA;AAAAqK,QAAAA;AAAArK,cAAAyC,cAExC4H,OAAA;AAAA,MAAAzH,OAAQH;AAAAA,IAAAA,GAAWzC,QAAAyC,YAAAzC,QAAAqK,QAAAA,OAAArK,EAAA,EAAA,GAAAA,EAAAU,EAAAA,MAAAA,KAAAV,UAAAoK,QAAApK,EAAA,EAAA,MAAAqK,QAXrC/C,MAACjG,2BAAAA,IAAAiJ,GAAAA,MAAA,EAAc,YAAW,QAAA,GAAQ,MAAA,WAAe,MAAA,QAC/C,0CAAChI,GAAAA,MACC4H,EAAAA,UAAAA;AAAAA,MAAAA;AAAAA,MAGA7I,2BAAAA,IAACK,UAAU,SAAe,YAAC,GACzB,UAAAL,2BAAA,IAACwB,WAAW,SACV,yCAAC2G,OACS,WAAA,EAAA,SAAA,uDACI,YAAAY,MACT1J,GACK,QAAA2J,QAEZ,CAAA,EACF,CAAA;AAAA,IAAA,GACF,EAAA,CACF,GAAOrK,QAAAU,GAAAV,QAAAoK,MAAApK,QAAAqK,MAAArK,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAAuK,QAAAA;AAAAvK,cAAA6I,iBAOW0B,OAAA;AAAA,MAAAhB,eAAAA,MAAsBV;AAAAA,IAAa,GAAC7I,QAAA6I,eAAA7I,QAAAuK,QAAAA,OAAAvK,EAAA,EAAA,GAAAA,EAAA8I,EAAAA,MAAAA,UAAA9I,UAAAU,KAAAV,EAAA,EAAA,MAAAuK,QANtDX,qCAAClI,GAAAA,OAAS,MAAA,QACR,yCAACmB,GAAW,MAAA,EAAA,SACV,UAAAxB,2BAAA,IAACmI,OACS,WAAA,EAAA,SAAA,6DACL9I,GACMoI,SAAAA,QACG,YAAAyB,KAAAA,CAEhB,EAAA,CAAA,GACF,GAAMvK,QAAA8I,QAAA9I,QAAAU,GAAAV,QAAAuK,MAAAvK,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA,GACL0J,KAAAY,GAAAA,MAAanH,KAAA,GAAW0B,KAAA,GAAQmC,KAAM,QAAUC,KAAA,GAC9CwC,KAAAnH,GAAAA,MAAetB,KAAQ,UAAAhB,EAAA4I,EAAAA,MAAAA,sBAAA5I,UAAAsJ,qBACrBrI,KAAA2H,mBAAkBnG,kBAChBW,2BAAAA,KAAAoH,GAAA,OAAA,EAAS,IAAA,MAAmB,cAAA,GAAU,UAAe,eAAA,uBACnD5B,UAAAA;AAAAA,MAAAA,oBAAkBlG,WAAA+H,IAAAC,CACjB,WAAArJ,2BAAAA,IAACK,GAAAA,KAAO,EAAA,IAAA,MACL4H,UAAAA,kBAAkBF,MAAI,EAAA,GADPA,OAAIrF,GAEtB,CAAM;AAAA,MAGP6E,mBAAkBnG,aAAcmG,mBAAkBlG,WAAAC,UAChDtB,2BAAA,IAAAK,GAAA,KAAA,EAAO,IAAA,MAAc,YACpB,UAAAL,2BAAAA,IAAC,qBAAwBuH,EAAAA,GAAAA,sBAC3B,CAAA;AAAA,IAEJ,EAAA,CAAA,GACD5I,QAAA4I,oBAAA5I,QAAAsJ,mBAAAtJ,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAEAiD,KAAA0F,uBAAsBlG,kBACpBW,2BAAAA,KAAA,+BAAA,EACa,eAAA,4BACL,OAAA;AAAA,MAAAuH,WAGH/B,mBAAkBnG,aAAe,IAC7B,+CAA4CmI;AAAAA,IAIpD,GAAA,UAAA;AAAA,MAACvJ,2BAAA,IAAA,+BAAA,EACC,UAACA,2BAAAA,IAAAiJ,GAAAA,MAAA,EACI,IAAA,KACQ,WAAA1B,mBAAkBnG,aAAe,IAAA,IAAA,GACpC,QAAA,GACA,WACE,UAAC,GAEX,UAAAW,2BAAA,KAACd,GAAW,MAAA,EAAA,OAAA,UAAc,KAAC,GAAY,UAAA,GAAa,aAClD,UAAA;AAAA,QAAAjB,+BAACwB,GAAAA,MAAW,EAAA,MAAC,GACX,UAAAxB,+BAACwJ,MAAAA,gBAAa,CAAA,GAChB;AAAA,QACAzH,2BAAAA,KAACoH,GAAAA,OAAa,EAAA,UACZ,UAAA;AAAA,UAAAnJ,+BAACwB,GAAAA,QAAkB,cAAA,YAAiB,MAAA,GACjCnC,YAAE,2CAAyC;AAAA,YAAAkC,OACnCiH,uBAAsBlH;AAAAA,YAAAmI,eACdpK,EAAE,oDAAkD;AAAA,cAAAkC,OAC1D+F,uBAAsBlG;AAAAA,YAC9B,CAAA;AAAA,UACF,CAAA,GACH;AAAA,UACApB,2BAAAA,IAACwB,GAAAA,MAAYiH,EAAAA,OAAAA,iBAA8B,cAAA,YAAiB,MAAA,GAAG,OAAA,IAC5DA,UACH,gBAAA,CAAA;AAAA,QAAA,GACF;AAAA,QACAzI,2BAAA,IAAC,gBACC,EAAA,UAAAA,2BAAAA,IAACwB,GAAAA,MAAK,EAAA,OAAA,IAAY,MAAA,GAChB,UAAAxB,2BAAAA,IAAC0J,MAAAA,iBACH,CAAA,CAAA,EAAA,CAAA,EACF,CAAA;AAAA,MAAA,EACF,CAAA,EACF,CAAA,GACF;AAAA,MAEC3H,2BAAA,KAAA1B,GAAA,KAAA,EAAa,UAAA,QAAmB,eAC/B,UAAA;AAAA,QAAA0B,gCAACrB,SACC,EAAA,UAAA;AAAA,UAAAV,2BAAA,IAAA,SAAA,EACE,0CAgBK,MAfH,EAAA,UAAA;AAAA,YAAAA,2BAAAA,IAIK,QAHH,UAACA,+BAAAwB,GAAAA,MAAA,EAAK,WAAY,MAAA,GAAU,OAAA;AAAA,cAAAmI,UAAW;AAAA,YAAA,GAAgB,QAAA,UACpDtK,UAAE,EAAA,kDAAkD,EACvD,CAAA,GACF;AAAA,mDAEE,UAACW,2BAAA,IAAAwB,GAAA,MAAA,EAAK,WAAY,MAAA,GAAU,QAAA,UACzBnC,UAAE,EAAA,+CAA+C,EACpD,CAAA,GACF;AAAA,YACAW,2BAAA,IAAA,MAAA,EACE,UAACA,2BAAA,IAAAwB,GAAA,MAAA,EAAK,OAAI,IAAQ,SAAU,QAAA,UACzBnC,UAAE,EAAA,mDAAmD,GACxD,EACF,CAAA;AAAA,UAAA,EAAA,CACF,EACF,CAAA;AAAA,UACAW,2BAAAA,IAuDQ,SAtDLsH,EAAAA,UAAAA,uBAAsBjG,WAAAuI,OAAAC,OAGpB,EAACT,IAAA,CAAAU,MAAAC,UAAA;AACI,kBAAA;AAAA,cAAAC;AAAAA,cAAAC;AAAAA,cAAA7D;AAAAA,YAAAA,IAAA0D;AAAoC,mDAExC,MACE,EAAA,UAAA;AAAA,cAAA9J,2BAAAA,YACE,UAACA,2BAAA,IAAAwB,GAAA,MAAA,EAAW,MAAC,GAAW,qBAAE,EAC5B,CAAA;AAAA,cACAxB,2BAAAA,IAEK,QADH,UAACA,2BAAAA,IAAAwB,GAAAA,MAAA,EAAW,MAAC,GAAGyI,UAAAA,eAAe,eAAc,EAC/C,CAAA;AAAA,cACAjK,2BAAAA,IAsCK,QArCH,UAAC+B,2BAAAA,KAAA,gBAAA,EAAqB,OAAA,UAAc,KAAC,GAAU,SAAA,YAC7C,UAAA;AAAA,gBAAA/B,+BAACwB,GAAAA,QAAkB,cAAA,YAAiB,MAAC,GAClC4E,wBAAc,eACjB;AAAA,gBACCA,cACEpG,2BAAAA,IAAAkK,0BAAAA,QAAA,EACM,MAAA,SACCC,MAAOA,gBACC,cAAA;AAAA,kBAAAC,SACH/K,EACP,wDACF;AAAA,gBAAC,GAGM,SAAA,MAAA;AACPgL,4BAAAC,UAAAC,UACanE,UAAU,EAACoE,KAAA,MAAA;AAEpB3C,0BAAK4C,KAAA;AAAA,sBAAArH,QACK;AAAA,sBAASrD,OACVV,EACL,uDACF;AAAA,oBAAA,CACD;AAAA,kBAAA,CACF,EAACqL,MAAA,MAAA;AAEA7C,0BAAK4C,KAAA;AAAA,sBAAArH,QACK;AAAA,sBAAOrD,OACRV,EACL,8DACF;AAAA,oBAAA,CACD;AAAA,kBAAA,CACF;AAAA,gBAAA,EAGT,CAAA;AAAA,cAAA,EAAA,CACF,EACF,CAAA;AAAA,YAAA,EAAA,MA7CU+G,UAAU,IAAI2D,KAAK,EA8C/B;AAAA,UAAA,CACD,EACL,CAAA;AAAA,QAAA,GACF;AAAA,QAEA/J,+BAAC,qBAAmB,EAAA,GAAKsH,uBAC3B,CAAA;AAAA,MAAA,EAAA,CAAA;AAAA,IAAA,GACF,GACD3I,QAAA8I,QAAA9I,QAAA2I,wBAAA3I,QAAA+I,cAAA/I,QAAA6I,eAAA7I,QAAAgJ,wBAAAhJ,QAAA4I,oBAAA5I,QAAAsJ,mBAAAtJ,QAAAU,GAAAV,QAAAkJ,OAAAlJ,QAAAyC,YAAAzC,QAAAyJ,IAAAzJ,QAAA0J,IAAA1J,QAAA2J,IAAA3J,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,IAAA7E,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH;AAAAA,EAAA;AAAAlH,SAAAA,EAAA,EAAA,GAAA0J,KAAA1J,EAAA,EAAA,GAAA2J,KAAA3J,EAAA,EAAA,GAAAoH,MAAApH,EAAA,EAAA,GAAAsH,MAAAtH,EAAA,EAAA,GAAA4J,MAAA5J,EAAA,EAAA,GAAAgB,KAAAhB,EAAA,EAAA,GAAAiB,KAAAjB,EAAA,EAAA,GAAAiD,KAAAjD,EAAA,EAAA,GAAAmD,KAAAnD,EAAA,EAAA,GAAA6E,KAAA7E,EAAA,EAAA,GAAAgH,KAAAhH,EAAA,EAAA,GAAAiH,KAAAjH,EAAA,EAAA,GAAAkH,KAAAlH,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,IAAA,EAAA,MAAAyJ,MAAAzJ,EAAAgB,EAAAA,MAAAA,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAiD,MAhJHiH,MAAC9G,2BAAAA,KAAA,IAAA,EAAe,WAAApC,IACbC,UAAAA;AAAAA,IAAAA;AAAAA,IAgBAgC;AAAAA,EAAAA,GAgIH,GAAOjD,QAAAyJ,IAAAzJ,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,YAAA0J,MAAA1J,EAAAkK,EAAAA,MAAAA,OAAAlK,EAAAmD,EAAAA,MAAAA,MAAAnD,EAAA,EAAA,MAAA6E,MAAA7E,UAAAgH,MAAAhH,EAAA,EAAA,MAAAiH,MAlJTmD,MAAC/I,2BAAA,IAAA,IAAa,EAAA,QAAA8B,IAAW,QAAA0B,IAAQ,MAAAmC,IAAgB,SAAAC,IAC/CiD,UAkJF,IAAA,CAAA,GAAOlK,QAAA0J,IAAA1J,QAAAkK,KAAAlK,QAAAmD,IAAAnD,QAAA6E,IAAA7E,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,YAAA6I,iBAOWwB,MAAA;AAAA,IAAAd,eAAAA,MAAsBV;AAAAA,EAAa,GAAC7I,QAAA6I,eAAA7I,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAA8I,EAAAA,MAAAA,UAAA9I,UAAAU,KAAAV,EAAA,EAAA,MAAAqK,OANtDE,qCAAC7I,GAAS,KAAA,EAAA,MAAA,QACR,UAAAL,2BAAAA,IAACwB,GAAAA,QAAW,SACV,UAACxB,2BAAA,IAAAmI,OAAA,WAAA,EACS,SAAA,+DACL9I,GACMoI,SAAAA,QACG,YAAAuB,IAAAA,CAEhB,EAAA,CAAA,EACF,CAAA,GAAMrK,QAAA8I,QAAA9I,QAAAU,GAAAV,QAAAqK,KAAArK,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAAAmL,MAAAA;AAAA,SAAAnL,EAAA2J,EAAAA,MAAAA,MAAA3J,EAAAoH,EAAAA,MAAAA,OAAApH,EAAAsH,EAAAA,MAAAA,OAAAtH,UAAA4J,OAAA5J,EAAA,EAAA,MAAAoK,OAAApK,EAAA,EAAA,MAAAuK,OAAAvK,EAAA,EAAA,MAAAkH,MAzLRiE,MAAC/H,2BAAA,KAAA,IAAA,EAAe,WAAA8D,IAAc,KAAAE,KAC5BE,UAAAA;AAAAA,IAAAA;AAAAA,IAiBAsC;AAAAA,IAUAQ;AAAAA,IAoJAG;AAAAA,EAAAA,EAUF,CAAA,GAAOvK,QAAA2J,IAAA3J,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAoK,KAAApK,QAAAuK,KAAAvK,QAAAkH,IAAAlH,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA,GA1LPmL;AA0LO;AA7PJ,SAAAD,QAAAc,WAAA;AAAA,SAsLwB,eAAeA;AAAS;AC/LvD,SAASC,cAAcC,GAA8B;AAC/C,SAAA,OAAOA,KAAM,YACb,CAACA,IAAU,KACR,gBAAgBA,KAAK,cAAcA;AAC5C;AAEA,MAAMC,gBAAgB;AAGtB,IAAIC;AACJ,MAAMC,kBAAkBA,OACjBD,iBACHA,eAAeE,KAAUpM,UAAAA,UAAU,kBAAkB,EAAEqM;AAAAA;AAAAA,EAErDC,UAAAA,UAAU,IAAI;AAAA,EACd/B,UAAAA,IAAI,MAAMvK,SAASuM,oBAAoB,SAAS;AAAA,EAChDC,+BAAqB;AAAA,EACrBC,oBAAWC,CACTA,YAAAA;AAAAA;AAAAA,IAEIC,KAAAA,MAAM,GAAGV,aAAa;AAAA,MACtBW,UACN;AAAA,EACAC,sBAAY;AAAA,IAACC,UAAU;AAAA,IAAMC,YAAY;AAAA,EAAE,CAAA;AAC7C,IAEKb;AAuCT,SAASc,qBACPzF,YACA;AAAA,EAAC0F;AAAgD,GACjB;AAC1BC,QAAAA,UAAUC,kBAAW5F,UAAU,GAC/B6F,cAAcnF,sBAAeV,UAAU,GACvC8F,iBAAiB;AAAA,IACrBC,KAAKL,gBAAgBM,WAAW,OAAO,GAAGL,OAAO,IAAIE,WAAW,EAAE;AAAA,IAClEI,MAAM;AAAA,IACNC,OAAO;AAAA,MAACC,gBAAgB;AAAA,IAAM;AAAA,IAC9BC,KAAK;AAAA,EACP;AACA,SAAOV,gBAAgBW,WAAWC,QAA8BR,cAAc,EAAEhB,KAC9E9B,UAAAA,IAAI,CAAC;AAAA,IAACuD;AAAAA,EAAAA,MAAa;AACjB,UAAMC,cAAcD,QAAQ/C,OAAQiD,CAAQA,QAAAA,IAAIC,WAAW,WAAW;AACtE,QAAIF,YAAYtL,WAAW;AAKvBsL,aAAAA,YAAYtL,WAAW,KAMpBsL,YAAYG,KAAMF,SAAQA,IAAI/H,OAAOiH,OAAO,IAJ1CE,cAI4DF;AAAAA,EAAAA,CACtE,CACH;AACF;AAMA,SAASiB,4BACP5G,YACAwC,SAC0D;AACpD,QAAA;AAAA,IAACkD;AAAAA,EAAAA,IAAmBlD;AAEnBoC,SAAAA,gBAAkBE,EAAAA,KACvBI,UAAAA,UAAU,MAAMO,qBAAqBzF,YAAYwC,OAAO,CAAC,GACzD0C,UAAAA,UAAW2B,CAAoB,oBAAA;AAC7B,QAAI,CAACA;AACH,aAAOC,QAAG;AAAA,QAAC9L,YAAY;AAAA,QAAGC,YAAY,CAAA;AAAA,MAAA,CAAG;AAGrC8L,UAAAA,iBAAiBrB,gBAAgBsB,OAAAA,EAASC;AAEzCvB,WAAAA,gBAAgBW,WACpBC,QAAQ;AAAA,MACPY,KAAK,oBAAoBH,cAAc,cAAcF,eAAe;AAAA,MACpET,KAAK;AAAA,IACN,CAAA,EACAtB,KACCqC,qBAAY1C,CAAM,MAAA;AAIhB,UAAID,cAAcC,CAAC,KAAKA,EAAE2C,eAAe;AACvC,eAAON,QAAG;AAAA,UAAC9L,YAAY;AAAA,UAAGC,YAAY,CAAA;AAAA,QAAA,CAAG;AAGrCwJ,YAAAA;AAAAA,IAAAA,CACP,CACH;AAAA,EAAA,CACH,CACH;AACF;AAEA,MAAM4C,wBAAwBC,uCAC5B,CAAC,CAACtH,YAAYuH,aAAa,MAMlBA,cAAcC,YACnB;AAAA,EAACC,OAJgB;AAAA,EAIGC,QAHF;AAGqB,GACvC;AAAA,EAAC1H;AAAU,GACX;AAAA,EAACoG,KAAK;AAAA,EAA2BuB,aAAa,CAAC,UAAU,WAAW;AAAA,EAAGC,cAAc;AAAI,CAC3F,CAEJ,GAEMC,4BAA4BP,uCAChC,CAAC,CAACtH,YAAY0F,eAAe,MAEpBd,gBAAkBE,EAAAA,KACvBI,UAAU,UAAA,MACR0B,4BAA4B5G,YAAY;AAAA,EACtC0F;AACF,CAAC,CACH,CACF,CAEJ;AAEO,SAAAoC,sBAAA9H,YAAA;AAAAzH,QAAAA,IAAAC,uBAAA,EAAA,GACLkN,kBAAwBqC,OAAAA,UAAAC,OAAuC,6BAAA,GAE/DT,gBAAsBU,wBAAiB;AAACpP,MAAAA;AAAAN,WAAAyH,cACpBnH,KAAA6H,OAAAA,eAAeV,UAAU,GAACzH,OAAAyH,YAAAzH,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAA9C,QAAAsN,cAAoBhN;AAA0B,MAAAM,IAAAI;AAAAhB,IAAAgP,CAAAA,MAAAA,iBAAAhP,SAAAsN,eAG9BtM,KAAA,CAACsM,aAAa0B,aAAa,GAAChP,OAAAgP,eAAAhP,OAAAsN,aAAAtN,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAY,KAA5BI;AADhB,QAAA,CAAA4H,oBAAA+G,2BAAA,IAA0Db,sBACxDlO,EACF;AAAC,MAAAK,IAAAgC;AAAAjD,IAAAsN,CAAAA,MAAAA,eAAAtN,SAAAmN,mBAGelK,KAAA,CAACqK,aAAaH,eAAe,GAACnN,OAAAsN,aAAAtN,OAAAmN,iBAAAnN,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAAAiB,KAA9BgC;AADhB,QAAA,CAAA0F,wBAAAiH,+BAAA,IAAkEN,0BAChErO,EACF;AAACkC,MAAAA;AAAAnD,IAAA,CAAA,MAAA2I,wBAAAjG,cAE0BS,KAAAA,MAClB0M,MAAAC,KAAAC,IAAAA,IAEHpH,wBAAsBjG,WAAA+H,IAAAS,OAAA,EAAAD,OAAA+E,OAAA,CAAA,CAI1B,EAACC,KAAM,GACRjQ,EAAA,CAAA,IAAA2I,wBAAAjG,YAAA1C,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAyB6E,MAAAA;AAAA7E,YAAAmD,MARP0B,KAAQ1B,GAQanD,GAAAA,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AARxC,QAAAkQ,aAAmBrL;AAmBO,MAAAmC,IAAAC;AAAAjH,IAAA,EAAA,MAAA2I,wBAAAjG,cARjBuE,KAAA4I,MAAAC,SAAAC,IAEHpH,wBAAsBjG,WAAA+H,IAAA0F,QAAA,EAAAlF,OAAAmF,QAAA,EAK1B,EAACH,KAAM,GAACjQ,EAAA,EAAA,IAAA2I,wBAAAjG,YAAA1C,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA,GAPRgH,KAAOC;AADT,QAAA8B,eAAqB/B;AASmBE,MAAAA;AAAAlH,IAAA,EAAA,MAAA2I,wBAAAjG,cAEDwE,KAAAA,MAC9B8I,CACLrH,CAAAA,wBAAsBjG,WAAA0L,KAAAiC,QAAA,GAIzBrQ,EAAA,EAAA,IAAA2I,wBAAAjG,YAAA1C,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AANDgJ,QAAAA,yBAAuC9B,GAMA,GAGzBE,OAACwB,oBAAkBnG,cAAiB,MAAKkG,wBAAsBlG,cAAA,IAMhE6E,MAAAqI,+BAA+BC;AAA+BhG,MAAAA;AAAA,SAAA5J,EAAA2I,EAAAA,MAAAA,0BAAA3I,EAAA+I,EAAAA,MAAAA,gBAAA/I,EAAAgJ,EAAAA,MAAAA,0BAAAhJ,UAAA4I,sBAAA5I,EAAA,EAAA,MAAAkQ,cAAAlQ,EAAA,EAAA,MAAAoH,OAAApH,EAAA,EAAA,MAAAsH,OAPpEsC,MAAA;AAAA,IAAAnH,YACO2E;AAAAA,IAAiF8I;AAAAA,IAAAnH;AAAAA,IAAAC;AAAAA,IAAAJ;AAAAA,IAAAD;AAAAA,IAAAxE,WAMlFmD;AAAAA,EAAAA,GACZtH,QAAA2I,wBAAA3I,QAAA+I,cAAA/I,QAAAgJ,wBAAAhJ,QAAA4I,oBAAA5I,QAAAkQ,YAAAlQ,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA,GARM4J;AAQN;AAnDI,SAAAyG,SAAAC,yBAAA;AAsC4B,SAAA,OAAOC,wBAAqBjF,eAAiB;AAAQ;AAtCjF,SAAA8E,SAAA9E,aAAA;AA8B4B0E,SAAAA,CAAAA,CAAQ1E,eAAgBA,gBAAgB;AAAE;AA9BtE,SAAA6E,SAAAK,yBAAA;AAAA,SA6BmCD,yBAAqBjF,eAAiB;AAAE;AA7B3E,SAAAJ,QAAAqF,uBAAA;AAAA,SAkBmCA,sBAAqBlF;AAAA;ACnMlDoF,MAAAA,eAAahP,wBAAOC,MAAG;AAAA;AAAA,GAKvBgP,mBAAmBjP,iBAAAA,OAAOa,GAAI,IAAA,EAAEqO,MAAM;AAAA,EACjDC,OAAO;AAAA,EACPC,WAAW;AAAA,EACXC,SAAS;AACX,CAAC;AAAA;AAAA;AAgCM,SAAAC,oBAAAzQ,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA6B;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAAgB,QAAAlI;AAAAA,IAAAoQ;AAAAA,IAAAC;AAAAA,EAAAA,IAAA3Q,IAGlCwI,SAAAlI,OAAiBgK,SAAR,WAAThK,IAIA;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GACnD0R,WAAiB,yBAAyBC,MAAAA,MAAO,CAAA,IACjD;AAAA,IAAAvI;AAAAA,IAAAD;AAAAA,IAAAxE;AAAAA,IAAA1B;AAAAA,IAAAyN;AAAAA,IAAAnH;AAAAA,IAAAC;AAAAA,EAAAA,IAQIuG,sBAAsBpJ,EAAE;AAAC,MAAAnF,IAAAC;AAAAjB,IAAAmG,CAAAA,MAAAA,MAAAnG,SAAA8H,QAC4B7G,KAAA;AAAA,IAAA8C,KAAMoC;AAAAA,IAAE5F,OAASuH;AAAAA,EAAAA,GAAK9H,OAAAmG,IAAAnG,OAAA8H,MAAA9H,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KAAtBC;AAAsBgC,MAAAA;AAAAjD,WAAAgB,MAAzDiC,KAAC5B,2BAAAA,IAAA,UAAA,EAAmB,UAAAL,GAAuD,CAAA,GAAAhB,OAAAgB,IAAAhB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAjG6I,QAAAA,gBAAsB5F,IACtBmO,qBAA2BjN;AAAShB,MAAAA;AAAAnD,IAAA8I,CAAAA,MAAAA,UAAA9I,SAAAU,KAMxByC,KAAAzC,EAAE,qCAAmC;AAAA,IAAAuJ,SAAYnB;AAAAA,EAAAA,CAAO,GAAC9I,OAAA8I,QAAA9I,OAAAU,GAAAV,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAA6E,MAAAA;AAAA7E,WAAAU,KAIvDmE,KAAAnE,EAAE,0CAA0C,GAACV,OAAAU,GAAAV,OAAA6E,MAAAA,KAAA7E,EAAA,CAAA;AAAAgH,MAAAA;AAAAhH,IAAAgR,EAAAA,MAAAA,YAAAhR,UAAA6E,MAFvCmC,KAAA;AAAA,IAAAkB,SACH8I;AAAAA,IAAQK,MACXxM;AAAAA,EACP7E,GAAAA,QAAAgR,UAAAhR,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,IAAA8I,EAAAA,MAAAA,UAAA9I,EAAA,EAAA,MAAAiR,aAAAjR,EAAAoR,EAAAA,MAAAA,qBAAApR,EAAA,EAAA,MAAAU,KAAAV,UAAAyC,cACcwE,KAAAmK,oBAAiB;AAAA,IAAAC,MAGxB5O,aAAU,IACN/B,EAAE,oDAAkD;AAAA,MAAAuJ,SAAYnB;AAAAA,IAAAA,CAAO,IACvEpI,EAAE,6CAA2C;AAAA,MAAAuJ,SAAYnB;AAAAA,IAAAA,CAAO;AAAA,IAACZ,SAC9D+I;AAAAA,EAASrG,IAAAA,QAEX5K,QAAA8I,QAAA9I,QAAAiR,WAAAjR,QAAAoR,mBAAApR,QAAAU,GAAAV,QAAAyC,YAAAzC,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAAgH,EAAAA,MAAAA,MAAAhH,UAAAiH,MAbPC,KAAA;AAAA,IAAAoK,cACQtK;AAAAA,IAGbuK,eACctK;AAAAA,EAShBjH,GAAAA,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,IAAA8I,EAAAA,MAAAA,UAAA9I,EAAA,EAAA,MAAA2I,0BAAA3I,UAAA+I,gBAAA/I,EAAA6I,EAAAA,MAAAA,iBAAA7I,EAAA,EAAA,MAAAgJ,0BAAAhJ,EAAA4I,EAAAA,MAAAA,sBAAA5I,EAAA,EAAA,MAAAmE,aAAAnE,UAAAgR,YAAAhR,EAAAkQ,EAAAA,MAAAA,cAAAlQ,EAAA,EAAA,MAAAU,KAAAV,UAAAyC,cAID2E,qCAACqJ,cACE9H,EAAAA,UAAAA,0BAA0BC,uBAAuBzE,YAChD9C,2BAAAA,IAAC,yBACyBsH,EAAAA,wBACJC,oBACLC,eACJ1E,WACC1B,YACJqG,QACIoH,YACEnH,cACUC,wBACFgI,sBAAAA,SACtB,CAAA,IAED3P,+BAAA,kBAAA,EAA6B,eAAA,qBAC5B,UAACA,2BAAA,IAAAmQ,OAAA,cAAA,EAAa,cAAgB,OAAA9Q,EAAE,oCAAoC,EAAA,CACtE,EAAA,CAAA,EAAA,CAEJ,GAAaV,QAAA8I,QAAA9I,QAAA2I,wBAAA3I,QAAA+I,cAAA/I,QAAA6I,eAAA7I,QAAAgJ,wBAAAhJ,QAAA4I,oBAAA5I,QAAAmE,WAAAnE,QAAAgR,UAAAhR,QAAAkQ,YAAAlQ,QAAAU,GAAAV,QAAAyC,YAAAzC,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAA,SAAAtH,EAAAkR,EAAAA,MAAAA,YAAAlR,EAAA,EAAA,MAAAgR,YAAAhR,EAAAoH,EAAAA,MAAAA,OAAApH,EAAA,EAAA,MAAAmD,MAAAnD,UAAAkH,MAzCfI,MAACjG,2BAAAA,IAAAoQ,0BAAAA,QAAA,EACQ,UACHP,IAAAA,UACI,QAAA/N,IACA,QAAA+D,IAeC8J,SAAAA,UACOA,gBAAAA,UAEhB5J,UAAAA,IAoBF,CAAA,GAASpH,QAAAkR,UAAAlR,QAAAgR,UAAAhR,QAAAoH,KAAApH,QAAAmD,IAAAnD,QAAAkH,IAAAlH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GA1CTsH;AA0CS;ACvGb,SAAAoK,6BAAA3R,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACE;AAAA,IAAAS;AAAAA,EAAYC,IAAAA,sBAAAnB,wBAAuC,GACnD2G,KAAWgL,MAAAA,MAAAA,GACX,CAAArQ,OAAA6Q,QAAA,IAA0BC,MAAAA,aAA+B;AAACtR,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC1BzC,KAAAA,MAAMqR,aAAa,GAAC3R,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAApD,QAAA6R,cAAoBvR;AAAqCM,MAAAA;AAAA,SAAAZ,EAAA,CAAA,MAAAc,SAAAd,EAAAmG,CAAAA,MAAAA,MAAAnG,EAAAD,CAAAA,MAAAA,SAAAC,SAAAU,KAElDE,KAAAE,QACLO,2BAAA,IAACoQ,0BACK,QAAA,EAAA,IAAA,gBAAgBtL,EAAE,IACV,eAAA,+BACJ,QAAAzF,EAAE,wCAAwC,GAC1C,QAAA;AAAA,IAAA6Q,eAAA;AAAA,MAAAF,MAEE3Q,EAAE,+CAA+C;AAAA,MAACwH,SAC/C2J;AAAAA,MAAWC,MACd;AAAA,IAAA;AAAA,EAAS,GAGV,SAAA/R,MAAKiR,UAEd,yCAACtP,QAAa,EAAA,SAAC,GACb,UAAAL,2BAAAA,IAACwB,GAAAA,MAAW,EAAA,MAAA,GAAInC,UAAE,EAAA,0CAA0C,EAAE,CAAA,EAChE,CAAA,GACF,mCAECqR,0BAAuBJ,eAAAA,EAAAA,SAAO,UAC7B,UAAAtQ,+BAAC,qBAAmB,EAAA,GAAKtB,OAAK,EAChC,CAAA,GACDC,OAAAc,OAAAd,OAAAmG,IAAAnG,OAAAD,OAAAC,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAtBMY;AAsBN;ACxCI,SAAAoR,MAAA1R,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAe;AAAA,IAAAuH;AAAAA,IAAAyK,IAAArR;AAAAA,EAAAN,IAAAA,IAEpB2R,KAAArR,OAAMgK,aAANhK,IAKAsR,CAAAA,OAAAC,QAAA,IAA0BP,eAASK,OAAO;AAAC,MAAAjR,IAAAC;AAYnC,MAZmCjB,SAAAiS,MAEjCjR,KAAAA,MAAA;AAAA,QACJiR,MAAO;AAAA;AAIX,UAAAG,YAAkBC,WAAA,MAAiBF,SAAa,EAAA,GAAGF,EAAE;AAAC,WAAA,MAAA;AAGpDK,mBAAaF,SAAS;AAAA,IAAC;AAAA,EAExBnR,GAAAA,MAACgR,EAAE,GAACjS,OAAAiS,IAAAjS,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IAVPuS,MAAUvR,UAAAA,IAUPC,EAAI,GAEH,CAACiR,SAAK,CAAK1K,UAAQ;AAAAvE,QAAAA;AAAA,WAAAjD,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACdE,MAAA5B,+BAAAE,WAAAA,UAAA,CAAA,CAAA,GAAKvB,OAAAiD,OAAAA,MAAAjD,EAAA,CAAA,GAALiD;AAAAA,EAAAA;AAAKA,MAAAA;AAAAjD,SAAAA,SAAAwH,YAGPvE,KAAA,OAAOuE,YAAa,aAAaA,SAAAA,IAAaA,UAAQxH,OAAAwH,UAAAxH,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAAtDiD;AAAsD;ACxBxD,MAAMuP,aAAa,IAKbC,uBAAuB,IAKvBC,yBAAyBD,KCPhCE,SAAOlR,wBAAOmR,QAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDlB,SAAAC,YAAAvS,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAqB;AAAA,IAAA6S;AAAAA,IAAAC;AAAAA,MAAAzS,IAO1B;AAAA,IAAA0S;AAAAA,EAAAA,IAAiBtN,cACjB,GAAA,CAAAuN,UAAAC,WAAA,IAAgCtB,iBAAc;AAAChR,MAAAA;AAAAZ,IAAA+S,CAAAA,MAAAA,WAAA/S,SAAAgT,UAG7CpS,KAAAuS,CAAA,UAAA;AAAA,QAAA,CACOJ;AAAO;kBAEI,GAEhBI,MAAKC,eAAgB;AAErB,UAAAC,SAAeF,MAAKG;AAEb,WAAA,SAASP,UAAU;AAE1B,UAAAQ,kBAAArH,CAAA,MAAA;AACEA,QAACkH,eAAgB;AAEjBI,YAAAA,SAAetH,EAACoH,QAASD;AAElB,aAAA,QAAQN,SAASS,MAAM;AAAA,IAAA,GAGhCC,gBAAAC,CAAA,QAAA;AACExH,UAACkH,kBAEDF,cAAiB,GAEjBS,OAAAC,oBAA2B,aAAaL,eAAe,GACvDI,OAAAC,oBAA2B,WAAWH,aAAa,GAEnDT,OAAO,OAAOD,UAAU;AAAA,IAAC;AAG3BY,WAAAE,iBAAwB,aAAaN,eAAe,GACpDI,OAAAE,iBAAwB,WAAWJ,aAAa;AAAA,EACjDzT,GAAAA,OAAA+S,SAAA/S,OAAAgT,QAAAhT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAjCH8T,QAAAA,kBAAwBlT,IAuCLI,KAAA8R,WAAW,KAAElI,QACb3J,KAAAgS,WAAW,KAAErI;AAAY3H,MAAAA;AAAA,SAAAjD,EAAA8T,CAAAA,MAAAA,mBAAA9T,SAAAgB,MAAAhB,EAAA,CAAA,MAAAiB,MAF1CgC,oCAAC0P,UACgB,iBAAA3R,IACA,iBAAAC,IACF6S,aAAAA,gBACb,CAAA,GAAA9T,OAAA8T,iBAAA9T,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAJFiD;AAIE;AC7EN,MAAM0P,SAAOlR,wBAAO6I,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAaXyJ,OAAO/O,MAAAA,WAAW,SAAAjF,OAAAiU,cAAA;AAAAhU,QAAAA,IAAAC,uBAAA,EAAA;AAAA,MAAAuH,UAAAyM,qBAAAC,qBAAA/N,IAAAgO,cAAAC,cAAAC,WAAA/T,IAAAM;AAAAZ,WAAAD,SAM7B;AAAA,IAAAyH;AAAAA,IAAA8M,iBAAAJ;AAAAA,IAAAK,iBAAAN;AAAAA,IAAAO,MAAAlU;AAAAA,IAAA6F;AAAAA,IAAA6E,UAAAoJ;AAAAA,IAAAK,UAAAN;AAAAA,IAAAO,UAAA9T;AAAAA,IAAA,GAAAyT;AAAAA,EAAAA,IAUItU,OAAKC,OAAAD,OAAAC,OAAAwH,UAAAxH,OAAAiU,qBAAAjU,OAAAkU,qBAAAlU,OAAAmG,IAAAnG,OAAAmU,cAAAnU,OAAAoU,cAAApU,OAAAqU,WAAArU,OAAAM,IAAAN,OAAAY,OAAA4G,WAAAxH,EAAA,CAAA,GAAAiU,sBAAAjU,EAAA,CAAA,GAAAkU,sBAAAlU,EAAA,CAAA,GAAAmG,KAAAnG,EAAA,CAAA,GAAAmU,eAAAnU,EAAA,CAAA,GAAAoU,eAAApU,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA;AAND,QAAA2U,WAAArU,OAAYsK,aAAZtK,IAINoU,WAAA9T,OAAgBgK,cAAhBhK,IAGF,CAAAgU,aAAAC,cAAA,IAAsCjD,MAAAA,aAAoC,GAC1E;AAAA,IAAAkD;AAAAA,IAAAC,WAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA5P;AAAAA,MAOIG,cAAc;AAAC,MAAAC,OAAA3E;AAAA,MAAAhB,EAAAuF,EAAAA,MAAAA,SAAAvF,UAAA4U,aAAA;AAAA3T,QAAAA;AAAAjB,cAAA4U,eACK3T,MAAAmU,CAAOA,MAAAA,EAACrC,YAAa6B,aAAW5U,QAAA4U,aAAA5U,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAAxD2F,QAAaJ,MAAK8P,KAAMpU,GAAgC,GACtCD,KAAA2E,SAAQJ,MAAK+P,QAAS3P,KAAI,GAAC3F,QAAAuF,OAAAvF,QAAA4U,aAAA5U,QAAA2F,OAAA3F,QAAAgB;AAAAA,EAAA;AAAA2E,IAAAA,QAAA3F,EAAA,EAAA,GAAAgB,KAAAhB,EAAA,EAAA;AAA7C,QAAAuV,YAAkBvU,IAClBwU,WAAiB,OAAOD,aAAc,WAAWhQ,MAAMgQ,YAAa,CAAA,IAAA3K,QACpE6K,SAAeF,cAAchQ,MAAK5C,SAAW,GAC7C+S,WAAiBR,oBAAoBN,aACrCG,YAAkBC,uBAA0BrP,OAAIoP,aAAoB,IACpEY,gBAAsBH,UAAQT,aAAoB,IAClD9P,MAAY2Q,aAAA,IAAkC,GAC9CpB,OAAa7O,OAAI6O,QAAUG,UAC3BL,kBAAwB3O,OAAI2O,mBAAqBJ,qBACjDK,kBAAwB5O,OAAI4O,mBAAqBN;AAAmBhT,MAAAA;AAAAjB,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGY9B,KAAAA,MAAMgE,IAAG4Q,SAAQ7V,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAAjG8V,MAAAA,oBAAkE9B,cAAc/S,EAAiB;AAACgC,MAAAA;AAAAjD,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEvEE,KAAA8S,CAAA,aAAA;AACVA,mBAAAA,QAAQ,GACvB9Q,IAAG4Q,UAAWE;AAAAA,EAAAA,GACf/V,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAHD,QAAAgW,SAAe/S;AAGT,MAAAE,IAAA0B;AAAA7E,IAAA,EAAA,MAAAiU,uBAAAjU,EAAA,EAAA,MAAAkU,uBAAAlU,EAAA,EAAA,MAAA2U,YAAA3U,EAAAmG,EAAAA,MAAAA,MAAAnG,EAAAmU,EAAAA,MAAAA,gBAAAnU,EAAAoU,EAAAA,MAAAA,gBAAApU,EAAAmV,EAAAA,MAAAA,SAAAnV,UAAA4U,eAEUzR,KAAAA,MAAA;AACTyR,QAAAA;AAAW,aACTO,MAAMP,aAAW;AAAA,QAAAN,iBACLJ;AAAAA,QAAmBK,iBACnBN;AAAAA,QAAmBO,MAC9BG;AAAAA,QAAQxO;AAAAA,QAAA6E,UAEJoJ;AAAAA,QAAYK,UACZN;AAAAA,MAAAA,CACX;AAAA,EACAtP,GAAAA,KACDqP,CAAAA,qBACAD,qBACAU,UACAxO,IACAiO,cACAD,cACAgB,OACAP,WAAW,GACZ5U,QAAAiU,qBAAAjU,QAAAkU,qBAAAlU,QAAA2U,UAAA3U,QAAAmG,IAAAnG,QAAAmU,cAAAnU,QAAAoU,cAAApU,QAAAmV,OAAAnV,QAAA4U,aAAA5U,QAAAmD,IAAAnD,QAAA6E,OAAA1B,KAAAnD,EAAA,EAAA,GAAA6E,KAAA7E,EAAA,EAAA,IAnBDiW,MAAAA,gBAAgB9S,IAUb0B,EASF;AAACmC,MAAAA;AAAAhH,IAAA8U,EAAAA,MAAAA,YAAA9U,UAAA4U,eAEiC5N,KAAAA,MAAA;AAC5B4N,mBACLE,SAASF,WAAW;AAAA,EACrB5U,GAAAA,QAAA8U,UAAA9U,QAAA4U,aAAA5U,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAHD,QAAAkW,iBAAuBlP;AAGIC,MAAAA;AAAAjH,IAAAiV,EAAAA,MAAAA,UAAAjV,UAAA4U,eAEM3N,KAAAA,MAAA;AAC1B2N,mBACLK,OAAOL,WAAW;AAAA,EACnB5U,GAAAA,QAAAiV,QAAAjV,QAAA4U,aAAA5U,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAHD,QAAAmW,eAAqBlP;AAGIC,MAAAA;AAKVE,QAAAA,MAAA4N,kBAAe,KAAWD;AAASzN,MAAAA;AAAAtH,YAAAkW,kBAAAlW,EAAAmW,EAAAA,MAAAA,gBAAAnW,EAAAyV,EAAAA,MAAAA,UAAAzV,EAAA,EAAA,MAAAuV,aAAAvV,UAAA4U,eAAA5U,EAAA,EAAA,MAAAoH,OAFzCE,MAAA;AAAA,IAAAwN,UACKoB;AAAAA,IAAcnB,WACb3N;AAAAA,IAAmC6N,QACtCkB;AAAAA,IAAY/K,OACbmK;AAAAA,IAASE;AAAAA,IAAAb;AAAAA,EAGjB5U,GAAAA,QAAAkW,gBAAAlW,QAAAmW,cAAAnW,QAAAyV,QAAAzV,QAAAuV,WAAAvV,QAAA4U,aAAA5U,QAAAoH,KAAApH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAAAkH,KAPMI;AADT,QAAA8O,eAAqBlP;AAUpB0C,MAAAA;AAAA,OAAA;AAAA,QAGKoL,iBAAe;AACjBpK,YAAAA;AAAgByL,YAAAA;AAAAA,IAAAA;AAAA,QAGdtB,WAAS;AAAEtC,YAAAA;AAA2B4D,YAAAA;AAAAA,IAAAA;AAAA,QAEtC/B,oBAAqB,GAAA;AACvB1K,YAAOwK,gBAAY1B;AAA0B2D,YAAAA;AAAAA,IAAAA;AAAA,QAG3CZ,QAAM;AACR7L,YAAOwK,gBAAY1B;AAA0B2D,YAAAA;AAAAA,IAAAA;AAG/CzM,UAAO0K,mBAAmBF,gBAAY1B;AAAAA,EAAAA;AAfxC,QAAA1H,WAAiBpB;AAgBsDM,MAAAA;AAAA,OAAA;AAAA,QAGjE6K,WAAS;AAAEtC,YAAAA;AAA2B6D,YAAAA;AAAAA,IAAAA;AAAA,QAEtCtB,mBAAmBS,QAAM;AAC3B7K,YAAAA;AAAgB0L,YAAAA;AAAAA,IAAAA;AAAA,QAGdb,QAAM;AAAA,UACJtB,cAAY;AACdjK,cAAOqK,mBAAmBJ;AAAYmC,cAAAA;AAAAA,MAAAA;AAGxC1L,YAAAA;AAAgB0L,YAAAA;AAAAA,IAAAA;AAGlBpM,UAAOqK,mBAAmBJ;AAAAA,EAAAA;AAf5B,QAAAM,WAAiBvK,KAkBjBqM,SAAevB,mBAAe,CAAKS;AAAM,MAAArL,KAAAC;AAAArK,IAAA+U,EAAAA,MAAAA,aAAA/U,EAAA,EAAA,MAAAyV,UAAAzV,EAAAgV,EAAAA,MAAAA,mBAAAhV,EAAA,EAAA,MAAA2V,iBAAA3V,UAAA4U,eAIrCvK,MAACoL,CAAAA,UACAT,CAAAA,mBACC3T,2BAAAA,IAACmV,OAAAA,qBAA4B,EAAA,SAAA,eAC3B,UAAAnV,2BAAA,IAAC,eAAsB,UAAA0T,aAAaY,eAAwBf,SAAU,YACxE,CAAA,EAAA,CAAA,GACD5U,QAAA+U,WAAA/U,QAAAyV,QAAAzV,QAAAgV,iBAAAhV,QAAA2V,eAAA3V,QAAA4U,aAAA5U,QAAAqK,OAAAA,MAAArK,EAAA,EAAA,GAAAoK,MALDC;AAFJ,QAAAoM,UAAgBrM;AASfG,MAAAA;AAMaY,QAAAA,MAAAsJ,aAAQiC,QAAa9L,SAAe6J;AAAQkC,MAAAA;AAAA3W,IAAAwU,EAAAA,MAAAA,QAAAxU,UAAAgL,YAAAhL,EAAA,EAAA,MAAAmL,OAHjDwL,MAAA;AAAA,IAAAnC;AAAAA,IAAAxJ;AAAAA,IAAAyJ,UAGKtJ;AAAAA,EAAAA,GACXnL,QAAAwU,MAAAxU,QAAAgL,UAAAhL,QAAAmL,KAAAnL,QAAA2W,OAAAA,MAAA3W,EAAA,EAAA,GAAAuK,MAJMoM;AADT,QAAAC,QAAcrM,KAoBQsM,MAAA7B,kBAAepK,SAAe,UAEnBkM,MAAA/B,YAAY,KAAEnK,QAEfmM,MAAArC,WAAW,KAAE9J;AAAYoM,MAAAA;AAAAhX,IAAA,EAAA,MAAA+U,aAAA/U,EAAA,EAAA,MAAAuU,mBAAAvU,EAAA,EAAA,MAAAsU,mBAAAtU,EAAA0V,EAAAA,MAAAA,YAAA1V,EAAAwU,EAAAA,MAAAA,QAAAxU,EAAAyU,EAAAA,MAAAA,YAAAzU,EAAAgL,EAAAA,MAAAA,YAAAhL,UAAAuV,aAI5CyB,MAAAxE,YAcAxS,QAAA+U,WAAA/U,QAAAuU,iBAAAvU,QAAAsU,iBAAAtU,QAAA0V,UAAA1V,QAAAwU,MAAAxU,QAAAyU,UAAAzU,QAAAgL,UAAAhL,QAAAuV,WAAAvV,QAAAgX,OAAAA,MAAAhX,EAAA,EAAA;AAAAiX,MAAAA;AAAAjX,IAAAwH,EAAAA,MAAAA,YAAAxH,UAAAuW,UAGEU,OAACV,UACClV,2BAAAA,IAAAiB,GAAAA,MAAA,EAAe,WAAA,UAAgB,QAAA,iBAEhC,CAAA,GACDtC,QAAAwH,UAAAxH,QAAAuW,QAAAvW,QAAAiX,OAAAA,MAAAjX,EAAA,EAAA;AAAAkX,MAAAA;AAAAlX,IAAA4U,EAAAA,MAAAA,eAAA5U,UAAAiX,OALHC,MAAC7V,2BAAA,IAAA8V,GAAiCvC,yBAAAA,EAAAA,SAAAA,aAC/BqC,UAAAA,KAKH,GAA0BjX,QAAA4U,aAAA5U,QAAAiX,KAAAjX,QAAAkX,OAAAA,MAAAlX,EAAA,EAAA;AAAAoX,MAAAA;AAAApX,IAAAuW,EAAAA,MAAAA,UAAAvW,UAAAmG,MAAAnG,EAAA,EAAA,MAAAuV,aAAAvV,UAAAqU,aAAArU,EAAA4W,EAAAA,MAAAA,SAAA5W,UAAA6W,OAAA7W,EAAA,EAAA,MAAA8W,OAAA9W,EAAA+W,EAAAA,MAAAA,OAAA/W,EAAA,EAAA,MAAAgX,OAAAhX,UAAAkX,OApC5BE,MAAChU,2BAAA,KAAAuP,QAAA,EACa,eAAA,QACJ,WAAA,QACH,MAAA,WACG4D,QACJpQ,IACM,UAAA0Q,KAAsC,GAC5CxC,WACiB,uBAAAyC,KACJvB,mBAAQ,WACL,sBAAAwB,KACff,KAAK,QACHY,OAENI,UAAAA;AAAAA,IAAAA;AAAAA,IAgBDE;AAAAA,EAAAA,GAOF,GAAOlX,QAAAuW,QAAAvW,QAAAmG,IAAAnG,QAAAuV,WAAAvV,QAAAqU,WAAArU,QAAA4W,OAAA5W,QAAA6W,KAAA7W,QAAA8W,KAAA9W,QAAA+W,KAAA/W,QAAAgX,KAAAhX,QAAAkX,KAAAlX,QAAAoX,OAAAA,MAAApX,EAAA,EAAA;AAAAqX,MAAAA;AAAArX,IAAAyV,EAAAA,MAAAA,UAAAzV,UAAAoX,OAtCTC,MAAChW,2BAAA,IAAAiW,OAA+B7B,oBAAAA,EAAAA,YAAAA,QAC9B2B,UAAAA,KAsCF,GAAqBpX,QAAAyV,QAAAzV,QAAAoX,KAAApX,QAAAqX,OAAAA,MAAArX,EAAA,EAAA;AAAAuX,MAAAA;AAAAvX,IAAAoW,EAAAA,MAAAA,gBAAApW,UAAAqX,OAzCzBE,qCAACf,OAAAA,uBAA4B,SAAA,QAC3B,UAA6BJ,2BAAAA,IAAAA,YAAAA,YAAAA,UAAAA,EAAAA,OAAW,cACtCiB,UAAAA,IAAAA,CAwCF,EACF,CAAA,GAAsBrX,QAAAoW,cAAApW,QAAAqX,KAAArX,QAAAuX,OAAAA,MAAAvX,EAAA,EAAA;AAAAwX,MAAAA;AAAAxX,SAAAA,EAAAyW,EAAAA,MAAAA,WAAAzW,UAAAuX,OA5CxBC,MACED,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA;IA6CQ,CAAA,GACPvX,QAAAyW,SAAAzW,QAAAuX,KAAAvX,QAAAwX,OAAAA,MAAAxX,EAAA,EAAA,GA/CHwX;AA+CG,CAEN,GC/OY7E,SAAOlR,wBAAO6I,OAAI;AAAA;AAAA;AAAA;AAK/BqI,OAAK8E,cAAc;ACEZ,SAAAC,UAAA;AACL/R,QAAAA,QAAaP,iBAAAuS,uBAAsB;AAAC,MAAA,CAE/BhS;AAAIE,UAAAA,IAAAA,MACS,6BAA6B;AAGxCF,SAAAA;AAAI;ACAN,MAAMiS,cAAc5S,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA;AAAA4X,MAAAA,IAAArQ,UAAAsQ,UAAAC,SAAA1D;AAAArU,WAAAD,SAIpC;AAAA,IAAA8X;AAAAA,IAAArQ;AAAAA,IAAAsQ;AAAAA,IAAAC;AAAAA,IAAA,GAAA1D;AAAAA,EAAAA,IAAwDtU,OAAKC,OAAAD,OAAAC,OAAA6X,IAAA7X,OAAAwH,UAAAxH,OAAA8X,UAAA9X,OAAA+X,SAAA/X,OAAAqU,cAAAwD,KAAA7X,EAAA,CAAA,GAAAwH,WAAAxH,EAAA,CAAA,GAAA8X,WAAA9X,EAAA,CAAA,GAAA+X,UAAA/X,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA;AAC7D,QAAA;AAAA,IAAA+U;AAAAA,EAAA,IAAoB2C,WACpB;AAAA,IAAA3C,WAAAC;AAAAA,EAAqCtP,IAAAA,cAAAA,GASvBpF,KAAA0U,kBAAepK,SAAekN;AAAQlX,MAAAA;AAAA,SAAAZ,EAAA6X,CAAAA,MAAAA,MAAA7X,EAAAwH,CAAAA,MAAAA,YAAAxH,EAAA+U,CAAAA,MAAAA,aAAA/U,SAAA+X,WAAA/X,EAAA,EAAA,MAAAiF,OAAAjF,EAAA,EAAA,MAAAqU,aAAArU,EAAA,EAAA,MAAAM,MANlDM,KAACS,2BAAA,IAAAsR,QAAA,EACa,eAAA,gBACCkF,aAAAA,IACTxD,GAAAA,WACE,SACEU,QAAAA,WACE,UAAAzU,IACDyX,SACJ9S,KACA,MAAA,WAEG,UACV,GAAOjF,OAAA6X,IAAA7X,OAAAwH,UAAAxH,OAAA+U,WAAA/U,OAAA+X,SAAA/X,QAAAiF,KAAAjF,QAAAqU,WAAArU,QAAAM,IAAAN,QAAAY,MAAAA,KAAAZ,EAAA,EAAA,GAZPY;AAYO,CAEV;AClCM,SAASoX,oBAAoBC,KAAiC;AACnE,SAAKA,MACEA,IAAIC,kBAAAA,EAAoBC,WAAW,KAAK,EAAE,IADhC;AAEnB;ACEA,MAAMC,2BAAyC;AAAA,EAC7CC,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV;AAEO,SAAAC,mBAAAzY,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAKL;AAAA,IAAA6S;AAAAA,IAAA2F;AAAAA,IAAAC;AAAAA,EAAAA,IAAuC3Y,OACvC4Y,cAAoBC,sBAAe,UAAUF,OAAOA,OAAI9N,MAAY;AAEhE8N,MAAAA,KAAI5Q,SAAU,WAAS;AAAAxH,QAAAA;AAAA,WAAAN,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAClBzC,MAAAe,+BAACwX,GAAAA,aAAc,CAAA,CAAA,GAAA7Y,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAAfM;AAAAA,EAAAA;AAAeA,MAAAA;AAAAN,IAAA2Y,CAAAA,MAAAA,eAAA3Y,SAAA0Y,QAGRpY,KAAAqY,YAAYD,IAAI,GAAC1Y,OAAA2Y,aAAA3Y,OAAA0Y,MAAA1Y,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAjC,QAAA;AAAA,IAAAoB;AAAAA,EAAAA,IAAgBd;AAEZoY,MAAAA,KAAI5Q,SAAU,SAAO;AACnB4Q,QAAAA,KAAIlR,SAAA7E,WAAsB;AAAA,aAAA;AAAA,QAI1B+V,KAAIhD,UAAA;AAAA9U,UAAAA;AAAAZ,eAAAyY,gBAGD7X,MAAA6X,+CAAiBI,GAAc,aAAA,EAAA,GAAA7Y,OAAAyY,cAAAzY,OAAAY,OAAAA,MAAAZ,EAAA,CAAA;AAAAgB,UAAAA;AAAAhB,QAAA,CAAA,MAAA8S,YAAA9S,EAAA0Y,CAAAA,MAAAA,KAAAlR,YAAAxH,EAAA0Y,CAAAA,MAAAA,KAAA5F,YAC/B9R,MAAA0X,KAAIlR,SAAAiD,IAAAqO,CAAAA,OAAAC,eACH1X,2BAAAA,IAAC,oBACW,EAAA,UAAAyR,YAAY9C,CAAAA,CAAQ0I,KAAI5F,UACpB,cAAA4F,KAAIlR,SAAUuR,cAAc,GAAAjR,SAAY,SAEhDgR,MAAAA,MADDA,GAAAA,MAAKE,GACC,CAEd,GAAChZ,OAAA8S,UAAA9S,EAAA,CAAA,IAAA0Y,KAAAlR,UAAAxH,EAAA,CAAA,IAAA0Y,KAAA5F,UAAA9S,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,UAAAA;AAAAjB,aAAAA,EAAAY,EAAAA,MAAAA,OAAAZ,UAAAgB,OATJC,MACGL,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,QAAAA;AAAAA,QACAI;AAAAA,MAAAA,EAOC,CAAA,GACDhB,QAAAY,KAAAZ,QAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAVHiB;AAAAA,IAAAA;AAUGL,QAAAA;AAAAZ,cAAAyY,gBAMF7X,MAAA6X,+CAAiBI,GAAc,aAAA,EAAA,GAAA7Y,QAAAyY,cAAAzY,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAGxB,UAAAgB,MAAA0X,KAAInV;AAAKtC,QAAAA;AAAAjB,MAAA,EAAA,MAAA8S,YAAA9S,EAAA0Y,EAAAA,MAAAA,KAAAlR,YAAAxH,EAAA0Y,EAAAA,MAAAA,KAAA5F,YAId7R,MAAAyX,KAAIlR,SAAAiD,IAAAwO,CAAAA,SAAAC,iBACH7X,2BAAAA,IAAC,oBACW,EAAA,UAAAyR,YAAY9C,CAAAA,CAAQ0I,KAAI5F,UACpB,cAAA4F,KAAIlR,SAAUuR,gBAAc,GAAAjR,SAAY,SAEhDgR,MAAAA,QADDA,GAAAA,QAAKE,GACC,CAEd,GAAChZ,QAAA8S,UAAA9S,EAAA,EAAA,IAAA0Y,KAAAlR,UAAAxH,EAAA,EAAA,IAAA0Y,KAAA5F,UAAA9S,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA;AAAAiD,QAAAA;AAAAjD,MAAA8S,EAAAA,MAAAA,YAAA9S,UAAA0Y,KAAAnV,QAAAvD,EAAAiB,EAAAA,MAAAA,OAAAjB,UAAAoB,SAbJ6B,KAAC5B,2BAAA,IAAA8X,uCACWrG,UACJ,MAAA9R,KACGoX,SAAuBA,0BAC1BhX,MAAAA,OAELH,UAAAA,IAAAA,CAQH,GAAYjB,QAAA8S,UAAA9S,EAAA,EAAA,IAAA0Y,KAAAnV,MAAAvD,QAAAiB,KAAAjB,QAAAoB,OAAApB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,QAAAA;AAAAnD,WAAAA,EAAAY,EAAAA,MAAAA,OAAAZ,UAAAiD,MAhBdE,KACGvC,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,MAAAA;AAAAA,MACDqC;AAAAA,IAAAA,EAcY,CAAA,GACXjD,QAAAY,KAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAjBHmD;AAAAA,EAAAA;AAiBGvC,MAAAA;AAAAZ,YAAAyY,gBAMF7X,KAAA6X,+CAAiBI,GAAc,aAAA,EAAA,GAAA7Y,QAAAyY,cAAAzY,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,IAAA8S,EAAAA,MAAAA,YAAA9S,UAAA0Y,QAChC1X,KAACK,2BAAAA,IAAA,6BAAsCyR,EAAAA,UAAgB4F,KAAQ,CAAA,GAAA1Y,QAAA8S,UAAA9S,QAAA0Y,MAAA1Y,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MAFjEC,KACGL,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IACDI;AAAAA,EAAAA,EAA+D,CAAA,GAC9DhB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAHHiB;AAGG;AAIP,SAAAmY,4BAAArZ,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACE;AAAA,IAAAyY;AAAAA,EAAAA,IAAe3Y;AAAK,MAEhB2Y,KAAIW,QAAA;AAAA/Y,QAAAA;AAAA,WAAAN,SAAA0Y,KAAAW,UAAArZ,SAAAD,SACCO,MAACe,2BAAA,IAAA,2BAAA,EAA8BtB,GAAAA,OAAe,QAAA2Y,KAAIW,OAAW,CAAA,GAAArZ,EAAA,CAAA,IAAA0Y,KAAAW,QAAArZ,OAAAD,OAAAC,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAA7DM;AAAAA,EAAAA;AAA6DA,MAAAA;AAAAN,SAAAA,SAAAD,SAG/DO,KAACe,2BAAAA,IAAA,qBAAA,EAAwBtB,GAAAA,OAAS,GAAAC,OAAAD,OAAAC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAlCM;AAAkC;AAG3C,SAAAgZ,oBAAAvZ,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAA6S;AAAAA,IAAA4F;AAAAA,EAAAA,IAAyB3Y;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAA0Y,KAAA5F,YACPxS,KAAA,OAAOoY,KAAI5F,YAAc,YAC7CzR,2BAAAA,IAAAwB,GAAAA,MAAA,EAAW,MAAC,GAAG6V,UAAI5F,KAAAA,SAAA3E,OAAiB,CAAA,GACtCnO,EAAA,CAAA,IAAA0Y,KAAA5F,UAAA9S,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAuZ,iBAAuBjZ,IAGvB;AAAA,IAAAc;AAAAA,EAAAA,IAAgBoY,OAAAA,YAAYd,IAAI,GAKhB9X,KAAAkS,YAAY9C,EAAQ0I,KAAI5F;AAAU9R,MAAAA;AAAAhB,IAAA,CAAA,MAAA0Y,KAAAe,UACnCzY,KAAA0X,KAAIe,QAAAC,MAAe,GAAG,GAAC1Z,EAAA,CAAA,IAAA0Y,KAAAe,QAAAzZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAErBiB,QAAAA,KAAAyX,KAAIiB,aAAejB,KAAIhE,YAAAkF,MAAAA,eAMrB3W,eAAU+U,oBAAoBU,KAAItX,KAAM,CAAC;AAAE+B,MAAAA;AAAAnD,IAAA0Y,CAAAA,MAAAA,KAAAnV,QAAAvD,EAAA0Y,CAAAA,MAAAA,KAAAmB,YAAA7Z,EAAA0Y,CAAAA,MAAAA,KAAAhE,YAAA1U,EAAA0Y,CAAAA,MAAAA,KAAA5G,QAAA9R,EAAA,CAAA,MAAAY,MAAAZ,SAAAgB,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,EAAA,EAAA,MAAAiD,MAAAjD,UAAAoB,SAV1D+B,oCAAC2W,0BAAAA,UACW,EAAA,UAAAlZ,IACD,SAAAI,IACH,MAAA0X,KAAInV,MACC,WAAAtC,IAEF,SAAAyX,KAAImB,UACJ,SAAAnB,KAAIhE,UACPtT,MAAAA,OACA,MAAAsX,KAAI5G,MACG,eAAA7O,GACb,CAAA,GAAAjD,EAAA,CAAA,IAAA0Y,KAAAnV,MAAAvD,EAAA,CAAA,IAAA0Y,KAAAmB,UAAA7Z,EAAA,CAAA,IAAA0Y,KAAAhE,UAAA1U,EAAA,CAAA,IAAA0Y,KAAA5G,MAAA9R,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAoB,OAAApB,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA,SAAA7E,EAAAmD,EAAAA,MAAAA,MAAAnD,UAAAuZ,kBAZJ1U,KAACxD,2BAAA,IAAA0Y,OAAA,mBAAA,EAA2BR,yBAA0B,WAAA,QACpDpW,UAAAA,GAAAA,CAYF,GAAoBnD,QAAAmD,IAAAnD,QAAAuZ,gBAAAvZ,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GAbpB6E;AAaoB;AAIxB,SAAAmV,0BAAAja,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAKE;AAAA,IAAA6S;AAAAA,IAAAuG;AAAAA,IAAAX;AAAAA,EAAAA,IAAiC3Y;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAA0Y,KAAA5F,YACfxS,KAAA,OAAOoY,KAAI5F,YAAc,YAC7CzR,2BAAAA,IAAAwB,GAAAA,MAAA,EAAW,MAAC,GAAG6V,UAAI5F,KAAAA,SAAA3E,OAAiB,CAAA,GACtCnO,EAAA,CAAA,IAAA0Y,KAAA5F,UAAA9S,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAuZ,iBAAuBjZ;AAEtBM,MAAAA;AAAAZ,IAAAqZ,CAAAA,MAAAA,OAAAjT,UAAApG,EAAA,CAAA,MAAAqZ,OAAAvR,QACgClH,KAAA;AAAA,IAAAyY,QAASA,OAAMvR;AAAAA,IAAA1B,QAAeiT,OAAMjT;AAAAA,EAAAA,GAAQpG,EAAA,CAAA,IAAAqZ,OAAAjT,QAAApG,EAAA,CAAA,IAAAqZ,OAAAvR,MAAA9H,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAA7Eia,QAAAA,aAAmBC,uBAActZ,EAA4C;AAACI,MAAAA;AAAAhB,IAAAia,CAAAA,MAAAA,cAAAja,SAAA0Y,QAG5E1X,KAAAmS,CAAA,UAAA;AACE8G,eAAU/R,QAASiL,KAAK,GACxBuF,KAAImB,SAAU;AAAA,EACf7Z,GAAAA,OAAAia,YAAAja,OAAA0Y,MAAA1Y,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJH,QAAAma,cAAoBnZ,IAQpB;AAAA,IAAAI;AAAAA,EAAAA,IAAgBoY,OAAAA,YAAYd,IAAI,GAMhBzX,KAAA6R,YAAY9C,EAAQ0I,KAAI5F;AAAU7P,MAAAA;AAAAjD,IAAA,CAAA,MAAA0Y,KAAAe,UACnCxW,KAAAyV,KAAIe,QAAAC,MAAe,GAAG,GAAC1Z,EAAA,CAAA,IAAA0Y,KAAAe,QAAAzZ,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAGrBmD,QAAAA,KAAAuV,KAAIhE,WAAAkF,MAAAhP,gBAAAA;AAAqC/F,MAAAA;AAAA7E,IAAAma,EAAAA,MAAAA,eAAAna,EAAA,EAAA,MAAAia,WAAAG,QAAApa,EAAA,EAAA,MAAA0Y,KAAAnV,QAAAvD,EAAA,EAAA,MAAA0Y,KAAAhE,YAAA1U,UAAA0Y,KAAA5G,QAAA9R,UAAAiB,MAAAjB,EAAAiD,EAAAA,MAAAA,MAAAjD,EAAA,EAAA,MAAAmD,MAAAnD,UAAAoB,SANtDyD,KAACxD,2BAAAA,IAAAyY,0BAAAA,YACI,IAAA,KACO,UAAA7Y,IACD,SAAAgC,IACH,MAAAgX,WAAUG,MACV,MAAA1B,KAAInV,MACC,WAAAJ,IACFgX,SAAU,aACV,SAAAzB,KAAIhE,UACPtT,aACA,MAAAsX,KAAI5G,MACV,GAAA9R,QAAAma,aAAAna,EAAA,EAAA,IAAAia,WAAAG,MAAApa,EAAA,EAAA,IAAA0Y,KAAAnV,MAAAvD,EAAA,EAAA,IAAA0Y,KAAAhE,UAAA1U,EAAA,EAAA,IAAA0Y,KAAA5G,MAAA9R,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAAoB,OAAApB,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAA,SAAAhH,EAAA6E,EAAAA,MAAAA,MAAA7E,UAAAuZ,kBAZJvS,KAAC3F,2BAAA,IAAA0Y,OAAA,mBAAA,EAA2BR,yBAA0B,WAAA,QACpD1U,UAAAA,GAAAA,CAYF,GAAoB7E,QAAA6E,IAAA7E,QAAAuZ,gBAAAvZ,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAbpBgH;AAaoB;AC3IxB,MAAMqT,6BAA2C;AAAA,EAC/ChC,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV;AAEA,SAAS+B,aAAaC,OAAwBzI,MAAmD;AAC/F,SAAOyI,MAAMnM,KAAMsK,CAAAA,SAEdA,KAAK5Q,SAAS,UAAU4Q,KAAK5G,SAASA,QACtC4G,KAAK5Q,SAAS,WAAWwS,aAAa5B,KAAKlR,UAAUsK,IAAI,CAE7D;AACH;AAOO,SAAA0I,sBAAAza,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAsa;AAAAA,IAAAE;AAAAA,EAAAA,IAA8B1a,OAC9BoG,KAAWgL,YAEXuJ,GAAAA,cAAoBJ,aAAaC,OAAO,UAAU,GAClDI,aAAmBL,aAAaC,OAAO,SAAS,GAOlCja,KAAAoa,cAAc,aAAaC,aAAa,YAAS/P;AAAYhK,MAAAA;AAAAZ,WAAAM,MAFrEM,KAACS,+BAAAuZ,OAAAA,mBAAA,EAEO,MAAAta,IACM,eAAA,4BACZ,GAAAN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAya,gBAKCzZ,KAAAyZ,gBAEIA,2BAAAA,KAAAA,qBAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,mCACA5B;EAAc,EAAA,CAAA,GAElB7Y,OAAAya,cAAAza,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAua,SACAtZ,KAAAsZ,MAAK9P,IAAAiO,CAAAA,MAAAmC,cAAA;AACJ,UAAApC,eAAqB8B,MAAMM,YAAa,CAAA,GAAA/S,SAAY;AAAO,WACnDzG,2BAAAA,IAAA,oBAAA,EAAiCoX,cAAmCC,KAAAA,GAAhBA,KAAIM,GAAoB;AAAA,EACrF,CAAA,GAAChZ,OAAAua,OAAAva,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAVJgC,KAAAG,2BAAAA,KAAC0X,GACE9Z,MAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IAMAC;AAAAA,EAAAA,EAIH,CAAA,GAAOjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAmG,CAAAA,MAAAA,MAAAnG,UAAAY,MAAAZ,EAAA,EAAA,MAAAiD,MArBXE,KAAC9B,2BAAA,IAAA0Z,sCAAA,EAEG,QAAAna,IAMEuF,IAEF,MAAAlD,IAaOoX,SAAyBA,4BAClC,GAAAra,OAAAmG,IAAAnG,QAAAY,IAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAxBFmD;AAwBE;AC9DOwP,MAAAA,SAAOlR,wBAAOmR,QAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAenBoI,WAAWvZ,wBAAO6I,OAAI;AAAA;AAAA,GCDtB2Q,aAAajW,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,CAAA,GAInC;AAAA,IAAAuH;AAAAA,IAAAuQ;AAAAA,MAA4BhY,OAC5B;AAAA,IAAAgV;AAAAA,MAAoB2C,QAAQ;AAACpX,MAAAA;AAAAN,IAAAwH,CAAAA,MAAAA,YAAAxH,SAAA+X,WAKvBzX,KAACe,2BAAAA,IAAA,UAAA,EAAc,MAAA,WACb,yCAACK,GAAAA,KAAaqW,EAAAA,SAAiB,SAAE,CAAA,EACnC,CAAA,GAAW/X,OAAAwH,UAAAxH,OAAA+X,SAAA/X,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,SAAAA,EAAA+U,CAAAA,MAAAA,aAAA/U,SAAAiF,OAAAjF,EAAA,CAAA,MAAAM,MAJfM,oCAAC4V,OAA4B,qBAAA,EAAA,SAAA,cAC3B,UAACnV,2BAAA,IAAAsR,QAAA,EAAiB,eAAA,eAAsBoC,QAAQ,WAAQ9P,KACtD3E,UAGF,GAAA,CAAA,GACF,GAAsBN,OAAA+U,WAAA/U,OAAAiF,KAAAjF,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GANtBY;AAMsB,CAEzB,GC1BY+R,SAAOlR,iBAAAA,OAAOmR,GAAK,KAAA,EAAa,CAAC;AAAA,EAACsI;AAAO,MAC7CC,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,iCAYwBD,UAAU,6BAA6B,aAAa;AAAA;AAAA;AAAA,GAIpF,GAEYE,SAAS3Z,iBAAAA,OAAOa,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQpB+Y,YAAY5Z,iBAAAA,OAAO6I,GAAI,IAAA,EAAE,CAAC;AAAA,EAACrI,OAAAA;AAAqB,MAAM;AAC3D,QAAA;AAAA,IAACqZ;AAAAA,IAAIC;AAAAA,EAAMtZ,IAAAA,OAAME,OAAOb,MAAMka,KAAKC;AAGlCN,SAAAA,iBAAAA;AAAAA,wBACeI,EAAE;AAAA;AAAA;AAAA,eAGXD,EAAE;AAAA;AAAA;AAGjB,CAAC,GAEYI,oBAAoBja,iBAAAA,OAAOka,eAAY;AAAA;AAAA;AAAA,GAKvCC,YAAYna,wBAAOoB,OAAI;AAAA;AAAA;AAAA,GAKvBgZ,UAAUpa,iBAAAA,OAAOC,GAAG,GAAA,EAAE,CAAC;AAAA,EAACO,OAAAA;AAAqB,MAAM;AACxD,QAAA;AAAA,IAACX;AAAAA,IAAOc;AAAAA,MAASH,OAAME;AAEtBgZ,SAAAA,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,eAuBM/Y,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAYuB0Z,GAAKxa,KAAAA,MAAMya,KAAKR,IAAI,CAAC,CAAC;AAAA,eACrDnZ,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAIvB,CAAC,GCzEY4Z,eAAahX,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA,GAInC;AAAA,IAAAgc;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAApb;AAAAA,MACErB,OACF;AAAA,IAAA+U;AAAAA,IAAAC;AAAAA,IAAAE;AAAAA,IAAAL,aAAA6H;AAAAA,MAAgE/E,QAAQ,GACxEgF,WAAiBC,GAAAA,eAAeF,mBAAmB;AAACnc,MAAAA;AAIzC,QAAAM,KAAAmU,YAAY2H,UAAQE,UAAAjJ,OAAAkJ,cAA8BjS;AAAY5J,MAAAA;AAAAhB,WAAAY,MADhEI,KAAA;AAAA,IAAA8b,OACElc;AAAAA,EACRZ,GAAAA,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAFMU;AADT,QAAA+b,cAAoBzc;AAKnBW,MAAAA;AAAAjB,IAAA8U,CAAAA,MAAAA,YAAA9U,SAAA+U,aAEoC9T,KAAAA,MAAA;AAC/B8T,iBACJD,SAAS;AAAA,EACV9U,GAAAA,OAAA8U,UAAA9U,OAAA+U,WAAA/U,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAHD,QAAAgd,mBAAyB/b;AAGAgC,MAAAA;AAAAjD,IAAA+U,CAAAA,MAAAA,aAAA/U,SAAAiV,UAEahS,KAAAA,MAAA;AAC/B8R,iBACLE,OAAO;AAAA,EACRjV,GAAAA,OAAA+U,WAAA/U,OAAAiV,QAAAjV,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAHDid,QAAAA,oBAA0Bha,IAK1Bia,uBAA6BlN,CAAAA,EAAQ,CAAC+E,cAAcwH,QAAQD,cAMtCnZ,KAAA4R,YAAY,KAAEnK,QAKN/F,KAAAkQ,YAAY,KAAEnK,QAKjB5D,KAAA+N,aAAS,CAAKmI,uBAA4B,IAAA;AAAAjW,MAAAA;AAAAjH,WAAAkc,cAIxDjV,KAAAiV,cAAc7a,2BAAA,IAACK,QAAS,EAAA,MAAA,QAAQwa,UAAAA,WAAW,CAAA,GAAMlc,OAAAkc,YAAAlc,OAAAiH,MAAAA,KAAAjH,EAAA,CAAA;AAOnCkH,QAAAA,KAAAgV,aAAkB,IAAA;AAAA9U,MAAAA;AAAApH,YAAAqc,WAI9BjV,MAAAiV,WAAYhb,+BAAA,mBAAA,EAAkB,UAAA,IAAiB,QAAA,GAAS,SAAK,GAAArB,QAAAqc,SAAArc,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,IAAAqc,EAAAA,MAAAA,WAAArc,UAAAoB,SAC7DkG,MAAA,CAAC+U,WACAhb,2BAAAA,IAAC,WAAgB,EAAA,MAAA,GAAgB,cAAA,YAAkB,QAAA,YAC5C,iBACP,GACDrB,QAAAqc,SAAArc,QAAAoB,OAAApB,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,IAAAgd,EAAAA,MAAAA,oBAAAhd,EAAA,EAAA,MAAAoH,OAAApH,EAAAsH,EAAAA,MAAAA,OAAAtH,EAAA,EAAA,MAAAkH,MAAAlH,UAAAwc,YAdH5S,MAAAxG,2BAAAA,KAAC,WACC,EAAA,sBAAmB,IACb,SACM,aAAA,UACH4Z,SAAAA,kBACI,aAAA9V,IACJ,SAAC,GACAsV,UAETpV,UAAAA;AAAAA,IAAAA;AAAAA,IACAE;AAAAA,EAKH,EAAA,CAAA,GAAYtH,QAAAgd,kBAAAhd,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAAkH,IAAAlH,QAAAwc,UAAAxc,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,IAAAic,EAAAA,MAAAA,WAAAjc,UAAA+U,aAEX7K,MAAA+R,0CACE3Z,SAAW,EAAA,OAAA,UAAiByS,QAAQ,WACnC,UAAC1T,2BAAA,IAAAmV,4BAAA,EAA4B,SAAA,cAAoB,mBAAE,EACrD,CAAA,GACDxW,QAAAic,SAAAjc,QAAA+U,WAAA/U,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,YAAAid,qBAAAjd,EAAA+c,EAAAA,MAAAA,eAAA/c,EAAA4J,EAAAA,MAAAA,OAAA5J,EAAA,EAAA,MAAAkK,OAAAlK,UAAAgH,MAAAhH,EAAA,EAAA,MAAAiH,MA/BHmD,sCAAC,UACM,KAAA,GACI6S,4BACA,SAAA,GACM,eAAAjW,IACR,QAAA,UACA+V,OAAAA,aAEN9V,UAAAA;AAAAA,IAAAA;AAAAA,IAED2C;AAAAA,IAiBCM;AAAAA,EAAAA,EAAAA,CAKH,GAASlK,QAAAid,mBAAAjd,QAAA+c,aAAA/c,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,IAAA,EAAA,MAAA+U,aAAA/U,EAAAkd,EAAAA,MAAAA,wBAAAld,EAAAsc,EAAAA,MAAAA,cAAAtc,UAAAuc,QAERlS,MAAA6S,wBACE9Z,2BAAA,KAAAd,GAAA,MAAA,EACO,OAAA,UACEyS,mBACC,UAAA,QACM,eAAA,GACL,UAAA,GAEV,UAAA;AAAA,IAAA1T,2BAAAA,IAAC,WAAc,MAAA,GAAgB,aAAAib,aAAiB,IAAA,GAC1C,UACN,KAAA,CAAA;AAAA,IAECA,cAAcA;AAAAA,EAAAA,GACjB,GACDtc,QAAA+U,WAAA/U,QAAAkd,sBAAAld,QAAAsc,YAAAtc,QAAAuc,MAAAvc,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAEAuK,QAAAA,MAACwK,CAAAA,aAAaqH,gBAAgBA;AAAYjR,MAAAA;AAAAnL,IAAA,EAAA,MAAAoK,OAAApK,EAAAqK,EAAAA,MAAAA,OAAArK,EAAAuK,EAAAA,MAAAA,OAAAvK,UAAA6E,MApD/CsG,MAAC9J,2BAAA,IAAAmV,OAA4B,qBAAA,EAAA,SAAA,cAC3B,UAAApT,2BAAAA,KAACkH,GAAqB,MAAA,EAAA,kBAAAzF,IAAiC,MAAA,WACrDuF,UAAAA;AAAAA,IAAAA;AAAAA,IAkCCC;AAAAA,IAgBAE;AAAAA,EACH,EAAA,CAAA,EACF,CAAA,GAAsBvK,QAAAoK,KAAApK,QAAAqK,KAAArK,QAAAuK,KAAAvK,QAAA6E,IAAA7E,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA;AAAA2W,MAAAA;AAAA3W,SAAAA,EAAA,EAAA,MAAAmc,UAAAnc,EAAAiF,EAAAA,MAAAA,OAAAjF,EAAAmL,EAAAA,MAAAA,OAAAnL,UAAAmD,MA7D1BwT,qCAACwG,kBAAuB,EAAA,cACtB,UAAA9b,2BAAAA,IAACsR,QACUwJ,EAAAA,iBACO,kBAAAhZ,IACJ,eAAA,eACP8B,KAELkG,UAAAA,IAAAA,CAuDF,EACF,CAAA,GAAgBnL,QAAAmc,QAAAnc,QAAAiF,KAAAjF,QAAAmL,KAAAnL,QAAAmD,IAAAnD,QAAA2W,OAAAA,MAAA3W,EAAA,EAAA,GA/DhB2W;AA+DgB,CAEnB;AC9GD,SAASyG,oBAAkB1E,MAAqB;AAC9C,MAAI,CAACA,KAAK5F;AACD,WAAA;AAAA,MAACuK,gBAAgBzS;AAAAA,MAAW0S,WAAW1S;AAAAA,MAAW2S,YAAY;AAAA,IAAK;AAQtEF,QAAAA,iBACJ,OAAO3E,KAAK5F,YAAa,WAAY4F,KAAK5F,SAAS3E,SAAoBvD,QACnE0S,YACJ,OAAO5E,KAAK5F,YAAa,YAAY,OAAO4F,KAAK5F,UAAU3E,UAAW,WAClEuK,KAAK5F,SAAS3E,SACd;AAEC,SAAA;AAAA,IAACkP;AAAAA,IAAgBC;AAAAA,IAAWC,YAAYvN,EAAQ0I,KAAK5F;AAAAA,EAAS;AACvE;AAKO,SAAA0K,uBAAAzd,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAyY;AAAAA,EAAAA,IAAe3Y;AAEX2Y,MAAAA,KAAI5Q,SAAU,QAAM;AAAAxH,QAAAA;AAAAN,WAAAA,SAAA0Y,QACfpY,KAACe,2BAAAA,IAAA,gCAAA,EAAqCqX,MAAQ,GAAA1Y,OAAA0Y,MAAA1Y,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAA9CM;AAAAA,EAAAA;AAGLoY,MAAAA,KAAI5Q,SAAU,SAAO;AAAAxH,QAAAA;AAAAN,WAAAA,SAAA0Y,QAChBpY,KAACe,2BAAAA,IAAA,iCAAA,EAAsCqX,MAAQ,GAAA1Y,OAAA0Y,MAAA1Y,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAA/CM;AAAAA,EAAAA;AAGTmd,SAAAA,QAAAA,KAAa,0DAA0D/E,IAAI,GAAC;AAAA;AASvE,SAAAgF,+BAAA3d,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAyY;AAAAA,MAAe3Y,OACf;AAAA,IAAAqB;AAAAA,EAAAA,IAAgBoY,OAAAA,YAAYd,IAAI,GAChC;AAAA,IAAAhY;AAAAA,MAAYC,sBAAe;AAAC,MAExB+X,KAAIW,QAAA;AAAA/Y,QAAAA;AAAA,WAAAN,SAAA0Y,KAAAW,UAAArZ,SAAAD,SACCO,MAACe,2BAAA,IAAA,8BAAA,EAAiCtB,GAAAA,OAAe,QAAA2Y,KAAIW,OAAW,CAAA,GAAArZ,EAAA,CAAA,IAAA0Y,KAAAW,QAAArZ,OAAAD,OAAAC,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAAhEM;AAAAA,EAAAA;AAAgEA,MAAAA;AAAAN,WAAA0Y,QAGzBpY,KAAA8c,oBAAkB1E,IAAI,GAAC1Y,OAAA0Y,MAAA1Y,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAvE,QAAA;AAAA,IAAAqd;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAgDjd;AAAuBM,MAAAA;AAAAZ,IAAAsd,CAAAA,MAAAA,aAAAtd,SAAAU,KAAAV,EAAA,CAAA,MAAAoB,SAUvDR,KAAA0c,aAAalc,SAASV,EAAE,0BAA0B,GAACV,OAAAsd,WAAAtd,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAud,cAAAvd,EAAA0Y,EAAAA,MAAAA,KAAAe,UAEpDzY,MAACuc,cAAc7E,KAAIe,SAAUf,KAAIe,OAAAC,MAAc,GAAG,IAAC9O,QAAY5K,OAAAud,YAAAvd,EAAA,EAAA,IAAA0Y,KAAAe,QAAAzZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAC/DiB,QAAAA,KAAAsc,aAAaF,iBAAiBjc;AAAK6B,MAAAA;AAAAjD,IAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiB,MAFhCgC,KAAA;AAAA,IAAA0a,SACH3c;AAAAA,IAA+DyK,SAC/DxK;AAAAA,EACVjB,GAAAA,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,SAAAA,EAAA,EAAA,MAAAud,cAAAvd,EAAA0Y,EAAAA,MAAAA,KAAAnV,QAAAvD,EAAA,EAAA,MAAA0Y,KAAAmB,YAAA7Z,EAAA0Y,EAAAA,MAAAA,KAAAhE,YAAA1U,UAAA0Y,KAAA5G,QAAA9R,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAiD,MAXHE,KAAA9B,2BAAAA,IAACuc,uBACWL,UAAS,YACb,MAAA7E,KAAInV,MAED,SAAAmV,KAAImB,UACH,UAAAnB,KAAIhE,UACR,MAAAgE,KAAI5G,MACE,cAAAlR,IACE,cAAAqC,IAId,GAAAjD,QAAAud,YAAAvd,EAAA,EAAA,IAAA0Y,KAAAnV,MAAAvD,EAAA,EAAA,IAAA0Y,KAAAmB,UAAA7Z,EAAA,EAAA,IAAA0Y,KAAAhE,UAAA1U,EAAA,EAAA,IAAA0Y,KAAA5G,MAAA9R,QAAAY,IAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAZFmD;AAYE;AAIN,SAAA0a,6BAAA9d,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAAoZ;AAAAA,IAAAX;AAAAA,EAAAA,IAAuB3Y;AAAKO,MAAAA;AAAAN,IAAAqZ,CAAAA,MAAAA,OAAAjT,UAAApG,EAAA,CAAA,MAAAqZ,OAAAvR,QACKxH,KAAA;AAAA,IAAA+Y,QAASA,OAAMvR;AAAAA,IAAA1B,QAAeiT,OAAMjT;AAAAA,EAAAA,GAAQpG,EAAA,CAAA,IAAAqZ,OAAAjT,QAAApG,EAAA,CAAA,IAAAqZ,OAAAvR,MAAA9H,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAA7Eia,QAAAA,aAAmBC,uBAAc5Z,EAA4C,GAC7E;AAAA,IAAAI;AAAAA,MAAYC,sBAAe;AAACC,MAAAA;AAAAZ,IAAAia,CAAAA,MAAAA,cAAAja,SAAA0Y,QAG1B9X,KAAAuS,CAAA,UAAA;AACE8G,eAAU/R,QAASiL,KAAK,GACxBuF,KAAImB,SAAU;AAAA,EACf7Z,GAAAA,OAAAia,YAAAja,OAAA0Y,MAAA1Y,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJH,QAAAma,cAAoBvZ;AAMnBI,MAAAA;AAAAhB,WAAA0Y,QAE+C1X,KAAAoc,oBAAkB1E,IAAI,GAAC1Y,OAAA0Y,MAAA1Y,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAvE,QAAA;AAAA,IAAAqd;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAgDvc;AAAuBC,MAAAA;AAAAjB,IAAA,CAAA,MAAAsd,aAAAtd,EAAA,CAAA,MAAA0Y,KAAAtX,SAAApB,EAAA,EAAA,MAAAU,KAWvDO,KAAAqc,aAAa5E,KAAItX,SAAUV,EAAE,0BAA0B,GAACV,OAAAsd,WAAAtd,EAAA,CAAA,IAAA0Y,KAAAtX,OAAApB,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAAud,cAAAvd,EAAA0Y,EAAAA,MAAAA,KAAAe,UAEzDxW,MAACsa,cAAc7E,KAAIe,SAAUf,KAAIe,OAAAC,MAAc,GAAG,IAAC9O,QAAY5K,QAAAud,YAAAvd,EAAA,EAAA,IAAA0Y,KAAAe,QAAAzZ,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAC/DmD,QAAAA,KAAAoa,aAAaF,iBAAiB3E,KAAItX;AAAMyD,MAAAA;AAAA7E,IAAAiD,EAAAA,MAAAA,MAAAjD,UAAAmD,MAFrC0B,KAAA;AAAA,IAAA8Y,SACH1a;AAAAA,IAA+DwI,SAC/DtI;AAAAA,IAAwCmV,WACtC;AAAA,IAAQC,QAAA;AAAA,EAEpBvY,GAAAA,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,SAAAA,EAAAma,EAAAA,MAAAA,eAAAna,UAAAia,WAAAG,QAAApa,EAAAud,EAAAA,MAAAA,cAAAvd,EAAA,EAAA,MAAA0Y,KAAAnV,QAAAvD,UAAA0Y,KAAAhE,YAAA1U,EAAA0Y,EAAAA,MAAAA,KAAA5G,QAAA9R,EAAA,EAAA,MAAAiB,MAAAjB,UAAA6E,MAdHmC,KAAC3F,2BAAA,IAAAuc,uBACa,aAAA,KACFL,UAAAA,YACJ,MAAAtD,WAAUG,MACV,MAAA1B,KAAInV,MACD4W,SAAU,aACT,UAAAzB,KAAIhE,UACR,MAAAgE,KAAI5G,MACE,cAAA7Q,IACE,cAAA4D,GAAAA,CAMd,GAAA7E,QAAAma,aAAAna,EAAA,EAAA,IAAAia,WAAAG,MAAApa,QAAAud,YAAAvd,EAAA,EAAA,IAAA0Y,KAAAnV,MAAAvD,EAAA,EAAA,IAAA0Y,KAAAhE,UAAA1U,EAAA,EAAA,IAAA0Y,KAAA5G,MAAA9R,QAAAiB,IAAAjB,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAfFgH;AAeE;AAQN,SAAA8W,gCAAA/d,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAAyY;AAAAA,MAAe3Y,OACf;AAAA,IAAAqB;AAAAA,EAAA,IAAgBoY,mBAAYd,IAAI,GAMdpY,KAAA,CAAA,CAAEoY,KAAI5F,UACVlS,KAAA8X,KAAInV,QAAA8F,MAAAA;AAAoBrI,MAAAA;AAAAhB,IAAA,CAAA,MAAA0Y,KAAAtX,SAGhBJ,KAAA;AAAA,IAAAyK,SAAUiN,KAAItX;AAAAA,IAAAmX,QAAA;AAAA,EAAqBvY,GAAAA,EAAA,CAAA,IAAA0Y,KAAAtX,OAAApB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAAM,MAAAN,EAAAY,CAAAA,MAAAA,MAAAZ,EAAAgB,CAAAA,MAAAA,MAAAhB,SAAAoB,SALnDH,KAACI,2BAAA,IAAAkK,kCAAA,EACW,UAAAjL,IACJ,MAAAM,IACCQ,OAAAA,OACF,MAAA,SACS,cAAAJ,IACd,GAAAhB,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAoB,OAAApB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAEA,QAAAiD,KAAAkO,MAAAA,MAAM;AAAChO,MAAAA;AAAAnD,IAAA0Y,CAAAA,MAAAA,KAAAlR,YAAAxH,EAAA,CAAA,MAAA0Y,KAAA5F,YAGN3P,KAAAuV,KAAIlR,SAAAiD,IAAAqO,CAAAA,OAAAiF,QAEA1c,2BAAA,IAAA,oBAAA,EACW,UAAA2O,CAAQ0I,CAAAA,KAAI5F,UACR,cAAA4F,KAAIlR,SAAUuW,MAAG,CAAI,GAAAjW,SAAY,SAEzCgR,MAAAA,MAAAA,GADDA,MAAKE,GACC,CAGhB,GAAChZ,EAAA,CAAA,IAAA0Y,KAAAlR,UAAAxH,EAAA,CAAA,IAAA0Y,KAAA5F,UAAA9S,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAA6E,MAAAA;AAAA7E,YAAAmD,MAVJ0B,KAAAxD,2BAAAA,IAACyZ,WACE3X,UAUH,GAAA,CAAA,GAAOnD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAA,SAAAhH,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAiD,MAAAjD,EAAA,EAAA,MAAA6E,MAvBXmC,KAAA3F,2BAAAA,IAAC0Z,wCAEG,QAAA9Z,IAQE,IAAAgC,IAEF,MAAA4B,GAaF,CAAA,GAAA7E,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAzBFgH;AAyBE;ACpJO2L,MAAAA,SAAOlR,wBAAO6I,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAxB,SAAS0T,gBACdC,OACAC,MACAC,OACA3K,QACsE;AACtE,QAAM4K,MAAM;AAAA,IACV5J,MAAMyJ,MAAMC,KAAK1J,OAAOyJ,MAAME,MAAM3J;AAAAA,IACpCsI,OAAOmB,MAAMC,KAAKpB,QAAQmB,MAAME,MAAMrB;AAAAA,EACxC,GAEMuB,eAAeH,KAAKlT,YAAY0H,wBAChC4L,gBAAgBH,MAAMnT,YAAY0H,wBAElC6L,eAAeC,KAAKC,IAAIP,KAAKzJ,YAAYiC,OAAU0H,IAAItB,QAAQwB,aAAa,GAC5EI,gBAAgBF,KAAKC,IAAIN,MAAM1J,YAAYiC,OAAU0H,IAAItB,QAAQuB,YAAY;AAG/EM,MAAAA,YAAYN,eAAeJ,MAAMC,KAAKpB;AACpC8B,QAAAA,iBAAiBX,MAAME,MAAMrB,QAAQ4B;AACvCC,cAAYC,mBACdD,YAAYC;AAIVC,MAAAA,YAAYZ,MAAME,MAAMrB,QAAQwB;AAC9BQ,QAAAA,gBAAgBP,eAAeN,MAAMC,KAAKpB;AAC5C+B,cAAYC,kBACdD,YAAYC;AAGd,QAAMC,UAAUP,KAAKC,IAAID,KAAKQ,IAAIxL,QAAQmL,SAAS,GAAGE,SAAS,GAEzDI,QAAQhB,MAAMC,KAAKpB,QAAQiC,SAC3BG,SAASjB,MAAME,MAAMrB,QAAQiC,SAE7BI,WAAYF,QAAQb,IAAItB,QAASsB,IAAI5J,MACrC4K,YAAaF,SAASd,IAAItB,QAASsB,IAAI5J;AAEtC,SAAA;AAAA,IAAC2K;AAAAA,IAAUF;AAAAA,IAAOG;AAAAA,IAAWF;AAAAA,EAAM;AAC5C;ACxCgBG,SAAAA,YAAYzK,aAA0B0K,IAA2B;AAC/E,QAAMC,OAAiB,CAAE;AAEzB,MAAIrT,IAAIoT;AAER,SAAOpT,MAAM0I,eAAa;AACxB,UAAM4K,gBAAgBtT,EAAEsT;AAEpB,QAAA,CAACA,cAAsBD,QAAAA;AAG3B,UAAMnU,QADWyE,MAAMC,KAAK0P,cAAcC,UAAU,EAC7BnK,QAAQpJ,CAAC;AAIhC,QAFAqT,KAAKG,QAAQtU,KAAK,GAEdoU,kBAAkB5K;AACb2K,aAAAA;AAGLC,QAAAA;AAAAA,EAAAA;AAGCD,SAAAA;AACT;ACxBA,MAAMI,aAAuB,CAAE;AAKfC,SAAAA,cAAchL,aAA0BiL,UAA+B;AAG/EpV,QAAAA,0BAAUqV,QAA+B;AAE/C,aAAW/M,WAAW8M;AACpBpV,QAAIsV,IAAIhN,SAASsM,YAAYzK,aAAa7B,OAAO,CAAC;AAG9CiN,QAAAA,qBAAqBA,CAACC,GAAgBC,MAAmB;AAC7D,UAAMC,KAAK1V,IAAIjK,IAAIyf,CAAC,KAAKN,YACnBS,KAAK3V,IAAIjK,IAAI0f,CAAC,KAAKP,YAEnBU,MAAM7B,KAAKQ,IAAImB,GAAGxd,QAAQyd,GAAGzd,MAAM;AAGzC,aAAS2d,IAAI,GAAGA,IAAID,KAAKC,KAAK,GAAG;AACzBC,YAAAA,SAASJ,GAAGG,CAAC,KAAK,IAClBE,SAASJ,GAAGE,CAAC,KAAK;AAExB,UAAIC,WAAWC;AACb,eAAOD,SAASC;AAAAA,IAAAA;AAIb,WAAA;AAAA,EACT;AAEAX,WAAS5P,KAAK+P,kBAAkB;AAClC;ACTO,SAASS,6BAAmD;AACjE,QAAMC,YAAuC,CAAA,GACvCb,WAA0B,CAC1Bc,GAAAA,aAAiBb,oBAAAA,QAAAA,GACjBc,0BAA0B,oBAAI7Q,IAAiB,GAC/CkO,QAAkC,CAAC;AAGrCrJ,MAAAA,cAAkC,MAClCiM,YAAY,GACZ3L,kBAAsC,MACtC4L,gBAAgB,oBAAIC,IAAiC,GACrDC,WAAW;AAEf,WAASlM,SAAS/B,SAAsB;AACtC6N,4BAAwBK,IAAIlO,OAAO,GAE/BmC,oBAAoBnC,YACtBmC,kBAAkB,OAGpBgM,iBAAiB;AAAA,EAAA;AAGnB,WAASjM,OAAOlC,SAAsB;AACpC6N,4BAAwBO,OAAOpO,OAAO,GAEtCmC,kBAAkBnC,SAElBmO,iBAAiB;AAAA,EAAA;AAGV/L,WAAAA,MAAMpC,SAAsBqO,SAAyB;AAC5DT,WAAAA,WAAWZ,IAAIhN,SAAS;AAAA,MAAC,GAAGqO;AAAAA,MAASC,UAAUD;AAAAA,IAAQ,CAAA,GAEvDvB,SAAS/T,KAAKiH,OAAO,GAEjB6B,eACFgL,cAAchL,aAAaiL,QAAQ,GAGrC5K,OAAOlC,OAAO,GAEP,MAAM;AACLgL,YAAAA,MAAM8B,SAASvK,QAAQvC,OAAO;AAEhCgL,YAAM,MACR8B,SAASyB,OAAOvD,KAAK,CAAC,GAGxB4C,WAAWQ,OAAOpO,OAAO,GAEzBmO,iBAAiB;AAAA,IACnB;AAAA,EAAA;AAIOlO,WAAAA,OAAOlL,MAAgCyZ,aAA0B/N,QAAgB;AAClFgO,UAAAA,YAAY3B,SAASvK,QAAQiM,WAAW,GACxCE,cAAcd,WAAWngB,IAAI+gB,WAAW;AAE9C,QAAI,CAACE,YAAa;AAEZC,UAAAA,eAAe7B,SAAS2B,YAAY,CAAC,GACrCG,eAAehB,WAAWngB,IAAIkhB,YAAY;AAEhD,QAAKC,cAoBL;AAAA,UAlBI7Z,SAAS,YACXkZ,WAAW,IAEX/C,MAAMC,OAAO;AAAA,QACXnL,SAASwO;AAAAA,QACT/M,MAAMiN,YAAYjN,QAAQ;AAAA,QAC1BsI,OAAOyE,YAAYK;AAAAA,MAAAA,GAGrB3D,MAAME,QAAQ;AAAA,QACZpL,SAAS2O;AAAAA,QACTlN,MAAMmN,aAAanN,QAAQ;AAAA,QAC3BsI,OAAO4E,aAAaE;AAAAA,MAAAA,GAGtBV,qBAGEpZ,SAAS,UAAUmW,MAAMC,QAAQD,MAAME,OAAO;AAChD2C,4CAAoBC,IAAiC;AAE/C,cAAA;AAAA,UAAC9B;AAAAA,UAAOC;AAAAA,UAAQC;AAAAA,UAAUC;AAAAA,QAAapB,IAAAA,gBAC3CC,OACAwD,aACAE,cACAnO,MACF;AAGAsN,sBAAcf,IAAIwB,aAAa;AAAA,UAAC/M,MAAM2K;AAAAA,UAAUrC,OAAOmC;AAAAA,QAAAA,CAAM,GAC7D6B,cAAcf,IAAI2B,cAAc;AAAA,UAAClN,MAAM4K;AAAAA,UAAWtC,OAAOoC;AAAAA,QAAO,CAAA,GAEhEgC,iBAAiB;AAAA,MAAA;AAGnB,UAAIpZ,SAAS,OAAO;AACP,mBAAA;AAEL+Z,cAAAA,iBAAiBf,cAActgB,IAAI+gB,WAAW,GAC9CO,kBAAkBhB,cAActgB,IAAIkhB,YAAY;AAGtDf,mBAAWZ,IAAIwB,aAAa;AAAA,UAC1B,GAAGE;AAAAA,UACHnN,iBAAiB;AAAA,UACjBC,iBAAiBkN,YAAYhN,YAAYiC;AAAAA,UACzClC,MAAMqN,gBAAgBrN,QAAQiN,YAAYjN;AAAAA,QAAAA,CAC3C,GAGDmM,WAAWZ,IAAI2B,cAAc;AAAA,UAC3B,GAAGC;AAAAA,UACHrN,iBAAiB;AAAA,UACjBC,iBAAiBkN,YAAYhN,YAAYiC;AAAAA,UACzClC,MAAMsN,iBAAiBtN,QAAQmN,aAAanN;AAAAA,QAAAA,CAC7C,GAGDsM,gBAAgB,oBAAIC,OAGpB,OAAO9C,MAAMC,MACb,OAAOD,MAAME,OAEb+C,iBAAiB;AAAA,MAAA;AAAA,IACnB;AAAA,EAAA;AAGF,WAASrM,eAAekN,iBAAqC;AAC7CA,kBAAAA;AAAAA,EAAAA;AAGhB,WAASC,aAAaC,eAAuB;AAC3CpB,gBAAYoB,eACZf,iBAAiB;AAAA,EAAA;AAGnB,WAASgB,UAAUC,UAAmC;AAC1CrW,WAAAA,UAAAA,KAAKqW,QAAQ,GAEhB,MAAM;AACLpE,YAAAA,MAAM2C,UAAU5U,KAAKqW,QAAQ;AAE/BpE,YAAM,MACR2C,UAAUY,OAAOvD,KAAK,CAAC;AAAA,IAE3B;AAAA,EAAA;AAGK,SAAA;AAAA,IAACjJ;AAAAA,IAAUG;AAAAA,IAAQE;AAAAA,IAAOnC;AAAAA,IAAQ6B;AAAAA,IAAgBmN;AAAAA,IAAcE;AAAAA,EAAS;AAGhF,WAAShB,mBAAmB;AAC1B,QAAI,CAACL,UAAW;AAIhB,UAAMuB,YAA2B,CAAE;AACnC,eAAWrP,WAAW8M;AAChB9M,kBAAYmC,mBACdkN,UAAU1C,QAAQ3M,OAAO;AAGzBmC,uBACFkN,UAAU1C,QAAQxK,eAAe;AAGnC,UAAMmN,UAAU,oBAAIvC,QAA+B,GAC7CO,MAAM+B,UAAUzf,QAChB2f,cAAcF,UAAU,CAAC,GACzBG,kBAAkBlC,MAAM,KAAK5N;AAEnC,QAAI+P,eAAe3B,YAAY0B;AAE/B,eAAWxP,WAAWqP,WAAW;AACzBhB,YAAAA,UAAUT,WAAWngB,IAAIuS,OAAO;AAEtC,UAAI,CAACqO;AACH;AAGIpW,YAAAA,WAAWoW,QAAQ9M,mBAAmB8M,QAAQpW,YAAY0H,wBAC1D+C,SAAS1C,YAAYuP,aAIrBG,gBAAgB7B,wBAAwB8B,IAAI3P,OAAO,GAEnD4P,gBAAgB3X,WAAWwX,cAE3BzN,YAAYU,SAAS,KAAQgN,iBAAiBE,eAE9CC,aAAa9B,cAActgB,IAAIuS,OAAO;AAG5CsP,cAAQtC,IAAIhN,SAAS;AAAA,QACnBA;AAAAA,QACAgC;AAAAA,QACAT,iBAAiBsO,YAAY9F,SAASsE,QAAQ9M;AAAAA,QAC9CC,iBAAiBqO,YAAY9F,SAASsE,QAAQ7M;AAAAA,QAC9CC,MAAMoO,YAAYpO,QAAQ4M,QAAQ5M,QAAQ;AAAA,MAAA,CAC3C,GAGGO,YACFyN,gBAAgB/P,uBAEhB+P,gBAAgBxX,WAAWyH;AAAAA,IAAAA;AAI/B,UAAMlN,QAAoB,CAAE;AAE5B,eAAWwN,WAAW8M,UAAU;AACxBgD,YAAAA,OAAOR,QAAQ7hB,IAAIuS,OAAO;AAE5B8P,cAAMtd,MAAMuG,KAAK+W,IAAI;AAAA,IAAA;AAG3B,eAAWV,YAAYzB;AACZ,eAAA;AAAA,QACPxL,iBAAiBA,mBAAmB2K,SAASA,SAASld,SAAS,CAAC,KAAK;AAAA,QACrE4C;AAAAA,QACAyb;AAAAA,MAAAA,CACD;AAAA,EAAA;AAGP;AC9OO,SAAA8B,WAAA/iB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAAuH,MAAAA,UAAAwD,UAAA+X,YAAAC,UAAA3O;AAAArU,WAAAD,SAKL;AAAA,IAAAyH;AAAAA,IAAAwD;AAAAA,IAAA+X;AAAAA,IAAAC;AAAAA,IAAA,GAAA3O;AAAAA,EAAAA,IAAiEtU,OAAKC,OAAAD,OAAAC,OAAAwH,UAAAxH,OAAAgL,UAAAhL,OAAA+iB,YAAA/iB,OAAAgjB,UAAAhjB,OAAAqU,cAAA7M,WAAAxH,EAAA,CAAA,GAAAgL,WAAAhL,EAAA,CAAA,GAAA+iB,aAAA/iB,EAAA,CAAA,GAAAgjB,WAAAhjB,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA;AACtE,QAAA,CAAAijB,UAAA,IAAqBrR,MAAA1G,SAAAA,OAA2C,GAChE,CAAA0J,aAAAC,cAAA,IAAsCjD,mBAAoC,GAE1EkL,QADiBH,GAAAA,eAAe/H,WAAW,GACrBkI,SAAY,GAClC/H,YAAkB+H,UAAKlS,UAAc,CAAKI,WAAQJ,SAAekS,QAAQ9R;AAAQ1K,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC7BzC,KAAA;AAAA,IAAA4U,iBAAA;AAAA,IAAA3P,OAAA,CAAA;AAAA,IAAAyb,UAAA;AAAA,EAAA,GAInDhhB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA,CAAAwF,QAAA0d,QAAA,IAA0BtR,MAAAA,SAA0BtR,EAInD;AAAC,MAAAM,IAAAI;AAAAhB,IAAAijB,CAAAA,MAAAA,cAAAjjB,SAAA4U,eAGQhU,KAAAA,MAAMqiB,WAAUpO,eAAgBD,WAAW,GAAG5T,KAAA,CAACiiB,YAAYrO,WAAW,GAAC5U,OAAAijB,YAAAjjB,OAAA4U,aAAA5U,OAAAY,IAAAZ,QAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,EAAA,IAAjFuS,MAAAA,UAAU3R,IAA8CI,EAAyB;AAAC,MAAAC,IAAAgC;AAAAjD,IAAAijB,EAAAA,MAAAA,cAAAjjB,UAAA8c,SAGxE7b,KAAAA,MAAMgiB,WAAUjB,aAAclF,KAAK,GAAG7Z,KAAA,CAACggB,YAAYnG,KAAK,GAAC9c,QAAAijB,YAAAjjB,QAAA8c,OAAA9c,QAAAiB,IAAAjB,QAAAiD,OAAAhC,KAAAjB,EAAA,EAAA,GAAAiD,KAAAjD,EAAA,EAAA,IAAnEuS,MAAAA,UAAUtR,IAAsCgC,EAAmB;AAAC,MAAAE,IAAA0B;AAAA7E,YAAAijB,cAG1D9f,KAAAA,MAAM8f,WAAUf,UAAWgB,QAAQ,GAAGre,MAACoe,UAAU,GAACjjB,QAAAijB,YAAAjjB,QAAAmD,IAAAnD,QAAA6E,OAAA1B,KAAAnD,EAAA,EAAA,GAAA6E,KAAA7E,EAAA,EAAA,IAA5DuS,MAAAA,UAAUpP,IAAsC0B,EAAY;AAAC,MAAAmC,IAAAC;AAAAjH,IAAA+U,EAAAA,MAAAA,aAAA/U,UAAA+iB,cAAA/iB,EAAA,EAAA,MAAAgjB,YAGnDhc,KAAAA,MAAA;AACJ+N,kBAASnK,WACTmK,aAAagO,cAAYA,WACzB,GAAA,CAAChO,aAAaiO,YAAUA;EAAS,GACpC/b,KAAC8N,CAAAA,WAAWgO,YAAYC,QAAQ,GAAChjB,QAAA+U,WAAA/U,QAAA+iB,YAAA/iB,QAAAgjB,UAAAhjB,QAAAgH,IAAAhH,QAAAiH,OAAAD,KAAAhH,EAAA,EAAA,GAAAiH,KAAAjH,EAAA,EAAA,IAJpCuS,MAAAA,UAAUvL,IAIPC,EAAiC;AAAC,MAAAC,IAAAE;AAAApH,YAAA+U,aAAA/U,EAAAijB,EAAAA,MAAAA,WAAAnO,YAAA9U,EAAAijB,EAAAA,MAAAA,WAAAhO,UAAAjV,EAAAijB,EAAAA,MAAAA,WAAA9N,SAAAnV,EAAAijB,EAAAA,MAAAA,WAAAjQ,UAAAhT,EAAAwF,EAAAA,MAAAA,OAAA0P,mBAAAlV,EAAAwF,EAAAA,MAAAA,OAAAD,SAAAvF,EAAAwF,EAAAA,MAAAA,OAAAwb,YAI5B5Z,MAAA;AAAA,IAAA0N,UACKmO,WAAUnO;AAAAA,IAAAC;AAAAA,IAAAE,QAEZgO,WAAUhO;AAAAA,IAAAC,iBACD1P,OAAK0P;AAAAA,IAAAC,OACf8N,WAAU9N;AAAAA,IAAA5P,OACVC,OAAKD;AAAAA,IAAAyN,QACJiQ,WAAUjQ;AAAAA,IAAAgO,UACRxb,OAAKwb;AAAAA,EAAAA,GAChBhhB,QAAA+U,WAAA/U,EAAA,EAAA,IAAAijB,WAAAnO,UAAA9U,EAAA,EAAA,IAAAijB,WAAAhO,QAAAjV,EAAA,EAAA,IAAAijB,WAAA9N,OAAAnV,EAAA,EAAA,IAAAijB,WAAAjQ,QAAAhT,EAAA,EAAA,IAAAwF,OAAA0P,iBAAAlV,EAAA,EAAA,IAAAwF,OAAAD,OAAAvF,EAAA,EAAA,IAAAwF,OAAAwb,UAAAhhB,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAAAkH,KATME;AADT,QAAA+b,aAA2Cjc,IAmBrBI,MAAAyN,YAAY,KAAEnK,QAEfhB,MAAApE,OAAKwb,WAAY,KAAEpW,QAGpBV,MAAA4S,QAAQ,KAAElS;AAAYR,MAAAA;AAAApK,IAAAwH,EAAAA,MAAAA,YAAAxH,EAAA,EAAA,MAAAqU,aAAArU,EAAAsH,EAAAA,MAAAA,OAAAtH,EAAA,EAAA,MAAA4J,OAAA5J,UAAAkK,OARtCE,qCAACuI,QACS,EAAA,WAAA,cACJ0B,GAAAA,WACY,kBAAA/M,KAED,iBAAAsC,KAGD,gBAAAM,KACT2K,KAAAA,gBAEJrN,SACH,CAAA,GAAOxH,QAAAwH,UAAAxH,QAAAqU,WAAArU,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAA,SAAArK,EAAAmjB,EAAAA,MAAAA,cAAAnjB,UAAAoK,OAbTC,MAAAhJ,2BAAAA,IAAAuE,YAAAA,kBAAA,UAAA,EAAmCud,OAAAA,YACjC/Y,UAAAA,IAaF,CAAA,GAA6BpK,QAAAmjB,YAAAnjB,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA,GAd7BqK;AAc6B;AA/D1B,SAAAa,UAAA;AAAA,SAM+BuV,2BAA2B;AAAC;ACvB3D,SAAS2C,iBAAiB1K,MAA6D;AAC5F,UAAQA,KAAK5Q,SAAS,UAAU4Q,KAAK5Q,SAAS,YAAY4Q,KAAK2K;AACjE;AAEaC,MAAAA,sBAAsBC,wBAAOH,gBAAgB;AAEnD,SAASI,iBAAiBpd,QAKb;AACZ,QAAA;AAAA,IAACqd,eAAe,CAAE;AAAA,IAAEC;AAAAA,IAAWC;AAAAA,EAAAA,IAAkBvd,QAEjDmU,QAAyB,CAAE;AAEjC,MAAIqJ,YAAY;AAEhB,WAAStD,IAAI,GAAGA,IAAImD,aAAa9gB,QAAQ2d,KAAK,GAAG;AACzCL,UAAAA,IAAIwD,aAAanD,CAAC;AAElBxU,UAAAA,KAAK+X,6BAA6B5D,GAAG,GAAGK,CAAC,IAAIL,EAAEnY,IAAI,EAAE,CAAC;AAAA,EAAA;AAG9D8b,eAAarJ,MAAM5X;AAEnB,QAAMmhB,SAA2B,CAAE;AAEnC,aAAWC,aAAaJ;AACRG,WAAOzO,KAAM2O,CAAMA,MAAAA,EAAEhL,QAAQ+K,UAAU5d,EAAE,KAGrD2d,OAAOhY,KAAK;AAAA,MACVhE,MAAM;AAAA,MACNkR,KAAK+K,UAAU5d;AAAAA,MAEfqB,UAAU,CAAE;AAAA,MACZkO,UAAU;AAAA,MACV2N,gBAAgB;AAAA,MAChBjiB,OAAO2iB,UAAU3iB;AAAAA,MACjB6iB,MAAMF,UAAUE;AAAAA,IAAAA,CACjB;AAIL,QAAMC,iBAAkC,CAAE;AAE1C,WAAS5D,IAAI,GAAGA,IAAIoD,UAAU/gB,QAAQ2d,KAAK,GAAG;AACtClX,UAAAA,OAAOsa,UAAUpD,CAAC;AAEpB6D,QAAAA,QAAQ/a,KAAK+a,SAASL,OAAOzO,KAAM2O,CAAMA,MAAAA,EAAEhL,QAAQ5P,KAAK+a,KAAK;AAE7D/a,SAAK+a,SAAS,CAACA,UACjBA,QAAQ;AAAA,MACNrc,MAAM;AAAA,MACNkR,KAAK5P,KAAK+a;AAAAA,MAEVzO,UAAU;AAAA,MACVnS,MAAM6F,KAAK7F;AAAAA,MACXnC,OAAOgI,KAAK+a;AAAAA,MACZ3c,UAAU,CAAE;AAAA,MACZ6b,gBAAgB;AAAA,IAAA,GAElBS,OAAOhY,KAAKqY,KAAK,IAGfA,QACFA,MAAM3c,SAASsE,KAAK;AAAA,MAClBhE,MAAM;AAAA,MACNkR,KAAK,GAAG4K,YAAYtD,CAAC;AAAA,MAErB7G,QAAQrQ,KAAKgb;AAAAA,MACb7gB,MAAM6F,KAAK7F;AAAAA,MACX8V,QAAQjQ,KAAKiQ;AAAAA,MACbQ,UAAUA,MAAMzT,OAAOie,cAAcjb,IAAI;AAAA,MACzCia,gBAAgBja,KAAKkb,gBAAgB;AAAA,MACrC5P,UAAUtL,KAAKsL;AAAAA,MACftT,OAAOgI,KAAKhI;AAAAA,MACZ6iB,MAAM7a,KAAK6a;AAAAA,MACXnS,MAAM1I,KAAK0I;AAAAA,IAAAA,CACZ,IAEDoS,eAAepY,KAAK;AAAA,MAClBhE,MAAM;AAAA,MACNkR,KAAK,GAAG4K,YAAYtD,CAAC;AAAA,MAErB7G,QAAQrQ,KAAKgb;AAAAA,MACb7gB,MAAM6F,KAAK7F;AAAAA,MACX8V,QAAQjQ,KAAKiQ;AAAAA,MACbQ,UAAUA,MAAMzT,OAAOie,cAAcjb,IAAI;AAAA,MACzCia,gBAAgBja,KAAKkb,gBAAgB;AAAA,MACrC5P,UAAUtL,KAAKsL;AAAAA,MACftT,OAAOgI,KAAKhI;AAAAA,MACZ6iB,MAAM7a,KAAK6a;AAAAA,MACXnS,MAAM1I,KAAK0I;AAAAA,IAAAA,CACZ;AAAA,EAAA;AAIL,SAAO,CAAC,GAAGoS,gBAAgB,GAAGJ,QAAQ,GAAGvJ,KAAK;AAChD;AAEA,SAASsJ,6BAA6B5D,GAAgCjH,KAA4B;AAC5FiH,SAAAA,EAAEnY,SAAS,YACN;AAAA,IACLA,MAAM;AAAA,IACNkR;AAAAA,EAAAA,IAIAiH,EAAEnY,SAAS,UACN;AAAA,IACLA,MAAM;AAAA,IACNkR;AAAAA,IAEAxR,UAAUyY,EAAEzY,SAASiD,IAAI,CAACqO,OAAOyL,aAC/BV,6BAA6B/K,OAAO,GAAGE,GAAG,IAAIuL,QAAQ,IAAIzL,MAAMhR,IAAI,EAAE,CACxE;AAAA,IACAgL,UAAUmN,EAAEnN;AAAAA,IACZ4C,UAAUuK,EAAEvK,YAAY;AAAA,IACxBnS,MAAM0c,EAAE1c;AAAAA,IACRnC,OAAO6e,EAAE7e;AAAAA,IACT6iB,MAAMhE,EAAEgE;AAAAA,IACRZ,gBAAgBpD,EAAEoD,kBAAkB;AAAA,EAAA,IAIjC;AAAA,IACLvb,MAAM;AAAA,IACNkR;AAAAA,IACAK,QAAQ4G,EAAE5G;AAAAA,IACVvG,UAAUmN,EAAEnN;AAAAA,IACZvP,MAAM0c,EAAE1c;AAAAA,IACRoW,WAAWsG,EAAEtG;AAAAA,IACbE,UAAUoG,EAAEpG;AAAAA,IACZwJ,gBAAgBpD,EAAEoD,kBAAkB;AAAA,IACpC3O,UAAUuL,EAAEvL;AAAAA,IACZtT,OAAO6e,EAAE7e;AAAAA,IACT6iB,MAAMhE,EAAEgE;AAAAA,IACRnS,MAAMmO,EAAEnO;AAAAA,EACV;AACF;AC5IO,MAAM0S,eAAexf,MAAAA,WAAW,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA;AAAA,MAAAoZ,QAAAhF;AAAArU,WAAAD,SAOrC;AAAA,IAAAsZ;AAAAA,IAAA,GAAAhF;AAAAA,EAAAA,IAA+BtU,OAAKC,OAAAD,OAAAC,OAAAqZ,QAAArZ,OAAAqU,cAAAgF,SAAArZ,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA;AAAA,MAAAM,IAAAM;AAAAZ,IAAAqZ,CAAAA,MAAAA,OAAAjT,UAAApG,EAAA,CAAA,MAAAqZ,OAAAvR,QAKhClH,KAAAoE,MAAA,WAAA,SAAAwD,WAAAic,SAAA;AAKI,WAAApjB,2BAAA,IAACqjB,SAAU,YAAA,EAAA,GAAKlc,WAAmB,QAAA6Q,OAAMvR,MAAe,QAAAuR,OAAMjT,QAAcqe,KAAM,QAAK,CAAA;AAAA,EAAA,CAE1F,GAACzkB,EAAA,CAAA,IAAAqZ,OAAAjT,QAAApG,EAAA,CAAA,IAAAqZ,OAAAvR,MAAA9H,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAPFM;AAHJ,QAAA+jB,OAAarkB;AAYZU,MAAAA;AAAA,SAAAhB,EAAA2kB,CAAAA,MAAAA,QAAA3kB,SAAAD,MAAA+S,YAAA9S,EAAAiF,CAAAA,MAAAA,OAAAjF,SAAAqU,aAEMrT,KAAAjB,MAAK+S,WACVzR,2BAAA,IAACkK,0BAAW8I,QAAAA,EAAAA,GAAAA,WAAc,IAAA,KAAS,MAAA,QAAqB,iBAAA,QAAS,IAEjEhT,2BAAA,IAACkK,0BAAM,QAAA,EAAA,GAAK8I,WAAesQ,IAAG,MAAW,WAAA,KAAS,IAAA,CACnD,GAAA3kB,OAAA2kB,MAAA3kB,EAAA,CAAA,IAAAD,MAAA+S,UAAA9S,OAAAiF,KAAAjF,OAAAqU,WAAArU,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAJMgB;AAIN,CACF;ACnBM,SAAA4jB,sCAAAtkB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA+C;AAAA,IAAA4kB;AAAAA,IAAA5a;AAAAA,IAAAoS;AAAAA,IAAA7U;AAAAA,EAAAA,IAAAlH,IAMpDwkB,cAAoBC,OAAAA,kBACpB;AAAA,IAAArkB;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAAC,MAAA,CAE/CqlB,QAAM;AAAAjkB,QAAAA;AAAA,WAAAZ,SAAAwH,YACF5G,MAAAS,2BAAAA,IAAAE,WAAA,UAAA,YAAW,GAAIvB,OAAAwH,UAAAxH,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAfY;AAAAA,EAAAA;AAAeA,MAAAA;AAAAZ,IAAA,CAAA,MAAAiK,WAAAjK,EAAA8kB,CAAAA,MAAAA,eAAA9kB,EAAAqc,CAAAA,MAAAA,WAAArc,SAAAU,KAMlBE,KAAAyb,UACE3b,EAAE,uDAAuD,IAEzDW,2BAAAA,IAAC2jB,OAAwC/a,gCAAAA,EAAAA,SAAsB6a,aAChE,GAAA9kB,OAAAiK,SAAAjK,OAAA8kB,aAAA9kB,OAAAqc,SAAArc,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAwH,YAMHxG,KAAqBK,2BAAAA,IAAA,SAAR,UAAE,GAAMrB,OAAAwH,UAAAxH,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAY,CAAAA,MAAAA,MAAAZ,UAAAgB,MAZvBC,KAACI,2BAAA,IAAA6B,0BAAA,SAAA,EAEG,SAAAtC,IAMF,QAAA,IAIAI,UAAAA,GAAAA,CACF,GAAUhB,OAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAbViB;AAaU;ACrBd,MAAMgkB,gBAA8B;AAAA,EAClC5M,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV,GAEM2M,YAAYA,CAChB9kB,QACA+kB,WACA/b,SACiC;AAC3Bgc,QAAAA,WAAWD,UAAU9P,KAAM3U,CAAAA,MAAMA,EAAEyF,OAAOiD,KAAKic,UAAU,GAAG5kB;AAC9D,MAAA,CAAC2kB,SAAiB,QAAA;AAEtB,QAAME,aAAa;AAAA,IACjB1d,UAAUwB,KAAKic;AAAAA,IACfvd,MAAMsd;AAAAA,IACNjf,IAAIiD,KAAKmc;AAAAA,EACX;AAEO,SAAA;AAAA,IACLzd,MAAM;AAAA,IACN1B,QAAQgD,KAAKoc,aAAa,CAACF,YAAYlc,KAAKoc,UAAU,IAAIF;AAAAA,EAC5D;AACF;AAMO,SAAAG,uBAAAnlB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAgC;AAAA,IAAAylB;AAAAA,EAAAA,IAAAplB,IACrCF,SAAeC,OAAAA,UACf8kB,GAAAA,YAAkBQ,uBAElB;AAAA,IAAAjlB;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAA0lB,CAAAA,MAAAA,iBAAA1lB,SAAAmlB,aACjBvkB,KAAA,CAAA,GAAI8kB,eAAa,GAAKP,SAAS,GAACnlB,OAAA0lB,eAAA1lB,OAAAmlB,WAAAnlB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAnE2Y,QAAAA,cAAoBC,sBAAehY,EAAgC;AAACI,MAAAA;AAAAhB,WAAA0lB,iBAEe1kB,KAAA;AAAA,IAAA0kB;AAAAA,EAAA,GAElF1lB,OAAA0lB,eAAA1lB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA,CAAA4lB,qBAAAC,4BAAA,IAA4DC,OAAAA,uBAAuB9kB,EAElF;AAACC,MAAAA;AAGAA,OACE,CAAC4kB,gCACDD,qBAAmBG,MAAA7a,OAAA;AAHvB,QAAA8a,iBAAuB/kB;AAKgCgC,MAAAA;AAAA,OAAA;AAAA,QAAA,CAGhD2iB,qBAAmB;AAAAziB,UAAAA;AAAAnD,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAASI,MAAA,CAAEnD,GAAAA,OAAAmD,OAAAA,MAAAnD,EAAA,CAAA,GAATiD,KAAOE;AAAEkT,YAAAA;AAAAA,IAAAA;AAAAlT,QAAAA;AAAAnD,aAAA4lB,uBAC5BziB,MAAAyiB,oBAAmBK,OAAA9V,WAM1B,CAAA,GAACnQ,OAAA4lB,qBAAA5lB,OAAAmD,OAAAA,MAAAnD,EAAA,CAAA,GANDiD,KAAOE;AAAAA,EAAAA;AAFT,QAAA+iB,kBAAwBjjB;AASC,MAErB+iB,gBAAc;AAAA7iB,QAAAA;AAAAnD,aAAAU,KAQEyC,MAAAzC,EAAE,gDAAgD,GAACV,OAAAU,GAAAV,OAAAmD,OAAAA,MAAAnD,EAAA,CAAA;AAAA6E,QAAAA;AAAA7E,cAAAmD,OADjE0B,MAACxD,2BAAA,IAAAkK,0BACa,QAAA,EAAA,cAAApI,KACNgjB,MAAAA,MAAAA,SACM,eAAA,wBACZ,UAAA,IACK,MAAA,SAES,cAAA,KACd,CAAA,GAAAnmB,QAAAmD,KAAAnD,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA;AAAAgH,QAAAA;AAAA,WAAAhH,EAAA6lB,EAAAA,MAAAA,gCAAA7lB,UAAA6E,OAbJmC,qCAAC,uCACS,EAAA,SAAA,wBACR,QAAK,IACI6e,uCAEThhB,UAAAA,IAAAA,CASF,GAAwC7E,QAAA6lB,8BAAA7lB,QAAA6E,KAAA7E,QAAAgH,OAAAA,MAAAhH,EAAA,EAAA,GAdxCgH;AAAAA,EAAAA;AAkBA0e,MAAAA,cAAa/iB,WAAa,GAAA;AAC5ByjB,UAAAA,YAAkBV,cAAa,CAAA,GAE/B5S,WAAA,CADoBoT,gBAAgBE,UAASjgB,EAAA,GAChBkgB;AAASljB,QAAAA;AAAAnD,MAAAomB,EAAAA,MAAAA,aAAApmB,UAAAI,UAAAJ,EAAA,EAAA,MAAAmlB,aACvBhiB,MAAA+hB,UAAU9kB,QAAQ+kB,WAAWiB,SAAS,GAACpmB,QAAAomB,WAAApmB,QAAAI,QAAAJ,QAAAmlB,WAAAnlB,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA;AAAtD,UAAAqZ,SAAelW;AAAuC,QAAA,CACjDkW;AAAM,aAAA;AAAAxU,QAAAA;AAAA7E,MAAAomB,EAAAA,MAAAA,aAAApmB,UAAA2Y,eASO9T,MAAA8T,YAAYyN,SAAS,GAACpmB,QAAAomB,WAAApmB,QAAA2Y,aAAA3Y,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA;AAC5BgH,UAAAA,MAAAof,UAAS7iB,QAAA4iB,MAAAA;AAAgBlf,QAAAA;AAAAjH,MAAA8S,EAAAA,MAAAA,YAAA9S,UAAAU,KAKjBuG,MAAA6L,WAAQ,OAAA;AAAA,MAAArH,SAAoB/K,EAAE,uCAAuC;AAAA,IAAEV,GAAAA,QAAA8S,UAAA9S,QAAAU,GAAAV,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA;AAAAkH,QAAAA;AAAAlH,cAAA8S,YAAA9S,EAAAqZ,EAAAA,MAAAA,UAAArZ,EAAA,EAAA,MAAA6E,IAAAzD,SAAApB,EAAA,EAAA,MAAAgH,OAAAhH,UAAAiH,OAPvFC,qCAAC,cACa,EAAA,cAAArC,IAAsBzD,OAC5B,MAAA4F,KACEqS,QACH,MAAA,SACKvG,UACE,eAAA,wBACE,cAAA7L,IACd,CAAA,GAAAjH,QAAA8S,UAAA9S,QAAAqZ,QAAArZ,EAAA,EAAA,IAAA6E,IAAAzD,OAAApB,QAAAgH,KAAAhH,QAAAiH,KAAAjH,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA;AAAAoH,QAAAA;AAAA,WAAApH,EAAA8S,EAAAA,MAAAA,YAAA9S,UAAA6lB,gCAAA7lB,EAAA,EAAA,MAAAkH,OAbJE,MAAC/F,+BAAA,uCAAA,EACSyR,QAAO,UACN+S,SAAAA,8BACD,SAAA,wBAER3e,UAAAA,IASF,CAAA,GAAwClH,QAAA8S,UAAA9S,QAAA6lB,8BAAA7lB,QAAAkH,KAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAdxCoH;AAAAA,EAAAA;AAcwCjE,MAAAA;AAAAnD,YAAAU,KAWZyC,KAAAzC,EAAE,uCAAuC,GAACV,QAAAU,GAAAV,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,YAAAmD,MAJpE0B,oCAAC0G,0BACO4a,QAAAA,EAAAA,qBACD,MAAA,SACO,eAAA,8BACE,cAAA;AAAA,IAAA1a,SAAUtI;AAAAA,EACxB,EAAA,CAAA,GAAAnD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,MAAAA,EAAA2Y,EAAAA,MAAAA,eAAA3Y,EAAA6lB,EAAAA,MAAAA,gCAAA7lB,EAAAkmB,EAAAA,MAAAA,mBAAAlmB,UAAAI,UAAAJ,EAAA,EAAA,MAAAU,KAAAV,EAAA,EAAA,MAAA0lB,iBAAA1lB,EAAA,EAAA,MAAAmlB,WAAA;AAAAle,QAAAA;AAAAjH,cAAA2Y,eAAA3Y,EAAA6lB,EAAAA,MAAAA,gCAAA7lB,EAAAkmB,EAAAA,MAAAA,mBAAAlmB,EAAA,EAAA,MAAAI,UAAAJ,UAAAU,KAAAV,EAAA,EAAA,MAAAmlB,aAKmBle,MAAAA,CAAAmC,MAAAkd,cAAA;AAEjBC,YAAAA,aAAA,CADoBL,gBAAgB9c,KAAIjD,EAAA,GACXkgB,SAC7BG,WAAetB,UAAU9kB,QAAQ+kB,WAAW/b,IAAI,GAChDxB,WAAiBud,UAAS9P,KAAAiL,OAAaA,EAACna,OAAQiD,KAAIic,UAAW;AAC3D,UAAA,CAACzd,YAAQ,CAAKyR;AAAM,eAAA;AAExB,YAAAsL,OAAa3f,MAAAA,WAAAwD,CAAAA,WAAAic,YACX3R,aACgEzR,2BAAAA,IAAA,UAAA,EAAjD,MAAA,UAAS,UAAA,IAAQ,GAAKmH,WAAgBic,KAAM,aAEzDpjB,2BAAAA,IAACqjB,SAAAA,YAAU,EAAA,GACLlc,WACI,QAAA6Q,SAAMvR,MACN,QAAAuR,SAAMjT,QACTqe,KAAAA,QAAO,CAAA,CAGlB;AAEAE,WAAIlN,cAAe;AAEnB,YAAA;AAAA,QAAArW;AAAAA,UAAgBuX,YAAW;AAAA,QAAA,GACtBvP;AAAAA,QAAIhI,OAEAgI,KAAIhI,SAAUuX,YAAY/Q,QAAQ,EAACxG;AAAAA,MAAAA,CAC3C;AAAC,aAGCC,2BAAAA,IAAA,uCAAA,EACS,SAAA,wBAEAyR,QAAO,YACN+S,SAA2B,8BAEpC,UAAAxkB,2BAAA,IAACyY,oCACK6K,EAAAA,IAAG,MACE,WAAA7R,aAAW,WAAW,KACzB1R,MAAI,OAER,cAAA0R,aAAWpS,EAAE,gDAAgD,IAAIU,OAEzD0R,UAAAA,YACG,eAAA,wBAAwBwT,SAAS,GAElD,CAAA,EAAA,GAdOld,KAAIjD,EAcX;AAAA,IAEHnG,GAAAA,QAAA2Y,aAAA3Y,QAAA6lB,8BAAA7lB,QAAAkmB,iBAAAlmB,QAAAI,QAAAJ,QAAAU,GAAAV,QAAAmlB,WAAAnlB,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA,GA/CAgH,KAAA0e,cAAajb,IAAKxD,GA+ClB,GAACjH,QAAA2Y,aAAA3Y,QAAA6lB,8BAAA7lB,QAAAkmB,iBAAAlmB,QAAAI,QAAAJ,QAAAU,GAAAV,QAAA0lB,eAAA1lB,QAAAmlB,WAAAnlB,QAAAgH;AAAAA,EAAA;AAAAA,SAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,YAAAgH,MAhDJC,KAAA5F,2BAAAA,IAACyZ,WACE9T,UAgDH,GAAA,CAAA,GAAOhH,QAAAgH,IAAAhH,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAA,SAAAlH,EAAA6E,EAAAA,MAAAA,MAAA7E,UAAAiH,MA5DXC,oCAAC6T,0BAAAA,YAEG,EAAA,QAAAlW,IAOC,IAAA,eAED,MAAAoC,IAmDOge,SAAYA,cAAAA,CACrB,GAAAjlB,QAAA6E,IAAA7E,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA,GA/DFkH;AA+DE;AA3IC,SAAAiJ,SAAAsW,KAAAC,cAAA;AAsBKC,SAAAA,IAAAA,aAAUxgB,EAAA,IAAOwgB,cACdF;AAAG;AAvBX,SAAAvb,QAAAyb,YAAA;AAAA,SAc2CA,CAAAA,WAAUN;AAAA;ACpD5D,SAASO,cAAiB/lB,OAAmC;AAC3D,SAAOA,SAAU;AACnB;AAKA,MAAMgmB,aAAchmB,CAAmB,UAAA;AACrC,QAAMimB,aAAcC,CAAAA,MACd,OAAOA,KAAM,YAAY,CAACA,IAAUA,IACpClX,MAAMmX,QAAQD,CAAC,IAAUA,EAAEtc,IAAIqc,UAAU,IACtCG,OAAOC,QAAQH,CAAC,EAAE9W,KAAK,CAAC,CAACkX,IAAI,GAAG,CAACC,IAAI,MAAMD,KAAKE,cAAcD,MAAM,IAAI,CAAC;AAKlF,SAAOE,KAAKC,UAAUT,YAFHC,CAAAA,MAAeO,KAAKE,MAAMF,KAAKC,UAAUR,CAAC,CAAC,GAEnBlmB,KAAK,CAAC,CAAC;AACpD,GASa4mB,oBAAoBC,MAAAA,KAAK,SAA2B3nB,OAA+B;AACxF,QAAA;AAAA,IACJ4nB,2BAA2BC,yCAAyC5f,OAAAA;AAAAA,IACpE0b,YAAY1b,OAAAA;AAAAA,IACZ2b,iBAAiB3b,OAAAA;AAAAA,IACjB6f,iBAAiBC,OAAAA;AAAAA,EAAAA,IACf/nB,OAEEolB,YAAYQ,uBAEZoC,eAAeC,MAAAA,YAClB5e,CAAuB,SAAA;AACtB,QAAI,OAAOA,KAAKN,UAAW,YAAY,EAAEM,KAAKN,UAAU+e;AACtDI,aAAAA,QAAQxK,KAAK,0BAA0BrU,KAAKN,MAAM,GAC3C;AAGHof,UAAAA;AAAAA;AAAAA,MAEJ,OAAO9e,KAAKN,UAAW,aACnBM,KAAKN,SACL,OAAOM,KAAKN,UAAW,WACrB+e,eAAeze,KAAKN,MAAM,IAC1B;AAAA;AAER,WAAIof,WACFA,QAAQ9e,KAAKhD,MAAgC,GACtC,MAGF;AAAA,EAAA,GAET,CAACyhB,cAAc,CACjB,GAEMM,YAAYC,MAAAA,QAChB,MACE5E,iBAAiB;AAAA,IACfa,eAAe0D;AAAAA,IACfpE;AAAAA,IACAD,WAAWA,UAGRzY,OAAQ7B,YAASA,OAAKiQ,QAAQvR,SAAS,QAAQ;AAAA,EACnD,CAAA,GACH,CAACigB,cAAcpE,gBAAgBD,SAAS,CAC1C,GAEM2E,cAAcD,MAAAA,QAAQ,MAAMD,UAAUld,OAAOmY,gBAAgB,GAAG,CAAC+E,SAAS,CAAC,GAC3EG,mBAAmBF,cAAQ,MAAMD,UAAUld,OAAOqY,mBAAmB,GAAG,CAAC6E,SAAS,CAAC,GAEnFI,wCAAwCH,MAAAA,QAAQ,MAC7C1E,UACJjZ,IAAI,CAACrB,QAAMof,kBAAkB;AAC5B,QAAIpf,OAAKiQ,QAAQvR,SAAS,SAAiB,QAAA;AAErC,UAAA;AAAA,MAAC1B;AAAAA,QAAUgD,OAAKiQ;AAClB,QAAA,CAACjT,OAAe,QAAA;AAEdqiB,UAAAA,eAAe5Y,MAAMmX,QAAQ5gB,MAAM,IAAIA,OAAO,CAAC,IAAIA,QACnDsiB,iBAAiB7Y,MAAMmX,QAAQ5gB,MAAM,IAAIA,OAAO,CAAC,IAAIwE,QAKrDya,aAAaoD,aAAa7gB,YAAY6gB,aAAa3gB;AACrD,QAAA,CAACud,WAAmB,QAAA;AAGxB,UAAMzd,WAAWud,UAAU9P,KAAM3U,CAAMA,MAAAA,EAAEyF,OAAOkf,UAAU;AAEtD,QAAA,CAACzd,SAAiB,QAAA;AAEtB,UAAM2d,oBAAoBkD,aAAatiB;AAEhC,WAAA;AAAA,MACLiD,MAAAA;AAAAA,MACAxB;AAAAA,MACA8gB;AAAAA,MACAF;AAAAA,MACAjD;AAAAA,IACF;AAAA,EACD,CAAA,EACAta,OAAO2b,aAAa,EACpBnc,IAAI,CAAC;AAAA,IAAC8a,mBAAAA;AAAAA,IAAmBnc,MAAAA;AAAAA,IAAMxB,UAAAA;AAAAA,IAAU4gB,eAAAA;AAAAA,IAAeE,gBAAAA;AAAAA,EAAAA,OACI;AAAA,IACzDviB,IAAI,WAAWqiB,eAAa;AAAA,IAC5BjD,mBAAAA;AAAAA,IACAF,YAAYzd,WAASzB;AAAAA,IACrB2B,MAAM;AAAA,IACN1G,OAAOgI,OAAKhI,SAASwG,WAASxG;AAAAA,IAC9B6iB,MAAM7a,OAAK6a,QAAQrc,WAASqc;AAAAA,IAC5B1gB,MAAM6F,OAAK7F;AAAAA,IACXolB,aAAa/gB,WAAS+gB;AAAAA,IACtBnD,YAAYkD;AAAAA,IACZjoB,YAAYmH,WAASnH;AAAAA,EAIxB,EAAA,GACF,CAACijB,WAAWyB,SAAS,CAAC,GAEnByD,gCAAgCR,MAAAA,QAAQ,MAErCS,gBAAAA,QACL,CAAC,GAAGN,uCAAuC,GAAGX,sCAAsC,GACnFxe,CAAAA,WAASyd,WAAW,CAACzd,OAAKmc,mBAAmBnc,OAAKic,YAAYjc,OAAKoc,UAAU,CAAC,CACjF,GACC,CAAC+C,uCAAuCX,sCAAsC,CAAC;AAGhF,SAAAxkB,2BAAA,KAACd,GAAK,MAAA,EAAA,KAAK,GACRsmB,UAAAA;AAAAA,IAAAA,8BAA8BjmB,SAAS,KACrCtB,2BAAAA,IAAA,wBAAA,EAAuB,eAAeunB,+BACxC;AAAA,IAEAP,YAAY5d,IAAKiO,CAChB,SAAArX,2BAAA,IAAC,0BAAsC,KAAVqX,GAAAA,KAAKM,GAAgB,CACnD;AAAA,IAEAsP,iBAAiB3lB,SAAS,KAAMtB,2BAAAA,IAAA,uBAAA,EAAsB,OAAOinB,iBAAoB,CAAA;AAAA,EAAA,GACpF;AAEJ,CAAC;ACzJM,SAAAQ,kBAAA/oB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GACnD;AAAA,IAAAgE;AAAAA,IAAA3C;AAAAA,EAAAA,IAAwBd;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KASPzC,KAAA;AAAA,IAAAyoB,MAAO;AAAA,EAAA,GAAO/oB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAA,CAAA,MAAAa,MAAAN,SAClBK,KAAA;AAAA,IAAA8G,cAAe7G,MAAKN;AAAAA,EAAOP,GAAAA,EAAA,CAAA,IAAAa,MAAAN,OAAAP,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAU,CAAAA,MAAAA,KAAAV,SAAAY,MALvCI,KAAAK,2BAAAA,IAAA,QACE,UAACA,+BAAAmI,OAAAA,WAAA,EACI9I,GACK,SAAA,uCACI,YAAAJ,IACJ,QAAAM,GAAAA,CAEZ,EAAA,CAAA,GAAKZ,OAAAU,GAAAV,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAMS9B,KAAA;AAAA,IAAA8nB,MAAO;AAAA,EAAA,GAAO/oB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,IAAA,CAAA,MAAAa,MAAAkD,OAClBd,KAAA;AAAA,IAAAwE,YAAa5G,MAAKkD;AAAAA,EAAK/D,GAAAA,EAAA,CAAA,IAAAa,MAAAkD,KAAA/D,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,IAAAU,CAAAA,MAAAA,KAAAV,UAAAiD,MAJjCE,KAAC9B,2BAAA,IAAAmI,OAAA,WAAA,EACI9I,GACK,SAAA,0CACI,YAAAO,IACJ,QAAAgC,GAAAA,CACR,GAAAjD,OAAAU,GAAAV,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA,SAAA7E,EAAAwD,EAAAA,MAAAA,UAAAxD,UAAAgB,MAAAhB,EAAA,EAAA,MAAAmD,MAjBN0B,KAACxD,2BAAA,IAAAyD,6BAAA,EAEG,OAAA9D,IAUA,UAAAmC,IAQK,OAAA+H,SACC1H,QACR,GAAAxD,QAAAwD,QAAAxD,QAAAgB,IAAAhB,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GAtBF6E;AAsBE;AA3BC,SAAAqG,UAAA;AAAA,wCAyBaf,MAAqB,oBAAA,EAAA;AAAA;ACezB6e,SAAAA,oBACdzlB,MACA9C,YACAwoB,aAC4B;AAC5B,SAAI1lB,SAAS,KACJ,KAGFA,QAAS9C,cAAcA,WAAW8C,QAAS0lB,eAAe;AACnE;AAEO,SAAAC,SAAAnpB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAsD;AAAAA,IAAA4C;AAAAA,IAAA3C,QAAAlD;AAAAA,IAAA6oB;AAAAA,IAAA1oB;AAAAA,IAAAiU;AAAAA,IAAAtT;AAAAA,IAAAP;AAAAA,IAAAuoB;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAYIvpB,IAAAA,OATFyD,SAAAlD,OAAkBsK,SAAT,YAATtK,IAUFF,SAAeC,OAAU,UAAA,GACzByD,uBAA6BwE,OAAAA,wBAAAA,GAC7B;AAAA,IAAAxC,WAAAA;AAAAA,EAAAA,IAAoBiC,iBACpBK,mBAAyBC,2BAAoBlC,EAAE,GAC/CojB,gBAAsBvZ,CAAAA,EAAQvP,cAAcA,WAAU8H,QAASnI,OAAMI,IAAKC,WAAU8H,IAAK,IACzF,CAAAihB,SAAAC,UAAA,IAA8B7X,MAAAA,WAAuB;AAAChR,MAAAA;AAAA,OAAA;AAGhDC,QAAAA,SAAS6oB,uBAAiB7oB,KAAK,GAAC;AAC9B,UAAA,CAACJ,cAAU,CAAK8oB,eAAa;AAAAvoB,YAAAA;AAAAhB,iBAAAa,SACxBG,MAACK,2BAAA,IAAA,mBAAA,EAAyBR,MAAS,CAAA,GAAAb,OAAAa,OAAAb,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAA1CY,KAAOI;AAAmCqV,cAAAA;AAAAA,MAAAA;AAAArV,UAAAA;AAAAhB,QAAAuD,CAAAA,MAAAA,QAAAvD,SAAAS,cAMlCO,MAAAgoB,oBAAoBzlB,MAAM9C,YAAUkpB,MAAAA,YAAc,GAAC3pB,OAAAuD,MAAAvD,OAAAS,YAAAT,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,UAAAA;AAAAjB,eAAAoI,oBAAApI,EAAA8D,CAAAA,MAAAA,wBAAA9D,EAAAwD,CAAAA,MAAAA,UAAAxD,EAAA,CAAA,MAAAS,cAAAT,SAAAgB,OAAAhB,EAAA,EAAA,MAAAa,SAF3DI,MAACI,2BAAA,IAAA,iBAAA,EACuByC,sBAChB,MAAA9C,KACEwC,QACI/C,YACLI,OACGuH,UAAAA,iBACV,CAAA,GAAApI,OAAAoI,kBAAApI,OAAA8D,sBAAA9D,OAAAwD,QAAAxD,OAAAS,YAAAT,OAAAgB,KAAAhB,QAAAa,OAAAb,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GARJY,KACEK;AAQDoV,YAAAA;AAAAA,IAAAA;AAAArV,QAAAA;AAAAhB,MAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAOe/B,MAAA;AAAA,MAAA4oB,SAAA;AAAA,IAAA,GAAc5pB,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA;AAAAiB,QAAAA;AAAAjB,MAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAA1B9B,MAACI,2BAAA,IAAAK,GAAA,KAAA,EAAW,OAAAV,KACV,UAACK,2BAAAA,IAAAwB,GAAAA,MAAA,EAAK,OAAI,IAAQ,MAAA,GAChB,UAACxB,2BAAAA,IAAAwoB,MAAAA,kBAAA,CAAA,CAAgB,EACnB,CAAA,EACF,CAAA,GAAM7pB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA;AAAAiD,QAAAA;AAAAjD,MAAAuD,EAAAA,MAAAA,QAAAvD,UAAAS,cAEFwC,MAAA+lB,oBAAoBzlB,MAAM9C,YAAUqpB,MAAAA,UAAY,GAAC9pB,QAAAuD,MAAAvD,QAAAS,YAAAT,QAAAiD,OAAAA,MAAAjD,EAAA,EAAA;AAAAmD,QAAAA;AAAAnD,MAAAiD,EAAAA,MAAAA,OAAAjD,UAAAoB,SARzD+B,qCAAC2B,OAAAA,sBAEG,EAAA,QAAA7D,KAMI,MAAAgC,KACC,QAAA,WACA7B,MACP,CAAA,GAAApB,QAAAiD,KAAAjD,QAAAoB,OAAApB,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA,GAZJY,KACEuC;AAAAA,EAAAA;AApBJ,QAAA4mB,UAAgBnpB;AA0CdI,MAAAA;AAAAhB,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAE8B/B,KAAAkL,CAAA,MAAA;AAAA,QAC1BA,EAAC8d,SAAA;AACHP,mBAAgB;AAAC;AAAA,IAAA;AAInBA,iBAAe;AAAA,EAAA,GAChBzpB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAPD,QAAAma,cAAoBnZ;AAOdC,MAAAA;AAAAjB,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGI9B,KAAAA,MAAMwoB,aAAgB,GAACzpB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAA0U,YAAEzR,MAACyR,QAAQ,GAAC1U,QAAA0U,UAAA1U,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAA7CuS,MAAAA,UAAUtR,IAAyBgC,EAAU;AAG7C,QAAA,CAAAgnB,YAAAC,UAAA,IAAiCtY,MAAAA,WAAc,GAC/CuY,aAAmBvU,MAAAA,OAAA,IAAiD;AAACzS,MAAAA;AAAAnD,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAChCI,KAAAA,MAAA;AACzB0S,eAAAA,UAAWxD,WAAiB+X,MAAAA,MAAAA,gBAAsBF,MAAAA,WAAe,EAAA,CAAC,GAAC,GAAK;AAAA,EAAA,GACnFlqB,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAFD,QAAAqqB,mBAAyBlnB;AAEnB0B,MAAAA;AAAA7E,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC+B8B,KAAAA,MAAA;AAC/BslB,eAAUtU,WAAUvD,aAAa6X,WAAUtU,OAAQ,GACvDuU,sBAAsBF,MAAAA,WAAgB,EAAA,CAAC;AAAA,EAAA,GACxClqB,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAHDsqB,QAAAA,mBAAyBzlB,IAORmC,KAAa5F,aAAAA,KAAK,IAE3B6F,KAAAnB,YAYMoB,KAAAwN,YAAY8U;AAAOpiB,MAAAA;AAAApH,IAAA,EAAA,MAAAmG,MAAAnG,EAAAiqB,EAAAA,MAAAA,cAAAjqB,EAAAS,EAAAA,MAAAA,cAAAT,UAAAa,SAM5BuG,MAAA6iB,cAAcxpB,YAAU8H,QAAU1H,SAAS6oB,MAAiB7oB,iBAAAA,KAAK,KAChEQ,+BAAC,qBAAgC8E,EAAAA,YAAAA,IAAkB,cAAA1F,WAAU8H,KAC9D,CAAA,GAAAvI,QAAAmG,IAAAnG,QAAAiqB,YAAAjqB,QAAAS,YAAAT,QAAAa,OAAAb,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAA,SAAAtH,EAAAmG,EAAAA,MAAAA,MAAAnG,UAAAopB,UAAAppB,EAAA,EAAA,MAAAqpB,gBAAArpB,UAAAspB,aAAAtpB,EAAAmpB,EAAAA,MAAAA,WAAAnpB,UAAA+pB,WAAA/pB,EAAA,EAAA,MAAAoH,OAAApH,EAAAgH,EAAAA,MAAAA,MAAAhH,EAAA,EAAA,MAAAiH,MAAAjH,UAAAkH,MAvBHI,MAAAlE,2BAAA,KAACqF,sBACc,eAAAzB,IACb,sBAAmB,IACf,IAAAC,IAEKd,aACD,WAAA,KACAijB,QACMC,cACHC,WACFnP,SAAAA,aACKkQ,cAAe,kBACfC,gCACLnB,SACD,QAAC,GACC,UAAAjiB,IACH,QAAA,UACG,cACL,MAAA,WAEE,UAAA;AAAA,IAAA;AAAA,IACNE;AAAAA,EAAAA,GAGH,GAAcpH,QAAAmG,IAAAnG,QAAAopB,QAAAppB,QAAAqpB,cAAArpB,QAAAspB,WAAAtpB,QAAAmpB,SAAAnpB,QAAA+pB,SAAA/pB,QAAAoH,KAAApH,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,IAAAlH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAxBdsH;AAwBc;AAIlB,SAAAijB,oBAAAxqB,OAAA;AACE,QAAA;AAAA,IAAA0H;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC3H;AAEtB0H,SAAAA,oBAAAA,YAAYC,YAAY,GAAC;AAAA;AAIxC6iB,oBAAoB9S,cAAc;ACpKrB+S,MAAAA,8BAA8B9C,MAAAA,KAAK3nB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAC9C;AAAA,IAAAgc;AAAAA,IAAAzU;AAAAA,IAAAijB;AAAAA,IAAAC;AAAAA,IAAAvG;AAAAA,EAAAA,IAAkEpkB;AAAKO,MAAAA;AAAAN,SAAAA,EAAAyqB,CAAAA,MAAAA,eAAAzqB,EAAA,CAAA,MAAAic,WAAAjc,EAAAwH,CAAAA,MAAAA,YAAAxH,EAAA,CAAA,MAAAmkB,SAAAnkB,SAAA0qB,oBAGrEpqB,KAACe,2BAAA,IAAAspB,+BAAA,EACUD,SAAe,kBACjBzO,OAAAA,SACDwO,MAAU,aACTtG,OAEC,SACV,CAAA,GAAyBnkB,OAAAyqB,aAAAzqB,OAAAic,SAAAjc,OAAAwH,UAAAxH,OAAAmkB,OAAAnkB,OAAA0qB,kBAAA1qB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAPzBM;AAOyB,CAE5B;AACDkqB,4BAA4B/S,cAAc;AChB7BmT,MAAAA,6BAA6BlD,MAAAA,KAAK3nB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAC7C;AAAA,IAAA4qB;AAAAA,IAAArjB;AAAAA,IAAAsjB;AAAAA,EAAAA,IAAuC/qB;AAAKO,MAAAA;AAAA,SAAAN,EAAA8qB,CAAAA,MAAAA,cAAA9qB,SAAA6qB,UAAA7qB,EAAA,CAAA,MAAAwH,YAG1ClH,oCAACqqB,iCACQE,eACDC,2BAGR,CAAA,GAAyB9qB,OAAA8qB,YAAA9qB,OAAA6qB,QAAA7qB,OAAAwH,UAAAxH,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GALzBM;AAKyB,CAE5B;AACDsqB,2BAA2BnT,cAAc;AC1BlC,SAAAsT,UAAAhrB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GASL;AAAA,IAAAuH;AAAAA,IAAA8M;AAAAA,IAAAE;AAAAA,IAAAxJ;AAAAA,IAAAggB;AAAAA,IAAA5pB,OAAAd;AAAAA,IAAAwR,MAAAlR;AAAAA,EAAA,IAQIb,OAFFqB,QAAAd,OAAesK,SAAP,UAARtK,IACAwR,OAAAlR,OAAiBgK,SAAV,aAAPhK;AAAiBI,MAAAA;AAAAhB,WAAAoB,SAWfJ,oCAACgb,gBAAkB5a,OAAS,GAAApB,OAAAoB,OAAApB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAwH,YAC5BvG,KAAAI,2BAAA,IAAC,aAAqB,EAAA,UAAA,QACpB,UAAAA,2BAAAA,IAACK,GAAAA,KAAc,EAAA,aAAa,UAAA,GACzB8F,SACH,CAAA,EACF,CAAA,GAAcxH,OAAAwH,UAAAxH,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAA,SAAAjD,EAAAsU,CAAAA,MAAAA,mBAAAtU,EAAAwU,CAAAA,MAAAA,QAAAxU,EAAAgL,CAAAA,MAAAA,YAAAhL,SAAAgrB,WAAAhrB,EAAA,CAAA,MAAAgB,MAAAhB,EAAA,CAAA,MAAAiB,MAAAjB,EAAA,EAAA,MAAA8R,QAZhB7O,qCAAC,QACkBqR,iBACXE,MACFwW,aACMhgB,UACJ8G,MAEN9Q,UAAAA;AAAAA,IAAAA;AAAAA,IACAC;AAAAA,EAAAA,EAKF,CAAA,GAAOjB,OAAAsU,iBAAAtU,OAAAwU,MAAAxU,OAAAgL,UAAAhL,OAAAgrB,SAAAhrB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,QAAA8R,MAAA9R,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAbPiD;AAaO;AC5BJ,SAASgoB,gBAAgB1L,MAAyC;AACvE,QAAM2L,aAA6C,CACjD;AAAA,IAACjZ,IAAI;AAAA,IAAKkZ,YAAY;AAAA,EAAA,GACtB;AAAA,IAAClZ,IAAI;AAAA,IAAMkZ,YAAY;AAAA,EAAA,CAAuC;AAGhE,MAAIC,cAAO;AACT,UAAMlqB,UAAU,CACd,6BACA,yCACAqe,KAAK5c,SAAS,IAAI,mBAAmB4c,KAAKvV,KAAK,UAAK,CAAC,KAAK,EAAE;AAG9DkhB,eAAWpf,KAAK;AAAA,MACdmG,IAAI;AAAA,MACJ/Q,SAASA,QAAQ8I,KAAK;AAAA,CAAI;AAAA,IAAA,CAC3B;AAAA,EAAA;AAGGqhB,QAAAA,MAAM9c,QAAG,IAAI;AAEZ+c,SAAAA,WACL,GAAGJ,WAAWzgB,IAAK8gB,eACjBF,IAAI9e,KACFif,UAAAA,MACE,gBAAgBD,YACZ;AAAA,IAACJ,YAAYI,UAAUJ;AAAAA,EAAAA,IACvB;AAAA,IAACjqB,SAASqqB,UAAUrqB;AAAAA,EAC1B,CAAA,GACAuqB,UAAAA,MAAMF,UAAUtZ,EAAE,CACpB,CACF,CACF;AACF;ACtBA,MACMyZ,sBAAsB,mCAEtBC,YAAUlqB,iBAAAA,OAAOa,GAAAA,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAYdspB,cAAclE,MAAAA,KAAK3nB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAC9B;AAAA,IAAAwrB,OAAAnrB;AAAAA,IAAAkU;AAAAA,IAAAtT,SAAAN;AAAAA,IAAAoK;AAAAA,IAAAggB;AAAAA,IAAAzL;AAAAA,IAAA7K;AAAAA,IAAAtT;AAAAA,IAAA0Q;AAAAA,EAAA,IAUI/R,OATF0rB,QAAAnrB,OAAWsK,eAAXtK,IAESurB,cAAAjrB,OAA6BgK,SAAAqgB,kBAA7BrqB,IASX;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAA,OAAA;AAG9C,QAAA,OAAO6qB,eAAgB,YAAU;AAAA5qB,UAAAA;AAAAjB,QAAA6rB,CAAAA,MAAAA,eAAA7rB,SAAAuf,QAC5Bte,MAAA4qB,YAAYtM,OAAOA,KAAI7F,MAAO,GAAG,IAAC,CAAA,CAAK,GAAC1Z,OAAA6rB,aAAA7rB,OAAAuf,MAAAvf,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAA/CgB,KAAOC;AAAwCoV,YAAAA;AAAAA,IAAAA;AAG1CwV,SAAAA;AAAAA,EAAAA;AALT,QAAAC,kBAAwB9qB;AAMDC,MAAAA;AAAAjB,IAAA8rB,CAAAA,MAAAA,mBAAA9rB,SAAAU,KAE6CO,KAAAA,MAC9D,OAAO6qB,mBAAoB,WAAiBA,kBACzCprB,EAACgrB,mBAAoB,GAC7B1rB,OAAA8rB,iBAAA9rB,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAHD,QAAA,CAAA+rB,gBAAAC,iBAAA,IAA4Cpa,MAAAA,SAAwB3Q,EAGnE;AAAC,MAAAgC,IAAAE;AAAAnD,IAAA8rB,CAAAA,MAAAA,mBAAA9rB,SAAAU,KAEQuC,KAAAA,MAAA;AAC+B,QAAnC,OAAO6oB,mBAAoB,YAC3B,OAAOA,gBAAe5J,aAAe;AAAU;AAEnD+J,UAAAA,MAAYH,gBAAe5J,UAAAhhB,CAAA,YAAA;AACzB8qB,wBAAkB,gBAAgB9qB,UAAUR,EAAEQ,QAAOiqB,UAAW,IAAIjqB,QAAOA,OAAQ;AAAA,IAAA,CACpF;AAAC,WAAA,MAEW+qB,IAAGC,YAAa;AAAA,EAC5B/oB,GAAAA,KAAA,CAAC2oB,iBAAiBprB,CAAC,GAACV,OAAA8rB,iBAAA9rB,OAAAU,GAAAV,OAAAiD,IAAAjD,OAAAmD,OAAAF,KAAAjD,EAAA,CAAA,GAAAmD,KAAAnD,EAAA,CAAA,IATvBuS,MAAAA,UAAUtP,IASPE,EAAoB;AAEvB,QAAA,CAAAgpB,gBAAAC,iBAAA,IAA4Cxa,mBAAoC,GAChF,CAAAya,SAAAC,UAAA,IAA8B1a,MAAAA,WAAc;AAAC,MAAA/M,IAAAmC;AAAAhH,YAAAmsB,kBAEnCtnB,KAAAA,MAAA;AACHsnB,QAAAA;AAAc,aACZI,SAAA,MAAYD,WAAU,EAAK,CAAC;AAAA,EAAC,GACnCtlB,MAACmlB,cAAc,GAACnsB,QAAAmsB,gBAAAnsB,QAAA6E,IAAA7E,QAAAgH,OAAAnC,KAAA7E,EAAA,EAAA,GAAAgH,KAAAhH,EAAA,EAAA,IAHnBuS,gBAAU1N,IAGPmC,EAAgB;AAKD,QAAAC,KAAAolB,UAAU,KAAEzhB,QAMI1D,KAAA9F,SAAS2qB;AAAc3kB,MAAAA;AAAApH,YAAAkH,MAArDE,MAAC/F,+BAAAmQ,OAAAA,cAAA,EAAa,UAAA,IAAgB,OAAAtK,IAA2B,GAAAlH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAiH,MAR3DK,MAACjG,2BAAA,IAAAsqB,aACO,OAAA,UACQ,gBAAA1kB,IACJ,WAAA,UACH,QAAA,QACC,SAAA,UACHmlB,KAAgB,mBAErBhlB,UAAAA,IACF,CAAA,GAAUpH,QAAAoH,KAAApH,QAAAiH,IAAAjH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAVZ,QAAAyL,UACEnE;AAUDsC,MAAAA;AAAA5J,IAAAyL,EAAAA,MAAAA,WAAAzL,UAAAyrB,SAIG7hB,qCAAC,aAAa4iB,EAAAA,UAA8C/gB,QAAQ,CAAA,GAAczL,QAAAyL,SAAAzL,QAAAyrB,OAAAzrB,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAA,SAAAlK,UAAAwU,QAAAxU,EAAAgL,EAAAA,MAAAA,YAAAhL,EAAAgrB,EAAAA,MAAAA,WAAAhrB,EAAA,EAAA,MAAA0U,YAAA1U,UAAA4J,OAAA5J,EAAA,EAAA,MAAA8R,QADpF5H,MAAC7I,2BAAAA,IAAA,MAAWmT,EAAAA,MAAUwW,IAAAA,SAAmBhgB,UAAoB0J,UAAgB5C,MAC3ElI,UACF,IAAA,CAAA,GAAO5J,QAAAwU,MAAAxU,QAAAgL,UAAAhL,QAAAgrB,SAAAhrB,QAAA0U,UAAA1U,QAAA4J,KAAA5J,QAAA8R,MAAA9R,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA,GAFPkK;AAEO,CAEV;AAED0hB,YAAYnU,cAAc;ACnGnB,SAAAgV,kBAAA;AACLC,QAAAA,eAAqBtnB,iBAAAunB,+BAA8B;AAAC,MAAA,CAE/CD;AAAY7mB,UAAAA,IAAAA,MACC,qCAAqC;AAGhD6mB,SAAAA;AAAY;ACSd,SAAAE,gBAAA7sB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAuH;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAA6C3H;AAAKO,MAAAA;AAAAN,IAAAwH,CAAAA,MAAAA,YAAAxH,SAAAyH,cAAAzH,EAAA,CAAA,MAAA0H,gBAI9CpH,KAACe,2BAAA,IAAA,yBAAA,EAAoCoG,YAA0BC,wBAE/D,GAA0B1H,OAAAwH,UAAAxH,OAAAyH,YAAAzH,OAAA0H,cAAA1H,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAAyH,CAAAA,MAAAA,cAAAzH,SAAA0H,gBAAA1H,EAAA,CAAA,MAAAM,MAH5BM,oCAACisB,OAAAA,yBAAoCplB,EAAAA,YAA0BC,cAC7DpH,UAGF,GAAA,CAAA,GAA0BN,OAAAyH,YAAAzH,OAAA0H,cAAA1H,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJ1BY;AAI0B;AAI9B,SAAAksB,wBAAA/sB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAAuH;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,MAA6C3H,OAE7C;AAAA,IAAA0b;AAAAA,EAAA,IAAkBsR,6BAClB;AAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAA,IAAgEV,mBAChE;AAAA,IAAArmB;AAAAA,IAAAgnB;AAAAA,IAAAC;AAAAA,EAAAA,IAAkDtlB,cAElDulB,GAAAA,oBAA0BlnB,QAAMmnB,SAChCC,YAAkB5X,aAAOxP,MAAM;AAAC,MAAA9F,IAAAM;AAAAZ,WAAAoG,UAEhB9F,KAAAA,MAAA;AACdktB,cAAS3X,UAAWzP;AAAAA,EAAM,GACzBxF,MAACwF,MAAM,GAACpG,OAAAoG,QAAApG,OAAAM,IAAAN,OAAAY,OAAAN,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA,IAFXiW,sBAAgB3V,IAEbM,EAAQ;AAACI,MAAAA;AAAAhB,WAAAqtB,wBAGVrsB,KAAAysB,CAAA,cAAA;AAKE,UAAAlO,OAAa8N,qBAAoB;AAAA,MAAA,GAC5BG,UAAS3X;AAAAA,MAAA0X,SACHE;AAAAA,MAASC,SAAAC,OAAAA;AAAAA,IAAAA,CAEnB;AAAC,WACK,GAAAha,OAAAia,SAAAC,MAAA,GAA4BtO,IAAI;AAAA,EAAE,GAC1Cvf,OAAAqtB,sBAAArtB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAZH,QAAA8tB,iBAAuB9sB;AActBC,MAAAA;AAAAjB,WAAAotB,aAE8CnsB,KAAAA,MAAA;AACpC,cAAA;AAAA,MAAA,GAAKusB,UAAS3X;AAAAA,MAAA0X,SAAA3iB;AAAAA,IAAAA,CAA6B;AAAA,EAAC,GACtD5K,OAAAotB,WAAAptB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAA+tB,6BAAmC9sB;AAEpBgC,MAAAA;AAAAjD,WAAAktB,WAAA3kB,QAAAvI,SAAAmtB,iBAEiClqB,KAAAA,MAAA;AAC1CiqB,eAAS3kB,SAAAolB,kCAEbR,cAAaQ,OAAAA,uBAAwB;AAAA,EAAA,GACtC3tB,EAAA,CAAA,IAAAktB,WAAA3kB,MAAAvI,OAAAmtB,eAAAntB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAJD,QAAAguB,8BAAoC/qB;AAIA,MAAA,CAG/BwY,SAAO;AAAAtY,QAAAA;AAAA,WAAAnD,UAAAwH,YACHrE,MAAA9B,2BAAAA,IAAAE,WAAA,UAAA,YAAW,GAAIvB,QAAAwH,UAAAxH,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA,GAAfmD;AAAAA,EAAAA;AAQW,QAAAA,KAAA+pB,WAAS3kB,SAAAolB,OAAAA,yBACX9oB,KAAAmoB,oBAAoB;AAAYhmB,MAAAA;AAAAhH,SAAAA,EAAAwH,EAAAA,MAAAA,YAAAxH,UAAAyH,cAAAzH,EAAA,EAAA,MAAA0H,gBAAA1H,UAAA8tB,kBAAA9tB,EAAA+tB,EAAAA,MAAAA,8BAAA/tB,UAAAguB,+BAAAhuB,EAAA,EAAA,MAAAitB,cAAAjtB,EAAAstB,EAAAA,MAAAA,qBAAAttB,EAAA,EAAA,MAAAmD,MAAAnD,UAAA6E,MALhDmC,KAAC3F,2BAAAA,IAAA4sB,OAAA,kBAAA,EACaxmB,YACEC,cACEomB,gBACA,gBAAA3qB,IACF,cAAA0B,IACUkpB,wBAAAA,4BACRC,gBAA0B,6BAC9Bf,YACOK,mBACT,WAAA,QACL,MAAA,SAEJ9lB,SACH,CAAA,GAAmBxH,QAAAwH,UAAAxH,QAAAyH,YAAAzH,QAAA0H,cAAA1H,QAAA8tB,gBAAA9tB,QAAA+tB,4BAAA/tB,QAAAguB,6BAAAhuB,QAAAitB,YAAAjtB,QAAAstB,mBAAAttB,QAAAmD,IAAAnD,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAdnBgH;AAcmB;AC3FVknB,MAAAA,SAAS,IAETC,iBAAe,IACfC,eAAetrB,OAAO,cAAc,GAEpCurB,gCAAgC;ACFtC,SAAAC,mBAAA;AACLC,QAAAA,iBAAsBnpB,iBAAAopB,gCAA+B;AAAC,MAAA,CACjDD;AAAa1oB,UAAAA,IAAAA,MAAkB,sCAAsC;AAEnE0oB,SAAAA;AAAa;ACPf,MAAME,2BAA2B,KAC3BC,mCAAmC,KAEnCC,+BAA+B,KAC/BC,+BAA+B,KAE/BT,iBAA8D,CAAC,GAE/DU,wBAAwB,YAExBC,2BAAgD,CAAC;AAAA,EAAC3oB,IAAI;AAAY,GAAG;AAAA,EAACA,IAAI;AAAO,CAAC,GAGlF4oB,yBAAyB,4BACzBC,4BAA4B;ACDlC,SAASC,mCAAmClvB,OAAgD;AAC3F,QAAA;AAAA,IAAC0H;AAAAA,IAAYC;AAAAA,IAAcwnB,YAAAA;AAAAA,IAAYC;AAAAA,EAAAA,IAAepvB,OAEtDsgB,MAAM6O,YAAWvsB,QACjB,CAAC+gB,WAAW0L,YAAY,IAAIxd,MAAAA,SAAsC,MACtE/B,MAAMC,KAAK,IAAID,MAAMwQ,GAAG,CAAC,CAC3B;AAEA9N,QAAAA,UAAU,MAAM;AACVmR,QAAAA,UAAU/gB,WAAW0d,KAAK;AAC5B,YAAMgP,kBAAkBxf,MAAMC,KAAK,IAAID,MAAMwQ,GAAG,CAAC;AAExCC,eAAAA,IAAI,GAAGA,IAAID,KAAKC;AACPA,wBAAAA,CAAC,IAAIoD,UAAUpD,CAAC;AAGlC8O,mBAAaC,eAAe;AAAA,IAAA;AAAA,EAC9B,GACC,CAAChP,KAAKqD,SAAS,CAAC;AAEnB,QAAM4L,cAActH,MAAAA,YAAY,CAAC5c,OAAesN,SAAoC;AAClF0W,iBAAcG,CAAS,SAAA;AACfC,YAAAA,OAAO,CAAC,GAAGD,IAAI;AAChBnkB,aAAAA,KAAAA,KAAK,IAAIsN,MACP8W;AAAAA,IAAAA,CACR;AAAA,EACH,GAAG,EAAE;AAELjd,QAAAA,UAAU,MAAM;AACFmR,gBAAAA,UAAUzY,OAAO+E,OAAO,CAAC;AAAA,EAAA,GACpC,CAAC0T,WAAWyL,WAAW,CAAC;AAErBM,QAAAA,qBAAqBrH,MAAAA,QAAQ,MAC1B8G,YAAWzkB,IAAI,CAACyiB,WAAW9hB,YACzB8hB,UAAUwC,cACZ,CACCC,iCAAiC;AAAA,IAC/BloB;AAAAA,IACAC;AAAAA,IACA0D,OAAAA;AAAAA,IACAkkB;AAAAA,IACAI,aAAaxC,UAAUwC;AAAAA,EACxB,CAAA,GACDxC,UAAU3kB,IAAI,IAEf,CAAC,MAAM,MAAM,EAAE,CACrB,GACA,CAACd,YAAYC,cAAcwnB,aAAYI,WAAW,CAAC;AAEtD,SAEKG,2BAAAA,IAAAA,WAAAA,UAAAA,EAAAA,UAAAA,mBAAmBhlB,IAAI,CAAC,CAACmlB,mBAAmB5W,GAAG,MAAMA,OAAO3X,+BAAC,mBAAuB2X,CAAAA,GAAAA,GAAI,CAAG,GAC9F;AAEJ;AACAiW,mCAAmCxX,cAAc;AAEjD,SAASkY,iCAAiC;AAAA,EACxCloB;AAAAA,EACAC;AAAAA,EACA0D;AAAAA,EACAkkB;AAAAA,EACAI,aAAAA;AAOF,GAAG;AACD,SAAOhI,WAAK,WAAA;AAAA1nB,UAAAA,IAAAC,uBAAA,CAAA;AAAAK,QAAAA;AAAAN,MAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACmBzC,KAAA;AAAA,MAAAmH;AAAAA,MAAAC;AAAAA,IAAAA,GAG5B1H,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAHD,UAAA6vB,WAAiBH,aAAYpvB,EAG5B,GACDoY,OAAahS,iBAAUmpB,QAAQ;AAAC,QAAAjvB,IAAAI;AAAA,WAAAhB,SAAA0Y,QAEtB9X,KAAAA,MAAA;AACR0uB,kBAAAlkB,OAAmBsN,IAAI;AAAA,IACtB1X,GAAAA,MAAC0X,IAAI,GAAC1Y,OAAA0Y,MAAA1Y,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA,IAFTuS,MAAAA,UAAU3R,IAEPI,EAAM,GAAC;AAAA,EAAA,CAGX;AACH;AC3EO,SAAA8uB,mBAAA;AAAA9vB,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAA+sB;AAAAA,IAAAvsB;AAAAA,IAAAW;AAAAA,IAAA2uB;AAAAA,EAAAA,IAAwDtD,gBAAgB,GACxEtsB,gBAAsB4vB,WAAS7rB,SAAW6rB,WAAS3rB,WACnD4rB,aAAmBhgB,CAAAA,CAAQ7P,eAC3B;AAAA,IAAAO;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAAAT,EAAA,CAAA,MAAAgwB,cAEb1vB,KAAA;AAAA,IAAAmb,SAC5BuU;AAAAA,IAAUvvB;AAAAA,IAAAI,OAEZV;AAAAA,EAAAA,GACRH,OAAAG,eAAAH,OAAAS,YAAAT,OAAAgwB,YAAAhwB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,OAAAA,yBAAgBT,EAItC;AAEG0sB,MAAAA,oBAAoB,gBAAY,CAAKgD,YAAU;AAAApvB,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC1CnC,MAAA;AAAA,MAAAE,OAAA8J;AAAAA,MAAAxJ,OAAAwJ;AAAAA,IAAAA,GAAoC5K,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAApCY;AAAAA,EAAAA;AAAoC,MAGzCQ,OAAK;AAAAR,QAAAA;AAAA,WAAAZ,SAAAoB,SACAR,MAAA;AAAA,MAAAE,OAAA8J;AAAAA,MAAAxJ;AAAAA,IAAyBpB,GAAAA,OAAAoB,OAAApB,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAzBY;AAAAA,EAAAA;AAAyB,MAAA,CAG7BT,eAAa;AAIAS,UAAAA,MAAAH,YAAUW,SAAWX,YAAU8H;AAAMvH,QAAAA;AAAAhB,MAAAU,CAAAA,MAAAA,KAAAV,SAAAY,OAD5CI,MAAAN,EAAE,wCAAsC;AAAA,MAAAD,YACjCG;AAAAA,IAAAA,CACb,GAACZ,OAAAU,GAAAV,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAA,WAAAjB,UAAAgB,OAJGC,KAAA;AAAA,MAAAH,OAAA8J;AAAAA,MAAAxJ,OAEEJ;AAAAA,IAGRhB,GAAAA,QAAAgB,KAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GALMiB;AAAAA,EAAAA;AAKN,MAGCH,OAAK;AAAAF,QAAAA;AAAAZ,cAAAc,MAAAI,WAAAlB,UAAAU,KAEEE,MAAAF,EAAE,uCAAqC;AAAA,MAAAI,OAAUA,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAAAgB,QAAAA;AAAA,WAAAhB,UAAAY,OADlEI,MAAA;AAAA,MAAAF,OACEF;AAAAA,MAAgEQ,OAAAwJ;AAAAA,IAExE5K,GAAAA,QAAAY,KAAAZ,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GAHMgB;AAAAA,EAAAA;AAMwB,QAAAJ,KAAAC,OAAKO;AAAOJ,MAAAA;AAAA,SAAAhB,UAAAY,MAAtCI,KAAA;AAAA,IAAAF,OAAA8J;AAAAA,IAAAxJ,OAA0BR;AAAAA,EAAaZ,GAAAA,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAAvCgB;AAAuC;ACnDhD,MAAMivB,aAAa,CAAC,SAAS,QAAQ,GAExBC,2BAA2BxI,WAAK,WAAA;AAAA1nB,QAAAA,IAAAC,uBAAA,EAAA,GAC3C;AAAA,IAAA6L,MAAAqkB;AAAAA,EAAA,IAA0BhnB,eAC1B;AAAA,IAAA1B;AAAAA,IAAAC;AAAAA,IAAA7G,OAAAuvB;AAAAA,EAAAA,IAA6D3D,gBAC7D4D,GAAAA,oBAA0BP,iBAC1BQ,GAAAA,aAAmBD,kBAAiBvvB,OACpCqS,QAAmBod,iCAA0B9oB,YAAYC,YAAY,GACrE8oB,YAAkB5a,MAAAA,OAAOzC,KAAK,GAC9Bsd,aAAmB1oB,iBACnB;AAAA,IAAArH;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACc,MAAAA;AAAA,OAAA;AAAA,QAKhD,CAAC+vB,kBAAiBjvB,SAAA,CACjBkvB,cAAU,CACVL,WAAAS,SAAoBvd,OAAKwd,EAAI,KAC9B,OAAOP,kBAAiBhvB,SAAW,YACnC+R,OAAKrL,SAAW,WAAS;AAEzBxH,WAAO8vB,kBAAiBhvB;AAAMiV,YAAAA;AAAAA,IAAAA;AAEhC/V,SAAO+vB,kBAAiBjvB;AAAAA,EAAAA;AAX1B,QAAAA,QAAcd;AAY2DM,MAAAA;AAAAZ,IAAAU,CAAAA,MAAAA,KAAAV,SAAAoB,SAE/CR,KAAAQ,SAASV,EAAE,4DAA4D,GAACV,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAlG,QAAA4wB,oBAA0BhwB;AAAwEI,MAAAA;AAAAhB,WAAA4wB,qBAEhG5vB,KAAA4vB,kBAAiBjuB,cAAe,GAAGiuB,kBAAiBtrB,MAAA,GAAA,EAAY,CAAC,QAAQsrB,mBAAiB5wB,OAAA4wB,mBAAA5wB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAD5F,QAAA6I,gBACE7H;AAA0F,MAAAC,IAAAgC;AAAAjD,SAAAA,EAAA6I,CAAAA,MAAAA,iBAAA7I,EAAA,CAAA,MAAAmT,SAAAnT,EAAAywB,CAAAA,MAAAA,cAAAzwB,EAAA,CAAA,MAAAmwB,aAAAnwB,SAAAU,KAElFO,KAAAA,MAAA;AACJ,QAAA,CAACkS,SAASA,UAAUqd,UAAS3a;AAAQ;AAErCgb,QAAAA;AAEA1d,WAAAA,MAAKrL,SAAU,WACjBqoB,UAAS;AAAA,MAAAW,UAAA;AAAA,MAAAC,UAAA;AAAA,MAAAtsB,QAGC;AAAA,MAAOrD,OACRV,EAAE,oDAAkD;AAAA,QAAAuJ,SAAYkJ,MAAKwd;AAAAA,MAAAA,CAAI;AAAA,MAAChI,wDAG7E,EAAA,UAAA;AAAA,QAAAtnB,2BAAA,IAAA,WAAA,EAAUX,UAAE,EAAA,sDAAsD,EAAE,CAAA;AAAA,QACnEyS,MAAKrS,MAAAI;AAAAA,MAAAA,EACR,CAAA;AAAA,IAAA,CAEH,GAGCiS,MAAKrL,SAAU,aAAS,CAAKmoB,WAAAS,SAAoBvd,MAAKwd,EAAG,KAC3DR,UAAS;AAAA,MAAAW,UAAA;AAAA,MAAArsB,QAEC;AAAA,MAASrD,sCAEdoI,kBACU,EAAA,SAAA2J,MAAKwd,IACN,SAAA,sDACLjwB,GACK,QAAA;AAAA,QAAAiwB,IACFxd,MAAKwd;AAAAA,QAAAvvB,OACFyH;AAAAA,SAEG,YAAA;AAAA,QAAAmoB,QACF;AAAA,MAAA,EACT,CAAA;AAAA,IAAA,CAGN,GAMC7d,MAAKrL,SAAU,aAAaqL,MAAKwd,OAAQ,aAE3CE,YAAYA,WAAAA,MAAiBJ,WAAUQ,yBAA0B,IAGnET,UAAS3a,UAAW1C,OAGPb,MAAAA,aAAaue,SAAS;AAAA,EAAA,GAClC5tB,KAAA,CAACkQ,OAAOsd,YAAYN,WAAWzvB,GAAGmI,aAAa,GAAC7I,OAAA6I,eAAA7I,OAAAmT,OAAAnT,OAAAywB,YAAAzwB,OAAAmwB,WAAAnwB,OAAAU,GAAAV,QAAAiB,IAAAjB,QAAAiD,OAAAhC,KAAAjB,EAAA,EAAA,GAAAiD,KAAAjD,EAAA,EAAA,IArDnDuS,gBAAUtR,IAqDPgC,EAAgD,GAAC;AAAA,CAGrD,GCrFYiuB,oBAAqBzwB,CAA2BA,eAAAA,WAAW0wB,aAAa,ICO/Exe,SAAOlR,iBAAAA,OAAO6I,GAAAA,IAAI,EAAE;AAAA,EACxB8mB,UAAU;AAAA,EACVC,QAAQ;AAAA,EACRC,YAAY;AACd,CAAC;AAGM,SAAAC,wBAAAxxB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAA,MAAAuH,UAAAgqB,kBAAAC,aAAAC,SAAArd,WAAAjT;AAAApB,WAAAD,SAGL;AAAA,IAAA8X,IAAA4Z;AAAAA,IAAAjqB;AAAAA,IAAAgqB;AAAAA,IAAAE;AAAAA,IAAAtwB;AAAAA,IAAA,GAAAiT;AAAAA,EAAA,IAAoFtU,OAAKC,OAAAD,OAAAC,OAAAwH,UAAAxH,OAAAwxB,kBAAAxxB,OAAAyxB,aAAAzxB,OAAA0xB,SAAA1xB,OAAAqU,WAAArU,OAAAoB,UAAAoG,WAAAxH,EAAA,CAAA,GAAAwxB,mBAAAxxB,EAAA,CAAA,GAAAyxB,cAAAzxB,EAAA,CAAA,GAAA0xB,UAAA1xB,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA,GAAAoB,QAAApB,EAAA,CAAA;AACzF,QAAA;AAAA,IAAAU;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,WAAAoB,SAK9Cd,KAACe,2BAAA,IAAAK,GAAA,KAAA,EAAU,MAAC,GAAW,SAAC,GACtB,UAACL,2BAAAA,IAAAwB,GAAAA,MAAA,EAAQ,IAAA,MAAW,MAAC,GAAS,QAAA,UAC3BzB,UAAAA,MAAAA,CACH,EACF,CAAA,GAAMpB,OAAAoB,OAAApB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAU,KAOsBE,KAAAF,EAAE,yCAAyC,GAACV,OAAAU,GAAAV,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,YAAAY,MAAtDI,KAAA;AAAA,IAAAyK,SAAU7K;AAAAA,EAA4C,GAACZ,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,IAAAwxB,EAAAA,MAAAA,oBAAAxxB,UAAA0xB,WAAA1xB,EAAA,EAAA,MAAAgB,MANzEC,oCAACS,GAAS,KAAA,EAAA,MAAA,QAAgB,SAAC,GACzB,UAACL,2BAAA,IAAAkK,kCAAA,EACaimB,cAAAA,kBACNG,MAAAA,MAAAA,WACD,MAAA,SACID,SAAAA,SACK,cAAA1wB,GAElB,CAAA,EAAA,CAAA,GAAMhB,QAAAwxB,kBAAAxxB,QAAA0xB,SAAA1xB,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,IAAAM,EAAAA,MAAAA,MAAAN,UAAAiB,MAdRgC,KAACG,2BAAA,KAAAd,GAAc,MAAA,EAAA,SAAC,GACdhC,UAAAA;AAAAA,IAAAA;AAAAA,IAKAW;AAAAA,EAAAA,EASF,CAAA,GAAOjB,QAAAM,IAAAN,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,SAAAA,EAAA,EAAA,MAAAwH,YAAAxH,EAAAyxB,EAAAA,MAAAA,eAAAzxB,EAAAqU,EAAAA,MAAAA,aAAArU,UAAAiD,MAhBTE,qCAACwP,QAAI,EAAA,GAAK0B,WAAeod,IAAAA,aACvBxuB,UAAAA;AAAAA,IAAAA;AAAAA;EAiBF,EAAA,CAAA,GAAOjD,QAAAwH,UAAAxH,QAAAyxB,aAAAzxB,QAAAqU,WAAArU,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAlBPmD;AAkBO;AC9CX,MAAMwP,SAAOlR,iBAAOmwB,OAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAwCb,SAAAC,QAAA9xB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAA6xB;AAAAA,IAAAC;AAAAA,EAAkChyB,IAAAA,OAElCiyB,YAAkBpc,MAAAA,OAAA,CAAQ;AAACtV,MAAAA;AAAAN,IAAA8xB,CAAAA,MAAAA,YAAA9xB,SAAA+xB,iBAGzBzxB,KAAA6S,CAAA,UAAA;AACEA,UAAKC,kBAEL4e,UAASnc,UAAW1C,MAAKG,OAEzBye,cAAc;AAEd,UAAAxe,kBAAArH,CAAA,MAAA;AACEA,QAACkH,kBACD0e,SAAS5lB,EAACoH,QAAS0e,UAASnc,OAAQ;AAAA,IAAC,GAGvCpC,gBAAAA,MAAA;AACEE,aAAAC,oBAA2B,aAAaL,eAAe,GACvDI,OAAAC,oBAA2B,WAAWH,aAAa;AAAA,IAAC;AAGtDE,WAAAE,iBAAwB,aAAaN,eAAe,GACpDI,OAAAE,iBAAwB,WAAWJ,aAAa;AAAA,EACjDzT,GAAAA,OAAA8xB,UAAA9xB,OAAA+xB,eAAA/xB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AApBH,QAAA8T,kBAAwBxT;AAsBvB,MAAAM,IAAAI;AAAAhB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAKGnC,KAAQS,2BAAA,IAAA,QAAA,CAAA,CAAA,GAGRL,KAAQK,2BAAAA,IAAA,QAAA,CAAA,CAAA,GAAArB,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,SAAA8T,mBALV7S,KAACmC,gCAAAuP,QAAA,EAAkBmB,8BAEjBlT,UAAAA;AAAAA,IAAAA;AAAAA,IAGAI;AAAAA,EAAAA,EAAAA,CACF,GAAOhB,OAAA8T,iBAAA9T,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GANPiB;AAMO;ACpEX,MAAM0R,SAAOlR,wBAAOC,MAAG;AAAA;AAAA;AAAA;AAAA;AAMhB,SAAAuwB,UAAAlyB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAAuH,MAAAA,UAAAiqB,aAAAhd,UAAAzJ,UAAAqJ;AAAArU,WAAAD,SAGL;AAAA,IAAA8X,IAAA4Z;AAAAA,IAAAjqB;AAAAA,IAAAwD;AAAAA,IAAAyJ;AAAAA,IAAA,GAAAJ;AAAAA,EAAAA,IAAsEtU,OAAKC,OAAAD,OAAAC,OAAAwH,UAAAxH,OAAAyxB,aAAAzxB,OAAAyU,UAAAzU,OAAAgL,UAAAhL,OAAAqU,cAAA7M,WAAAxH,EAAA,CAAA,GAAAyxB,cAAAzxB,EAAA,CAAA,GAAAyU,WAAAzU,EAAA,CAAA,GAAAgL,WAAAhL,EAAA,CAAA,GAAAqU,YAAArU,EAAA,CAAA;AAC3E,QAAA,CAAA+S,SAAAmf,UAAA,IAA8BtgB,mBAAoC,GAClEugB,kBAAwBvc,MAAAA,OAAAhL,MAAwB,GAChD,CAAAwnB,aAAAC,cAAA,IAAsCzgB,MAAAA,SAAiB;AAACtR,MAAAA;AAAAN,IAAA,CAAA,MAAA+S,SAAA6O,eAElBthB,KAAAA,MAAA;AACpC6xB,oBAAetc,UAAW9C,SAAO6O;AAAAA,EAClC5hB,GAAAA,EAAA,CAAA,IAAA+S,SAAA6O,aAAA5hB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAsyB,oBAA0BhyB;AAEbM,MAAAA;AAAAZ,IAAAyU,CAAAA,MAAAA,YAAAzU,SAAAgL,YAGXpK,KAAA4S,CAAA,WAAA;AACE,UAAA+e,IAAUJ,gBAAetc;AAEpB0c,SAELF,eAAe7T,KAAAC,IAASD,KAAAQ,IAASuT,IAAI/e,QAAQxI,QAAQ,GAAGyJ,QAAQ,CAAC;AAAA,EAClEzU,GAAAA,OAAAyU,UAAAzU,OAAAgL,UAAAhL,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAPH,QAAAwyB,eAAqB5xB;AASpB,MAAAI,IAAAC;AAAAjB,IAAAyU,EAAAA,MAAAA,YAAAzU,UAAAgL,YAAAhL,EAAA,EAAA,MAAAoyB,eAGQnxB,KAAAmxB,cAAW;AAAA,IAAA5d,MAAU;AAAA,IAAMsI,OAASsV;AAAAA,EAAAA,IAAW;AAAA,IAAApnB;AAAAA,IAAAyJ;AAAAA,EAAAA,GAAwBzU,QAAAyU,UAAAzU,QAAAgL,UAAAhL,QAAAoyB,aAAApyB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAAAgB,KAAvEC;AADT,QAAA2V,QAAc5V;AAGbiC,MAAAA;AAAAjD,IAAAwyB,EAAAA,MAAAA,gBAAAxyB,UAAAsyB,qBAKGrvB,KAAC5B,2BAAA,IAAA,SAAkBmxB,EAAAA,UAAAA,cAA6BF,eAAgB,mBAAK,GAAAtyB,QAAAwyB,cAAAxyB,QAAAsyB,mBAAAtyB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAwH,EAAAA,MAAAA,YAAAxH,EAAA,EAAA,MAAAyxB,eAAAzxB,EAAAqU,EAAAA,MAAAA,aAAArU,EAAA,EAAA,MAAA4W,SAAA5W,UAAAiD,MAFvEE,KAAAC,2BAAAA,KAACuP,QAAS8e,EAAAA,IAAU,aAAOpd,GAAAA,WAAgB6d,KAAAA,YAAmBtb,OAC3DpP,UAAAA;AAAAA,IAAAA;AAAAA,IACDvE;AAAAA,EAAAA,EAAAA,CACF,GAAOjD,QAAAwH,UAAAxH,QAAAyxB,aAAAzxB,QAAAqU,WAAArU,QAAA4W,OAAA5W,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAHPmD;AAGO;AClCJ,SAAAsvB,uBAAA1yB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAGL;AAAA,IAAAwH;AAAAA,IAAAC;AAAAA,IAAA8M;AAAAA,MAAyCzU,OACzC;AAAA,IAAAgV;AAAAA,EAAA,IAAoB2C,WACpB;AAAA,IAAAgb;AAAAA,IAAAxF;AAAAA,EAAA,IAAoCT,mBACpC;AAAA,IAAAkG;AAAAA,MAAmBrE,iBAAiB;AAAChuB,MAAAA;AAAAN,IAAA0yB,CAAAA,MAAAA,kBAAA1yB,SAAAktB,aAEL5sB,KAAAA,MAAA;AAC1B4sB,iBAAWwF,eAAexF,UAAS3kB,IAAK;AAAA,EAC7CvI,GAAAA,OAAA0yB,gBAAA1yB,OAAAktB,WAAAltB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAA4yB,cAAoBtyB;AAEW,MAE3ByU,cAAcmY;AAAS,WAAA;AAE3B,QAAA2F,YAAkB3F,UAAS4F;AAAUlyB,MAAAA;AAAAZ,IAAA,CAAA,MAAA6yB,aAAA7yB,EAAAyH,CAAAA,MAAAA,cAAAzH,EAAA0H,CAAAA,MAAAA,gBAAA1H,SAAA4yB,eAEnChyB,KAACS,2BAAAA,IAAA,WAAA,EAAmBuxB,sBAAyBnrB,YAA0BC,aAAgB,CAAA,GAAA1H,OAAA6yB,WAAA7yB,OAAAyH,YAAAzH,OAAA0H,cAAA1H,OAAA4yB,aAAA5yB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AADzF,QAAA+S,UACEnS;AACD,MAEG+xB,SAAQI,gBAAA;AAAA/xB,QAAAA;AAAA,WAAAhB,EAAA+S,CAAAA,MAAAA,WAAA/S,SAAAwU,QAERxT,MAACK,2BAAA,IAAA,aACI,IAAA,SACK,WAAA,0BACFmT,MACIoa,UAAAA,8BACAD,UAA2BA,8BAEpC5b,mBACH,GAAY/S,OAAA+S,SAAA/S,OAAAwU,MAAAxU,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GARZgB;AAAAA,EAAAA;AAQYA,MAAAA;AAAA,SAAAhB,EAAA+S,EAAAA,MAAAA,WAAA/S,UAAAwU,QAKdxT,KAACK,2BAAA,IAAAK,GAAA,KAAA,EAAO,IAAA,SAAgB,WAAA,0BAA+B8S,gBAEvD,QAAA,CAAA,GAAMxU,QAAA+S,SAAA/S,QAAAwU,MAAAxU,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAFNgB;AAEM;AC9CV,MAAMgyB,2BAA2B;AAK1BC,SAAAA,wBAAArzB,WAAAoZ,KAAAka,cAAA;AAAA,QAAAlzB,IAAAC,qBAAAA,EAAA,EAAA,GAKLkzB,gBAAsBC,OAAAA,iBAAiB;AAAC9yB,MAAAA;AAAAN,IAAAgZ,CAAAA,MAAAA,OAAAhZ,SAAAJ,aAEfU,KAAA,CAAA0yB,0BAA2BpzB,WAAWoZ,GAAG,EAAA/N,OAAA+E,OAAgB,GAAChQ,OAAAgZ,KAAAhZ,OAAAJ,WAAAI,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAnFqzB,QAAAA,mBAAyB/yB,GAA0D0J,KAAM,GAAG;AAAC,MAAApJ,IAAAI;AAAAhB,MAAAA,EAAAkzB,CAAAA,MAAAA,gBAAAlzB,SAAAmzB,iBAAAnzB,EAAA,CAAA,MAAAqzB,kBAAA;AAAApyB,QAAAA;AAAAjB,aAAAkzB,gBAK/EjyB,MAAAJ,CAAYA,UAAAA,iBAAiBqyB,eAAeryB,OAAMb,OAAAkzB,cAAAlzB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAFvDgB,KAAAmyB,cAAaG,OACVD,gBAAgB,EAAC9mB,KACnB9B,UAAAA,IAAIxJ,GAAkD,CAAC,GAACjB,OAAAkzB,cAAAlzB,OAAAmzB,eAAAnzB,OAAAqzB,kBAAArzB,OAAAgB;AAAAA,EAAA;AAAAA,SAAAhB,EAAA,CAAA;AAFzDgB,OAAAA;AAKTuyB,QAAAA,UAAclvB,QAAAA,cANCzD,IAMqBsyB,YAAY;AAAcjyB,MAAAA;AAAAjB,IAAAmzB,CAAAA,MAAAA,iBAAAnzB,UAAAqzB,oBAAArzB,EAAA,EAAA,MAAAuzB,WAE5DtyB,KAAAuyB,CAAA,aAAA;AACMA,iBAAa3yB,WACfsyB,cAAaM,OAAQJ,kBAAkBG,QAAkB;AAAA,EAAA,GAE5DxzB,OAAAmzB,eAAAnzB,QAAAqzB,kBAAArzB,QAAAuzB,SAAAvzB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AALH,QAAA+f,MAAY9e;AAOX,MAAAgC,IAAAE;AAAA,SAAAnD,EAAA+f,EAAAA,MAAAA,OAAA/f,UAAAuzB,WAEoBpwB,KAAA,CAACtC,SAAOkf,GAAG,GAAC/f,QAAA+f,KAAA/f,QAAAuzB,SAAAvzB,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAAAiD,KAAZE,IAAdF;AAAyC;ACnC3C,MAAMywB,mBAAmB;AAAA,EAACvtB,IAAI;AAAA,EAAU/E,OAAO;AAAqC,GAC9EuyB,gBAAgB;AAAA,EAACxtB,IAAI;AAAA,EAAO/E,OAAO;AAAuC,GAC1EwyB,aAAa,CAACF,kBAAkBC,aAAa,GCEpDE,MAAM,IAAIC,kBAAAA,QAAI;AAAA,EAACC,SAAS;AAAI,CAAC;AAEnBC,SAAAA,WAAWC,SAAcpzB,OAAiB;AAClDqzB,QAAAA,SAASL,IAAIrzB,IAAIyzB,OAAO;AAE9B,SAAIC,WAAWtpB,UACbipB,IAAI9T,IAAIkU,SAASpkB,MAAMmX,QAAQnmB,KAAK,KAAK6C,OAAAA,SAAS7C,KAAK,CAAC,GACjDmzB,WAAWC,SAASpzB,KAAK,KAG3BqzB;AACT;AAEO,SAASC,eAAehhB,OAAkB;AACzC,QAAA;AAAA,IAACoM;AAAAA,EAAQpM,IAAAA,OACT0C,UAAUge,IAAIrzB,IAAI+e,IAAI;AAExB1J,cAAYjL,UAKhBipB,IAAI9T,IAAIR,MAAM,CAAC1J,OAAO;AACxB;AAEO,SAASue,cAAcrhB,SAA4B;AAClDshB,QAAAA,MAAM1gB,OAAO2gB,aAAa;AAEhC,MAAID,KAAK;AACDE,UAAAA,QAAQr0B,SAASs0B,YAAY;AAE/BC,QAAAA,mBACJF,MAAMG,mBAAmB3hB,OAAO,GAChCshB,IAAIM,SAASJ,KAAK;AAAA,EAAA;AAEtB;AAEO,SAASK,OAAOzhB,OAAkB;AACvCihB,gBAAcjhB,MAAM0hB,aAAa;AACnC;AAEO,SAASC,eAAe3hB,OAAkB;AAC7BA,QAAM4hB,YAAY,OAAO5hB,MAAM6W,WAAW7W,MAAM6hB,aAMlE7hB,MAAMC,eAAe,GAErBghB,cAAcjhB,MAAM0hB,aAAa;AACnC;AAEO,SAASI,eAAep0B,OAA6C;AACnE6C,SAAAA,OAAAA,SAAS7C,KAAK,KAAK+C,gBAAS/C,MAAMkD,GAAG,KAAKH,OAAAA,SAAS/C,MAAMN,KAAK;AACvE;ACxDa20B,MAAAA,uBAAuBzzB,iBAAAA,OAAOmwB,IAAI,CAAC;AAAA,EAAC3vB,OAAAA;AAAqB,MAAM;AACpE,QAAA;AAAA,IAACX;AAAAA,IAAO6zB;AAAAA,IAAO/yB;AAAAA,MAASH,OAAME;AAE7BgZ,SAAAA,iBAAAA;AAAAA;AAAAA;AAAAA,qBAGYga,MAAMC,KAAKC,MAAM;AAAA,mBACnBF,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,sBAK7BpvB,OAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,qBAIdF,OAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAmCJF,OAAIE,MAAM,CAAC,CAAC,CAAC;AAAA,mBACxB+yB,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQhC6D,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAS9BpvB,GAAIE,IAAAA,MAAM,CAAC,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAavBd,MAAMk0B,OAAOC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,eAKrBn0B,MAAMk0B,OAAOE,QAAQ;AAAA;AAAA;AAAA;AAAA,qBAIfxzB,OAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,eAInBd,MAAMk0B,OAAOG,MAAM;AAAA;AAAA;AAAA;AAAA,eAInBr0B,MAAMk0B,OAAOI,OAAO;AAAA;AAAA;AAAA;AAAA,eAIpBt0B,MAAMk0B,OAAOK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBlC,CAAC;AC3HM,SAAAC,OAAA/1B,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAA81B;AAAAA,IAAApoB;AAAAA,EAAAA,IAA0B5N;AAAKO,MAAAA;AAAAN,WAAA+1B,YAG7Bz1B,KAAA6S,CAA0C4iB,UAAAA,SAAS5iB,MAAK6iB,OAAAn1B,KAAa,GAACb,OAAA+1B,UAAA/1B,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AADxE,QAAAi2B,eAAqB31B,IAIrB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,WAAAU,KAMnCE,KAAAF,EAAE,uCAAuC,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAEhD,QAAAgB,KAAA2M,SAAS;AAAE1M,MAAAA;AAAAjB,SAAAA,EAAAi2B,CAAAA,MAAAA,gBAAAj2B,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALpBC,oCAACi1B,GACOC,WAAAA,EAAAA,MAAAA,kBACIF,UAAW,cACR,aAAAr1B,IACL,QAAA,GACD,OAAAI,IACP,GAAAhB,OAAAi2B,cAAAj2B,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GANFiB;AAME;ACHC,SAAAm1B,cAAAr2B,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAY;AAAAA,MAAgBd,OAChB;AAAA,IAAAs2B;AAAAA,IAAArL;AAAAA,EAAkCyB,IAAAA,gBAAAA,GAClC6J,iBAAuB,GAAGtL,OAAO,aAKjCuL,CAAAA,YAAAC,gBAAA,IAAuCvD,wBACrC,qBAEA,MAAA,QACF;AAAC3yB,MAAAA;AAAAN,WAAAu2B,cAGgBj2B,KAAAszB,WAAAve,KAAAohB,CAA0BA,SAAAA,KAAItwB,OAAQowB,UAAU,GAACv2B,OAAAu2B,YAAAv2B,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAlE,QAAA02B,WAAiBp2B;AAAiDM,MAAAA;AAAAZ,WAAAw2B,oBAE5B51B,KAAAA,MAAA;AACpC41B,qBAAgB9C,iBAAAvtB,EAAoB;AAAA,EAAC,GACtCnG,OAAAw2B,kBAAAx2B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAFD,QAAA22B,oBAA0B/1B;AAEJI,MAAAA;AAAAhB,WAAAw2B,oBAEax1B,KAAAA,MAAA;AACjCw1B,qBAAgB7C,cAAAxtB,EAAiB;AAAA,EAAC,GACnCnG,OAAAw2B,kBAAAx2B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA42B,iBAAuB51B,IAIvB;AAAA,IAAAN;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GAK3CyB,KAAGq1B,GAAAA,cAAc;AAAQrzB,MAAAA;AAAAjD,IAAAU,CAAAA,MAAAA,KAAAV,SAAAa,SAE3BoC,KAAAgyB,eAAep0B,KAAK,IAClBQ,2BAAAA,IAACmI,oBACI9I,GACK,SAAA,mCACI,YAAA;AAAA,IAAA6I,eAAAA,MAERlI,2BAAAA,IAAA,MAAA,EACE,yCAAC,UAAmBR,EAAAA,UAAAA,OAAK,EAC3B,CAAA;AAAA,EAAA,GAEH,IAGHQ,+BAAA,MAAA,EAAKX,YAAE,0CAA0C,EAAA,CAAE,GACpDV,OAAAU,GAAAV,OAAAa,OAAAb,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAYQI,KAAA;AAAA,IAAAiuB,UAAW;AAAA,IAAQyF,QAAA;AAAA,IAAAxF,QAAA;AAAA,EAAA,GAAuBrxB,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAI9B6E,QAAAA,KAAGyxB,GAAAA,cAAc,YAC5BtvB,KAAGsvB,GAAAA,cAAc,OAAA5C,iBAAAvtB,EAAA;AAA4Bc,MAAAA;AAAAjH,YAAAU,KAC1CuG,KAAAvG,EAACgzB,iBAAAtyB,KAAuB,GAACpB,QAAAU,GAAAV,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAEtB,QAAAkH,KAAAwvB,aAAQhD;AAAqBtsB,MAAAA;AAAApH,IAAA22B,EAAAA,MAAAA,qBAAA32B,EAAA,EAAA,MAAA6E,MAAA7E,EAAAgH,EAAAA,MAAAA,MAAAhH,EAAA,EAAA,MAAAiH,MAAAjH,UAAAkH,MALzCE,MAAC/F,2BAAAA,IAAAy1B,0BAAAA,KACgB,EAAA,iBAAAjyB,IACX,IAAAmC,IACG,OAAAC,IACE0vB,SAAAA,mBACC,UAAAzvB,GACV,CAAA,GAAAlH,QAAA22B,mBAAA32B,QAAA6E,IAAA7E,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAEesH,QAAAA,MAAGgvB,GAAAA,cAAc,YAC5B1sB,MAAG0sB,GAAAA,cAAc,OAAA3C,cAAAxtB,EAAA;AAAyB+D,MAAAA;AAAAlK,YAAAU,KACvCwJ,MAAAxJ,EAACizB,cAAAvyB,KAAoB,GAACpB,QAAAU,GAAAV,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAEnB,QAAAoK,MAAAssB,aAAQ/C;AAAkBtpB,MAAAA;AAAArK,IAAA42B,EAAAA,MAAAA,kBAAA52B,EAAA,EAAA,MAAAsH,OAAAtH,EAAA4J,EAAAA,MAAAA,OAAA5J,EAAA,EAAA,MAAAkK,OAAAlK,UAAAoK,OALtCC,MAAChJ,2BAAAA,IAAAy1B,0BAAAA,KACgB,EAAA,iBAAAxvB,KACX,IAAAsC,KACG,OAAAM,KACE0sB,SAAAA,gBACC,UAAAxsB,IACV,CAAA,GAAApK,QAAA42B,gBAAA52B,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAqK,OApBNE,MAAClJ,2BAAAA,IAAAiJ,GAAA,MAAA,EACU,YACG,YAAA,GACJ,WACD,OAAAnH,IAEP,UAAAC,2BAAAA,KAAC2zB,GAAAA,SAAe,EAAA,OAAA,GACd3vB,UAAAA;AAAAA,IAAAA;AAAAA,IAOAiD;AAAAA,EAAAA,EAOF,CAAA,EACF,CAAA,GAAOrK,QAAAoH,KAAApH,QAAAqK,KAAArK,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAGYmL,QAAAA,MAAA,GAAGmrB,cAAc,OAAOC,UAAU,IAE/C5f,MAAG2f,GAAAA,cAAc;AAAUzf,MAAAA;AAAA7W,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGxB8T,MAAA;AAAA,IAAAmgB,SAAU;AAAA,EAAA,GAAOh3B,QAAA6W,OAAAA,MAAA7W,EAAA,EAAA;AAAA8W,MAAAA;AAAA9W,IAAAa,EAAAA,MAAAA,SAAAb,UAAA02B,YAEvB5f,MAAA4f,aAAQhD,mDACN,sBACC,EAAA,UAAAryB,2BAAA,IAAC41B,oCACOp2B,aACMmzB,YACHG,SAAaA,gBACd2B,QAAAA,QACO,eAAA;AAAA,IAAAoB,YAAA;AAAA,EAAA,EAAkB,CAAA,EAErC,CAAA,GACDl3B,QAAAa,OAAAb,QAAA02B,UAAA12B,QAAA8W,OAAAA,MAAA9W,EAAA,EAAA;AAAA+W,MAAAA;AAAA/W,IAAAa,EAAAA,MAAAA,SAAAb,UAAA02B,YAEA3f,MAAA2f,aAAQ/C,iBACNtyB,2BAAAA,IAAA0nB,GAAA,MAAA,EACU,UAAA,QACC,UAAC,GACA+L,WAAAA,gBACIF,eAAKA,QACXA,iBACH,MAAA,GAELtN,UAAAA,KAAAC,UAAe1mB,OAAc,MAAA,CAAA,EAChC,CAAA,GACDb,QAAAa,OAAAb,QAAA02B,UAAA12B,QAAA+W,OAAAA,MAAA/W,EAAA,EAAA;AAAAgX,MAAAA;AAAAhX,IAAA,EAAA,MAAAmL,OAAAnL,EAAA2W,EAAAA,MAAAA,OAAA3W,EAAA8W,EAAAA,MAAAA,OAAA9W,UAAA+W,OA/BHC,MAAC5T,2BAAA,KAAA+zB,GAAA,UAAA,EACkB,mBAAAhsB,KACX,SACF,IAAAwL,KACK,UAAA,QACA,YACF,OAAAE,KAENC,UAAAA;AAAAA,IAAAA;AAAAA,IAYAC;AAAAA,EAAAA,GAYH,GAAW/W,QAAAmL,KAAAnL,QAAA2W,KAAA3W,QAAA8W,KAAA9W,QAAA+W,KAAA/W,QAAAgX,OAAAA,MAAAhX,EAAA,EAAA;AAAAiX,MAAAA;AAAAjX,IAAAuK,EAAAA,MAAAA,OAAAvK,UAAAgX,OAzDbC,MAAC7T,2BAAAA,KAAAd,GAAAA,MAAA,EAAe,WAAA,UAAgB,QAAA,QAC9BiI,UAAAA;AAAAA,IAAAA;AAAAA,IAwBAyM;AAAAA,EAAAA,EAiCF,CAAA,GAAOhX,QAAAuK,KAAAvK,QAAAgX,KAAAhX,QAAAiX,OAAAA,MAAAjX,EAAA,EAAA;AAAAkX,MAAAA;AAAAlX,SAAAA,EAAA,EAAA,MAAAq2B,kBAAAr2B,EAAAiX,EAAAA,MAAAA,OAAAjX,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAiD,MAnFTiU,MAAC7V,2BAAAA,IAAAoQ,0BAAAA,QAAA,EACY,YAAA,QACP,IAAAxQ,IAEF,QAAAgC,IAgBOozB,yBACOA,gBAAAA,gBACP,SAAI,IACN,UAEPpf,UAAAA,IAAAA,CA2DF,GAASjX,QAAAq2B,gBAAAr2B,QAAAiX,KAAAjX,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAkX,OAAAA,MAAAlX,EAAA,EAAA,GApFTkX;AAoFS;AChHN,SAAAkgB,OAAAr3B,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAAo3B,MAAAA,MAAAvuB,QAAA2C,SAAAvF,MAAA5F;AAAAN,WAAAD,SACL;AAAA,IAAA+I;AAAAA,IAAA2C;AAAAA,IAAAlI,MAAA8zB;AAAAA,IAAAvlB,MAAAxR;AAAAA,IAAA,GAAA4F;AAAAA,EAAAA,IAAqEnG,OAAKC,OAAAD,OAAAC,OAAAq3B,MAAAr3B,OAAA8I,QAAA9I,OAAAyL,SAAAzL,OAAAkG,MAAAlG,OAAAM,OAAA+2B,OAAAr3B,EAAA,CAAA,GAAA8I,SAAA9I,EAAA,CAAA,GAAAyL,UAAAzL,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA;AAAtC8R,QAAAA,OAAAxR,OAAoBsK,SAAb,gBAAPtK;AAAoBM,MAAAA;AAAAZ,WAAAq3B,QAKjDz2B,KAAAy2B,QACEh2B,+BAAAwB,GAAAA,MAAA,EAAW,MAAA,GACV,UAACxB,2BAAAA,IAAA,MAAA,CACH,CAAA,GAAA,GACDrB,OAAAq3B,MAAAr3B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAyL,WAEDzK,KAACK,2BAAAA,IAAAiB,GAAAA,MAAA,EAAW,OAAA,UAAe,MAAC,GAAO,KAAA,GAAa,UAAA,GACvC,UACT,QAAA,CAAA,GAAOtC,OAAAyL,SAAAzL,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,YAAA8I,UAEN7H,KAAA6H,UACEzH,2BAAA,IAAAkK,kCAAA,EAAWzC,GAAAA,QAAc,MAAAA,OAAM2tB,QAAS,SAAe,MAAA3tB,OAAMgJ,QAAS,UAAA,CACxE,GAAA9R,QAAA8I,QAAA9I,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,IAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MAAAhB,EAAA,EAAA,MAAAiB,MAbHgC,KAAAG,2BAAA,KAACd,WAAW,OAAA,UAAc,KAAC,GACxB1B,UAAAA;AAAAA,IAAAA;AAAAA,IAMDI;AAAAA,IAICC;AAAAA,EAAAA,GAGH,GAAOjB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,SAAAA,EAAAkG,EAAAA,MAAAA,QAAAlG,UAAAiD,MAAAjD,EAAA,EAAA,MAAA8R,QAfT3O,oCAACmH,GAAK,MAAA,EAAA,cAAA,IAAuB,UAAC,GAAY,UAAC,GAAQwH,MAAU5L,GAAAA,MAC3DjD,UAAAA,GAeF,CAAA,GAAOjD,QAAAkG,MAAAlG,QAAAiD,IAAAjD,QAAA8R,MAAA9R,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAhBPmD;AAgBO;AC1BJ,SAAAm0B,sBAAAh3B,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA+B;AAAA,IAAAs3B;AAAAA,MAAAj3B,IACpC;AAAA,IAAAmH;AAAAA,IAAAC;AAAAA,EAAA,IAAmC+kB,mBACnC;AAAA,IAAA+K;AAAAA,EAAAA,IAAkBC,OAAAA,qBAAqBhwB,YAAYC,YAAY,GAC/D;AAAA,IAAAgwB;AAAAA,MAAyBC,mBAAU;AAAC/2B,MAAAA;AAAAZ,IAAAyH,CAAAA,MAAAA,cAAAzH,EAAA,CAAA,MAAA0H,gBAAA1H,EAAA03B,CAAAA,MAAAA,kBAAA13B,EAAA,CAAA,MAAAw3B,WAAAx3B,SAAAu3B,cACF32B,KAAAA,MAAA;AAC5B22B,mBACFC,QAAOI,QAASL,UAAU,GAC1BG,eAAe,QAAM;AAAA,MAAAvxB,IAAOsB;AAAAA,MAAUK,MAAQJ;AAAAA,IAAAA,CAAa;AAAA,EAAC,GAE/D1H,OAAAyH,YAAAzH,OAAA0H,cAAA1H,OAAA03B,gBAAA13B,OAAAw3B,SAAAx3B,OAAAu3B,YAAAv3B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AALD,QAAA63B,gBAAsBj3B,IAMtB;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAA63B,CAAAA,MAAAA,iBAAA73B,SAAAu3B,cAAAv3B,EAAA,CAAA,MAAAU,KAK9CM,KAAAu2B,aAAU;AAAA,IAAArvB,SAEK2vB;AAAAA,IAAaxmB,MAChB3Q,EAAE,qDAAqD;AAAA,EAAA,IAACkK,QAEvD5K,OAAA63B,eAAA73B,OAAAu3B,YAAAv3B,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,YAAAU,KAIVO,KAAAP,EAAE,sCAAsC,GAACV,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAAiB,MAD5CgC,KAAC5B,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,SAAU,QAAA,UACnB5B,cACH,GAAOjB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiD,MAZXE,oCAAC,QAEG,EAAA,QAAAnC,IAQA,SAAAiC,IAIU,eAAA,2BACN60B,MAAWA,MAAAA,aAAAA,CACjB,GAAA93B,QAAAgB,IAAAhB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAhBFmD;AAgBE;ACnCC,SAAA40B,+BAAA;AAAA/3B,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAQ;AAAAA,EAAA,IAAqBgsB,mBACrB;AAAA,IAAA/rB;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAE9Cw4B,MAAAA,CAAAA,8BAAuBv3B,UAAU;AAAC,WAAA;AAAAH,MAAAA;AAAAN,WAAAU,KAQ/BJ,KAACe,2BAAA,IAAAmI,kBAAA,EAAa9I,GAAW,SAAA,+CAAA,CAAiD,GAAAV,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAAS,CAAAA,MAAAA,WAAAw3B,WAAA9pB,UAAAnO,EAAA,CAAA,MAAAM,MAHhFM,oCAAC,UAEG,SAAAwC,2BAAAA,KAACP,WAAW,MAAA,GAAU,QAAA,UACpBvC,UAAAA;AAAAA,IAAAA;AAAAA,IAA2E;AAAA,IAC1EG,WAAUw3B,WAAA9pB;AAAAA,EACb,EAAA,CAAA,GAEU,eAAA,mCACN+pB,MAAAA,MAAAA,kBACN,GAAAl4B,EAAAS,CAAAA,IAAAA,WAAAw3B,WAAA9pB,QAAAnO,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GATFY;AASE;ACvBC,MAAMu3B,wBAAwBC,UAAAA,YAAY;AAAA,EAC/C7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC,GAGY2P,uBAAuBF,sBAAY;AAAA,EAC9C7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC,GCDK4P,kBAAkB,KAGX9nB,aAAahP,wBAAOC,MAAG;AAAA;AAAA;AAKJD,iBAAAA,OAAOa,OAAI,EAAEqO,MAAM;AAAA,EACjDC,OAAO;AAAA,EACPC,WAAW;AAAA,EACXC,SAAS;AACX,CAAC;AAAA;AAAA;AAiBM,SAAA0nB,wBAAAl4B,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAiC;AAAA,IAAAyxB;AAAAA,IAAA+G;AAAAA,MAAAn4B,IAItC;AAAA,IAAAI;AAAAA,EAAYC,IAAAA,OAAAA,eAAAnB,wBAAuC,GACnDk5B,WAAiBC,MAAAA,aAAAA,GACjBznB,WAAiB,uBAAuBC,MAAAA,MAAO,CAAA,IAC/C9F,YAAkButB,OAAAA,aAAa;AAACh4B,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACPnC,KAAA;AAAA,IAAAi4B,YAAa;AAAA,EAAA,GAAa74B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAnD,QAAA84B,SAAetpB,OAAAA,UAAU5O,EAA0B,GACnDsI,QAAcC,GAAAA,YACd4vB,UAAgBC,OAAAA,aAEhB,CAAAC,cAAAC,eAAA,IAAwCtnB,MAAAA,WAAc,GAEtD,CAAAunB,MAAAC,OAAA,IAAwBxnB,MAAAA,SAAS,EAAE,GAEnC,CAAAynB,UAAAC,WAAA,IAAgC1nB,MAAAA,YAChC,CAAA2nB,oBAAAC,qBAAA,IAAoD5nB,MAAAA,WAAuB,GAC3E,CAAA6nB,eAAAC,gBAAA,IAA0C9nB,iBAAuB;AAAC5Q,MAAAA;AAAA,OAAA;AAGhE,UAAA24B,YAAkB;AACd,QAAA,CAACtuB,aAAS,CAAKytB,QAAM;AAAA73B,UAAAA;AAAAjB,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAAS9B,MAAAsN,QAAGorB,SAAS,GAAC35B,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAApBgB,KAAOC;AAAaoV,YAAAA;AAAAA,IAAAA;AAAApV,QAAAA;AAAAjB,QAAAA,SAAA84B,OAAAhrB,cAAA9N,SAAAqL,WAAA;AAAApI,UAAAA;AAAAjD,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAIvCE,MAAA22B,CACgBA,UAAAA,MAAK3uB,OAAAC,OACiB,EAACmK,KAAAlF,QACD,IACrB,WAAWwpB,WAC/B35B,OAAAiD,OAAAA,MAAAjD,EAAA,CAAA;AAAAmD,UAAAA;AAAAnD,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEUI,MAAAA,MAAMoL,KAAGorB,GAAAA,SAAS,GAAC35B,OAAAmD,OAAAA,MAAAnD,EAAA,CAAA,GAV3BiB,MAAA63B,OAAMhrB,WAAAC,QAAA;AAAA,QAAAY,KAC2C,aAAatD,SAAS;AAAA,MAAA,CAAS,EAACkB,KAEpF9B,KAAIxH,IAAAA,GAKH,GACDuJ,KAAUmtB,UAAAA,SAAS,GACnB/qB,gBAAWzL,GAAmB,CAChC,GAACnD,EAAA,CAAA,IAAA84B,OAAAhrB,YAAA9N,OAAAqL,WAAArL,OAAAiB;AAAAA,IAAA;AAAAA,YAAAjB,EAAA,CAAA;AAXIiB,SAAAA;AAAAA,EAAAA;AAcT44B,QAAAA,gBAAsBx1B,sBAjByCrD,EAiBb;AAACC,MAAAA;AAAAjB,IAAA84B,CAAAA,MAAAA,UAAA94B,EAAAm5B,CAAAA,MAAAA,QAAAn5B,EAAAy4B,CAAAA,MAAAA,sBAAAz4B,UAAAqL,aAAArL,EAAA,EAAA,MAAA65B,iBAAA75B,EAAA,EAAA,MAAA04B,YAAA14B,EAAA,EAAA,MAAAkJ,SAElCjI,KAAAA,MAAA;sBACK,GACpB63B,OAAM/qB,QAAA;AAAA,MAAAY,KAEG,mBAAmBtD,SAAS;AAAA,MAAWyuB,QACpC;AAAA,MAAMC,MAAA;AAAA,QAAAZ;AAAAA,QAAAa,YAAArmB,QAAAia,SAAAxT;AAAAA,QAAAyf;AAAAA,QAAA/xB,MACuD;AAAA,MAAA;AAAA,IAAM,CAC5E,EAAC+D,KAAAkC,CAAA,YAAA;AAEIA,kBACE0qB,sBAAoBA,sBACxBC,SAAQuB,IAAA3B,oBAAyB,GACjCpvB,MAAK4C,KAAA;AAAA,QAAA1K,OAAc;AAAA,MAAA,CAAwB;AAAA,IAAA,CAE9C,EAAC2K,MAAAmuB,CAAA,QAAA;AAEA,YAAArrB,aAAmBqrB,KAAGC,UAAAtrB,YACtBurB,aAAmBF,KAAGC,UAAAJ,MAAA74B;AAClB2N,qBAAkB,QAEpB2qB,wBAA0B,GAC1BF,YAAYc,UAAU,IAEpBvrB,eAAkB,OAGpB6qB,mBAAqB,GACrBJ,YAAYc,UAAU,KAEtBlxB,MAAK4C,KAAA;AAAA,QAAA1K,OACI;AAAA,QAA8CqD,QAC7C;AAAA,MAAA,CACT;AAAA,IAAA,CAEJ,EAAC41B,QAAA,MAAA;AAEAnB,wBAAqB;AAAA,IAAA,CACtB;AAAA,EAAA,GACJl5B,OAAA84B,QAAA94B,OAAAm5B,MAAAn5B,OAAAy4B,oBAAAz4B,QAAAqL,WAAArL,QAAA65B,eAAA75B,QAAA04B,UAAA14B,QAAAkJ,OAAAlJ,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAtCDs6B,QAAAA,WAAiBr5B,IAyC6BgC,KAAA81B,QAAOwB;AAAWp3B,MAAAA;AAAAnD,YAAAU,KAIlDyC,KAAAzC,EAAE,uCAAuC,GAACV,QAAAU,GAAAV,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,YAAAU,KAIxCmE,KAAAnE,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,IAAA0xB,EAAAA,MAAAA,WAAA1xB,UAAA6E,MAFzCmC,KAAA;AAAA,IAAAkB,SACHwpB;AAAAA,IAAOrgB,MACVxM;AAAAA,EACP7E,GAAAA,QAAA0xB,SAAA1xB,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAIW,QAAAiH,KAAAsyB,sBAAsBE;AAAavyB,MAAAA;AAAAlH,YAAAU,KACvCwG,KAAAxG,EAAE,+CAA+C,GAACV,QAAAU,GAAAV,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,IAAA,EAAA,MAAAi5B,gBAAAj5B,EAAAs6B,EAAAA,MAAAA,YAAAt6B,EAAAiH,EAAAA,MAAAA,MAAAjH,UAAAkH,MAJ3CE,MAAA;AAAA,IAAAc,SACJoyB;AAAAA,IAAQje,SACR4c;AAAAA,IAAYnmB,UACX7L;AAAAA,IAAmCoK,MACvCnK;AAAAA,IAAkD4K,MAClD;AAAA,IAAShK,MACT;AAAA,EAAA,GACP9H,QAAAi5B,cAAAj5B,QAAAs6B,UAAAt6B,QAAAiH,IAAAjH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAgH,MAZKM,MAAA;AAAA,IAAAgK,cACQtK;AAAAA,IAGbuK,eACcnK;AAAAA,EAQhBpH,GAAAA,QAAAoH,KAAApH,QAAAgH,IAAAhH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,YAAAU,KAMUkJ,MAAAlJ,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,YAAA4J,OAAtDM,MAAA7I,2BAAAA,IAACwB,WAAM+G,UAAgD,IAAA,CAAA,GAAO5J,QAAA4J,KAAA5J,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,IAAAy5B,EAAAA,MAAAA,iBAAAz5B,EAAAu5B,EAAAA,MAAAA,sBAAAv5B,EAAAi5B,EAAAA,MAAAA,gBAAAj5B,UAAAq5B,YAAAr5B,EAAA,EAAA,MAAAm5B,QAAAn5B,EAAA,EAAA,MAAAs6B,YAAAt6B,EAAA,EAAA,MAAAU,KAC7D0J,MAAAmvB,sBAAsBE,+CACpBnvB,GAAAA,MAAW,EAAA,MAAA,WAAoB,SAAC,GAAU,QAAA,GAAW,WACpD,UAAClH,gCAAAP,GAAAA,MAAA,EAAW,MAAC,GACV02B,UAAAA;AAAAA,IAAAA,sBACIF,2BAAAA,IAAAA,WAAAA,UAAAA,EAAAA,UAAAA,YAAY34B,EAAE,sDAAsD,GAAC;AAAA,IAEzE+4B,iBAAap4B,2BAAA,IAAAE,qBAAA,EACT83B,UAAY34B,YAAAA,EAAE,+CAA+C,EAAC,CAAA;AAAA,EAAA,GAErE,GACF,IAEA0C,2BAAAA,KAACoH,YAAa,UAAkB,eAAC,GAC/B,UAAA;AAAA,IAACnJ,2BAAAA,IAAA60B,GAAA,WAAA,EACc,aAAAx1B,EAAE,uDAAuD,GAC5Du4B,UAAW,cACV,WAAA/sB,CAAA,MAAA;AACLA,QAAC8M,QAAS,WAASshB,SAAS;AAAA,IAAA,GAEvB/B,4BACJY,aACG,UAAAzlB,CAAA,QAAA;AACAxH,cAAAA,IAAC2oB,cAAAh0B,KAAoB;AAAA,IAAA,GAC9B;AAAA,IAGFQ,2BAAA,IAAAwB,GAAA,MAAA,EAAW,OAAA,SAAQ,OAAA,IAAY,MAAA,GAAI,UAAGs2B,GAAAA,KAAIx2B,MAAA,IAAA41B,eAAA,GAA6B,CAAA;AAAA,EAAA,EAC1E,CAAA,GACDv4B,QAAAy5B,eAAAz5B,QAAAu5B,oBAAAv5B,QAAAi5B,cAAAj5B,QAAAq5B,UAAAr5B,QAAAm5B,MAAAn5B,QAAAs6B,UAAAt6B,QAAAU,GAAAV,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,IAAAkK,EAAAA,MAAAA,OAAAlK,UAAAoK,OA/BLC,MAAChJ,2BAAA,IAAA,YAAA,EACC,UAAC+B,2BAAA,KAAAoH,GAAA,OAAA,EAAa,OAAC,GACbN,UAAAA;AAAAA,IAAAA;AAAAA,IACCE;AAAAA,EAAAA,EA6BH,CAAA,EACF,CAAA,GAAapK,QAAAkK,KAAAlK,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAAkR,EAAAA,MAAAA,YAAAlR,EAAA,EAAA,MAAA0xB,WAAA1xB,EAAAsH,EAAAA,MAAAA,OAAAtH,EAAA,EAAA,MAAAqK,OAAArK,UAAAmD,MAtDfoH,qCAACkH,0BACQ,QAAA,EAAA,UACHP,IAAAA,UACI,QAAA/N,IACA,QAAAmE,KAcCoqB,SACOA,gBAAAA,SAEhBrnB,UAAAA,IAkCF,CAAA,GAASrK,QAAAkR,UAAAlR,QAAA0xB,SAAA1xB,QAAAsH,KAAAtH,QAAAqK,KAAArK,QAAAmD,IAAAnD,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAAAmL,MAAAA;AAAA,SAAAnL,UAAAuK,OAAAvK,EAAA+4B,EAAAA,MAAAA,QAAAwB,cAxDXpvB,MAAC9J,2BAAAA,IAAAm5B,GAAAA,gBAAA,EAAyB,UAAA,SAAkB,SAAAv3B,IAC1CsH,UAAAA,IAAAA,CAwDF,GAAiBvK,QAAAuK,KAAAvK,EAAA,EAAA,IAAA+4B,QAAAwB,YAAAv6B,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA,GAzDjBmL;AAyDiB;AAzId,SAAAgF,SAAAsqB,QAAA;AAAA,SA6BqBC,OAAInyB,SAAU;AAAQ;AA7B3C,SAAA2C,QAAAwvB,MAAA;AAAA,SA4BuBA,MAAIC;AAAA;AChDlC,MAAMC,gBAAgB;AAAA,EAACve,SAAS;AAAA,EAAMvb,OAAO;AAAA,EAAO2D,QAAQmG;AAAS,GAC/DiwB,cAAc;AAAA,EAACxe,SAAS;AAAA,EAAOvb,OAAO;AAAA,EAAO2D,QAAQ;AAAM,GAC3Dq2B,iBAAiB;AAAA,EAACze,SAAS;AAAA,EAAOvb,OAAO;AAAA,EAAO2D,QAAQ;AAAU,GAClEs2B,gBAAgB;AAAA,EAAC1e,SAAS;AAAA,EAAOvb,OAAO;AAAA,EAAO2D,QAAQ;AAAS,GAChEu2B,gBAAgB;AAAA,EAAC3e,SAAS;AAAA,EAAOvb,OAAO;AAAA,EAAO2D,QAAQ;AAAS,GAGzDw2B,wBAAwBA,MAAA;AAAAj7B,QAAAA,IAAAC,uBAAA,CAAA;AAAAK,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACVzC,KAAA;AAAA,IAAAu4B,YAAa;AAAA,EAAA,GAAa74B,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAnD,QAAA84B,SAAetpB,OAAAA,UAAUlP,EAA0B,GACnD+K,YAAkButB,OAAAA,aAAa;AAACh4B,MAAAA;AAAA,OAAA;AAG1B,QAAA,CAACk4B,UAAM,CAAKztB,WAAS;AAAArK,UAAAA;AAAAhB,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAChB/B,MAAAuN,QAAAssB,WAAc,GAAC76B,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAtBY,KAAOI;AAAeqV,YAAAA;AAAAA,IAAAA;AAAArV,QAAAA;AAAAhB,MAAA84B,CAAAA,MAAAA,UAAA94B,SAAAqL,aAGjBrK,MAAAk6B,kBAAkBpC,QAAQztB,SAAS,GAACrL,OAAA84B,QAAA94B,OAAAqL,WAAArL,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAA3CY,KAAOI;AAAAA,EAAAA;AALT,QAAAm6B,qBAA2Bv6B,IAQ3B;AAAA,IAAAyb;AAAAA,IAAAvb;AAAAA,IAAA2D;AAAAA,EAAAA,IAAiCJ,QAAc82B,cAAAA,oBAAkBP,aAAe;AAAC55B,MAAAA;AAAA,SAAAhB,EAAAc,CAAAA,MAAAA,SAAAd,SAAAqc,WAAArc,EAAA,CAAA,MAAAyE,UAC1EzD,KAAA;AAAA,IAAA6hB,MAAOpe;AAAAA,IAAM4X;AAAAA,IAAAvb;AAAAA,EAAAA,GAAiBd,OAAAc,OAAAd,OAAAqc,SAAArc,OAAAyE,QAAAzE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAA9BgB;AAA8B;AAGvC,SAASk6B,kBAAkBpC,QAAsBztB,WAAmB;AAC3DytB,SAAAA,OAAOhrB,WACXC,QAAgC;AAAA,IAC/BY,KAAK;AAAA,IACLd,KAAK;AAAA,EACN,CAAA,EACAtB;AAAAA,IACC9B,cAAK2wB,CAAa,aAAA;AACZ,UAAA,CAACA,YAAYA,SAASz4B,WAAW;AAC5Bk4B,eAAAA;AAIT,YAAMQ,kBAAkBD,SAASnwB,OAC9B8C,CAAYA,YAAAA,QAAQutB,eAAejwB,aAAa0C,QAAQjG,SAAS,MACpE,GAEMyzB,kBAAkBF,gBAAgBhmB,KAAMtH,CAAYA,YAAAA,QAAQtJ,WAAW,UAAU;AAErF82B,aAAAA,mBACAC,QAAAA,QAAQC,QAAAA,SAAS,IAAIC,KAAKH,gBAAgBI,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAK,CAAC,IAE7DZ,iBAGcO,gBAAgBhmB,KACpCtH,CAAAA,YACCA,QAAQtJ,WAAW,aACnB+2B,gBAAQC,QAAAA,SAAS,IAAIC,KAAK3tB,QAAQ4tB,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAM,CAAA,CAChE,IAESX,gBAGiBM,gBAAgBhmB,KACvCtH,CAAAA,YACCA,QAAQtJ,WAAW,aACnBm3B,QAAAA,SAASH,iBAAS,IAAIC,KAAK3tB,QAAQ4tB,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAK,CAAC,CACjE,IAE2BV,gBAAgBH;AAAAA,IAAAA,CAC5C;AAAA,IACDjsB,qBAAYsrB,CACVjS,SAAAA,QAAQnnB,MAAM,mCAAmCo5B,GAAG,GAC7C3rB,QAAG;AAAA,MAAC8N,SAAS;AAAA,MAAOvb,OAAO;AAAA,MAAM2D,QAAQmG;AAAAA,IAAU,CAAA,EAC3D;AAAA,IACD4B,UAAAA,UAAUouB,aAAa;AAAA;AAAA,EACzB;AACJ;AC3EO,SAAAiB,6BAAAv7B,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAsC;AAAA,IAAA67B;AAAAA,EAAAA,IAAAx7B,IAG3CwkB,cAAoBC,OAAAA,kBAEpB;AAAA,IAAAlC,MAAAkZ;AAAAA,IAAA1f,SAAA2f;AAAAA,IAAAl7B,OAAAm7B;AAAAA,EAAAA,IAIIhB,sBACJ,GAAA,CAAAiB,aAAAC,cAAA,IAAsCvqB,iBAAc;AAAChR,MAAAA;AAE7Cm7B,OAAAA,sBAAsB,aAAaA,sBAAsB,cAAcG;AAD/E,QAAAE,iBAAuBx7B;AAGtBI,MAAAA;AAAAhB,IAAA,CAAA,MAAA8kB,aAAA8U,SACwB54B,KAAA8jB,aAAW8U,SAAa,CAAA,GAAA55B,EAAA,CAAA,IAAA8kB,aAAA8U,OAAA55B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAjD,QAAAq8B,mBAAyBr7B,IACzBs7B,eAAqBD,iBAAgB15B,WAAa,KAAI05B,iBAAgB,CAAA,EAAA9zB,SAAa,UACnF,CAAAg0B,6BAAAC,8BAAA,IAAsE5qB,iBAAc;AAAC3Q,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEpD9B,KAAA;AAAA,IAAA2V,OAAQ;AAAA,EAAA,GAAQ5W,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAjDy8B,QAAAA,aAAmBC,qBAAcz7B,EAAgB,GACjD;AAAA,IAAAP;AAAAA,EAAYC,IAAAA,sBAAAnB,wBAAuC,GACnDm9B,aAAkBhE,MAAAA,aAAa;AAAC,MAAAiE,YAAA35B;AAAAjD,IAAAq8B,CAAAA,MAAAA,oBAAAr8B,SAAAy8B,cAEhCG,aAAmBP,iBAAgB5xB,IAAAS,OAAyB,GAC9CjI,KAAAw5B,WAAUI,cACPD,UAAU,EAACnyB,IAAA0F,QAG1B,GAACnQ,OAAAq8B,kBAAAr8B,OAAAy8B,YAAAz8B,OAAA48B,YAAA58B,OAAAiD,OAAA25B,aAAA58B,EAAA,CAAA,GAAAiD,KAAAjD,EAAA,CAAA;AAJH,QAAA45B,QAAc32B;AAIXE,MAAAA;AAAAnD,WAAA45B,SAUqBz2B,KAAA;AAAA,IAAA25B,OAAAA,MAAiBlD,2BAAAA,IAAAA,WAAAA,UAAAA,EAAAA,UAAK,MAAA,CAAA;AAAA,EAAA,GAAK55B,OAAA45B,OAAA55B,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAA6E,MAAAA;AAAA7E,WAAA48B,cAAA58B,EAAA45B,EAAAA,MAAAA,MAAAj3B,UAC/BkC,KAAA;AAAA,IAAAjC,OAAQg3B,MAAKj3B;AAAAA,IAAAi3B,OAAgBgD;AAAAA,EAAAA,GAAW58B,OAAA48B,YAAA58B,EAAA,EAAA,IAAA45B,MAAAj3B,QAAA3C,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,IAAA,EAAA,MAAA87B,sBAAA97B,EAAAU,EAAAA,MAAAA,KAAAV,EAAAmD,EAAAA,MAAAA,MAAAnD,UAAA6E,MALpDmC,KAAC3F,2BAAA,IAAAwB,GAAA,MAAA,EAAW,MAAA,GAAU,QAAA,UACpB,UAACxB,2BAAAA,IAAAmI,OAAAA,WAAA,EACI9I,GACK,SAAA,sDACI,YAAAyC,IACJ,QAAA0B,IACCi3B,SAAAA,mBAAAA,CAEb,EAAA,CAAA,GAAO97B,QAAA87B,oBAAA97B,QAAAU,GAAAV,QAAAmD,IAAAnD,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,IAAAs8B,EAAAA,MAAAA,gBAAAt8B,EAAAo8B,EAAAA,MAAAA,kBAAAp8B,EAAAi8B,EAAAA,MAAAA,sBAAAj8B,UAAAg8B,wBAAAh8B,EAAA,EAAA,MAAA+7B,qBAAA/7B,EAAA,EAAA,MAAAU,KAAAV,EAAA,EAAA,MAAA28B,cAGP11B,KAAAq1B,gBAAgBP,qBAAsBE,CAAAA,uBAAuBD,uBAAoB;AAAA,IAAA9zB,SAElEk0B,iBAAcxxB,SAAA,MAAA;AAGjB4xB,uCAAmC,GACnCG,WAAS1C,IAAA9B,qBAA0B;AAAA,IAAC;AAAA,IACrC9mB,MAED3Q,EADE07B,iBACA,mEACA,gEADgE;AAAA,IACCtqB,MACjEsqB,iBAAiB,YAAY;AAAA,IAAStpB,UAClCspB;AAAAA,IAAc3F,MAClB2F,iBAAiB,UAAOxxB;AAAAA,EAAAA,IAAYA,QAEnC5K,QAAAs8B,cAAAt8B,QAAAo8B,gBAAAp8B,QAAAi8B,oBAAAj8B,QAAAg8B,sBAAAh8B,QAAA+7B,mBAAA/7B,QAAAU,GAAAV,QAAA28B,YAAA38B,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAAgH,EAAAA,MAAAA,MAAAhH,UAAAiH,MA5BjBC,oCAAC,QAEG,EAAA,SAAAF,IAWA,QAAAC,IAiBU,eAAA,2BACN6wB,MAAWA,MAAAA,aACjB,CAAA,GAAA93B,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,YAAAu8B,+BACDn1B,MAAAm1B,+BACCl7B,2BAAA,IAAC,yBACU,EAAA,SAAA,MAAMm7B,+BAA8B,EAAM,GAC/B,oBAAA,MAAA;qBACC,GACnBA,iCAAoC;AAAA,EAGzC,EAAA,CAAA,GAAAx8B,QAAAu8B,6BAAAv8B,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,SAAAA,EAAAoH,EAAAA,MAAAA,OAAApH,UAAAkH,MA1CHI,MACEJ,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IAiCCE;AAAAA,EAAAA,EAQA,CAAA,GACApH,QAAAoH,KAAApH,QAAAkH,IAAAlH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GA3CHsH;AA2CG;AA1EA,SAAA6I,SAAA4sB,MAAA;AA2BDA,SAAAA,KAAIj1B,SAAU,YAAYzG,2BAAA,IAAA,QAAA,EAAwB07B,eAAIl8B,MAAjBk8B,GAAAA,KAAIl8B,KAAoB,IAAUk8B,KAAIl8B;AAAM;AA3BhF,SAAAqK,QAAAwvB,MAAA;AAAA,SAuB6CA,KAAIt5B;AAAA;ACb3C47B,MAAAA,yBAAyBtV,WAAK,MAAM;AACzC5jB,QAAAA,uBAAuBwE,OAAAA,2BACvB;AAAA,IAAClC;AAAAA,IAAQjB;AAAAA,IAAYD;AAAAA,IAAkB+3B;AAAAA,IAAgBl4B,UAAAA;AAAAA,EAAAA,IAAYgD,cAAc,GACjFm1B,oBAAoBh4B,iBAAiBC,UAAU,IAAI,CAAC,EAAEgB,IAEtDg3B,gBADcj4B,iBAAiBC,aAAa,CAAC,IACf,CAAC,GAC/Bi4B,WAAWD,eAAeh3B,IAC1Bk3B,iBAAiBrtB,EAAQmtB,eAAe/2B,QAAQk3B,KAChD31B,gBAAgBygB,MAAAA,QAAQ,MACpBhiB,QAAQuB,iBAAiB41B,UAAAA,WAAen3B,OAAOuB,aAAa,KAAM,MACzE,CAACvB,QAAQuB,aAAa,CAAC,GACpB;AAAA,IAACjH;AAAAA,MAAKC,OAAenB,eAAAA,wBAAwB,GAa7Cg+B,0BAA0BpV,cAAQ,MAAuC;AACvEqV,UAAAA,uBAAuB91B,gBAAgB,CAAC;AAG9C,QAAI,CAACy1B,YAAY,CAACK,wBAAwB,CAAC91B;AACzC,aAAO4G,QAAG;AAAA,QAAC8N,SAAS;AAAA,MAAA,CAAM;AAG5B,UAAM/O,cAAcnF,OAAAA,eAAei1B,QAAQ,GACrC7d,OAAOge,UAAAA,WAAeE,oBAAoB,GAG1CC,oBAAoBne,KAAKoe,UAC5BvoB,CAAyB,MAAA,OAAOA,KAAK,YAAY,UAAUA,CAC9D;AAEOwoB,WAAAA,KAAAA;AAAAA;AAAAA,MAELrvB,QAAG;AAAA,QAAC8N,SAAS;AAAA,MAAA,CAAK;AAAA;AAAA,MAElBvY,qBACG+5B,kCACCvwB,aACCowB,sBAAsB,KAAKne,OAAOA,KAAKja,MAAM,GAAGo4B,iBAAiB,CACpE,EACCnxB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,QAKCuxB,UAAAA,aAAa,GAAG;AAAA,QAChBrzB,UAAAA,IACE,CAAC;AAAA,UAACvG;AAAAA,UAAOE;AAAAA,QAAAA,OAAqC;AAAA,UAC5CiY,SAAS;AAAA,UACT0hB,QAAQ;AAAA,YACNC,cAAc;AAAA,cACZ95B,OAAOA,MAAM85B;AAAAA,cACb55B,WAAWA,UAAU45B;AAAAA,YACvB;AAAA,YACAjoB,UAAUkoB,UAAmB/5B,IAAAA,MAAMg6B,YAAY95B,UAAU85B,UAAUv2B,aAAa,GAC5Ew2B;AAAAA,UAAAA;AAAAA,QACN,EAEJ;AAAA,MAAA;AAAA,IAEN;AAAA,EAAA,GACC,CAACr6B,sBAAsBs5B,UAAUz1B,aAAa,CAAC,GAC5Cy2B,gBAAgB/5B,QAAAA,cAAcm5B,yBAAyB;AAAA,IAACnhB,SAAS;AAAA,EAAA,CAAK,GAEtEgiB,wBAAwBrW,MAAAA,YAAY,MAAM;AAC1CoW,kBAAc/hB,WAEd+hB,cAAcL,QAAQhoB,YACxBknB,eAAe;AAAA,MACb92B,IAAIi4B,cAAcL,OAAOhoB;AAAAA,MACzB3P;AAAAA,IAAAA,CACD;AAAA,EAAA,GAEF,CAACg4B,cAAc/hB,SAAS+hB,cAAcL,QAAQd,gBAAgB72B,MAAM,CAAC;AAkBxE;AAAA;AAAA,IAdE,CAACg3B,YACD,CAACz1B;AAAAA,IAED01B;AAAAA,IAEAe,cAAc/hB;AAAAA;AAAAA;AAAAA,IAIb,CAAC+hB,cAAcL,QAAQC,aAAa95B,MAAMo6B,aACzC,CAACF,cAAcL,QAAQC,aAAa55B,UAAUk6B;AAAAA,IAEhDF,cAAcL,QAAQhoB,aAAamnB,oBAEd,sCAGpB,QACC,EAAA,QACEkB,cAAcL,QAAQhoB,WAClB;AAAA,MACE7N,SAASm2B;AAAAA,MACT96B,MAAMg7B,MAAAA;AAAAA,MACNltB,MAAM3Q,EAAE,oEAAoE;AAAA,IAAA,IAE9E;AAAA,MACEmX,IAAI9S;AAAAA,MACJxB,MAAMouB,MAAAA;AAAAA,MACNtgB,MAAM3Q,EAAE,mEAAmE;AAAA,IAC7E,GAEN,eAAY,4BACZ,wCACGmC,GAAAA,MAAK,EAAA,MAAM,GAAG,QAAO,UACnBu7B,UAAAA,cAAcL,QAAQhoB,WACnBrV,EAAE,sDAAsD,IACxDA,EAAE,sDAAsD,EAC9D,CAAA,GAEF,MAAMyJ,0BACN,MAAK,UACL,CAAA;AAAA;AAEN,CAAC;AAED6yB,uBAAuBvlB,cAAc;ACrJ9B,MAAM+mB,mBAAmBpG,UAAAA,YAAsB;AAAA,EACpD7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC;ACUM,SAAA8V,oBAAAn+B,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA6B;AAAA,IAAAy+B;AAAAA,IAAAj3B;AAAAA,IAAAhH;AAAAA,MAAAH,IAKlC;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GACnD,CAAAm/B,cAAAC,aAAA,IAAsChtB,MAAAA,WAAc,GACpD,CAAAitB,cAAAC,aAAA,IAAsCltB,MAAAA,WAAc,GACpD+qB,aAAkBhE,MAAAA,gBAElB;AAAA,IAAAoG;AAAAA,IAAAC;AAAAA,EAAkCvH,IAAAA,OAAAA,qBAAqBhwB,YAAYi3B,WAASn+B,SAAW,EAAE;AAACK,MAAAA;AAAAZ,IAAA++B,CAAAA,MAAAA,WAAA/+B,SAAA28B,cAExD/7B,KAAAA,MAAA;AAChCm+B,YAAOnH,WACPgH,gBAAkB,GAClBjC,WAAS1C,IAAAuE,kBAAA;AAAA,MAAAS,qBAA6C;AAAA,IAAA,CAAU;AAAA,EACjEj/B,GAAAA,OAAA++B,SAAA/+B,OAAA28B,YAAA38B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAAk/B,gBAAsBt+B;AAIEI,MAAAA;AAAAhB,IAAAg/B,CAAAA,MAAAA,kBAAAh/B,SAAA28B,cAEU37B,KAAAA,MAAA;AAChCg+B,mBAAcpH,WACdkH,gBAAkB,GAClBnC,WAAS1C,IAAAuE,kBAAA;AAAA,MAAAS,qBAA6C;AAAA,IAAA,CAAU;AAAA,EACjEj/B,GAAAA,OAAAg/B,gBAAAh/B,OAAA28B,YAAA38B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAAm/B,gBAAsBn+B;AAISC,MAAAA;AAAAjB,MAAAA,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAErB9B,KAAAA,MAAA,MAAA;oBAEa,GACnB69B,gBAAmB;AAAA,EAAA,GAEtB9+B,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GALDuS,MAAAA,UAAUtR,EAKT,GAEGy9B,aAAaA,UAAS36B,OAASq7B,CAAAA,OAAAA,UAAUV,UAAS36B,GAAI;AAAC,WAAA;AAAAd,MAAAA;AAAAjD,IAAA,CAAA,MAAAS,WAAAW,SAYvC6B,KAAA;AAAA,IAAAxC,YAAaA,WAAUW;AAAAA,EAAOpB,GAAAA,EAAA,CAAA,IAAAS,WAAAW,OAAApB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,IAAAU,CAAAA,MAAAA,KAAAV,UAAAiD,MAJ1CE,KAAC9B,2BAAA,IAAAwB,WAAW,MAAA,GAAU,QAAA,UACpB,UAAAxB,2BAAA,IAACmI,oBACI9I,GACM,SAAA,uCACD,QAAAuC,IAEZ,EAAA,CAAA,GAAOjD,OAAAU,GAAAV,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,YAAAU,KAGCmE,KAAAnE,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,YAAAU,KACjBsG,KAAAtG,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,YAAAgH,MAA7DC,KAAA;AAAA,IAAAwE,SAAUzE;AAAAA,EAAmD,GAAChH,QAAAgH,IAAAhH,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAA,EAAA,MAAAk/B,iBAAAl/B,EAAA2+B,EAAAA,MAAAA,gBAAA3+B,EAAA6E,EAAAA,MAAAA,MAAA7E,UAAAiH,MAH9EC,KAAA7F,2BAAAA,IAACkK,oCACU2zB,wBACH,MAAAr6B,IACQ,cAAAoC,IACL03B,SAAW,aACpB,CAAA,GAAA3+B,QAAAk/B,eAAAl/B,QAAA2+B,cAAA3+B,QAAA6E,IAAA7E,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,YAAAU,KAIM0G,MAAA1G,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,YAAAU,KACjC4G,MAAA5G,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,YAAAsH,OAA7DsC,MAAA;AAAA,IAAA6B,SAAUnE;AAAAA,EAAmD,GAACtH,QAAAsH,KAAAtH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,IAAA,EAAA,MAAAm/B,iBAAAn/B,EAAA6+B,EAAAA,MAAAA,gBAAA7+B,EAAAoH,EAAAA,MAAAA,OAAApH,UAAA4J,OAH9EM,MAAA7I,2BAAAA,IAACkK,oCACU4zB,wBACH,MAAA/3B,KACQ,cAAAwC,KACLi1B,SAAW,aACpB,CAAA,GAAA7+B,QAAAm/B,eAAAn/B,QAAA6+B,cAAA7+B,QAAAoH,KAAApH,QAAA4J,KAAA5J,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,SAAAA,EAAAkK,EAAAA,MAAAA,OAAAlK,UAAAmD,MAAAnD,EAAA,EAAA,MAAAkH,MAtBRkD,qCAAC,QAEG,EAAA,SAAChH,2BAAA,KAAAd,GAAA,MAAA,EAAW,OAAA,UAAiB,SAAA,iBAAqB,QAChDa,UAAAA;AAAAA,IAAAA;AAAAA,IAOA+D;AAAAA,IAOAgD;AAAAA,EAMF,EAAA,CAAA,GAEU,eAAA,yBACNguB,MAAAA,MAAAA,iBAAAA,CACN,GAAAl4B,QAAAkK,KAAAlK,QAAAmD,IAAAnD,QAAAkH,IAAAlH,QAAAoK,OAAAA,MAAApK,EAAA,EAAA,GA3BFoK;AA2BE;AChEOi1B,MAAAA,iBAAiB59B,wBAAO+I,QAAK;AAAA,IACtC,CAAC;AAAA,EAACvI,OAAAA;AAAK,MACAkZ,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,qBAQUlZ,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEC,QAAQ;AAAA,uBAC1CtzB,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAO9CrvB,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEC,QAAQ;AAAA,yBAC1CtzB,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMhDrvB,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEC,QAAQ;AAAA,yBAC1CtzB,OAAME,OAAOgzB,MAAMmK,QAAQhK,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA,KAIpE;AAAA,GAQUiO,aAAaj/B,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAwH;AAAAA,IAAAhH;AAAAA,IAAAW;AAAAA,EAAAd,IAAAA,IACzBk/B,cAAoB/3B,eAAehH,WAAU8H,MAC7C;AAAA,IAAA7H;AAAAA,EAAAA,IAAYC,aAAAA,eAAAnB,wBAAuC;AAAC,MAEhDiB,WAAUg/B,oCAA0C;AAAA,WAAA;AAAA7+B,MAAAA;AAAAZ,IAAA,CAAA,MAAAw/B,eAAAx/B,EAAAS,CAAAA,MAAAA,WAAA8H,QAAAvI,EAAAS,CAAAA,MAAAA,WAAAW,SAMnDR,KAAA,CAAC4+B,8CACC38B,GAAK,MAAA,EAAA,OAAA,IAAY,SACfpC,UAAAA,WAAUW,SAAUX,WAAU8H,MACjC,GACDvI,OAAAw/B,aAAAx/B,EAAA,CAAA,IAAAS,WAAA8H,MAAAvI,EAAA,CAAA,IAAAS,WAAAW,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAEoC,QAAAgB,MAACI;AAAKH,MAAAA;AAAAjB,IAAAU,CAAAA,MAAAA,KAAAV,SAAAoB,SACxCH,KAAAG,SAASV,EAAE,6CAA6C,GAACV,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAD5DgC,oCAACy8B,GAAW,SAAA,EAAA,IAAA,MAAK,gBAAW,IAAS,OAAA1+B,IAAoB,eAAA,iCACtDC,cACH,GAAUjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAiD,MATZE,KAACC,2BAAA,KAAA,gBAAA,EAA6B,cAAA,GAAU,UACrCxC,UAAAA;AAAAA,IAAAA;AAAAA,IAMDqC;AAAAA,EAAAA,EAGF,CAAA,GAAiBjD,QAAAY,IAAAZ,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAVjBmD;AAUiB,GC5Efw8B,+BAA+B,MAAO,KAAK,KAAK,KAAK;AAKpD,SAAAC,oBAAAx5B,QAAA;AAAA,QAAApG,IAAAC,qBAAAA,EAAA,CAAA,GACLiJ,QAAcC,GAAAA,SAAS;AAAC,MAAA7I,IAAAM;AAAAZ,IAAAoG,CAAAA,MAAAA,UAAApG,SAAAkJ,SAId5I,KAAAA,OACJ8F,OAAMqV,WACRvS,MAAK4C,KAAA;AAAA,IAAA,GAAU1F;AAAAA,IAAM2qB,UAAA4O;AAAAA,EAAyC,CAAA,GAAC,MAAA;AAG3Dv5B,WAAMqV,WACRvS,MAAK4C,KAAA;AAAA,MAAA,GACA1F;AAAAA,MAAM2qB,UAAA;AAAA,IAAA,CAGV;AAAA,EAGJnwB,IAAAA,KAAA,CAACwF,QAAQ8C,KAAK,GAAClJ,OAAAoG,QAAApG,OAAAkJ,OAAAlJ,OAAAM,IAAAN,OAAAY,OAAAN,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA,IAblBuS,MAAAA,UAAUjS,IAaPM,EAAe;AAAC;ACIrB,MAAMwS,iBAAkBysB,CAAkBA,OAAAA,GAAGzsB,eAAe,GAE/C0sB,WAAW96B,MAAAA,WAA0C,SAAAjF,OAAAkF,KAAA;AAAAjF,QAAAA,IAAAC,uBAAA,EAAA,GAChE;AAAA,IAAAsW;AAAAA,IAAAwpB;AAAAA,MAA0BhgC,OAE1B;AAAA,IAAAigC;AAAAA,IAAAC;AAAAA,IAAAvB,WAAA79B;AAAAA,IAAAkvB;AAAAA,IAAAtoB;AAAAA,IAAAC;AAAAA,IAAA+b;AAAAA,IAAAsS;AAAAA,IAAAmK;AAAAA,IAAAhuB;AAAAA,IAAAiuB;AAAAA,IAAAC;AAAAA,IAAApT;AAAAA,IAAAqT;AAAAA,IAAAC;AAAAA,IAAArT;AAAAA,IAAAsT;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAoBIhU,gBACJzd,GAAAA,gBAAsBU,OAAAA,iBACtBjM,GAAAA,WAAiB4E,OAAAA,oBAAoBZ,UAAU,GAC/C;AAAA,IAAArG;AAAAA,EAAgB0uB,IAAAA,iBAKhB,GAAA,CAAA4Q,YAAA,IAAuB9uB,MAAA1G,SAAAA,OAAmC,GAE1Dy1B,WAAiB5Q,WAAS6Q,qBAAAnlB,SAC1B;AAAA,IAAA/a;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAAC,MAAAc,IAAAM;AAAAZ,WAAAU,KAOzCE,KAAAF,EAAE,+CAA+C,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAC5CM,KAAAN,EAAE,qDAAqD,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA2gC,CAAAA,MAAAA,YAAA3gC,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALhEC,KAAA;AAAA,IAAAkF,IACD;AAAA,IAAW1B,QACP;AAAA,IAASgX,SACRklB;AAAAA,IAAQv/B,OACVR;AAAAA,IAAkD+nB,aAC5C3nB;AAAAA,IAAwD8vB,UAAA;AAAA,EAAA,GAEtE9wB,OAAA2gC,UAAA3gC,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAM,KAPMW,IAWT2+B,oBAZ+Bt/B,EAYW;AAAC2C,MAAAA;AAAAjD,IAAAyH,CAAAA,MAAAA,cAAAzH,SAAAgP,cAAA6xB,QAAA7gC,EAAA0H,EAAAA,MAAAA,gBAAA1H,UAAA0gC,gBAEjCz9B,KAAAA,MAAA;AACRgpB,UAAAA,MAAYjd,cAAa6xB,KAAAC,eACPr5B,YAAYC,YAAY,EAAC6E,KAEvCw0B,cAAA5tB,CAAA,UAAA;AACMA,YAAKrL,SAAU,cACjB44B,aAAY3B,QAASiC,qBAAqB7tB,KAAK,CAAC,GAG9CA,MAAKrL,SAAU,YACjB44B,aAAY3B,QAASkC,mBAAmB9tB,KAAK,CAAC;AAAA,IAAA,CAEjD,CACH,EAAC+O,UACU;AAAC,WAAA,MAAA;AAGZ+J,UAAGC,YAAa;AAAA,IAAC;AAAA,EAAA,GAEpBlsB,OAAAyH,YAAAzH,EAAA,CAAA,IAAAgP,cAAA6xB,MAAA7gC,QAAA0H,cAAA1H,QAAA0gC,cAAA1gC,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,IAAA,EAAA,MAAAyH,cAAAzH,EAAAgP,EAAAA,MAAAA,iBAAAhP,EAAA0H,EAAAA,MAAAA,gBAAA1H,UAAA0gC,gBAAEv9B,MAACsE,YAAYuH,eAAetH,cAAcg5B,YAAY,GAAC1gC,QAAAyH,YAAAzH,QAAAgP,eAAAhP,QAAA0H,cAAA1H,QAAA0gC,cAAA1gC,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAnB1DuS,MAAAA,UAAUtP,IAmBPE,EAAuD;AAE1D+9B,QAAAA,SAAelxB,EAAQnP,OAAKsgC;AAAOt8B,MAAAA;AAAA7E,IAAA0gC,EAAAA,MAAAA,gBAAA1gC,UAAAa,SACOgE,KAAAA,MAAA;AAKxC67B,iBAAY3B,QAAA;AAAA,MAAAj3B,MACJ;AAAA,MAAUs5B,SAAA,CAAA;AAAA,MAAAlD,UAENr9B;AAAAA,IAAAA,CACX;AAAA,EACFb,GAAAA,QAAA0gC,cAAA1gC,QAAAa,OAAAb,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAVDqhC,QAAAA,qBAA2BC,8BAAez8B,EAUzC;AAAC,MAAAmC,IAAAC;AAAAjH,IAAAqhC,EAAAA,MAAAA,sBAAArhC,UAAAkhC,UACQl6B,KAAAA,MAAA;AACJk6B,cACFG,mBAAmB;AAAA,EAGpBp6B,GAAAA,KAAA,CAACo6B,oBAAoBH,MAAM,GAAClhC,QAAAqhC,oBAAArhC,QAAAkhC,QAAAlhC,QAAAgH,IAAAhH,QAAAiH,OAAAD,KAAAhH,EAAA,EAAA,GAAAiH,KAAAjH,EAAA,EAAA,IAL/BuS,MAAAA,UAAUvL,IAKPC,EAA4B;AAE/B,QAAA,CAAAs6B,SAAAC,UAAA,IAA8B5vB,mBAAoC,GAGlE,CAAA6vB,wBAAAC,yBAAA,IAA4D9vB,MAAAA,WAAc;AAAC1K,MAAAA;AAAAlH,IAAAyhC,EAAAA,MAAAA,0BAAAzhC,EAAA,EAAA,MAAAuhC,WAAAvhC,EAAAmgC,EAAAA,MAAAA,WAAAwB,UAAAh/B,UAAA3C,UAAAkS,SACjEhL,KAAAA,MAAA;AAGJ,KAACu6B,0BAA0BvvB,SAAK,CAAKiuB,WAASwB,UAAAh/B,UAAsB4+B,YACtEG,4BAA8B,GAC9BE,GAAAA,qBAAqBL,OAAO;AAAA,EAAC,GAEhCvhC,QAAAyhC,wBAAAzhC,QAAAuhC,SAAAvhC,EAAAmgC,EAAAA,IAAAA,WAAAwB,UAAAh/B,QAAA3C,QAAAkS,OAAAlS,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAoCoH,QAAAA,MAAA+4B,WAASwB,UAAAh/B;AAAkB2E,MAAAA;AAAAtH,IAAA,EAAA,MAAAyhC,0BAAAzhC,EAAAuhC,EAAAA,MAAAA,WAAAvhC,EAAAkS,EAAAA,MAAAA,SAAAlS,UAAAoH,OAA7DE,OAACm6B,wBAAwBF,SAASn6B,KAA6B8K,KAAK,GAAClS,QAAAyhC,wBAAAzhC,QAAAuhC,SAAAvhC,QAAAkS,OAAAlS,QAAAoH,KAAApH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAPxEuS,MAAAA,UAAUrL,IAOPI,GAAqE;AAACsC,MAAAA;AAAA5J,YAAAiF,OAGvE2E,MAAA8O,CAAA,SAAA;AACaA,eAAAA,IAAI,GACX,OAAOzT,OAAQ,aACjBA,IAAIyT,IAAI,IACCzT,QACTA,IAAG4Q,UAAW6C;AAAAA,EAAI,GAErB1Y,QAAAiF,KAAAjF,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AARH,QAAAgW,SAAepM;AAUdM,MAAAA;AAAAlK,YAAAggC,sBAAAhgC,EAAAigC,EAAAA,MAAAA,kBAAAjgC,EAAA,EAAA,MAAAgtB,mBAAAhtB,UAAAyH,cAAAzH,EAAA+vB,EAAAA,MAAAA,WAAA7rB,SAAAlE,UAAA+vB,WAAA3rB,aAAApE,UAAA+vB,WAAA7d,SAAAlS,UAAAyjB,gBAAAzjB,EAAAmgC,EAAAA,MAAAA,aAAAngC,EAAA,EAAA,MAAAuW,UAAAvW,EAAA,EAAA,MAAAqgC,UAAArgC,UAAA+1B,YAAA/1B,EAAAogC,EAAAA,MAAAA,WAAApgC,EAAA,EAAA,MAAAitB,cAAAjtB,UAAAwgC,yBAAAxgC,EAAAugC,EAAAA,MAAAA,0BAAAvgC,EAAAsgC,EAAAA,MAAAA,sBAAAtgC,EAAA,EAAA,MAAAygC,YAAAzgC,UAAA0gC,gBAAA1gC,EAAAyD,EAAAA,MAAAA,YAAAzD,EAAA,EAAA,MAAAU,KAAAV,UAAAoB,SAAApB,EAAA,EAAA,MAAAkgC,cAwBQh2B,MAAA8iB,oBAAoB,iBAAiB+C,WAAS7rB,SAAO,CAAK6rB,WAAS3rB,YAClE/C,+BAAC,OAAU,EAAA,IAAE,KAEX,UAAA+B,2BAAAA,KAACd,GAAAA,MAAW,EAAA,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAAA;AAAA,IAACjB,2BAAAA,IAAAwgC,GAAA,SAAA,EAAQ,OAAI,GACb,CAAA;AAAA,IAACxgC,+BAAAK,GAAAA,KAAA,EAAe,WAAA,GACd,yCAACmB,GAAW,MAAA,EAAA,OAAA,UAAS,OAAA,IAAY,MAAA,GAC9BnC,UAAE,EAAA,iCAAiC,GACtC,EACF,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA,IACEy/B,cAAkB,QAAI5pB,wCACvB7U,QAAa,EAAA,SAAC,GACb,UAAAL,+BAACwB,GAAAA,QAAMnC,UAAE,EAAA,qCAAqC,EAAE,CAAA,EAClD,CAAA,IAGE0C,2BAAA,KAAA7B,qBAAA,EAAA,UAAA;AAAA,IAAAF,2BAAA,IAAC,YAAuBoG,EAAAA,YAAwB,YAAA04B,UAAS1/B,YAAoBW,OAC7E;AAAA,IAAAC,2BAAAA,IAACygC,OAC0Bre,aAAAA,EAAAA,yBAAAA,cACAid,yBAAW,cAC3B,SAAAP,UAAS4B,SACE/B,oBACJC,gBACP,SAAAE,UAAS6B,SACP,WAAA7B,UAASwB,WACZ,QAAAxB,UAASrc,QACd,IAAA,QACM,SAAAqc,UAAS8B,SACRlM,UACUyK,oBAAAA,uBACRH,YAAAA,QACCD,sBACDnT,YACYsT,wBAAqB,wBACzBD,oBAAAA,oBACVG,UACAh9B,UAER,UAAAupB,oBAAoB,kBAAkBmT,UAAS+B,YAAS,CAAKnS,WAAS7d,OAE5D,YAAAiuB,UAAS1/B,YACTy/B,YAIV,OAAAC,UAASt/B;KAEX,GAELb,QAAAggC,oBAAAhgC,QAAAigC,gBAAAjgC,QAAAgtB,iBAAAhtB,QAAAyH,YAAAzH,EAAA,EAAA,IAAA+vB,WAAA7rB,OAAAlE,EAAA,EAAA,IAAA+vB,WAAA3rB,WAAApE,EAAA,EAAA,IAAA+vB,WAAA7d,OAAAlS,QAAAyjB,cAAAzjB,QAAAmgC,WAAAngC,QAAAuW,QAAAvW,QAAAqgC,QAAArgC,QAAA+1B,UAAA/1B,QAAAogC,SAAApgC,QAAAitB,YAAAjtB,QAAAwgC,uBAAAxgC,QAAAugC,wBAAAvgC,QAAAsgC,oBAAAtgC,QAAAygC,UAAAzgC,QAAA0gC,cAAA1gC,QAAAyD,UAAAzD,QAAAU,GAAAV,QAAAoB,OAAApB,QAAAkgC,YAAAlgC,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,IAAAgW,EAAAA,MAAAA,UAAAhW,UAAAkK,OApDHE,MAAC/I,2BAAAA,IAAAK,GAAAA,KAAA,EAAO,IAAA,QAAiB0R,UAAaA,gBAAQ4C,aAC3C9L,UAAAA,IAoDH,CAAA,GAAMlK,QAAAgW,QAAAhW,QAAAkK,KAAAlK,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,IAAA+/B,EAAAA,MAAAA,WAAA//B,UAAAoK,OAtDRC,MAAChJ,2BAAAA,IAAA8gC,OAAAA,iBAAyBpC,EAAAA,SACxB31B,UAsDF,IAAA,CAAA,GAAkBpK,QAAA+/B,SAAA//B,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAA,SAAAvK,EAAAuW,EAAAA,MAAAA,UAAAvW,UAAAqK,OA/DpBE,MAAClJ,2BAAAA,IAAA+gC,GAAAA,aACS7rB,QACE,UAAA,GACE,YAAC,GACE,eAAC,GACT,QAAA,UACA,OAAA,GAEPlM,UAwDF,IAAA,CAAA,GAAYrK,QAAAuW,QAAAvW,QAAAqK,KAAArK,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA,GAhEZuK;AAgEY,CAEf;AAED,SAASy2B,qBAAqB7tB,OAAwC;AAC9DiuB,QAAAA,UAAUjuB,MAAMkvB,UAAU53B,IAAK63B,SAAQA,IAAIC,KAAK,EAAEt3B,OAAO+E,OAAO;AAE/D,SAAA;AAAA,IACLlI,MAAM;AAAA,IACNo2B,UAAU/qB,MAAMjT;AAAAA,IAChBkhC,SAASoB,OAAAA,oBAAoBrvB,MAAM0a,QAAQuT,OAAO;AAAA,EACpD;AACF;AAEA,SAASH,mBAAmB9tB,OAAsC;AAC1DsvB,QAAAA,gBAAgBtvB,MAAMuvB,gBAAgBj4B,IAAK63B,SAAQA,IAAIC,KAAK,EAAEt3B,OAAO+E,OAAO,GAC5E2yB,eAAexvB,MAAMyvB,eAAen4B,IAAK63B,CAAAA,QAAQA,IAAIC,KAAK,EAAEt3B,OAAO+E,OAAO;AAEzE,SAAA;AAAA,IACLlI,MAAM;AAAA,IACNo2B,UAAU/qB,MAAMjT;AAAAA,IAChBkhC,SAASoB,OAAAA,oBAAoB,UAAUC,aAAa,EAAE7E,OACpD4E,OAAAA,oBAAoB,SAASG,YAAY,CAC3C;AAAA,EACF;AACF;AAxNkE,SAAAz3B,UAAA;AAAA,SA+B1B23B,0BAAmB;AAAC;ACpC5D,MAAMC,cAAcrhC,iBAAAA,OAAOC,GAAAA,GAAG,EAAE;AAAA,EAC9B0vB,UAAU;AACZ,CAAC,GAEK2R,aAAWthC,wBAAOuhC,OAAAA,eAAe,EAAwB,CAAC;AAAA,EAACC;AAAS,MACpEA,YACK;AAAA,EAACrmB,QAAQ;AAAM,IAGjBzB,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAOR,GAEY+nB,gBAAgB,SAAAnjC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAC3B;AAAA,IAAAkjC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAzuB;AAAAA,IAAA0uB;AAAAA,MACEvjC,OACF;AAAA,IAAAwjC;AAAAA,IAAA7E;AAAAA,IAAAj3B;AAAAA,IAAAsoB;AAAAA,IAAA7C;AAAAA,IAAArsB;AAAAA,IAAA2iC,OAAAA;AAAAA,IAAAtxB;AAAAA,IAAAzR;AAAAA,IAAAgjC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAA,IAeIpX,mBACJ;AAAA,IAAA1X,WAAAC;AAAAA,EAAA,IAAqCtP,iBACrC;AAAA,IAAAqP;AAAAA,EAAoB2C,IAAAA,QACpBosB,GAAAA,eAAqBC,GAAAA,aACrB;AAAA,IAAApR;AAAAA,EAAAA,IAAmBrE,iBAAiB,GACpC,CAAA0V,gBAAAC,gBAAA,IAA2CryB,MAAAA,aAAoC,GAC/E,CAAAsyB,uBAAAC,wBAAA,IAA0DvyB,MAAAA,aAAoC,GAC9FwyB,uBAA6BxuB,aAAA,IAAkC,GAE/DkmB,qBAA2Bj7B,MAAKwjC,aAAc,WAAW;AAAQ,MAAA/jC,IAAAM;AAAAZ,IAAAujC,CAAAA,MAAAA,gBAAAvjC,SAAAwjC,UAGzD5iC,KAAA4iC,OAAKnuB,KAAAivB,UAAgBA,KAAIn+B,OAAQo9B,YAAY,KAAKC,OAAQ,CAAA,KAAA;AAAA,IAAA17B,MAAW;AAAA,EAAA,GAAO9H,OAAAujC,cAAAvjC,OAAAwjC,QAAAxjC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAA5EM;AADR,QAAA2jC,aAAmBjkC,IAMnBkkC,gBAA0C7R,SAAQ8R,cAC9CT,kBAAkBF,aAAY/wB;AACV/R,MAAAA;AAAA,OAAA;AAAA,QAIlBgU,iBAAe;AACT,YAAA/T,MAAAmiC,gBAAiB,GAAKngC,MAAAkgC,eAAeA,mBAAoB;AAAAhgC,UAAAA;AAAAnD,QAAAiB,CAAAA,MAAAA,OAAAjB,SAAAiD,OAA1DE,MAAA,CAAClC,KAAiB,GAAKgC,KAAmC,CAAA,GAAIjD,OAAAiB,KAAAjB,OAAAiD,KAAAjD,OAAAmD,OAAAA,MAAAnD,EAAA,CAAA,GAArEgB,KAAOmC;AAA8DkT,YAAAA;AAAAA,IAAAA;AAAApV,QAAAA;AAAAjB,MAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGhE9B,MAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAYjB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAAnBgB,KAAOC;AAAAA,EAAAA;AALT,QAAA8+B,UAAkD/+B,IAQlD0jC,iBAAuBH,WAAUz8B,SAAU;AAAM7G,MAAAA;AAAAjB,WAAAukC,WAAAzR,aAAA9yB,SAAAukC,WAAAnjB,WAAAphB,SAAAukC,WAAAz8B,QAAA9H,UAAA0+B,aAAA1+B,EAAAyH,EAAAA,MAAAA,cAAAzH,EAAA,EAAA,MAAA+vB,WAAA7rB,SAAAlE,EAAA,EAAA,MAAA+vB,WAAA3rB,aAAApE,EAAA,EAAA,MAAAS,cAAAT,UAAAa,SAElBI,KAAAA,MAAA;AAAA,QACzBsjC,WAAUz8B,SAAU,eAAey8B,WAAUzR,WAAU;AACzD,YAAA6R,sBAA4BJ,WAAUzR;AAEpC,aAAAzxB,2BAAA,IAAC,uBACW,UAAA;AAAA,QAAA6C,OACD6rB,WAAS7rB,SAAe;AAAA,QAAAw6B,WACpBA,aAAa79B;AAAAA,QAAK+jC,YACjBlG;AAAAA,QAASt6B,WACV2rB,WAAS3rB,aAAA;AAAA,MAEVqD,GAAAA,YACH,SAAA88B,WAAUnjB,SACP3gB,WACZ,CAAA;AAAA,IAAA;AAAA,WAAA;AAAA,EAAA,GAIPT,EAAA,CAAA,IAAAukC,WAAAzR,WAAA9yB,EAAA,CAAA,IAAAukC,WAAAnjB,SAAAphB,EAAA,CAAA,IAAAukC,WAAAz8B,MAAA9H,QAAA0+B,WAAA1+B,QAAAyH,YAAAzH,EAAA,EAAA,IAAA+vB,WAAA7rB,OAAAlE,EAAA,EAAA,IAAA+vB,WAAA3rB,WAAApE,QAAAS,YAAAT,QAAAa,OAAAb,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAiEiD,MAAAA;AAAAjD,YAAAiB,MAlB3CgC,KAAQhC,GAkBmEjB,GAAAA,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAlBlG,QAAA6kC,iBAAuB5hC,IAoBvB6hC,sBAA4BC,OAAAA,oBAC1BlB,eAAa34B,OAEf;AAAC/H,MAAAA;AAAAnD,YAAAS,cAEkB0C,KAAA+tB,kBAAkBzwB,UAAU,GAACT,QAAAS,YAAAT,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAhD,QAAAglC,aAAmB7hC;AAA6B0B,MAAAA;AAAA7E,YAAAkkC,yBAGtCr/B,KAAAA,MAAA;AACHq/B,2BAAqBe,YAC1Bf,sBAAqBe,SAAA,GAAA,CAAc;AAAA,EAAC,GACrCjlC,QAAAkkC,uBAAAlkC,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,IAAAyH,EAAAA,MAAAA,cAAAzH,UAAAkkC,yBAAEl9B,KAAA,CAACS,YAAYy8B,qBAAqB,GAAClkC,QAAAyH,YAAAzH,QAAAkkC,uBAAAlkC,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAHtCuS,MAAAA,UAAU1N,IAGPmC,EAAmC;AAAC,MAAAC,IAAAC;AAAAlH,IAAAwkC,EAAAA,MAAAA,iBAAAxkC,UAAAsjC,iCAG7Br8B,KAAAA,MAAA;AACJu9B,qBACFlB,8BAA8BkB,aAAa;AAAA,EAE5Ct9B,GAAAA,KAAA,CAACs9B,eAAelB,6BAA6B,GAACtjC,QAAAwkC,eAAAxkC,QAAAsjC,+BAAAtjC,QAAAiH,IAAAjH,QAAAkH,OAAAD,KAAAjH,EAAA,EAAA,GAAAkH,KAAAlH,EAAA,EAAA,IAJjDuS,MAAAA,UAAUtL,IAIPC,EAA8C;AAAC,MAAAE,KAAAE;AAAAtH,IAAA0+B,EAAAA,MAAAA,aAAA1+B,UAAAqjC,iBAAArjC,EAAA,EAAA,MAAAa,SAGzCyG,MAAA+7B,+CAAiB,eAAqB,EAAA,OAAA3E,aAAa79B,WAAgB,MAAAb,QAAA0+B,WAAA1+B,QAAAqjC,eAAArjC,QAAAa,OAAAb,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAA1EoH,MAAOE;AADT,QAAA49B,gBAAsB99B,KAItB+9B,gBAAsBn1B,CAAAA,EAAQ,CAAC+E,aAAamY;AAAUtjB,MAAAA;AAAA5J,IAAAukC,EAAAA,MAAAA,WAAAz8B,QAAA9H,EAAA6kC,EAAAA,MAAAA,kBAAA7kC,EAAA,EAAA,MAAA0+B,aAAA1+B,UAAAyH,cAAAzH,EAAAkkC,EAAAA,MAAAA,yBAAAlkC,UAAA2yB,SAAAI,kBAAA/yB,UAAA0kC,kBAAA1kC,EAAAklC,EAAAA,MAAAA,iBAAAllC,EAAA,EAAA,MAAA4jC,aAAA5jC,UAAA2jC,cAAA3jC,EAAA,EAAA,MAAAglC,cAAAhlC,UAAA0jC,wBAAA1jC,EAAA8kC,EAAAA,MAAAA,uBAAA9kC,EAAA,EAAA,MAAAgV,mBAAAhV,UAAA+/B,WAAA//B,EAAAyjC,EAAAA,MAAAA,aAAApd,WAAArmB,EAAA,EAAA,MAAAwkC,iBAAAxkC,UAAAkS,SAAAlS,EAAA87B,EAAAA,MAAAA,sBAAA97B,EAAA,EAAA,MAAAS,cAAAT,UAAAmlC,iBAK/Cv7B,OAAC+oB,SAAQI,kBAAA,CAAoBoS,kBAC5B9jC,+BAAC,aAAkB,EAAA,MAAA,GAAY,UAAA,UAC7B,UAACA,+BAAA+jC,GAAAA,gBAAA,EACUZ,SAAY,eACA,qBAAA;AAAA,IAAAN;AAAAA,EAAAA,GAErB,UAAC7iC,2BAAAA,IAAA8V,GAAAA,yBAAA,EAAiC+sB,SAAAA,uBAChC,0CAACmB,OACgBnB,mCAAAA,EAAAA,eAAAA,uBACGE,kBAAAA,sBAEjBG,UAAAA;AAAAA,IAAUz8B,WAAAA,SAAU,UAAUk9B,cAAc9yB,wCAC1C,qBACYwsB,EAAAA,WACCj3B,YACAhH,WAAU,CAAA;AAAA,IAIzB8jC,WAAUz8B,SAAU,UAAW47B,CAAAA,wBAAwBxxB,SAElDuxB,2BAAAA,KAAAA,qBAAAA,EAAAA,UAAAA;AAAAA,MAAAA,CAAAA,aAAWpd,WACVhlB,2BAAAA,IAAA,8BAAA,EAAiDy6B,mBAAkB,CAAA;AAAA,MAEpE6H,CAAAA,cAAcC,aACbviC,2BAAA,IAAA,uBAAA,EAAkCyjC,YAAkB;qCAEtD,wBAAsB,EAAA;AAAA,qCACtB,8BAA4B,CAAA,CAAA;AAAA,IAAA,GAAG;AAAA,IAIpC1hC,2BAAAA,KAAC2/B,cACY,WAAA/tB,mBAAuB,IACtB,eAAA,2BACPmvB,+BAEL,UAAA;AAAA,MAAA9iC,2BAAA,IAAC,UACSqjC,EAAAA,QAAAA,gBACC3E,SACJqE,KAAAA,sBAAoB;AAAA;OAG7B;AAAA,IAECc;AAAAA,IAEiE7jC,2BAAA,IAAA,OAAA,EAAjD,eAAA,yBAA6B4iC,KAAe;KAC/D,EAAA,CACF,EACF,CAAA,GACF,GACDjkC,EAAA,EAAA,IAAAukC,WAAAz8B,MAAA9H,QAAA6kC,gBAAA7kC,QAAA0+B,WAAA1+B,QAAAyH,YAAAzH,QAAAkkC,uBAAAlkC,EAAA,EAAA,IAAA2yB,SAAAI,gBAAA/yB,QAAA0kC,gBAAA1kC,QAAAklC,eAAAllC,QAAA4jC,WAAA5jC,QAAA2jC,YAAA3jC,QAAAglC,YAAAhlC,QAAA0jC,sBAAA1jC,QAAA8kC,qBAAA9kC,QAAAgV,iBAAAhV,QAAA+/B,SAAA//B,EAAA,EAAA,IAAAyjC,aAAApd,SAAArmB,QAAAwkC,eAAAxkC,QAAAkS,OAAAlS,QAAA87B,oBAAA97B,QAAAS,YAAAT,QAAAmlC,eAAAnlC,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,IAAA,EAAA,MAAAyH,cAAAzH,EAAA4U,EAAAA,MAAAA,eAAA5U,EAAAS,EAAAA,MAAAA,cAAAT,UAAAmlC,iBAEAj7B,MAAAi7B,iBACC9jC,2BAAA,IAAC8V,GAAiCvC,yBAAAA,EAAAA,SAAAA,aAChC,UAAAvT,2BAAA,IAAC,wBACaoG,EAAAA,YACE,cAAAhH,WAAU8H,MAClB,MAAA,EAEV,CAAA,EAAA,CAAA,GACDvI,QAAAyH,YAAAzH,QAAA4U,aAAA5U,QAAAS,YAAAT,QAAAmlC,eAAAnlC,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAA,SAAApK,EAAA4J,EAAAA,MAAAA,OAAA5J,UAAAkK,OAhELE,MAAC/I,2BAAA,IAAA,aAAA,EACC,UAAC+B,2BAAA,KAAAd,GAAA,MAAA,EAAY,QAAA,QACVsH,UAAAA;AAAAA,IAAAA;AAAAA,IAsDAM;AAAAA,EAAAA,EASH,CAAA,EACF,CAAA,GAAclK,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAoK,OAAAA,MAAApK,EAAA,EAAA,GAlEdoK;AAkEc;AAGlB84B,cAAczrB,cAAc;AAtKC,SAAAvM,QAAA1F,QAAA;AAAA,SAwEdA,OAAKs/B;AAAA;AClHb,MAAMQ,8BAA2C,CAAC,QAAQ,QAAQ,GAE5DC,2BAAkE;AAAA,EAC7EC,OAAO;AAAA,EACPC,QAAQ;AAAA,EACRC,OAAO;AAAA,EACPC,MAAM;AACR;ACMO,SAAAC,cAAA7lC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAIL;AAAA,IAAA4lC;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC/lC;AAAKO,MAAAA;AAAAN,WAAA6lC,UAI3BvlC,oCAAC,wBAA6BulC,QAAU,GAAA7lC,OAAA6lC,QAAA7lC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAA8lC,CAAAA,MAAAA,oBAAA9lC,SAAAM,MADnDM,KAACS,2BAAAA,IAAA0kC,GAAAA,SAAA,EACU,SAAAzlC,IACWglC,oBAA0BA,6BAC9C,MAAG,IACO,WAAA,OACV,YACA,qBACkBQ,iBAClB,CAAA,GAAA9lC,OAAA8lC,kBAAA9lC,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GARFY;AAQE;AAQN,SAAAolC,qBAAAjmC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAA4lC;AAAAA,MAAiB9lC,OACjB;AAAA,IAAAkmC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAllC;AAAAA,IAAA8P;AAAAA,IAAAC;AAAAA,IAAAa;AAAAA,MAUI+zB,QACJ;AAAA,IAAAnlC;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GACnD;AAAA,IAAA6mC;AAAAA,EAAqBC,IAAAA,YACrBrhC,GAAAA,MAAY2Q,MAAAA,OAAA,IAAkC;AAACtV,MAAAA;AAAAN,IAAAqmC,CAAAA,MAAAA,cAAArmC,SAAAgR,YAG7C1Q,KAAA6S,CAAA,UAAA;AACMA,UAAK6F,QAAS,YAAYqtB,cAAYr1B,SAAS;AAAA,EAAA,GACpDhR,OAAAqmC,YAAArmC,OAAAgR,UAAAhR,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAIHumC,oBAP4BjmC,EAOQ;AAACM,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACQnC,KAAAA,MAAOqE,CAAAA,IAAG4Q,OAAA,GAAS7V,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAhEwmC,wBAAqBH,cAAcr1B,UAAUpQ,EAAmB;AAACI,MAAAA;AAAAhB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGrB/B,KAAA;AAAA,IAAAgK,UAAA;AAAA,IAAAyJ,UAAA;AAAA,EAAA,GAAmCzU,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAkB,WAC3ED,KAAAI,2BAAAA,IAACK,GAAAA,KAAU,EAAA,SAAY,UAAA,QAAgB,SAAC,GACtC,UAAAL,2BAAA,IAACwB,GAAM3B,MAAAA,EAAAA,UAAAA,QAAQ,CAAA,EACjB,CAAA,GAAMlB,OAAAkB,SAAAlB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACgCE,KAAA;AAAA,IAAA0H,WAAY;AAAA,EAAA,GAAqC3K,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,IAAAkmC,CAAAA,MAAAA,oBAAAlmC,SAAAU,KAO3EyC,KAAA+iC,oBAAoBxlC,EAAE,4CAA4C,GAACV,OAAAkmC,kBAAAlmC,OAAAU,GAAAV,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,IAAAimC,EAAAA,MAAAA,oBAAAjmC,UAAAgR,YAAAhR,EAAA,EAAA,MAAAmD,MAL3E0B,oCAAC0G,GACa,QAAA,EAAA,eAAA,gCACN06B,MAAe,kBACZj1B,SAAO,UACX,MAAA,SACC,MAAA7N,GACN,CAAA,GAAAnD,QAAAimC,kBAAAjmC,QAAAgR,UAAAhR,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,IAAAomC,EAAAA,MAAAA,qBAAApmC,UAAAU,KAKMsG,KAAAo/B,qBAAqB1lC,EAAE,6CAA6C,GAACV,QAAAomC,mBAAApmC,QAAAU,GAAAV,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,IAAA,EAAA,MAAAmmC,qBAAAnmC,EAAAiR,EAAAA,MAAAA,aAAAjR,EAAAgH,EAAAA,MAAAA,MAAAhH,UAAA8R,QAJ7E7K,KAAA5F,2BAAAA,IAACkK,aACa,eAAA,iCACN46B,MAAgB,mBACbl1B,SAAAA,WACH,MAAAjK,IACA8K,KAAAA,CACN,GAAA9R,QAAAmmC,mBAAAnmC,QAAAiR,WAAAjR,QAAAgH,IAAAhH,QAAA8R,MAAA9R,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAA6E,EAAAA,MAAAA,MAAA7E,UAAAiH,MAfNC,KAAC7F,2BAAAA,IAAAK,GAAA,KAAA,EAAc,aAAa,UAAA,GAAU,OAAAuB,IACpC,0CAACwjC,SAAc,EAAA,SAAC,GAAO,KAAA,GACrB5hC,UAAAA;AAAAA,IAAAA;AAAAA,IAOAoC;AAAAA,EAAAA,EAOF,CAAA,EACF,CAAA,GAAMjH,QAAA6E,IAAA7E,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAA,SAAApH,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAkH,MArBRE,sCAAC9E,GAAAA,MAAe,EAAA,WAAA,UAAc2C,KAAY,OAAAjE,IACxCC,UAAAA;AAAAA,IAAAA;AAAAA,IAGAiG;AAAAA,EAAAA,EAkBF,CAAA,GAAOlH,QAAAiB,IAAAjB,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAtBPoH;AAsBO;AC7EJ,SAAAs/B,YAAA3mC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAA4lC;AAAAA,EAAAA,IAAiB9lC,OACjBmR,WAAiBC,YAAM;AAAC7Q,MAAAA;AAAAN,IAAA,CAAA,MAAA6lC,OAAAc,UAETrmC,KAAAulC,OAAMc,UAClBtlC,2BAAAA,IAAAK,GAAAA,KAAA,EAAc,UAAA,GAAa,UAAC,GAC1BmkC,UAAMc,OAAAA,OACT,CAAA,GACD3mC,EAAA,CAAA,IAAA6lC,OAAAc,QAAA3mC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA2mC,SAAermC,IAUmBM,KAAAilC,OAAMe,oBAA0B,IAQrD5lC,KAAA6kC,OAAM/oB,UAAAlS,SAAoB,IAAA26B,yBAAgCM,OAAM/oB,KAAA;AAAO7b,MAAAA;AAAAjB,IAAA,CAAA,MAAA6lC,OAAAp6B,WAE9ExK,KAACI,+BAAAK,GAAAA,KAAA,EAAa,SAAC,GAAGmkC,UAAMp6B,OAAAA,QAAS,CAAA,GAAMzL,EAAA,CAAA,IAAA6lC,OAAAp6B,SAAAzL,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,SAAAA,EAAA,CAAA,MAAA6lC,OAAAgB,UAAA7mC,EAAA,CAAA,MAAA6lC,OAAAnU,WAAA1xB,EAAAkR,CAAAA,MAAAA,YAAAlR,EAAA2mC,CAAAA,MAAAA,UAAA3mC,EAAAY,CAAAA,MAAAA,MAAAZ,EAAAgB,CAAAA,MAAAA,MAAAhB,UAAAiB,MAb3CgC,oCAACuT,4BAA4B,EAAA,SAAA,cAC3B,UAACnV,+BAAAoQ,GAAAA,QAAA,EACC,SAAA,IAC4B,4BAAA7Q,IACpB+lC,QACA,QAAAd,OAAMgB,QACV31B,IAAO,UAEF,SAAA20B,OAAMnU,SAEC,gBAAAmU,OAAMnU,SACf,OAAA1wB,IAEPC,UAAAA,IACF,GACF,GAAsBjB,EAAA,CAAA,IAAA6lC,OAAAgB,QAAA7mC,EAAA,CAAA,IAAA6lC,OAAAnU,SAAA1xB,OAAAkR,UAAAlR,OAAA2mC,QAAA3mC,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAftBiD;AAesB;AC5BnB,SAAA6jC,cAAA/mC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAIL;AAAA,IAAA4lC;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC/lC;AAAKO,MAAAA;AAAAN,WAAA6lC,UAI3BvlC,oCAAC,wBAA6BulC,QAAU,GAAA7lC,OAAA6lC,QAAA7lC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAA8lC,CAAAA,MAAAA,oBAAA9lC,SAAAM,MADnDM,KAACS,2BAAAA,IAAA0kC,GAAAA,SAAA,EACU,SAAAzlC,IACWglC,oBAA0BA,6BAC9C,MAAG,IACO,WAAA,OACV,YACA,qBACkBQ,iBAClB,CAAA,GAAA9lC,OAAA8lC,kBAAA9lC,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GARFY;AAQE;AAQN,SAAAmmC,qBAAAhnC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACE;AAAA,IAAA4lC;AAAAA,MAAiB9lC,OACjB;AAAA,IAAA0L;AAAAA,IAAAimB;AAAAA,MAA2BmU,QAC3B;AAAA,IAAAQ;AAAAA,EAAqBC,IAAAA,YACrBrhC,GAAAA,MAAY2Q,MAAAA,OAAA,IAAkC;AAACtV,MAAAA;AAAAN,IAAAqmC,CAAAA,MAAAA,cAAArmC,SAAA0xB,WAG7CpxB,KAAA6S,CAAA,UAAA;AACMA,UAAK6F,QAAS,YAAYqtB,cAAY3U,QAAQ;AAAA,EAAA,GACnD1xB,OAAAqmC,YAAArmC,OAAA0xB,SAAA1xB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAIHumC,oBAP4BjmC,EAOQ;AAACM,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACOnC,KAAAA,MAAOqE,CAAAA,IAAG4Q,OAAA,GAAS7V,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAA/DwmC,wBAAqBH,cAAc3U,SAAS9wB,EAAmB;AAACI,MAAAA;AAAAhB,SAAAA,SAAAyL,WAEzDzK,KAAAK,+BAAA,OAAA,EAAU4D,KAAMwG,UAAQ,QAAA,CAAA,GAAMzL,OAAAyL,SAAAzL,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAA9BgB;AAA8B;ACjCvC,SAAAgmC,6BAAAjnC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACE;AAAA,IAAAuH;AAAAA,MAAmBzH,OACnB;AAAA,IAAAgT;AAAAA,IAAA8M;AAAAA,MAA4BkkB,GAAU,UAAA,GACtCS,gBAAsB3kB,WAAQwO,6BAAA,KAAqCtb;AAAOzS,MAAAA;AAAA,SAAAN,EAAAwH,CAAAA,MAAAA,YAAAxH,SAAAwkC,iBAEnElkC,KAACe,2BAAA,IAAA+jC,GAAwBZ,gBAAAA,EAAAA,SAAAA,eAAuB,SAAE,CAAA,GAAiBxkC,OAAAwH,UAAAxH,OAAAwkC,eAAAxkC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAnEM;AAAmE;AAGrE,SAAA2mC,kBAAAlnC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAA4lC;AAAAA,IAAAC,kBAAAxlC;AAAAA,EAAAA,IAA0CP,OAA3B+lC,mBAAAxlC,OAAuBsK,gBAAvBtK,IACf4mC,UAAgB/1B,YAAM;AAElB00B,MAAAA,OAAM/9B,SAAU,WAAS;AAAAlH,QAAAA;AAAA,WAAAZ,EAAA6lC,CAAAA,MAAAA,UAAA7lC,SAAA8lC,oBACpBllC,MAACS,2BAAAA,IAAA,eAAsBwkC,EAAAA,QAA0BC,iBAAoB,CAAA,GAAA9lC,OAAA6lC,QAAA7lC,OAAA8lC,kBAAA9lC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAArEY;AAAAA,EAAAA;AAGLilC,MAAAA,OAAM/9B,SAAU,WAAS;AAAAlH,QAAAA;AAAA,WAAAZ,EAAA6lC,CAAAA,MAAAA,UAAA7lC,SAAA8lC,oBACpBllC,MAACS,2BAAAA,IAAA,eAAsBwkC,EAAAA,QAA0BC,iBAAoB,CAAA,GAAA9lC,OAAA6lC,QAAA7lC,OAAA8lC,kBAAA9lC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAArEY;AAAAA,EAAAA;AAAqE,MAG1EilC,OAAM/9B,SAAU,YAAa+9B,CAAAA,OAAM/9B,MAAK;AAAAlH,QAAAA;AAAAZ,WAAAA,SAAA6lC,UAExCjlC,MAACS,2BAAAA,IAAA,8BAAA,EACC,UAACA,+BAAA,aAAA,EAAoBwkC,OACvB,CAAA,EAAA,CAAA,GAA+B7lC,OAAA6lC,QAAA7lC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAF/BY;AAAAA,EAAAA;AAMAilC,MAAAA,OAAM/9B,SAAU,UAAQ;AACY,UAAAlH,MAAAilC,QAAM/S;AAAW9xB,QAAAA;AAAAhB,WAAAA,SAAAY,OAAhDI,MAACK,2BAAA,IAAA,8BAAA,EAA8BT,UAAAA,KAAkB,GAA+BZ,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAhFgB;AAAAA,EAAAA;AAIT,QAAAmmC,eAA0BtB;AAG1B5d,UAAAxK,KAAa,0BAA0B0pB,aAAYr/B,IAAA,EAAO;AAAClH,MAAAA;AAAAZ,IAAAmnC,EAAAA,MAAAA,aAAA17B,WAAAzL,EAAA,EAAA,MAAAmnC,aAAAr/B,QAWtDlH,KAAAumC,aAAY17B,WAEVrI,2BAAA,KAAAP,GAAA,MAAA,EAAW,MAAC,GAAE,UAAA;AAAA,IAAA;AAAA,IACUxB,2BAAAA,IAAgC,QAAzB8lC,EAAAA,UAAAA,aAAYr/B,KAAM,CAAA;AAAA,IAAO;AAAA,EAAA,EACzD,CAAA,GACD9H,EAAA,EAAA,IAAAmnC,aAAA17B,SAAAzL,EAAA,EAAA,IAAAmnC,aAAAr/B,MAAA9H,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,SAAAA,EAAA,EAAA,MAAAknC,WAAAlnC,EAAA,EAAA,MAAAY,MAAAZ,EAAA,EAAA,MAAAmnC,aAAAzV,WAbH1wB,oCAACyQ,kCACKy1B,EAAAA,IAAM,SAED,SAAAC,aAAYzV,SAEL,gBAAAyV,aAAYzV,SACrB,OAAA,GAEN9wB,UAAAA,GAMH,CAAA,GAASZ,QAAAknC,SAAAlnC,QAAAY,IAAAZ,EAAA,EAAA,IAAAmnC,aAAAzV,SAAA1xB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAdTgB;AAcS;ACjDAomC,MAAAA,sBAAsB1f,MAAAA,KAAK,SAAApnB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAA6B;AAAA,IAAAonC;AAAAA,IAAA7/B;AAAAA,IAAAs+B;AAAAA,EAAAA,IAAAxlC,IASnE,CAAAgnC,aAAAC,cAAA,IAAsC31B,MAAAA,WAAW;AAAChR,MAAAA;AAAAA,OACdymC,aAAaC,WAAW;AAA5D,QAAAE,gBAAsB5mC;AAAqEI,MAAAA;AAAAhB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAE1D/B,KAAA+c,CAAA,QAAA;AAC/BwpB,mBAAexpB,GAAG;AAAA,EAAA,GACnB/d,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA+nB,eAAqB/mB;AAEf,MAAAC,IAAAgC;AAAAjD,WAAAwH,YAEuBvE,KAAAuE,SAAQ;AAAA,IAAAugB;AAAAA,EAAe,CAAA,GAAC/nB,OAAAwH,UAAAxH,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAAAiB,KAAxBgC;AAA7B,QAAA86B,SAAe98B;AAAiEkC,MAAAA;AAAAnD,IAAAwnC,CAAAA,MAAAA,iBAAAxnC,SAAA8lC,oBAI3E3iC,KAAAqkC,iBAAiBA,cAAa3B,UAC7BxkC,2BAAAA,IAACmV,OAAAA,uBAA4B,SAAA,cAC3B,yCAAC,mBAA0B,EAAA,QAAAgxB,cAAa3B,QAA2BC,kBACrE,EAAA,CAAA,GACD9lC,OAAAwnC,eAAAxnC,OAAA8lC,kBAAA9lC,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAA6E,MAAAA;AAAA7E,SAAAA,EAAA+9B,CAAAA,MAAAA,UAAA/9B,SAAAmD,MALH0B,KACG1B,2BAAAA,KAAAA,WAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA;IAKM,CAAA,GACNnD,OAAA+9B,QAAA/9B,OAAAmD,IAAAnD,OAAA6E,MAAAA,KAAA7E,EAAA,CAAA,GAPH6E;AAOG,CAEN;AAKM,SAAA4iC,iBAAA1nC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAonC;AAAAA,IAAAv0B;AAAAA,EAAAA,IAAiC/S,OACjC2nC,WAAiBv2B,YAAM,GAEvB,CAAA20B,kBAAA6B,mBAAA,IAAgD/1B,MAAAA,aAAuC;AAAC,MAAAtR,IAAAM;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAG/EnC,KAAA;AAAA,IAAA0X,WACM;AAAA,IAASC,QAAA;AAAA,IAAAqvB,iBAAA;AAAA,EAAA,GAGrB5nC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAJMM;AADT,QAAAinC,eAAmCvnC,IASnC;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAA,CAAA,MAAAqnC,gBAAArnC,EAAA8S,CAAAA,MAAAA,YAAA9S,EAAA0nC,CAAAA,MAAAA,YAAA1nC,SAAAU,KAIlDM,KAAAC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA8mB;AAAAA,IAAAA,IAAA9mB;AAAc,0CACZ8Z,sCACK,EAAA,OAAG2sB,QAAQ,gBAEb,QAACrmC,+BAAAuZ,OAAAA,mBAAA,EACa,cAAAla,EAAE,uCAAuC,GAC3CoS,UACE,eAAA,sBACP,MAAA,SACS,cAAA;AAAA,MAAArH,SAAU/K,EAAE,oCAAoC;AAAA,IAAC,EAAA,CAChE,GAGD,MAACW,2BAAA,IAAAyZ,GAAA,MAAA,EAAc,SAAC,GACbusB,UAAY58B,aAAAA,IAAA,CAAAq9B,aAAA/pB,QACX1c,2BAAAA,IAAC,oBACcymC,EAAAA,aACHh1B,UACHiL,OAAE,KAGCgK,uBADLhK,GAAAA,GACiB,CAEzB,EAAA,CACH,GAEO8pB,SAAW,cACfF,KAAAA,oBACL,CAAA;AAAA,EAAA,GACH3nC,OAAAqnC,cAAArnC,OAAA8S,UAAA9S,OAAA0nC,UAAA1nC,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAhCH,QAAA+nC,qBAA2B/mC;AAkC1BC,MAAAA;AAAA,SAAAjB,EAAAqnC,CAAAA,MAAAA,gBAAArnC,SAAA8lC,oBAAA9lC,EAAA,CAAA,MAAA+nC,sBAGC9mC,oCAAC,qBAAkComC,EAAAA,cAAgCvB,4BAEnE,mBAAA,CAAA,GAAsB9lC,OAAAqnC,cAAArnC,OAAA8lC,kBAAA9lC,OAAA+nC,oBAAA/nC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAFtBiB;AAEsB;AAWnB,SAAA+mC,mBAAAjoC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAA6nC;AAAAA,IAAAh1B;AAAAA,IAAA1H;AAAAA,IAAAyO;AAAAA,MAAiD9Z,OACjD;AAAA,IAAAkoC;AAAAA,EAAAA,IAAmBH;AAAWxnC,MAAAA;AAAAN,IAAAoL,CAAAA,MAAAA,SAAApL,SAAA6Z,YAAA7Z,EAAA,CAAA,MAAAioC,YAEE3nC,KAAAA,MAAA;AACrB8K,aAAAA,KAAK,GACV68B,YAAUA,SAAS;AAAA,EAAA,GACxBjoC,OAAAoL,OAAApL,OAAA6Z,UAAA7Z,OAAAioC,UAAAjoC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAHD,QAAAma,cAAoB7Z;AAGW,MAAAM,IAAAI;AAAAhB,IAAA,CAAA,MAAA8nC,YAAA1jB,YAGtBpjB,KAAA8mC,YAAW1jB,WACd8jB,OAAOJ,YAAW1jB,QAAS,EAAC1K,MACnB,GAAG,EAACjP,IAAAS,OACyC,IAACN,QAC9C5K,EAAA,CAAA,IAAA8nC,YAAA1jB,UAAApkB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAJbY,KAAOI;AADT,QAAA2c,UAAgB/c,IAUCK,KAAA,UAAU6mC,YAAWK,MAAAC,QAAe,KAAK,EAAE,CAAC,IAC/CnlC,KAAA6P,YAAY9C,EAAQ83B,YAAWh1B;AAAU3P,MAAAA;AAAAnD,IAAA8nC,CAAAA,MAAAA,YAAAh1B,YAAA9S,EAAA,CAAA,MAAA8nC,YAAA1mC,SAM9C+B,KAAA2kC,YAAWh1B,YAAA;AAAA,IAAAu1B,cAAA;AAAA,MAAA58B,SAAsCq8B,YAAW1mC;AAAAA,IAAAA;AAAAA,EAAA,GAAQpB,EAAA,CAAA,IAAA8nC,YAAAh1B,UAAA9S,EAAA,CAAA,IAAA8nC,YAAA1mC,OAAApB,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAA6E,MAAAA;AAAA7E,SAAAA,EAAA8nC,CAAAA,MAAAA,YAAAvkC,QAAAvD,EAAA,EAAA,MAAA8nC,YAAAK,SAAAnoC,EAAA8nC,EAAAA,MAAAA,YAAAh2B,QAAA9R,EAAA,EAAA,MAAAma,eAAAna,EAAA2d,EAAAA,MAAAA,WAAA3d,EAAA,EAAA,MAAAiB,MAAAjB,EAAAiD,EAAAA,MAAAA,MAAAjD,UAAAmD,MAR3E0B,oCAACiV,oCACc,EAAA,eAAA7Y,IACH,UAAAgC,IACD0a,SACH,MAAAmqB,YAAWvkC,MACR4W,SAAAA,aACH,MAAA2tB,YAAWK,OACX,MAAAL,YAAWh2B,MACZ3O,GAAAA,IACL,GAAAnD,EAAA,CAAA,IAAA8nC,YAAAvkC,MAAAvD,EAAA,EAAA,IAAA8nC,YAAAK,OAAAnoC,EAAA,EAAA,IAAA8nC,YAAAh2B,MAAA9R,QAAAma,aAAAna,QAAA2d,SAAA3d,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GATF6E;AASE;AA3BC,SAAAqG,QAAAo9B,GAAA;AAaeA,SAAAA,EAAChjC,MAAA,GAAA,CAAW,EAACijC,gBAAiBD,EAAChjC,OAAQ;AAAC;ACpH9D,MAAMkjC,8BAA4B;AAAA,EAChCC,mBAAmB;AAAA,EACnBC,WAAW;AACb,GAGaC,eAAwCroC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAA5D;AAAAA,IAAA0kC;AAAAA,MAAAtoC,IACpD;AAAA,IAAAuoC,eAAAC;AAAAA,EAAA,IAA2Crc,mBAC3C;AAAA,IAAAtL,QAAA4nB;AAAAA,EAAAA,IAA2BtR,OAAAA,qBAAqBtxB,IAAI2B,IAAI,GACxD,CAAA67B,YAAAkF,aAAA,IAAoCj3B,iBAAc,GAClD,CAAAo3B,qBAAAC,oBAAA,IAAoDr3B,MAAAA,WAAc,GAElE;AAAA,IAAAlR;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,WAAA4oC,cAEnBhoC,KAAAA,MAAA;2BACL,GAC1BgoC,WAAW;AAAA,EAAC,GACb5oC,OAAA4oC,YAAA5oC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAAkpC,eAAqBtoC;AAGLI,MAAAA;AAAAhB,IAAA+oC,CAAAA,MAAAA,YAAA/oC,SAAA4oC,cAAA5oC,EAAA,CAAA,MAAA8oC,qBAEkB9nC,KAAAA,MAAA;oBACd,GAClBioC,uBAA0B,GAC1BH,oBAAsB,GACtBC,SAAQnR,QAAS,GACjBgR,WAAW;AAAA,EAAA,GACZ5oC,OAAA+oC,UAAA/oC,OAAA4oC,YAAA5oC,OAAA8oC,mBAAA9oC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAND,QAAAmpC,gBAAsBnoC;AAMuBC,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAElB9B,KAAAA,MAAA;AACzBgoC,2BAAyB;AAAA,EAAA,GAC1BjpC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAAopC,SAAenoC;AAETgC,MAAAA;AAAAjD,IAAAmG,CAAAA,MAAAA,MAAAnG,SAAA8H,QAEiE7E,KAAA;AAAA,IAAAkD;AAAAA,IAAA2B;AAAAA,IAAA6e,YAGzD;AAAA,EACb3mB,GAAAA,OAAAmG,IAAAnG,OAAA8H,MAAA9H,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAJD,QAAA,CAAAyjC,aAAAC,oBAAA,IAA4C2F,kCAA2BpmC,EAItE,GAED6hB,cAAoBC,sBAAe;AAgDtB5hB,MAAAA;AAAA,OAAA;AAAA,QA7CP,CAACugC,wBAAyBD,CAAAA,aAAWpd,SAAS;AAAAxhB,UAAAA;AAAA7E,gBAAAU,KAKvCmE,MAAAnE,EAAE,qBAAqB,GAACV,QAAAU,GAAAV,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA;AAAAgH,UAAAA;AAAAhH,gBAAA8kB,eAE7B9d,MAAC3F,2BAAA,IAAA2jB,uCAAA,EAAuC,SAAA,mBAA+BF,YAAAA,CAAe,GAAA9kB,QAAA8kB,aAAA9kB,QAAAgH,OAAAA,MAAAhH,EAAA,EAAA;AAAAiH,UAAAA;AAAAjH,QAAA6E,EAAAA,MAAAA,OAAA7E,UAAAgH,OANnFC,MAAA;AAAA,QAAA6K,MACC;AAAA,QAAUvO,MAAA+lC,MAAAA;AAAAA,QAAAx2B,UAAA;AAAA,QAAAq1B,OAGTtjC;AAAAA,QAAwBzD,OAE7B4F;AAAAA,MAAAA,GAEHhH,QAAA6E,KAAA7E,QAAAgH,KAAAhH,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA,GARDmD,KAAO8D;AAQNoP,YAAAA;AAAAA,IAAAA;AAMS,UAAAxR,KAAA8+B,cAAc3zB,CAAQ+4B,CAAAA,SAAQj2B,YAAc4wB;AAAoB18B,QAAAA;AAAAhH,cAAA+oC,SAAAj2B,YAAA9S,UAAAU,KACnEsG,KAAC+hC,SAAQj2B,YAAapS,EAAC8nC,4BAA2BO,SAAQj2B,QAAA,CAAU,KAAM,IAAE9S,EAAA,EAAA,IAAA+oC,SAAAj2B,UAAA9S,QAAAU,GAAAV,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,QAAAA;AAAAjH,MAAA2jC,EAAAA,MAAAA,cAAA3jC,UAAAU,KAC5EuG,KAAavG,EAAbijC,aAAe,gCAAmC,qBAAN,GAA4B3jC,QAAA2jC,YAAA3jC,QAAAU,GAAAV,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,QAAAA;AAAAlH,MAAAkE,EAAAA,MAAAA,OAAAH,OAAA/D,EAAA,EAAA,MAAAkpC,gBAAAlpC,EAAA,EAAA,MAAAmpC,iBAAAnpC,EAAAmG,EAAAA,MAAAA,MAAAnG,UAAAgpC,uBAAAhpC,EAAA,EAAA,MAAA8H,QAGvEZ,KAAA8hC,uBAAmB;AAAA,MAAAlhC,MACnB;AAAA,MAAQgrB,WAEZzxB,2BAAA,IAAC0P,8BAEQ,EAAA,QAAA,UACH,IAAA7M,OAAKH,OAASoC,IACZ2B,MACIohC,UAAAA,cACCC,yBAAa,CAAA;AAAA,IAG7BnpC,GAAAA,EAAA,EAAA,IAAAkE,OAAAH,KAAA/D,QAAAkpC,cAAAlpC,QAAAmpC,eAAAnpC,QAAAmG,IAAAnG,QAAAgpC,qBAAAhpC,QAAA8H,MAAA9H,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,QAAAA;AAAApH,MAAA,EAAA,MAAA6E,MAAA7E,EAAAgH,EAAAA,MAAAA,MAAAhH,EAAAiH,EAAAA,MAAAA,MAAAjH,UAAAkH,MApBIE,MAAA;AAAA,MAAA0K,MACC;AAAA,MAAUvO,MAAA+lC,MAAAA;AAAAA,MAAAx2B,UAENjO;AAAAA,MAAgEzD,OACnE4F;AAAAA,MAA4EmhC,OAC5ElhC;AAAAA,MAAwEmd,UACrE;AAAA,MAAY6jB,UACZmB;AAAAA,MAAMvD,QACR3+B;AAAAA,IAYP,GACFlH,QAAA6E,IAAA7E,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GArBDmD,KAAOiE;AAAAA,EAAAA;AAbFjE,SAAAA;AAiDL;AAGJwlC,aAAa7/B,SAAS;AACtB6/B,aAAalxB,cAAc;AC7F3B,MAAM8xB,wBAAsB;AAAA,EAC1BC,YAAY;AAAA,EACZC,eAAe;AAAA,EACff,WAAW;AACb,GAGagB,uBAAgDppC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAA1D;AAAAA,IAAA+sB;AAAAA,IAAAyX;AAAAA,MAAAtoC,IAO5D;AAAA,IAAA0+B;AAAAA,EAAAA,IAAyBvH,OAAqBtxB,qBAAAA,IAAI2B,IAAI,GACtD,CAAAkhC,qBAAAC,oBAAA,IAAoDr3B,MAAAA,WAAc;AAAChR,MAAAA;AAAAZ,IAAAmG,CAAAA,MAAAA,MAAAnG,SAAA8H,QACIlH,KAAA;AAAA,IAAAuF;AAAAA,IAAA2B;AAAAA,IAAA6e,YAGzD;AAAA,EACb3mB,GAAAA,OAAAmG,IAAAnG,OAAA8H,MAAA9H,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAA,CAAAyjC,aAAAC,oBAAA,IAA4C2F,OAAAA,2BAA2BzoC,EAItE,GACDkkB,cAAoBC,OAAAA,kBAEpB;AAAA,IAAArkB;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAAg/B,CAAAA,MAAAA,kBAAAh/B,SAAA4oC,cAElB5nC,KAAAA,MAAA;AAClB42B,mBAAAA,WACdgR,WAAW;AAAA,EACZ5oC,GAAAA,OAAAg/B,gBAAAh/B,OAAA4oC,YAAA5oC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHD,QAAAmpC,gBAAsBnoC;AAGUC,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEL9B,KAAAA,MAAA;AACzBgoC,2BAAyB;AAAA,EAAA,GAC1BjpC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAAopC,SAAenoC;AAET,MAAAgC,IAAAE;AAAAnD,IAAA,CAAA,MAAAmpC,iBAAAnpC,EAAAgpC,CAAAA,MAAAA,uBAAAhpC,EAAA4oC,CAAAA,MAAAA,cAAA5oC,UAAAU,KAIFyC,KAAA6lC,uBAAmB;AAAA,IAAAlhC,MACX;AAAA,IAASgK,MACT;AAAA,IAAUd,UACN43B;AAAAA,IAAU33B,WACTk4B;AAAAA,IAAajoC,SACfR,EAAE,+DAA+D;AAAA,EAAC,GAC5EV,OAAAmpC,eAAAnpC,OAAAgpC,qBAAAhpC,OAAA4oC,YAAA5oC,QAAAU,GAAAV,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAAAiD,KANDE;AAFJ,QAAA0iC,SAAkD5iC;AAUjD4B,MAAAA;AAAA7E,IAAA,EAAA,MAAA8kB,eAAA9kB,EAAA6lC,EAAAA,MAAAA,UAAA7lC,UAAAg/B,eAAAlsB,YAAA9S,EAAA0jC,EAAAA,MAAAA,wBAAA1jC,EAAAmxB,EAAAA,MAAAA,YAAAnxB,UAAAyjC,aAAApd,WAAArmB,EAAAoE,EAAAA,MAAAA,aAAApE,UAAAU,KAEcmE,KAAAA,MACT,CAACT,aAAa+sB,WAAQ,OAItB,CAACuS,wBAAyBD,CAAAA,aAAWpd,UAAS;AAAA,IAAAvU,MAExC;AAAA,IAAUvO,MAAAomC,MAAAA;AAAAA,IAAA72B,UAAA;AAAA,IAAAq1B,OAGTznC,EAAE,8BAA8B;AAAA,IAACU,OAEtCC,2BAAA,IAAC2jB,OAAuC,gCAAA,EAAA,SAAA,mBAA+BF,YAAW,CAAA;AAAA,EAAA,IAAI;AAAA,IAAAhT,MAMpF;AAAA,IAAUvO,MAAAomC,MAAAA;AAAAA,IAAA72B,UAEN9C,CAAQgvB,CAAAA,eAAclsB,YAAc4wB;AAAAA,IAAoBtiC,OAC1D49B,eAAclsB,YAAAy2B,sBAAiCvK,eAAclsB,QAAA,KAAe;AAAA,IAAEq1B,OAC/EznC,EAAE,8BAA8B;AAAA,IAACunC,UAC9BmB;AAAAA,IAAMvD;AAAAA,EAAAA,GAGnB7lC,QAAA8kB,aAAA9kB,QAAA6lC,QAAA7lC,EAAA,EAAA,IAAAg/B,eAAAlsB,UAAA9S,QAAA0jC,sBAAA1jC,QAAAmxB,UAAAnxB,EAAA,EAAA,IAAAyjC,aAAApd,SAAArmB,QAAAoE,WAAApE,QAAAU,GAAAV,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAOYgH,MAAAA;AAAA,SAAAhH,UAAA6E,MAjCNmC,KAAQnC,GAAAA,GAoCb7E,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GApCKgH;AAoCL;AAGJ0iC,qBAAqB5gC,SAAS;AAC9B4gC,qBAAqBjyB,cAAc;ACrFnC,MAAM8xB,wBAAsB;AAAA,EAC1BK,sBAAsB;AAAA,EACtBlB,WAAW;AACb,GAGamB,kBAA2CvpC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAA8gC;AAAAA,EAAAA,IAAAtoC,IACvD0O,gBAAsBU,OAAAA,oBACtB;AAAA,IAAAo6B;AAAAA,EAAAA,IAAoBrS,OAAAA,qBAAqBtxB,IAAI2B,IAAI,GACjD;AAAA,IAAA4vB;AAAAA,EAAAA,IAAyBC,SAAAA,UACzB,GAAA,CAAAoS,eAAAC,cAAA,IAAwCp4B,iBAAc;AAAChR,MAAAA;AAAAZ,IAAAmG,CAAAA,MAAAA,MAAAnG,SAAA8H,QACgBlH,KAAA;AAAA,IAAAuF;AAAAA,IAAA2B;AAAAA,IAAA6e,YAGzD;AAAA,EACb3mB,GAAAA,OAAAmG,IAAAnG,OAAA8H,MAAA9H,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAA,CAAAyjC,aAAAC,oBAAA,IAA4C2F,OAAAA,2BAA2BzoC,EAItE,GAED;AAAA,IAAAF;AAAAA,EAAYC,IAAAA,sBAAAnB,wBAAuC,GAEnDslB,cAAoBC,OAAAA,eAAe;AAAC/jB,MAAAA;AAAAhB,IAAAgP,CAAAA,MAAAA,cAAA6xB,QAAA7gC,EAAA,CAAA,MAAA8pC,aAAA9pC,EAAA,CAAA,MAAAmG,MAAAnG,EAAA03B,CAAAA,MAAAA,kBAAA13B,SAAA4oC,cAAA5oC,EAAA,CAAA,MAAA8H,QAET9G,iBAAA;AACzB,UAAAipC,SAAeC,KAAAA,KAAK;AAEpBF,qBAAmB;AAGnB,UAAAG,mBAAyBC,KAAAA,eACvBp7B,cAAa6xB,KAAAwJ,gBACMlkC,IAAI2B,IAAI,EAACyE,KACpBtB,YAAAC,OAA0D,CAAC,CACrE;AACA4+B,cAASlS,QAASqS,MAAM,GAAC,MAGnBE,kBACNzS,eAAe,QAAM;AAAA,MAAAvxB,IAAO8jC;AAAAA,MAAMniC;AAAAA,IAAO,CAAA,GAEzC8gC,WAAW;AAAA,EACZ5oC,GAAAA,EAAA,CAAA,IAAAgP,cAAA6xB,MAAA7gC,OAAA8pC,WAAA9pC,OAAAmG,IAAAnG,OAAA03B,gBAAA13B,OAAA4oC,YAAA5oC,OAAA8H,MAAA9H,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAlBD,QAAAopC,SAAepoC;AA6CFC,MAAAA;AAAA,OAAA;AAAA,QAxBP,CAACyiC,wBAAyBD,CAAAA,aAAWpd,SAAS;AAAApjB,UAAAA;AAAAjD,gBAAAU,KAIvCuC,MAAAvC,EAAE,wBAAwB,GAACV,QAAAU,GAAAV,QAAAiD,OAAAA,MAAAjD,EAAA,EAAA;AAAAmD,UAAAA;AAAAnD,gBAAA8kB,eAEhC3hB,MAAC9B,2BAAA,IAAA2jB,uCAAA,EAAuC,SAAA,sBAAkCF,YAAAA,CAAe,GAAA9kB,QAAA8kB,aAAA9kB,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA;AAAA6E,UAAAA;AAAA7E,QAAAiD,EAAAA,MAAAA,OAAAjD,UAAAmD,OALtF0B,MAAA;AAAA,QAAAtB,MAAAiI,MAAAA;AAAAA,QAAAsH,UAAA;AAAA,QAAAq1B,OAGEllC;AAAAA,QAA2B7B,OAEhC+B;AAAAA,MAAAA,GAEHnD,QAAAiD,KAAAjD,QAAAmD,KAAAnD,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA,GAPDiB,KAAO4D;AAONwR,YAAAA;AAAAA,IAAAA;AAKS,UAAApT,KAAA8mC,iBAAiB/5B,CAAQ85B,CAAAA,UAASh3B,YAAc4wB;AAAoBvgC,QAAAA;AAAAnD,MAAA+pC,EAAAA,MAAAA,iBAAA/pC,UAAAU,KACvEyC,KAAgBzC,EAAhBqpC,gBAAkB,mCAAsC,wBAAN,GAA+B/pC,QAAA+pC,eAAA/pC,QAAAU,GAAAV,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,QAAAA;AAAA7E,cAAA8pC,UAAAh3B,YAAA9S,UAAAU,KACjFmE,KAAAilC,UAASh3B,WAAYpS,EAAC6oC,sBAAqBO,UAASh3B,QAAA,CAAU,IAAI,IAAE9S,EAAA,EAAA,IAAA8pC,UAAAh3B,UAAA9S,QAAAU,GAAAV,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,QAAAA;AAAAhH,MAAA,EAAA,MAAAopC,UAAAppC,EAAAiD,EAAAA,MAAAA,MAAAjD,EAAAmD,EAAAA,MAAAA,MAAAnD,UAAA6E,MAJtEmC,KAAA;AAAA,MAAAzD,MAAAiI,MAAAA;AAAAA,MAAAsH,UAEK7P;AAAAA,MAAoEklC,OACvEhlC;AAAAA,MAAiF/B,OACjFyD;AAAAA,MAAoEojC,UACjEmB;AAAAA,IAAM,GACjBppC,QAAAopC,QAAAppC,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GANDiB,KAAO+F;AAAAA,EAAAA;AAZF/F,SAAAA;AA2BL;AAGJ4oC,gBAAgB/gC,SAAS;AACzB+gC,gBAAgBpyB,cAAc;AAlE0B,SAAAvM,QAAAgB,GAAA;AAAA,SAwB5BA,EAACykB,OAAQ,eAAezkB,EAACpE,SAAU;AAAS;ACjCjE,MAAMwiC,uBAAgDhqC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAAyiC;AAAAA,IAAA3B;AAAAA,MAAAtoC,IAC5D;AAAA,IAAAk3B;AAAAA,EAAAA,IAAkBC,4BAAqBtxB,IAAI2B,IAAI,GAC/CqL,QAAcod,iCAA0BpqB,IAAI2B,IAAI,GAChD;AAAA,IAAA4vB;AAAAA,EAAyBC,IAAAA,mBACzBnH,GAAAA,YAAkB5a,MAAAA,OAAOzC,KAAK,GAC9B,CAAA61B,qBAAAC,oBAAA,IAAoDr3B,MAAAA,WAAc,GAClE;AAAA,IAAAlR;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAA4oC,CAAAA,MAAAA,cAAA5oC,SAAAw3B,WAAAx3B,EAAA,CAAA,MAAAuqC,YAElB3pC,KAAAA,MAAA;AACzBg3B,YAAAA,QAAS2S,QAAS,GACzB3B,WAAW;AAAA,EAAA,GACZ5oC,OAAA4oC,YAAA5oC,OAAAw3B,SAAAx3B,OAAAuqC,UAAAvqC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAAmpC,gBAAsBvoC;AAGa,MAAAI,IAAAC;AAAAjB,IAAA,CAAA,MAAAmT,SAAAnT,EAAAmG,CAAAA,MAAAA,MAAAnG,EAAA03B,CAAAA,MAAAA,kBAAA13B,SAAA8H,QAKzB9G,KAAAA,MAAA;AACJ,KAACmS,SAASA,UAAUqd,UAAS3a,YAE7B1C,MAAKrL,SAAU,aAAaqL,MAAKwd,OAAQ,aAC3C+G,eAAe,QAAM;AAAA,MAAAvxB;AAAAA,MAAA2B;AAAAA,IAAAA,CAAY,GAGnC0oB,UAAS3a,UAAW1C;AAAAA,EAAAA,GACnBlS,MAACkS,OAAOhN,IAAIuxB,gBAAgB5vB,IAAI,GAAC9H,OAAAmT,OAAAnT,OAAAmG,IAAAnG,OAAA03B,gBAAA13B,OAAA8H,MAAA9H,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IARpCuS,MAAAA,UAAUvR,IAQPC,EAAiC;AAACgC,MAAAA;AAAAjD,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEVE,KAAAA,MAAA;AACzBgmC,2BAAyB;AAAA,EAAA,GAC1BjpC,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAFD,QAAAopC,SAAenmC;AAETE,MAAAA;AAAA,OAAA;AAAA,QAGA6lC,qBAAmB;AAAAnkC,UAAAA;AAAA7E,gBAAAU,KAMVmE,MAAAnE,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA;AAAAgH,UAAAA;AAAAhH,QAAAmpC,EAAAA,MAAAA,iBAAAnpC,UAAA4oC,cAAA5oC,EAAA,EAAA,MAAA6E,OALvCmC,KAAA;AAAA,QAAAc,MACC;AAAA,QAASgK,MACT;AAAA,QAAUd,UACN43B;AAAAA,QAAU33B,WACTk4B;AAAAA,QAAajoC,SACf2D;AAAAA,MAAAA,GACV7E,QAAAmpC,eAAAnpC,QAAA4oC,YAAA5oC,QAAA6E,KAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GANDmD,KAAO6D;AAMNqP,YAAAA;AAAAA,IAAAA;AAGH,SAAA;AAAA,EAAA;AAXF,QAAAwvB,SAAiD1iC,IAcjDqnC,oBAA0BD,aAAa,YACvCE,mBAAyBF,aAAQ3/B;AAAc/F,MAAAA;AAAA,OAAA;AAAA,QAGzC4lC,kBAAgB;AAClB,WAAA;AAAWn0B,YAAAA;AAAAA,IAAAA;AAAAtP,QAAAA;AAAAhH,cAAAU,KAIJsG,KAAAtG,EAAE,sBAAsB,GAACV,QAAAU,GAAAV,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAI9BiH,UAAAA,KAAAujC,oBACI,mDACA;AAAwBtjC,QAAAA;AAAAlH,MAAAU,EAAAA,MAAAA,KAAAV,UAAAiH,MAHvBC,KAAAxG,EACLuG,EAGF,GAACjH,QAAAU,GAAAV,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,QAAAA;AAAApH,MAAA,EAAA,MAAA6lC,UAAA7lC,EAAAwqC,EAAAA,MAAAA,qBAAAxqC,EAAAgH,EAAAA,MAAAA,MAAAhH,UAAAkH,MARIE,MAAA;AAAA,MAAA+gC,OACEnhC;AAAAA,MAAyB8K,MAC1B;AAAA,MAASm2B,UACLmB;AAAAA,MAAMhoC,OACT8F;AAAAA,MAIN3D,MAAAmnC,MAAAA;AAAAA,MAAA7E;AAAAA,MAAA/yB,UAGS03B;AAAAA,IAAiB,GAC5BxqC,QAAA6lC,QAAA7lC,QAAAwqC,mBAAAxqC,QAAAgH,IAAAhH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAZD6E,KAAOuC;AAAAA,EAAAA;AALFvC,SAAAA;AAkBqD;AAG9DylC,qBAAqBxhC,SAAS;AAC9BwhC,qBAAqB7yB,cAAc;ACtE5B,MAAMkzB,oBAAoBvS,UAAAA,YAAmC;AAAA,EAClE7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC,GCKK6f,4BAAyE;AAAA,EAC7EoC,mBAAmB;AAAA,EACnBC,mBAAmB;AAAA,EACnBrB,YAAY;AAAA,EACZd,WAAW;AACb;AAEA,SAAStrB,kBACPjP,QACA28B,aACApqC,GACA;AACIyN,SAAAA,WAAW,uBAAuB28B,cAC5BzpC,2BAAA,IAAA,kBAAA,EAAiB,aAA4B,IAEhDX,EAAE8nC,0BAA0Br6B,MAAM,CAAC;AAC5C;AAEA,SAAA48B,iBAAAzqC,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAA0B;AAAA,IAAA6qC;AAAAA,MAAAxqC,IACxB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACInC,KAAA;AAAA,IAAAoqC,mBAAA;AAAA,EAAA,GAAyBhrC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAjFirC,QAAAA,qBAA2BC,OAAAA,gBAAgBJ,aAAalqC,EAAyB;AAACI,MAAAA;AAAAhB,IAAAU,CAAAA,MAAAA,KAAAV,SAAAirC,sBACpEjqC,KAAAN,EAAE,4CAA0C;AAAA,IAAAuqC;AAAAA,EAAAA,CAAsB,GAACjrC,OAAAU,GAAAV,OAAAirC,oBAAAjrC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,SAAAgB,MAA1EC,8CAAOD,cAAoE,GAAOhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAlFiB;AAAkF;AAKpF,MAAMkqC,gBAAyCprC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACpD;AAAA,IAAAkG;AAAAA,IAAA2B;AAAAA,IAAAqpB;AAAAA,IAAAjtB;AAAAA,IAAAE;AAAAA,EAAAA,IAA+CrE,OAC/C,CAAAqrC,cAAAC,eAAA,IAAwCz5B,MAAAA,aAAgD,GACxF;AAAA,IAAAmtB;AAAAA,EAAkBtH,IAAAA,OAAAA,qBAAqBtxB,IAAI2B,IAAI,GAC/CwjC,mBAAyBC,OAAAA,oBAAoBplC,IAAI2B,IAAI,GACrD0jC,YAAkBC,OAAatlC,aAAAA,IAAI2B,IAAI,GACvC;AAAA,IAAA4jC;AAAAA,IAAAjkC;AAAAA,IAAAC;AAAAA,EAAAA,IAA+D+kB,gBAAgB,GAC/EsD,YAAkB4b,OAAalkC,aAAAA,YAAYC,YAAY,GACvD;AAAA,IAAAhH;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAA+vB,CAAAA,MAAAA,WAAA7rB,SAAAlE,EAAA,CAAA,MAAA+vB,WAAA3rB,aAElC9D,KAAAyvB,WAAS7rB,SAAW6rB,WAAS3rB,aAAiB,CAAApE,GAAAA,EAAA,CAAA,IAAA+vB,WAAA7rB,OAAAlE,EAAA,CAAA,IAAA+vB,WAAA3rB,WAAApE,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAhE,QAAAuqC,WAAkBjqC,GAA8C6gC;AAAMvgC,MAAAA;AAAAZ,IAAA,CAAA,MAAAsrC,iBAAApL,cAE1Ct/B,KAAA0qC,iBAAgBpL,WAAA9xB,KAAAw9B,6BAAwC,GAAC5rC,EAAA,CAAA,IAAAsrC,iBAAApL,YAAAlgC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAArF,QAAA6rC,sBAA4BjrC,IAE5B,CAAAkrC,kBAAAC,mBAAA,IAAgDn6B,iBAAuB,GACvEo6B,YAAkBR,UAASQ,WAC3BC,eAAqBX,iBAAgBW;AAAajrC,MAAAA;AAAAhB,IAAAmG,CAAAA,MAAAA,MAAAnG,SAAA8H,QACqB9G,KAAA;AAAA,IAAAmF;AAAAA,IAAA2B;AAAAA,IAAA6e,YAGzD;AAAA,EACb3mB,GAAAA,OAAAmG,IAAAnG,OAAA8H,MAAA9H,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAA,CAAAyjC,aAAAC,oBAAA,IAA4C2F,kCAA2BroC,EAItE,GAED8jB,cAAoBC,sBAAe;AAAC9jB,MAAAA;AAAAjB,IAAA6rC,CAAAA,MAAAA,uBAAA7rC,SAAA++B,QAAAjsB,YAAA9S,EAAAoE,EAAAA,MAAAA,aAAApE,UAAAU,KAGtBO,KAAA89B,QAAOjsB,WACjBsK,kBAAkB2hB,QAAOjsB,WAAY1O,aAAe,IAAA8nC,YAAcxrC,CAAC,KAAK,KACxEmrC,sBACEnrC,EAAE,0CAA0C,IAC5C,IAAEV,OAAA6rC,qBAAA7rC,EAAA,CAAA,IAAA++B,QAAAjsB,UAAA9S,QAAAoE,WAAApE,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAJRoB,QAAAA,QAAcH,IAMdkrC,WAAiBn8B,CAAQ9L,CAAAA;AAAMjB,MAAAA;AAAAjD,YAAA++B,WAED97B,KAAAA,MAAA;AACrB20B,YAAAA,QAAAA,GACPyT,gBAAgB,YAAY;AAAA,EAAC,GAC9BrrC,QAAA++B,SAAA/+B,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAHD,QAAAosC,YAAkBnpC;AAGLE,MAAAA;AAAAnD,IAAA,EAAA,MAAAosC,aAAApsC,EAAA,EAAA,MAAA6rC,uBAAA7rC,EAAA,EAAA,MAAAgsC,aAAAhsC,EAAA8rC,EAAAA,MAAAA,oBAAA9rC,EAAAuqC,EAAAA,MAAAA,YAAAvqC,EAAAsrC,EAAAA,MAAAA,iBAAAW,gBAAAjsC,EAAAsrC,EAAAA,MAAAA,iBAAAf,YAEHpnC,KAAAA,MAAA;AAER,UAAAkpC,qBACEf,iBAAgBW,iBAAuB,MAAIX,iBAAgBf,aAAcA;AAEvE,KAACuB,oBAAoBE,cAAcK,uBAIlCR,uBACHO,UAEFL,GAAAA,sBAAyB;AAAA,EAAA,GAC1B/rC,QAAAosC,WAAApsC,QAAA6rC,qBAAA7rC,QAAAgsC,WAAAhsC,QAAA8rC,kBAAA9rC,QAAAuqC,UAAAvqC,EAAA,EAAA,IAAAsrC,iBAAAW,cAAAjsC,EAAA,EAAA,IAAAsrC,iBAAAf,UAAAvqC,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,IAAA,EAAA,MAAAosC,aAAApsC,EAAA6rC,EAAAA,MAAAA,uBAAA7rC,UAAAgsC,aAAAhsC,EAAA,EAAA,MAAAisC,gBAAAjsC,EAAA8rC,EAAAA,MAAAA,oBAAA9rC,EAAAuqC,EAAAA,MAAAA,YAAAvqC,EAAA,EAAA,MAAAsrC,iBAAAW,gBAAAjsC,EAAAsrC,EAAAA,MAAAA,iBAAAf,YAAE1lC,MACDmnC,WACAI,WACAP,qBACAC,kBACAR,iBAAgBf,UAChBA,UACA0B,cACAX,iBAAgBW,YAAA,GACjBjsC,QAAAosC,WAAApsC,QAAA6rC,qBAAA7rC,QAAAgsC,WAAAhsC,QAAAisC,cAAAjsC,QAAA8rC,kBAAA9rC,QAAAuqC,UAAAvqC,EAAA,EAAA,IAAAsrC,iBAAAW,cAAAjsC,EAAA,EAAA,IAAAsrC,iBAAAf,UAAAvqC,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GAtBDuS,MAAAA,UAAUpP,IAaP0B,EASF;AAACmC,MAAAA;AAAAhH,IAAAmsC,EAAAA,MAAAA,YAAAnsC,UAAAorC,gBAEQpkC,KAAAA,MAAA;AACRslC,UAAAA,aAAmBlB,iBAAiB,iBAAiBe,UAErD9kC,YAAkBilC,aAAa,cAAkB,MAEjDz/B,QAAcwF,WAAA,MAAA;AACZg5B,sBAAgBhkC,SAAS;AAAA,IAAA,GAFbilC,aAAuB,MAAA,GAG7B;AACKh6B,WAAAA,MAAAA,aAAazF,KAAK;AAAA,EAChC7M,GAAAA,QAAAmsC,UAAAnsC,QAAAorC,cAAAprC,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,IAAA0rC,EAAAA,MAAAA,eAAA1rC,UAAAmsC,YAAAnsC,EAAA,EAAA,MAAAorC,gBAAEnkC,KAACykC,CAAAA,aAAaN,cAAce,QAAQ,GAACnsC,QAAA0rC,aAAA1rC,QAAAmsC,UAAAnsC,QAAAorC,cAAAprC,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA,GATxCuS,MAAAA,UAAUvL,IASPC,EAAqC;AAExC,QAAA01B,aAAkBhE,MAAAA,aAAa;AAACzxB,MAAAA;AAAAlH,IAAAosC,EAAAA,MAAAA,aAAApsC,UAAAkE,OAAAmgC,cAAArkC,EAAAoE,EAAAA,MAAAA,aAAApE,EAAA,EAAA,MAAAuqC,YAAAvqC,EAAAwrC,EAAAA,MAAAA,UAAAQ,aAAAhsC,EAAA,EAAA,MAAA28B,cAAA38B,EAAAsrC,EAAAA,MAAAA,iBAAAW,gBAAAjsC,EAAAsrC,EAAAA,MAAAA,iBAAAf,YAELrjC,KAAAA,MAAA;AACzBy1B,IAAAA,WAAS1C,IAAA0Q,mBAAA;AAAA,MAAA4B,sBAAA,CACgBroC,OAAKmgC;AAAAA,MAAAmI,qBACPx8B,CAAQ5L,CAAAA;AAAAA,IAC9B,CAAA,GAEConC,UAASQ,aACTV,iBAAgBW,gBAChBX,iBAAgBf,aAAcA,WAE9BwB,sBAAwB,IAExBK,UAAU;AAAA,EAAA,GAEbpsC,QAAAosC,WAAApsC,EAAA,EAAA,IAAAkE,OAAAmgC,YAAArkC,QAAAoE,WAAApE,QAAAuqC,UAAAvqC,EAAA,EAAA,IAAAwrC,UAAAQ,WAAAhsC,QAAA28B,YAAA38B,EAAA,EAAA,IAAAsrC,iBAAAW,cAAAjsC,EAAA,EAAA,IAAAsrC,iBAAAf,UAAAvqC,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAdD,QAAAopC,SAAeliC;AAsFFE,MAAAA;AAAA,OAAA;AAAA,QA5DP+pB,UAAQ;AAAA7pB,UAAAA;AAAAtH,gBAAAU,KAID4G,OAAA5G,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAAsH,QAAAA,OAAAtH,EAAA,EAAA;AAAA4J,UAAAA;AAAA5J,gBAAAU,KACnCkJ,OAAAlJ,EAAE,kCAAkC,GAACV,QAAAU,GAAAV,QAAA4J,QAAAA,OAAA5J,EAAA,EAAA;AAAAkK,UAAAA;AAAAlK,QAAAsH,EAAAA,MAAAA,QAAAtH,UAAA4J,QAJvCM,OAAA;AAAA,QAAA4H,MACC;AAAA,QAASvO,MAAAkpC,MAAAA;AAAAA,QAAAtE,OAER7gC;AAAAA,QAAmClG,OACnCwI;AAAAA,QAAqCkJ,UAAA;AAAA,MAAA,GAE7C9S,QAAAsH,MAAAtH,QAAA4J,MAAA5J,QAAAkK,QAAAA,OAAAlK,EAAA,EAAA,GANDoH,MAAO8C;AAMNmM,YAAAA;AAAAA,IAAAA;AAAA,QAGC,CAACqtB,wBAAyBD,CAAAA,aAAWpd,SAAS;AAAA/e,UAAAA;AAAAtH,gBAAA8kB,eACzCxd,OAAA;AAAA,QAAAwK,MACC;AAAA,QAASvO,MAAAkpC,MAAAA;AAAAA,QAAAtE,OAER;AAAA,QAAS/mC,OAEdC,2BAAA,IAAC2jB,OAAuC,gCAAA,EAAA,SAAA,oBAAgCF,aAAe;AAAA,QAAAhS,UAAA;AAAA,MAG1F9S,GAAAA,QAAA8kB,aAAA9kB,QAAAsH,QAAAA,OAAAtH,EAAA,EAAA,GARDoH,MAAOE;AAQN+O,YAAAA;AAAAA,IAAAA;AAGH,UAAAvD,WAAiB9C,CAAAA,EACf87B,oBACE/b,WAAS6Q,qBAAAnlB,WACT2vB,iBAAiB,gBACjBA,iBAAiB,eACjBS,uBACA9M,QAAOjsB,WAICxL,MAAAwL,YAAY4wB;AAAoB95B,QAAAA;AAAA5J,MAAA8rC,EAAAA,MAAAA,oBAAA9rC,UAAAorC,gBAAAprC,EAAA,EAAA,MAAAU,KAIxCkJ,MACIlJ,EADJ0qC,iBAAiB,cACX,mCACFU,oBAAoBV,iBAAiB,eACjC,iCACA,4BAH8B,GAGDprC,QAAA8rC,kBAAA9rC,QAAAorC,cAAAprC,QAAAU,GAAAV,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,QAAAA;AAAAlK,MAAA,EAAA,MAAA8rC,oBAAA9rC,EAAAorC,EAAAA,MAAAA,gBAAAprC,EAAAU,EAAAA,MAAAA,KAAAV,UAAAoB,SAKhC8I,MAAA4hC,mBACHprC,EAAE,wBAAwB,IAC1B0qC,iBAAiB,eAAeA,iBAAiB,sBAE/ChqC,OAAKpB,QAAA8rC,kBAAA9rC,QAAAorC,cAAAprC,QAAAU,GAAAV,QAAAoB,OAAApB,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AACDoK,UAAAA,MAAA0I,YAAYg5B,0BAA0B;AAAYzhC,QAAAA;AAAArK,MAAAopC,EAAAA,MAAAA,UAAAppC,EAAA,EAAA,MAAAsH,OAAAtH,EAAA4J,EAAAA,MAAAA,OAAA5J,EAAA,EAAA,MAAAkK,OAAAlK,UAAAoK,OAnBvDC,MAAA;AAAA,MAAAyI,UACKxL;AAAAA,MAAgCwK,MACpC;AAAA,MAASq2B,OAGbv+B;AAAAA,MAIqCrG,MAAAkpC,MAAAA;AAAAA,MAAArrC,OAKhC8I;AAAAA,MAIIka,UACDha;AAAAA,MAAkD69B,UAClDmB;AAAAA,IACXppC,GAAAA,QAAAopC,QAAAppC,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA,GArBDoH,MAAOiD;AAAAA,EAAAA;AAhCFjD,SAAAA;AAmEL;AAGJ+jC,cAAcriC,SAAS;AACvBqiC,cAAc1zB,cAAc;AC7M5B,MAAM8xB,sBAAsB;AAAA,EAC1BE,eAAe;AAAA,EACff,WAAW;AAAA,EACXkC,mBAAmB;AACrB,GAGa8B,kBAA2CA,CAAC;AAAA,EACvDvmC;AAAAA,EACA2B;AAAAA,EACA5D;AAAAA,EACA0kC;AAAAA,EACAzX;AACF,MAAM;AACE,QAAA;AAAA,IAACwb;AAAAA,MAAalV,OAAqBtxB,qBAAAA,IAAI2B,IAAI,GAC3C,CAACkhC,qBAAqBC,oBAAoB,IAAIr3B,MAAAA,SAAS,EAAK,GAC5D,CAAC6xB,aAAaC,oBAAoB,IAAI2F,OAAAA,2BAA2B;AAAA,IACrEljC;AAAAA,IACA2B;AAAAA,IACA6e,YAAY;AAAA,EAAA,CACb,GACK7B,cAAcC,OAAAA,kBACd;AAAA,IAACrkB;AAAAA,MAAKC,OAAenB,eAAAA,wBAAwB,GAE7C0pC,eAAelhB,kBAAY,MAAM;AAChB,yBAAA,EAAK,GAC1B4gB,WAAW;AAAA,KACV,CAACA,UAAU,CAAC,GAETO,gBAAgBnhB,kBAAY,MAAM;AACtCihB,yBAAqB,EAAK,GAC1B0D,UAAU/U,QAAAA,GACVgR,WAAW;AAAA,EAAA,GACV,CAACA,YAAY+D,SAAS,CAAC,GAEpB9G,SAAgDzd,MAAAA,QAAQ,MACxD4gB,sBACK;AAAA,IACLlhC,MAAM;AAAA,IACN4pB,SAASkX;AAAAA,IACTn9B,SACEpK,2BAAA;AAAA,MAAC0P;AAAAA,MAAA;AAAA,QACC,IAAI7M,OAAOH,OAAOoC;AAAAA,QAClB;AAAA,QAEA,QAAO;AAAA,QACP,UAAU+iC;AAAAA,QACV,WAAWC;AAAAA,MAAAA;AAAAA,IAAAA;AAAAA,EAAc,IAM1B,MACN,CAACjlC,OAAOiC,IAAI+iC,cAAcC,eAAeH,qBAAqBJ,YAAY9gC,IAAI,CAAC;AAE3EsgB,SAAAA,MAAAA,QAAQ,MACT+I,WACK,OAGL,CAACuS,wBAAwB,CAACD,aAAapd,UAClC;AAAA,IACLvU,MAAM;AAAA,IACNvO,MAAMqpC,MAAAA;AAAAA,IACNzE,OAAO;AAAA,IACP/mC,OACEC,2BAAA,IAAC2jB,OAA+B,gCAAA,EAAA,SAAQ,sBAAqB,aAC9D;AAAA,IACDlS,UAAU;AAAA,EAAA,IAIP;AAAA,IACLhB,MAAM;AAAA,IACNvO,MAAMqpC,MAAAA;AAAAA,IACN95B,UAAU9C,CAAQ28B,CAAAA,UAAU75B,YAAa4wB;AAAAA,IACzCyE,OAAOznC,EAAE,wBAAwB;AAAA,IACjCU,OAAOurC,UAAU75B,WAAWpS,EAAE6oC,oBAAoBoD,UAAU75B,QAAQ,CAAC,IAAI;AAAA,IACzEm1B,UAAUA,MAAMgB,qBAAqB,EAAI;AAAA,IACzCpD;AAAAA,EACF,GACC,CACD/gB,aACA+gB,QACAnC,sBACAvS,UACAsS,aAAapd,SACb3lB,GACAisC,UAAU75B,QAAQ,CACnB;AACH;AAEA45B,gBAAgB5jC,SAAS;AACzB4jC,gBAAgBj1B,cAAc;ACrF9B,MAAMo1B,gCAAgCnlB,MAAAA,KAAK,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAGzC;AAAA,IAAA6S;AAAAA,IAAAg6B;AAAAA,IAAAC;AAAAA,MAAqChtC,OACrC;AAAA,IAAAitC;AAAAA,MAA2BvgB,gBAAgB;AAAC,MAAAwgB,kBAAAC;AAAAltC,WAAA+sC,UAC5C,CAAAE,kBAAA,GAAAC,gBAAA,IAAgDH,QAAM/sC,OAAA+sC,QAAA/sC,OAAAitC,kBAAAjtC,OAAAktC,qBAAAD,mBAAAjtC,EAAA,CAAA,GAAAktC,mBAAAltC,EAAA,CAAA;AACtD,QAAA,CAAAmtC,eAAAC,gBAAA,IAA0Cx7B,MAAAA,aAAuC;AAACtR,MAAAA;AAAA,OAAA;AAAA,QAI5E,CAAC2sC,oBAAqB,CAACA,iBAAgB7rC,SAAA,CAAW6rC,iBAAgB7oB,UAAU;AAAE,WAAA;AAAW/N,YAAAA;AAAAA,IAAAA;AAAAzV,QAAAA;AAAAZ,MAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAG9EnC,MAAA;AAAA,MAAA6T,UAAA;AAAA,IAAA,GAAezU,OAAAY,OAAAA,MAAAZ,EAAA,CAAA;AAAAgB,QAAAA;AAAAhB,MAAA,CAAA,MAAAitC,iBAAA7rC,SACzBJ,MAAAisC,iBAAgB7rC,SAAUC,2BAAA,IAACwB,GAAW,MAAA,EAAA,MAAC,GAAGoqC,UAAAA,iBAAgB7rC,MAAO,CAAA,GAAOpB,EAAA,CAAA,IAAAitC,iBAAA7rC,OAAApB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,MAAA,CAAA,MAAAitC,iBAAA7oB,YACxEnjB,MAAAgsC,iBAAgB7oB,YACf/iB,2BAAAA,IAACgsC,OAAAA,SACa,EAAA,eAAA,+BACF,UAAC,GACJ,OAAA;AAAA,MAAA/jB,WAAA;AAAA,MAAAD,cAAA;AAAA,IAAA,GACD,MAAA6e,OAAO+E,iBAAgB7oB,QAAS,EAAC1K,MAC9B,GAAG,EAACjP,IAAAS,OACuD,EAEvE,CAAA,GAAAlL,EAAA,CAAA,IAAAitC,iBAAA7oB,UAAApkB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA;AAAAiD,QAAAA;AAAAjD,MAAAgB,CAAAA,MAAAA,OAAAhB,SAAAiB,OAXHgC,MAAAG,2BAAAA,KAACd,GAAAA,QAAY,OAAA1B,KAAuB,OAAA,UAAc,KAAC,GAChDI,UAAAA;AAAAA,MAAAA;AAAAA,MACAC;AAAAA,IAAAA,EAUH,CAAA,GAAOjB,OAAAgB,KAAAhB,OAAAiB,KAAAjB,QAAAiD,OAAAA,MAAAjD,EAAA,EAAA,GAbTM,KACE2C;AAAAA,EAAAA;AAJJ,QAAAsW,iBAAuBjZ,IAsBlBM,KAAAosC,oBAAoBA,iBAAgBM;AAAatsC,MAAAA;AAAAhB,IAAA8S,EAAAA,MAAAA,YAAA9S,UAAAitC,oBAAAjtC,EAAA,EAAA,MAAAuZ,kBACjDvY,KAAAisC,oBACE5rC,2BAAAA,IAAA8b,GAAA,eAAA,EAAuB,SAAE,KACxB,UAAA9b,2BAAAA,IAAC6B,0BAAkB,SAAA,EAAA,UAAA,CAACqW,gBAAyBA,SAAa,gBAAa,WAAA,OACrE,yCAAC/O,UACC,EAAA,UAAAnJ,+BAACkK,0BAAAA,QACc,EAAA,eAAA,UAAUyM,oBAAoBi1B,iBAAgB9E,KAAM,CAAC,IACxD,UAAAr1B,YAAY9C,CAAAA,CAAQi9B,iBAAgBn6B,UACxC,MAAAm6B,iBAAgB1pC,MAEb,SAAA0pC,iBAAgBhF,UACpBmF,KAAe,kBACf,MAAA,SACC,MAAAH,iBAAgB9E,OAChB,MAAA8E,iBAAgBn7B,QAAS,WAAS,EAE5C,CAAA,EACF,CAAA,EACF,CAAA,GACD9R,QAAA8S,UAAA9S,QAAAitC,kBAAAjtC,QAAAuZ,gBAAAvZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,IAAA8S,EAAAA,MAAAA,YAAA9S,UAAAktC,oBAAAltC,EAAA,EAAA,MAAA8sC,YACA7rC,KAAA6rC,YAAYI,iBAAgBvqC,SAAA,oCAC1B,kBAA+BuqC,EAAAA,gCAA4Bp6B,SAC7D,CAAA,GAAA9S,QAAA8S,UAAA9S,QAAAktC,kBAAAltC,QAAA8sC,UAAA9sC,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,IAAAmtC,EAAAA,MAAAA,iBAAAntC,UAAAitC,oBACAhqC,KAAAgqC,oBAAoBA,iBAAgBpH,UAClCxkC,2BAAAA,IAAA,mBAAA,EAA0B,QAAA4rC,iBAAgBpH,QAA2BsH,kBAAY,cACnF,CAAA,GAAAntC,QAAAmtC,eAAAntC,QAAAitC,kBAAAjtC,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,SAAAA,EAAA,EAAA,MAAAY,MAAAZ,EAAAgB,EAAAA,MAAAA,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAiD,MA1BHE,qCAACb,GAAAA,MAAW,EAAA,OAAA,UAAc,KAAA,GACvB1B,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,IAmBAC;AAAAA,IAGAgC;AAAAA,EAGH,EAAA,CAAA,GAAOjD,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GA3BPmD;AA2BO,CAEV,GAEYoqC,2BAA2B7lB,WAAK,WAAA;AAAA1nB,QAAAA,IAAAC,uBAAA,EAAA,GAC3C;AAAA,IAAAgc,SAAAuxB;AAAAA,IAAAxgB;AAAAA,IAAAvlB;AAAAA,IAAAsoB;AAAAA,MAAsEtD,gBAAgB;AAAC,MAAAnsB,IAAAM;AAAAZ,WAAAwtC,cAS9E5sC,KAAA4sC,cAAgB,CAAAxtC,GAAAA,OAAAwtC,YAAAxtC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MAAjBI,KAACJ,GAAgBqK,OAAAkF,QAA6C,GAACnQ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAA/DU;AADR,QAAAib,UAAgB3b;AAGfW,MAAAA;AAAAjB,IAAA,CAAA,MAAAic,QAAAtZ,UAAA3C,EAAA,CAAA,MAAAgtB,mBAAAhtB,EAAA,CAAA,MAAAyH,cAKCxG,KAAAgC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA8pC;AAAAA,IAAAA,IAAA9pC;AACC,WAAA5B,2BAAA,IAAC,+BACW,EAAA,UAAA2rB,oBAAoB,aAIpB,UAAA/Q,QAAOtZ,SAAA,GACToqC,OAAAA,GAEHtlC,UACL;AAAA,EAAA,GACHzH,EAAA,CAAA,IAAAic,QAAAtZ,QAAA3C,OAAAgtB,iBAAAhtB,OAAAyH,YAAAzH,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAdH,QAAAytC,iCAAuCxsC;AAkBnCgb,MAAAA,QAAOtZ,WAAA,MAAkBotB;AAAS,WAAA;AAAA9sB,MAAAA;AAAA,SAAAjD,EAAAic,CAAAA,MAAAA,WAAAjc,SAAA+vB,aAAA/vB,EAAA,EAAA,MAAAytC,kCAKpCxqC,KAAA5B,2BAAA,IAAC,+BAGU4a,SACI8T,wBACP,OAAA,WAEwB,UAChC,gCAAA,GAA8B/vB,OAAAic,SAAAjc,OAAA+vB,WAAA/vB,QAAAytC,gCAAAztC,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAR9BiD;AAQ8B,CAEjC,GAEYyqC,0BAA0BhmB,MAAAA,KAAK,WAAA;AAAA1nB,QAAAA,IAAAC,uBAAA,EAAA,GAC1C;AAAA,IAAAgc;AAAAA,IAAA+Q;AAAAA,IAAA+C;AAAAA,IAAA8T;AAAAA,EAAAA,IAA6DpX,gBAAgB,GAK7E8d,WAFgBxF,OAAAA,oBAAoBlB,eAAazzB,QAA0B,GAEnDjK,MAAQ,IAChC2M,YAAkBid,WAAS7rB,SAAW6rB,WAAS3rB,aAAW,CAAA,GAAM+8B,SAAWoJ;AAAQ,MAAAjqC,IAAAM;AAAAZ,WAAA+vB,aAC3CnvB,KAAAmvB,aAAe,CAAA/vB,GAAAA,OAAA+vB,WAAA/vB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAuqC,CAAAA,MAAAA,YAAAvqC,SAAAY,MAApBI,KAAA;AAAA,IAAA,GAAKJ;AAAAA,IAAe2pC;AAAAA,EAAAA,GAAYvqC,OAAAuqC,UAAAvqC,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAAhCU;AAAnC,QAAAypB,cAAoBnqB;AAAwE,MAAAW,IAAAgC;AAAAjD,WAAAic,WAGtDhZ,KAAAgZ,WAAa,CAAAjc,GAAAA,OAAAic,SAAAjc,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,WAAAiD,MAAdE,KAACF,GAAagI,OAAA0iC,eAAwB,EAACroC,MAAA,EAAS,GAACtF,OAAAiD,IAAAjD,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA,GAAAiB,KAAjDkC;AAArC,QAAAyqC,iBAAuB3sC;AAA2E4D,MAAAA;AAAA7E,IAAAgtB,CAAAA,MAAAA,mBAAAhtB,UAAA8S,YAKhGjO,KAAAmC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA+lC;AAAAA,IAAAA,IAAA/lC;AACC,WAAA3F,+BAAC,iCACW,UAAA2rB,oBAAoB,eAAehd,CAAQ8C,CAAAA,UAC3C,UAAI,IACNi6B,OACR,CAAA;AAAA,EACH/sC,GAAAA,OAAAgtB,iBAAAhtB,QAAA8S,UAAA9S,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AATHytC,QAAAA,iCAAuC5oC,IAgBtBmC,KAAAyjB;AAAkBxjB,MAAAA;AAAA,SAAAjH,EAAA4tC,EAAAA,MAAAA,kBAAA5tC,UAAAytC,kCAAAztC,EAAA,EAAA,MAAAgH,MAFjCC,KAAC5F,+BAAA,6BAAA,EACUusC,SAAa,gBACT,aAAA5mC,IACP,OAAA,WAEwB,UAChC,+BAAA,CAAA,GAA8BhH,QAAA4tC,gBAAA5tC,QAAAytC,gCAAAztC,QAAAgH,IAAAhH,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA,GAN9BiH;AAM8B,CAEjC;AAEM,SAAS0mC,gBACd7kC,QACyD;AAClDA,SAAAA,OAAOA,WAAWwhC,qBAAqBxhC;AAChD;AAvJ2C,SAAAoC,QAAAo9B,GAAA;AAsBjBA,SAAAA,EAAChjC,UAAW,EAACijC,YAAa,IAAID,EAAChjC,MAAA,CAAQ,EAACuoC,YAAa;AAAC;AAuCnC,SAAA19B,SAAArH,QAAA;AAUI6kC,SAAAA,CAAAA,gBAAgB7kC,MAAM;AAAC;AAuC5B,SAAAsH,SAAA5K,QAAA;AAAA,SAIoBA,OAAKsoC;AAAA;ACnI9D,SAAAC,qBAAA;AAAA/tC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAsjC;AAAAA,IAAAvY;AAAAA,IAAAwY,OAAAA;AAAAA,EAAuC/W,IAAAA,gBAAAA,GACvCuhB,aAAmB,GAAGhjB,OAAO;AAAU1qB,MAAAA;AAAA,MAAAN,EAAA,CAAA,MAAAujC,gBAAAvjC,EAAAgrB,CAAAA,MAAAA,WAAAhrB,EAAAguC,CAAAA,MAAAA,cAAAhuC,SAAAwjC,QAAA;AAAA5iC,QAAAA;AAAAZ,MAAAujC,CAAAA,MAAAA,gBAAAvjC,SAAAgrB,WAAAhrB,EAAA,CAAA,MAAAguC,cAIxBptC,MAAAA,CAAA0jC,MAAAl5B,UACR/J,2BAAAA,IAAA,mBAAA,EACO,MAAAijC,KAAI/gC,MACN,IAAA,GAAGynB,OAAO,OAAOsZ,KAAIn+B,EAAA,IACf,UAAAo9B,iBAAiBe,KAAIn+B,IAExB,OAAAm+B,KAAIljC,OACC4sC,YACJ,QAAA5iC,UAAK,WAAiBk5B,KAAIn+B,MAAA,KAH7Bm+B,GAAAA,KAAIn+B,EAIT,GACHnG,OAAAujC,cAAAvjC,OAAAgrB,SAAAhrB,OAAAguC,YAAAhuC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAVAM,KAAAkjC,OAAK/4B,IAAK7J,GAUV,GAACZ,OAAAujC,cAAAvjC,OAAAgrB,SAAAhrB,OAAAguC,YAAAhuC,OAAAwjC,QAAAxjC,OAAAM;AAAAA,EAAA;AAAAA,SAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,SAAAA,SAAAM,MAXJM,KAACS,+BAAA01B,GAAAA,SAAA,EAAe,OAAA,GACbz2B,UAWH,GAAA,CAAA,GAAUN,OAAAM,IAAAN,QAAAY,MAAAA,KAAAZ,EAAA,EAAA,GAZVY;AAYU;AAId,SAAAqtC,kBAAAluC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAA,MAAAsD,MAAA4C,IAAA+nC,UAAA/F,OAAAjiC,MAAA8nC,YAAAG;AAAAnuC,WAAAD,SAQE;AAAA,IAAAwD;AAAAA,IAAA4C;AAAAA,IAAA+nC;AAAAA,IAAA/F;AAAAA,IAAA6F;AAAAA,IAAAG;AAAAA,IAAA,GAAAjoC;AAAAA,EAAiEnG,IAAAA,OAAKC,OAAAD,OAAAC,OAAAuD,MAAAvD,OAAAmG,IAAAnG,OAAAkuC,UAAAluC,OAAAmoC,OAAAnoC,OAAAkG,MAAAlG,OAAAguC,YAAAhuC,OAAAmuC,WAAA5qC,OAAAvD,EAAA,CAAA,GAAAmG,KAAAnG,EAAA,CAAA,GAAAkuC,WAAAluC,EAAA,CAAA,GAAAmoC,QAAAnoC,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA,GAAAguC,aAAAhuC,EAAA,CAAA,GAAAmuC,SAAAnuC,EAAA,CAAA;AACtE,QAAA;AAAA,IAAAkS;AAAAA,IAAA6d;AAAAA,EAAA,IAA2BtD,mBAC3B;AAAA,IAAA2hB;AAAAA,MAAkBrmC,cAAc;AAACzH,MAAAA;AAAAN,IAAAouC,CAAAA,MAAAA,WAAApuC,SAAAmuC,UACD7tC,KAAAA,MAAM8tC,QAAQD,MAAM,GAACnuC,OAAAouC,SAAApuC,OAAAmuC,QAAAnuC,QAAAM,MAAAA,KAAAN,EAAA,EAAA;AAArDma,QAAAA,cAAoB7Z,IAMNM,KAACsR,CAAAA,SAAU6d,CAAAA,WAAS7rB,SAAO,CAAK6rB,WAAS3rB;AAAWpD,MAAAA;AAAA,SAAAhB,EAAA,EAAA,MAAAma,eAAAna,EAAA,EAAA,MAAAuD,QAAAvD,EAAA,EAAA,MAAAmG,MAAAnG,EAAAkuC,EAAAA,MAAAA,YAAAluC,EAAAmoC,EAAAA,MAAAA,SAAAnoC,EAAAkG,EAAAA,MAAAA,QAAAlG,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAguC,cAHhEhtC,KAACK,2BAAA,IAAAy1B,+BAAA,EAAG,GACE5wB,MACW8nC,iBAAS,YACd,UAAAptC,IACJ2C,MACF4C,IACGgiC,OACEhuB,sBACC+zB,UAAAA,SACV,CAAA,GAAAluC,QAAAma,aAAAna,QAAAuD,MAAAvD,QAAAmG,IAAAnG,QAAAkuC,UAAAluC,QAAAmoC,OAAAnoC,QAAAkG,MAAAlG,QAAAY,IAAAZ,QAAAguC,YAAAhuC,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GATFgB;AASE;AC9CC,SAAAqtC,sBAAA;AAAAruC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAA+sB;AAAAA,IAAAvsB;AAAAA,IAAAW;AAAAA,IAAA2uB;AAAAA,EAAAA,IAAwDtD,mBACxDtsB,gBAAsB4vB,WAAS7rB,SAAW6rB,WAAS3rB,WACnD4rB,aAAmBhgB,CAAQ7P,CAAAA;AAAcG,MAAAA;AAAAN,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAAAT,EAAA,CAAA,MAAAgwB,cAEF1vB,KAAA;AAAA,IAAAmb,SAC5BuU;AAAAA,IAAUvvB;AAAAA,IAAAI,OAEZV;AAAAA,EAAAA,GACRH,OAAAG,eAAAH,OAAAS,YAAAT,OAAAgwB,YAAAhwB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,OAAAA,yBAAgBT,EAItC,GACD;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAE/CwtB,MAAAA,oBAAoB,gBAAY,CAAKgD,YAAU;AAAApvB,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAC1CnC,MAAAS,+BAAAE,WAAAA,UAAA,CAAA,CAAA,GAAKvB,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAALY;AAAAA,EAAAA;AAAK,MAGVQ,OAAK;AAAAR,QAAAA;AAAA,WAAAZ,SAAAoB,SACAR,MAAAS,2BAAA,IAAAE,qBAAA,mBAAQ,GAAIvB,OAAAoB,OAAApB,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAZY;AAAAA,EAAAA;AAAY,MAAA,CAGhBT,eAAa;AAIES,UAAAA,MAAAH,YAAUW,SAAWX,YAAU8H;AAAMvH,QAAAA;AAAAhB,MAAAU,CAAAA,MAAAA,KAAAV,SAAAY,OADlDI,MAAAN,EAAE,wCAAsC;AAAA,MAAAD,YAC3BG;AAAAA,IAAAA,CACb,GAACZ,OAAAU,GAAAV,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,UAAAgB,OAHJC,KACGD,2BAAAA,IAAAA,qBAAAA,EAAAA,UAAAA,KAEC,GACDhB,QAAAgB,KAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAJHiB;AAAAA,EAAAA;AAIG,MAIHH,OAAK;AAAAF,QAAAA;AAAAZ,cAAAc,MAAAI,WAAAlB,UAAAU,KACGE,MAAAF,EAAE,0CAAwC;AAAA,MAAAI,OAAUA,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAAAgB,QAAAA;AAAAhB,WAAAA,UAAAY,OAAtEI,MAAGJ,2BAAAA,IAAAA,qBAAAA,EAAAA,UAAAA,KAAmE,GAAIZ,QAAAY,KAAAZ,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GAA1EgB;AAAAA,EAAAA;AAA0EJ,MAAAA;AAAAZ,YAAAU,KAAAV,EAAAa,EAAAA,MAAAA,OAAAO,SAK9ER,KAAAC,OAAKO,SACJC,2BAAA,IAEO,UAFM,OAAA;AAAA,IAAAC,OAAQ;AAAA,EAAA,GAClBZ,YAAE,2CAA2C,EAAA,CAChD,GACDV,QAAAU,GAAAV,EAAA,EAAA,IAAAa,OAAAO,OAAApB,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAA,SAAAhB,UAAAY,MALHI,KAAAK,2BAAA,IAAAE,qBAAA,EACGX,cAIA,GACAZ,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GANHgB;AAMG;ACRA,MAAMstC,sBAAsB5mB,MAAAA,KACjC1iB,MAAAA,WAAW,SACTupC,QACAtpC,KACA;AACM,QAAA;AAAA,IAACye;AAAAA,MAAa6qB,QACd;AAAA,IACJtyB,SAASuxB;AAAAA,IACTzd;AAAAA,IACAye;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACA/qB;AAAAA,IACAljB;AAAAA,IACAusB;AAAAA,IACAwW,OAAAA;AAAAA,IACAmL;AAAAA,EACF,IAAIliB,mBACE;AAAA,IAACkG;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAACljB;AAAAA,IAAOrG,UAAAA;AAAAA,IAAU6pC;AAAAA,EAAgB,IAAI7mC,iBACtC;AAAA,IAACkU,SAASwH;AAAAA,EAAgBorB,IAAAA,uBAC1B,GAAA,CAAC/I,kBAAkB6B,mBAAmB,IAAI/1B,MAAAA,SAA6B,IAAI,GAI3EqK,UAAUmM,cACd,OAAOolB,cAAc,CAAA,GAAIviC,OAAQnC,CAAW,WAAA,CAAC6kC,gBAAgB7kC,MAAM,CAAC,GACpE,CAAC0kC,UAAU,CACb,GAEMrlB,YAAYC,MAAAA,QAChB,MACE5E,iBAAiB;AAAA,IAACa,eAAemqB;AAAAA,IAAc/qB;AAAAA,IAAcC;AAAAA,IAAWC;AAAAA,EAAe,CAAA,GACzF,CAAC6qB,cAAc/qB,cAAcE,gBAAgBD,SAAS,CACxD,GAEMorB,kBAAkB1mB,MAAQ,QAAA,MAAMD,UAAUld,OAAOmY,gBAAgB,GAAG,CAAC+E,SAAS,CAAC,GAC/EG,mBAAmBF,MAAQ,QAAA,MAAMD,UAAUld,OAAOqY,mBAAmB,GAAG,CAAC6E,SAAS,CAAC,GACnF4mB,WAAWvL,OAAM7gC,SAAS,GAE1B;AAAA,IAACoS;AAAAA,IAAWU;AAAAA,EAAUiC,IAAAA,QAAAA,GAEtB8E,WAAW/G,UAAU,CAACV,YAAY,KAAK,GAUvCi6B,sBAAsBrc,SAASsc,cAAcP,eAAelL,OAAM7gC,SAAS,GAI3EusC,2BAA2BF,uBAAuBJ,kBAIlDO,iBAAiBxc,SAASzW,cAAc9Q,QAAQ,GAOhDgkC,2BAA2B,CAACF,4BAA4B,CAACC,kBAAkB,CAAC,CAACpqC,WAE7E;AAAA,IAACrE;AAAAA,MAAKC,OAAenB,eAAAA,wBAAwB,GAE7C6vC,oBAAoBrnB,kBAGxB,CAAC;AAAA,IAAC+kB;AAAAA,EAAAA,qCACC,yCACC,EAAA,kBACA,qBACA,kBACA,OAAA,CAAe,GAGnB,CAACzkB,kBAAkBwd,gBAAgB,CACrC,GAEM1kC,QAAQgnB,cAAQ,qCAAO,qBAAmB,CAAA,CAAA,GAAK,CAAE,CAAA,GACjD7L,OAAO6L,cAAQ,MAAM2mB,2CAAa,oBAAqB,CAAA,CAAA,GAAE,CAACA,QAAQ,CAAC,GACnE7yB,aAAakM,cACjB,MACE+mB,kBACG9tC,2BAAAA,IAAAkK,0BAAAA,QAAA,EACC,IAAIxG,WACJ,WAAQ,KACR,MAAMuqC,qBACN,MAAK,SACL,cAAc;AAAA,IAAC7jC,SAAS/K,EAAE,8BAA8B;AAAA,EAAA,EAE3D,CAAA,GACH,CAACqE,WAAUoqC,gBAAgBzuC,CAAC,CAC9B,GACM6uC,kBAAkBnnB,MAAAA,QACtB,MACGhlB,2BAAA,KAAAd,GAAA,MAAA,EAAK,OAAM,UAAS,KAAK,GACvBqsC,UAAAA;AAAAA,IAAAA,wBAAwBhsC,SAAS,KAChCtB,2BAAAA,IAAAE,WAAAA,UAAA,EACGotC,kCAAwBlkC,IAAI,CAAC+kC,yBAAyBzxB,QAEnD1c,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QAGC;AAAA,MAAA;AAAA,MADK,mBAAmB0c,GAAG;AAAA,IAIhC,CAAA,GACH;AAAA,IAGD+wB,gBAAgBrkC,IAAKrB,CACpB,SAAA/H,+BAAC,0BAAsC,MAAM+H,KAAAA,GAAhBA,KAAK4P,GAAgB,CACnD;AAAA,IACA+W,4CACE,6BACC,EAAA,SACA,aAAaA,WACb,OAAM,eAELsf,UACH,kBAAA,CAAA;AAAA,IAGDL,uBACC3tC,2BAAAA,IAACkK,0BAAAA,QACC,EAAA,cAAY7K,EAAE,sCAAsC,GACpD,MAAM+uC,MAAAA,mBAEN,MAAK,SACL,SAASf,aACT,cAAc;AAAA,MAACjjC,SAAS/K,EAAE,mCAAmC;AAAA,SAHzD,mBAKP;AAAA,IAEAwuC,2DACE3jC,kCACC,EAAA,MAAMomB,MAAAA,WAEN,MAAK,SACL,SAAS8c,aACT,cAAc;AAAA,MAAChjC,SAAS/K,EAAE,uCAAuC;AAAA,SAH7D,mBAKP;AAAA,IAEA0uC,4BACE/tC,2BAAAA,IAAAkK,0BAAAA,QAAA,EACC,MAAMomB,MAAAA,WAEN,MAAK,SACL,cAAc;AAAA,MAAClmB,SAAS/K,EAAE,6CAA6C;AAAA,IAAA,GACvE,IAAIqE,UAAAA,GAHA,mBAKP;AAAA,EAAA,EACH,CAAA,GAEF,CACEA,WACAkX,SACA8T,WACA+e,iBACAL,aACAC,aACAW,mBACA5uC,YACA2uC,0BACAJ,qBACAE,0BACAxuC,GACAiuC,uBAAuB,CAE3B;AAGE,SAAAttC,+BAACiD,0BAAAA,6BACC,UAACjD,2BAAAA,IAAA2a,cAAA,EACC,QAAM,IACN,KACA,SAASgR,oBAAoB,gBAAgB,CAAC+C,WAAW7rB,SAAS,CAAC6rB,WAAW3rB,WAC9E,OACA,MACA,UACA,YACA,SAASmrC,gBAAAA,CAAgB,EAE7B,CAAA;AAEJ,CAAC,CACH,GAEMG,0CAA0ChoB,MAAAA,KAC9C,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAME;AAAA,IAAA0nC;AAAAA,IAAA7B;AAAAA,IAAAxd;AAAAA,EAAkEvoB,IAAAA,OAKlEgtC,SAAe4C,uBAAiB5vC,MAAKgtC,MAAO;AAACzsC,MAAAA;AAAAN,SAAAA,EAAA,CAAA,MAAAsoB,oBAAAtoB,EAAA8lC,CAAAA,MAAAA,oBAAA9lC,EAAA2nC,CAAAA,MAAAA,uBAAA3nC,SAAA+sC,UAG3CzsC,KAACe,2BAAAA,IAAA,iCAAA,EACsBsmC,qBACH7B,kBACAxd,kBACVykB,OAAAA,CACR,GAAA/sC,OAAAsoB,kBAAAtoB,OAAA8lC,kBAAA9lC,OAAA2nC,qBAAA3nC,OAAA+sC,QAAA/sC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GALFM;AAKE,CAGR,GAEMsvC,kCAAkCloB,WAAK,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAM3C;AAAA,IAAA8sC;AAAAA,IAAApF;AAAAA,IAAArf;AAAAA,IAAAwd;AAAAA,EAAAA,IAA0E/lC;AAAKO,MAAAA;AAAAN,IAAAsoB,CAAAA,MAAAA,oBAAAtoB,SAAA2nC,uBAAA3nC,EAAA,CAAA,MAAA+sC,UAK7EzsC,KAAAM,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAAmnB;AAAAA,IAAAA,IAAAnnB;AAAc,mDACH+mC,KAAAA,qBACR,yCAAC,uBACQrf,EAAAA,OAAAA,kBAGL,cAAAykB,OAAMpqC,aACFoqC,OAAMtiC,KAAAq9B,aAAAR,gBACHjmC,2BAAAA,IAAA,oBAAA,EAEcymC,aACH,UAAA93B,CAAQ83B,CAAAA,YAAWh1B,UACtBw0B,OAAU,aACPvf,UAAW,aAAA,GAJhB+f,YAAWK,MAMnB,IAACv9B,OAAAA,GAXJ,cAYW,GAGnB;AAAA,EAAA,GACD5K,OAAAsoB,kBAAAtoB,OAAA2nC,qBAAA3nC,OAAA+sC,QAAA/sC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAvBH,QAAA+nC,qBAA2BznC;AAyB1BM,MAAAA;AAAA,SAAAZ,EAAA8lC,CAAAA,MAAAA,oBAAA9lC,SAAA+nC,sBAAA/nC,EAAA,CAAA,MAAA+sC,UAGCnsC,oCAAC,qBAAkCmsC,EAAAA,sBAA0BjH,+CAE7D,CAAA,GAAsB9lC,OAAA8lC,kBAAA9lC,OAAA+nC,oBAAA/nC,OAAA+sC,QAAA/sC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAFtBY;AAEsB,CAEzB;AC1RM,SAAAivC,aAAAvvC,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAsB;AAAA,IAAA6vC;AAAAA,EAAAA,IAAAxvC;AAAyBM,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAMzCnC,KAAA;AAAA,IAAAmvC,eACU;AAAA,IAAMC,YACT;AAAA,IAAQlzB,OAAA;AAAA,EAAA,GAErB9c,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,SAAA8vC,QARH9uC,KAAAK,2BAAAA,IAACkK,0BAAAA,QACC,EAAA,eAAU,IACV,UAAA,IACMukC,MACC,OAAAlvC,IAKF,MAAA,IAAA,CACL,GAAAZ,OAAA8vC,MAAA9vC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAVFgB;AAUE;ACjBN,MAAMivC,cAAqD;AAAA,EACzDC,SAAS;AAAA,EACTC,SAAS;AAAA,EACTC,SAAS;AAAA,EACTC,QAAQ;AACV,GAEMC,sBAAsB5oB,WAAK,SAAApnB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAA6B;AAAA,IAAA8sC;AAAAA,EAAAA,IAAAzsC;AAAkC,MAC1FysC,OAAMpqC,WAAa;AAAA,WAAA;AAAA/B,MAAAA;AAAAZ,WAAA+sC,UAKlBnsC,KAAAmsC,OAAMtiC,IAAAS,OAoBN,GAAClL,OAAA+sC,QAAA/sC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,SAAAA,SAAAY,MArBJI,KAACK,+BAAAgC,GAAAA,QAAA,EAAc,OAAA,GACZzC,UAqBH,GAAA,CAAA,GAASZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAtBTgB;AAsBS,CAEZ,GAEKuvC,yBAAyB7oB,WAAK,SAAA3nB,OAAA;AAAA,QAAAC,IAAAC,qBAAAA,EAAA,CAAA,GAOlC8sC,SAAe4C,MAAAA,iBAAiB5vC,MAAKgtC,MAAO;AAACzsC,MAAAA;AAAAN,SAAAA,SAAA+sC,UACtCzsC,KAACe,2BAAAA,IAAA,qBAAA,EAA4B0rC,QAAU,GAAA/sC,OAAA+sC,QAAA/sC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAvCM;AAAuC,CAC/C;AAEM,SAAAkwC,iBAAA;AAAAxwC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAA4qB;AAAAA,IAAAkF;AAAAA,EAAAA,IAA4BtD,gBAAgB,GAE5CgkB,uBAAAtgC;AAII,MAAA,CAAC4f,aAAS,CAAKlF;AAAM,WAAA;AAAAvqB,MAAAA;AAAA,SAAAN,EAAA6qB,CAAAA,MAAAA,UAAA7qB,SAAA+vB,aAGvBzvB,oCAAC,4BAAmCuqB,EAAAA,QAAoBkF,sDAExD,CAAA,GAA6B/vB,OAAA6qB,QAAA7qB,OAAA+vB,WAAA/vB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAF7BM;AAE6B;AAZ1B,SAAA6P,SAAA7P,IAAA;AAKF,QAAA;AAAA,IAAAysC;AAAAA,EAAAA,IAAAzsC;AAAa,SAAAe,+BAAC,0BAA+B0rC,QAAU;AAAA;AA/C3B,SAAA7hC,QAAAwlC,OAAAtlC,OAAA;AAAA,SAOxB/J,2BAAAA,IAAA6B,0BAAAA,SAAA,EACU,SAAAwtC,MAAKtvC,OACJ,UAACsvC,CAAAA,MAAKtvC,OAEN,WAAA,OACV,YAEA,yCAACuvC,GAAAA,OACW,EAAA,UAAC,GACN,MAAA,WACK,UAAC,GACD,UAAA,GACF,QAAC,GACH,MAAAD,MAAKpvC,QAAA2uC,YAAqBS,MAAKpvC,KAAA,IAAAsJ,QAC9B,OAAA;AAAA,IAAAgmC,YAAa;AAAA,EAAQ,GAE3BF,gBAAKvI,MACR,CAAA,EAAA,GAdQuI,GAAAA,MAAKvI,KAAA,IAAU/8B,KAAK,EAe9B;AAAU;ACxClB,MAAMylC,mBAAmBpvC,iBAAAA,OAAOqvC,aAAAA,OAAOvxB,IAAI;AAAA;AAAA,GAOrCwxB,SAAUhxC,CACd,UAAAsB,+BAACyvC,aAAAA,OAAO,QAAP,EAAc,MAAK,QAAO,GAAE,KAAI,IAAG,QAAO,IAAG,QAAO,aAAY,OAAU/wC,GAAAA,OAC5E,GACKixC,SAAUjxC,CACd,UAAAsB,2BAAAA,IAAC,oBACC,MAAK,QACL,GAAE,2EACEtB,GAAAA,OAEP,GACKkxC,YAAalxC,WAChBsB,+BAAAyvC,aAAAA,OAAO,MAAP,EAAY,GAAE,mCAAsC/wC,GAAAA,MAAAA,CACtD,GAEKmxC,kBAAkBC,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAQlBC,cAAc3vC,iBAAAA,OAAOuiB;AAAAA;AAAAA;AAAAA;AAAAA,iBAIVktB,eAAe;AAAA;AAAA,GAI1BG,OAAO;AAAA,EACXC,SAAS;AAAA,IACPC,OAAO;AAAA,IACPC,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA0gB,OAAO;AAAA,IACLF,OAAO,CAAC,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,CAAC;AAAA,IAClDC,YAAY;AAAA,MACVzgB,UAAU;AAAA,MACVtF,OAAO;AAAA,IAAA;AAAA,EAEX;AAAA,EACAimB,SAAS;AAAA,IAACF,YAAY;AAAA,MAACzgB,UAAU;AAAA,IAAA;AAAA,EAAC;AACpC,GAEM4gB,SAAS;AAAA,EACbL,SAAS;AAAA,IACPM,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjoB,SAAS;AAAA,IACT4nB,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA0gB,OAAO;AAAA,IACLG,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjoB,SAAS;AAAA,IACT4nB,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA2gB,SAAS;AAAA,IACPE,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjoB,SAAS;AAAA,IACT4nB,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EACZ;AAEJ,GAEM+gB,SAAS;AAAA,EACbR,SAAS;AAAA,IACP1nB,SAAS;AAAA,IACT4nB,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA0gB,OAAO;AAAA,IACL7nB,SAAS;AAAA,IACT4nB,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA2gB,SAAS;AAAA,IACP9nB,SAAS;AAAA,EAAA;AAEb,GAEMmoB,YAAY;AAAA,EAChBT,SAAS;AAAA,IACPU,YAAY;AAAA,IACZR,YAAY;AAAA,MAACzgB,UAAU;AAAA,IAAA;AAAA,EACzB;AAAA,EACA0gB,OAAO;AAAA,IACLO,YAAY;AAAA,IACZR,YAAY;AAAA,MACV/lB,OAAO;AAAA,MACPsF,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA2gB,SAAS;AAAA,IACPM,YAAY;AAAA,IACZR,YAAY;AAAA,MACVzgB,UAAU;AAAA,IAAA;AAAA,EACZ;AAEJ;AAMO,SAAAkhB,mBAAAlyC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAwE;AAAAA,EAAAA,IAAiB1E;AAAK,MAAA,CAEjB0E;AAAM,WAAA;AAeqBnE,QAAAA,KAAAmE,WAAW,YAASmG,SAAe;AAAE,MAAAhK,IAAAI;AAAAhB,WAAAyE,UAC7D7D,oCAAC,UAAiBkxC,kBAAiBrtC,iBAAiBA,SAAAA,OAAU,CAAA,GAC9DzD,oCAAC,QAAiB2wC,EAAAA,kBAAiBltC,iBAAiBA,SAAAA,QAAU,GAAAzE,OAAAyE,QAAAzE,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAAM,CAAAA,MAAAA,MAAAN,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MAFhEC,KAACmC,2BAAA,KAAA,aAAA,EAAyB,eAAA9C,IACxBM,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,EAAAA,GACF,GAAchB,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAyE,UACdxB,oCAAC,WAAoB8uC,EAAAA,qBAAoBttC,iBAAiBA,SAAAA,QAAU,GAAAzE,OAAAyE,QAAAzE,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAyE,CAAAA,MAAAA,UAAAzE,UAAAiB,MAAAjB,EAAA,EAAA,MAAAiD,MAdxEE,oCAAA,OACQ,EAAA,OAAA,OACC,QAAA,OACC,SAAA,aACH,MAAA,QACE,QAAA,gBACK,aAAA,OACK,oBAAA,wBAEjB,UAAoBkuC,2BAAAA,KAAAA,aAAAA,OAAAA,GAAAA,EAAAA,UAAAA,MAAe5sC,SAAAA,QAAiBA,SAAAA,QAClDxD,UAAAA;AAAAA,IAAAA;AAAAA,IAIAgC;AAAAA,EAAAA,GACF,EAAA,CACF,GAAMjD,OAAAyE,QAAAzE,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAhBNmD;AAgBM;AC5IV,MAAM+uC,oBAA6E;AAAA,EACjFT,OAAO;AAAA,IACLU,SAAS;AAAA,IACTrgC,MAAM;AAAA,EACR;AAAA,EACAw/B,SAAS;AAAA,IACPa,SAAS;AAAA,IACTrgC,MAAM;AAAA,EAAA;AAEV,GAEasgC,sBAAsBryC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACjC;AAAA,IAAAwE;AAAAA,MAAiB1E,OACjB;AAAA,IAAAW;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAE/CiF,MAAAA,WAAW,WAAWA,WAAW;AAAS,WAAA;AAI9C4tC,QAAAA,gBAAAH,kBAAwCztC,MAAM;AAACnE,MAAAA;AAAAN,WAAAyE,UAKzCnE,oCAAC,sBAA2BmE,QAAU,GAAAzE,OAAAyE,QAAAzE,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAqyC,cAAAvgC,QAAA9R,SAAAM,MADxCM,KAACS,2BAAAA,IAAAixC,OAAAA,cAAA,EAAmB,MAAC,GAAQ,MAAAD,cAAavgC,MACxCxR,UACF,GAAA,CAAA,GAAeN,EAAA,CAAA,IAAAqyC,cAAAvgC,MAAA9R,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAqyC,cAAAF,WAAAnyC,SAAAU,KAGZM,KAAAN,EAAE2xC,cAAaF,OAAQ,GAACnyC,EAAA,CAAA,IAAAqyC,cAAAF,SAAAnyC,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAgB,MAD3BC,KAACI,2BAAAA,IAAAwB,GAAA,MAAA,EAAK,WAAY,SACf7B,cACH,GAAOhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAA,SAAAjD,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAiB,MAPTgC,KAAAG,2BAAA,KAACd,WAAW,OAAA,UAAc,KAAC,GAAc,eAAA,qCACvC1B,UAAAA;AAAAA,IAAAA;AAAAA,IAIAK;AAAAA,EAAAA,EAGF,CAAA,GAAOjB,QAAAY,IAAAZ,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GARPiD;AAQO,GCjCLsvC,kBAAkB,KAClBC,gBAAgB;AAMf,SAAAC,mBAAAnyC,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA4B;AAAA,IAAAyyC;AAAAA,MAAApyC,IACjC;AAAA,IAAAmH;AAAAA,IAAAC;AAAAA,IAAAqoB;AAAAA,IAAAlvB;AAAAA,EAAAA,IAAqD4rB,gBAAgB,GAErE,CAAAhoB,QAAAkuC,SAAA,IAA4B/gC,MAAAA,aAAyC,GAErE45B,YAAkBC,OAAAA,aAAahkC,YAAYC,YAAY,GAEvDkrC,cAAoB/xC,OAAKqrC;AAAYtrC,MAAAA;AAAAZ,WAAAyE,UAAAzE,EAAAwrC,CAAAA,MAAAA,UAAAQ,aAG3BprC,KAAAA,MAAA;AAAA,QAGJ6D,WAAW,aAAc+mC,CAAAA,UAASQ,WAAU;AAC9C,YAAA6G,UAAgBxgC,WAAiBsgC,MAAAA,UAAU,OAAO,GAACJ,eAAiB;AACvDjgC,aAAAA,MAAAA,aAAaugC,OAAO;AAAA,IAAA;AAAC,QAGhCpuC,WAAW,SAAO;AACpB,YAAAquC,YAAgBzgC,WAAA,MAAiBsgC,UAAc,IAAA,GAACH,aAAe;AAClDlgC,aAAAA,MAAAA,aAAaugC,SAAO;AAAA,IAAA;AAAA,EAAC,GAErC7yC,OAAAyE,QAAAzE,EAAA,CAAA,IAAAwrC,UAAAQ,WAAAhsC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAA,CAAA,MAAA4yC,eAAA5yC,EAAA,CAAA,MAAAyE,UAAAzE,EAAA,CAAA,MAAAwrC,UAAAQ,aAAEhrC,MAACyD,QAAQmuC,aAAapH,UAASQ,SAAA,GAAWhsC,OAAA4yC,aAAA5yC,OAAAyE,QAAAzE,EAAA,CAAA,IAAAwrC,UAAAQ,WAAAhsC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAZ7CuS,MAAAA,UAAU3R,IAYPI,EAA0C;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAG9B9B,KAAAA,MAAA;AACd0xC,kBAAc;AAAA,EAAA,GACf3yC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAyH,cAAExE,MAACwE,UAAU,GAACzH,OAAAyH,YAAAzH,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAFfiW,MAAAA,gBAAgBhV,IAEbgC,EAAY;AAACE,MAAAA;AAAAnD,IAAA,EAAA,MAAAwrC,UAAAQ,aAGA7oC,KAAAA,MAAA;AACVqoC,cAASQ,aACX2G,UAAU,SAAS;AAAA,EAEtB3yC,GAAAA,EAAA,EAAA,IAAAwrC,UAAAQ,WAAAhsC,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAqC,MAArC7E,UAAA4yC,eAAA5yC,EAAAwrC,EAAAA,MAAAA,UAAAQ,aAAEnnC,KAAC2mC,CAAAA,UAASQ,WAAY4G,WAAW,GAAC5yC,QAAA4yC,aAAA5yC,EAAA,EAAA,IAAAwrC,UAAAQ,WAAAhsC,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GAJrCiW,MAAAA,gBAAgB9S,IAIb0B,EAAkC,GAEjCJ,QAAM;AAC4B,UAAAuC,MAAAvC,UAAMmG;AAAa3D,QAAAA;AAAAjH,WAAAA,UAAAgH,OAAhDC,MAAC5F,2BAAA,IAAA,qBAAA,EAA4B,QAAA2F,KAAuB,GAAAhH,QAAAgH,KAAAhH,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA,GAApDiH;AAAAA,EAAAA;AAMiC,QAAAD,KAAA+oB,WAAS7rB,OAAoB+C,KAAA8oB,WAAS3rB;AAAW8C,MAAAA;AAAAlH,IAAAgH,EAAAA,MAAAA,MAAAhH,UAAAiH,MAArFC,KAAC7F,2BAAA,IAAAqD,OAAA,gBAAA,EAAe,cAAA,IAAoB,OAAAsC,IAA6B,WAAAC,GAAwB,CAAA,GAAAjH,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAKzD,QAAAoH,MAAA2oB,WAAS7rB,OAAoBoD,MAAAyoB,WAAS3rB;AAAWwF,MAAAA;AAAA5J,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAsH,OAAjFsC,MAACvI,2BAAA,IAAAmD,OAA+B,yBAAA,EAAA,OAAA4C,KAA6B,WAAAE,KAAwB,GAAAtH,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAE5E,QAAAkK,MAAA6lB,WAAS7rB,OACLkG,MAAA2lB,WAAS3rB;AAAWiG,MAAAA;AAAArK,IAAA0yC,EAAAA,MAAAA,cAAA1yC,UAAAkK,OAAAlK,EAAA,EAAA,MAAAoK,OAFjCC,qCAAC3F,OAAAA,gBACQ,EAAA,OAAAwF,KACI,WAAAE,KACCsoC,WACZ,CAAA,GAAA1yC,QAAA0yC,YAAA1yC,QAAAkK,KAAAlK,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAA4J,EAAAA,MAAAA,OAAA5J,UAAAqK,OANJE,MAACnH,2BAAAA,KAAAd,GAAAA,MAAA,EAAW,OAAA,UAAc,QACxBsH,UAAAA;AAAAA,IAAAA;AAAAA,IACAS;AAAAA,EAAAA,EAKF,CAAA,GAAOrK,QAAA4J,KAAA5J,QAAAqK,KAAArK,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAAAmL,MAAAA;AAAA,SAAAnL,EAAAuK,EAAAA,MAAAA,OAAAvK,UAAAkH,MAbTiE,MAAC9J,2BAAA,IAAA6B,0BAAA,SAAA,EAEG,SAAAgE,IAEQ,WAAA,OAEVqD,UAAAA,IAAAA,CAQF,GAAUvK,QAAAuK,KAAAvK,QAAAkH,IAAAlH,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA,GAdVmL;AAcU;AC9DD4nC,MAAAA,aAAatxC,wBAAOoB,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU9B,SAAAmwC,qBAAA;AAAAhzC,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAy+B;AAAAA,EAAA,IAAoBjS,mBACpB;AAAA,IAAA/rB;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,GAC3BsyC,OAAavU,WAASwN,cAAgBxN,WAAS2F;AAAY/jC,MAAAA;AAAAN,IAAAizC,CAAAA,MAAAA,QAAAjzC,SAAAU,KAInDJ,KAAA2yC,OACH5xC,2BAAAA,IAAAmI,OAAAA,WAAA,EACI9I,GACK,SAAA,iCACA,QAAA;AAAA,IAAAuyC,MACAC,QAAAA,OAAA,IAAAxX,KAAgBuX,IAAI,GAAG,oBAAoB;AAAA,EAAA,OAG/C,MAAAjzC,OAAAizC,MAAAjzC,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAM,MAVMM,KAAA;AAAA,IAAA2H,MACR;AAAA,IAAU8I,MACV/Q;AAAAA,IAQEwR,MACF;AAAA,EAAS,GAChB9R,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAZD,QAAAkB,UAAgBN;AAYfI,MAAAA;AAAAhB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAKK/B,KAAAK,2BAAAA,IAACK,GAAAA,KAAS,EAAA,MAAA,QACR,UAAAL,2BAAA,IAACwB,GAAW,MAAA,EAAA,MAAC,GACX,UAAAxB,2BAAAA,IAAC8xC,MAAAA,aAAW,CAAA,CAAA,EAAA,CACd,EACF,CAAA,GAAMnzC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAA,CAAA,MAAAkB,QAAAmQ,QANVpQ,KAAAI,2BAAAA,IAAAE,WAAAA,UAAA,EACE,UAAC6B,2BAAAA,KAAAd,GAAA,MAAA,EAAW,MAAA,GAAQ,KAAA,GAAY,SAAC,GAC/BtB,UAAAA;AAAAA,IAAAA;AAAAA,IAKCK,2BAAA,IAAAK,GAAA,KAAA,EAAU,MAAA,GACT,UAACL,2BAAAA,IAAA,YAAA,EAAiB,SAAgB,cAAA,YAC/BH,UAAOmQ,QAAAA,KAAAA,CACV,EACF,CAAA;AAAA,EAAA,EACF,CAAA,EAAO,CAAA,GACNrR,EAAA,CAAA,IAAAkB,QAAAmQ,MAAArR,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAbHiB;AAaG;AChDA,SAAAmyC,kBAAA9yC,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAA2B;AAAA,IAAA8S;AAAAA,IAAA+e;AAAAA,EAAAA,IAAAxxB;AAMjC,MAAAM,IAAAI;AAAAhB,IAAA+S,CAAAA,MAAAA,WAAA/S,SAAA8xB,YACiBlxB,KAAAA,OACVmS,WACFsgC,OAAAA,eAAAC,QAAuBvgC,SAAS+e,QAAQ,GAAC,MAAA;AAIrC/e,eACFsgC,OAAAA,eAAAE,UAAyBxgC,OAAO;AAAA,EAGnC/R,IAAAA,KAAA,CAAC+R,SAAS+e,QAAQ,GAAC9xB,OAAA+S,SAAA/S,OAAA8xB,UAAA9xB,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA,IAVtBiW,MAAAA,gBAAgBrV,IAUbI,EAAmB;AAAC;ACIzB,MAAMwyC,uBAAuB;AAEtB,SAAAC,kBAAA1zC,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAyzC;AAAAA,IAAAC;AAAAA,MAA4C5zC,OAC5C;AAAA,IAAAgwB;AAAAA,IAAA8T;AAAAA,IAAA9N,UAAA6d;AAAAA,EAAA,IAA+DnnB,mBAC/D;AAAA,IAAArrB;AAAAA,EAAAA,IAAgB0uB,iBAAiB,GAEjC+jB,sBAA4BC,+BAAuBC,YAAAC,uBAGnDC,kBAAwBlP,2BAAoBlB,eAAa34B,OAAkC,GAE3F,CAAA6J,WAAAm/B,YAAA,IAAkCtiC,MAAAA,aAA6B,GAC/D,CAAAgD,aAAAC,cAAA,IAAsCjD,MAAAA,aAAoC;AAACtR,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAE1CzC,KAAA6S,CAAA,UAAA;AAClBA,iBAAAA,MAAKghC,YAAAr3B,QAAA02B,oBAAyC;AAAA,EAAA,GAC5DxzC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAwyB,eAAqBlyB;AAEfM,MAAAA;AAAAZ,WAAA4U,eAEYhU,KAAA;AAAA,IAAAmS,SAAU6B;AAAAA,IAAWkd,UAAYU;AAAAA,EAAaxyB,GAAAA,OAAA4U,aAAA5U,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAhEozC,kBAAkBxyC,EAA8C;AAEhE,QAAAwzC,eAAqBrkB,WAAS7d,SAAW,OAAO6C,aAAc;AAE9DkH,MAAAA;AAA4C,MACxC03B,sBAAsBU,OAAAA,qBAAqBV,kBAAkB,KAAKE,qBAAmB;AAAA7yC,QAAAA;AAAAhB,MAAA,CAAA,MAAA6zC,uBAAA7zC,EAAA2zC,CAAAA,MAAAA,sBAAA3zC,EAAA4zC,CAAAA,MAAAA,oBAAA5zC,SAAAoB,SAErFJ,MAAAK,2BAAAA,IAAC,uBACWsyC,UAAiB,oBACLtlB,sBAAAA,+BACJulB,kBACHxyC,eAAI,MACnB,CAAA,GAAApB,OAAA6zC,qBAAA7zC,OAAA2zC,oBAAA3zC,OAAA4zC,kBAAA5zC,OAAAoB,OAAApB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GANJic,UACEA;AAAAA,aAOOg4B,iBAAe;AAAAjzC,QAAAA;AAAAhB,MAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACd/B,MAAAK,2BAAAA,IAAC,0BAA0B,CAAA,GAAArB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAArCic,UAAUA;AAAAA,EAAAA,OAAH;AAAAjb,QAAAA;AAAAhB,MAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEG/B,MAAAK,2BAAAA,IAAC,2BAA2B,CAAA,GAAArB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAtCic,UAAUA;AAAAA,EAAAA;AAIEjb,QAAAA,KAAAizC,kBAAkB,YAASrpC;AAAY3J,MAAAA;AAAAjB,IAAAic,EAAAA,MAAAA,WAAAjc,EAAA,EAAA,MAAA0zC,iBAAA1zC,EAAA+U,EAAAA,MAAAA,aAAA/U,EAAA,EAAA,MAAAo0C,gBAAAp0C,UAAAi0C,mBAE9ChzC,KAAAmzC,gBACEhxC,2BAAAA,KAAAd,GAAA,MAAA,EACO,OAAA,WACD,KAAA,GACG,SAAA,iBACE,UAAC,GACE,aAAA2xC,kBAAsB,IAAA,GACrB,cAAAA,kBAAsB,IAAA,GAEpC,UAAA;AAAA,IAAA7wC,2BAAA,KAACd,GAAW,MAAA,EAAA,OAAA,UAAe,MAAC,GAAO,KAAAyS,YAAgB,IAAA,GAAQ,MAAA,QAAqB,cAAC,GAC/E,UAAA;AAAA,MAAC3R,2BAAAA,KAAAd,GAAAA,MAAA,EAAW,OAAA,UACT2xC,UAAAA;AAAAA,QAAAA,iDACE,oBAAqB,EAAA,mCAErB,oBAA+B,EAAA,YAAA,CAACl/B,WACnC;AAAA,QACA1T,2BAAAA,IAAC,cAAkB,EAAA,MAAA,QAAO,CAAA;AAAA,MAAA,GAC5B;AAAA,qCACC,gBAAc,CAAA,CAAA;AAAA,IAAA,GACjB;AAAA,IAEA+B,gCAACd,GAAAA,QACO,OAAA,cACE,SAAA,YACHoxC,KAAY,eACV,OAAA;AAAA,MAAAY,YAAA;AAAA,MAAAC,YAA4B;AAAA,IAEnC,GAAA,UAAA;AAAA,MAAClzC,2BAAAA,IAAA,cAAA,EAAkB,MAAA,QAClB4a,CAAAA;AAAAA,MAAAA;AAAAA,IAAAA,EACH,CAAA;AAAA,EACF,EAAA,CAAA,GACDjc,QAAAic,SAAAjc,QAAA0zC,eAAA1zC,QAAA+U,WAAA/U,QAAAo0C,cAAAp0C,QAAAi0C,iBAAAj0C,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAAiB,MAhCHgC,oCAACX,SAAe,EAAA,WAAA,UAAcuS,KAAAA,gBAAuB,QAAA,UAClD5T,UAgCH,GAAA,CAAA,GAAOjB,QAAAiB,IAAAjB,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiD,MAlCTE,KAAC9B,2BAAAA,IAAAiJ,GAAAA,MAAW,EAAA,MAAAtJ,IACViC,UAkCF,GAAA,CAAA,GAAOjD,QAAAgB,IAAAhB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAnCPmD;AAmCO;AAzEJ,SAAA+H,QAAA1F,QAAA;AAAA,SAQiEA,OAAKgvC;AAAA;ACL7E,MAAMC,4BAA4B/sB,MAAAA,KAAK,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAAy0C,MAAAA,mBAAAC,aAAAntC,UAAArB,IAAAyuC,eAAAC,WAAA3uC,MAAA4uC,SAAA/H,QAAAzsC;AAAAN,WAAAD,SAGrC;AAAA,IAAA20C;AAAAA,IAAAC;AAAAA,IAAA98B,IAAAvX;AAAAA,IAAAkH;AAAAA,IAAArB;AAAAA,IAAAyuC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA/H;AAAAA,IAAA,GAAA7mC;AAAAA,EAAAA,IAWInG,OAAKC,OAAAD,OAAAC,OAAA00C,mBAAA10C,OAAA20C,aAAA30C,OAAAwH,UAAAxH,OAAAmG,IAAAnG,OAAA40C,eAAA50C,OAAA60C,WAAA70C,OAAAkG,MAAAlG,OAAA80C,SAAA90C,OAAA+sC,QAAA/sC,QAAAM,OAAAo0C,oBAAA10C,EAAA,CAAA,GAAA20C,cAAA30C,EAAA,CAAA,GAAAwH,WAAAxH,EAAA,CAAA,GAAAmG,KAAAnG,EAAA,CAAA,GAAA40C,gBAAA50C,EAAA,CAAA,GAAA60C,YAAA70C,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA,GAAA80C,UAAA90C,EAAA,CAAA,GAAA+sC,SAAA/sC,EAAA,CAAA,GAAAM,KAAAN,EAAA,EAAA;AARH,QAAA+0C,KAAAz0C,OAAUsK,SAAL,QAALtK,IAUN00C,eAAqBjI,OAAO4H,WAAW;AAAC/zC,MAAAA;AAAAZ,IAAA40C,EAAAA,MAAAA,iBAAA50C,UAAA60C,aAAA70C,EAAA,EAAA,MAAA+sC,UAGtCnsC,KAAAuS,CAAA,UAAA;AACE,UAAA8hC,iBAAuBlI,OAAM9hC,OAAAzF,CAAAA,WAChBA,OAAK4e,YAAa8wB,YAAAA,SAAS1vC,OAAK4e,UAAWjR,KAAK,CAC7D,GAEAgiC,gBAAsBF,eAAc,CAAA;AAMjC,QAJCA,eAActyC,SAAW,KAE3BslB,QAAAxK,KACE,mFAAmF03B,cAAa/wB,QAAA,GAClG,GAGE+wB,kBAAkBA,cAAariC,YAAaqiC,cAAalN,UAAS;AAC/D70B,YAAAA,kBACL+hC,cAAalN,SAAAA,GACb2M,cAAc7H,OAAMz3B,QAAS6/B,aAAa,CAAC;AAAC;AAAA,IAAA;AAI1CN,iBACFA,UAAU1hC,KAAK;AAAA,EAAA,GAElBnT,QAAA40C,eAAA50C,QAAA60C,WAAA70C,QAAA+sC,QAAA/sC,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAzBH,QAAAo1C,gBAAsBx0C;AA2BrBI,MAAAA;AAAAhB,IAAA00C,EAAAA,MAAAA,qBAAA10C,UAAAg1C,gBAKIh0C,KAAAg0C,gBAAgBA,aAAYnP,UAC3BxkC,2BAAAA,IAACmV,OAAAA,uBAA4B,SAAA,cAC3B,yCAAC,mBAA0B,EAAA,QAAAw+B,aAAYnP,QAA2B6O,kBAAgB,kBACpF,CAAA,EAAA,CAAA,GACD10C,QAAA00C,mBAAA10C,QAAAg1C,cAAAh1C,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAA+0C,EAAAA,MAAAA,MAAA/0C,EAAAwH,EAAAA,MAAAA,YAAAxH,EAAAo1C,EAAAA,MAAAA,iBAAAp1C,UAAAmG,MAAAnG,EAAA,EAAA,MAAAkG,QAAAlG,EAAA,EAAA,MAAA80C,WAAA90C,EAAA,EAAA,MAAAgB,MANHC,KAACmC,2BAAA,KAAA,IAAO+C,EAAAA,IAAeivC,WAAAA,eAAyB,UAAA,IAAE,GAAMlvC,MAAW4uC,cACzD,UAAA;AAAA,IAAA;AAAA,IACP9zC;AAAAA,EAAAA,EAKH,CAAA,GAAKhB,QAAA+0C,IAAA/0C,QAAAwH,UAAAxH,QAAAo1C,eAAAp1C,QAAAmG,IAAAnG,QAAAkG,MAAAlG,QAAA80C,SAAA90C,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAPLiB;AAOK,CAER,GAaYo0C,0BAA0B3tB,MAAAA,KACrC3nB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA;AAAAy0C,MAAAA,mBAAAltC,UAAAtB,MAAA5F;AAAAN,WAAAD,SACE;AAAA,IAAA20C;AAAAA,IAAA78B,IAAAvX;AAAAA,IAAAkH;AAAAA,IAAA,GAAAtB;AAAAA,EAAAA,IAA2DnG,OAAKC,OAAAD,OAAAC,OAAA00C,mBAAA10C,OAAAwH,UAAAxH,OAAAkG,MAAAlG,OAAAM,OAAAo0C,oBAAA10C,EAAA,CAAA,GAAAwH,WAAAxH,EAAA,CAAA,GAAAkG,OAAAlG,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA;AAAtC,QAAA6X,KAAAvX,OAAUsK,SAAL,QAALtK,IAC1B;AAAA,IAAA2b;AAAAA,IAAA8T;AAAAA,EAAAA,IAA6BtD,gBAC7B,GAAA,CAAAkoB,aAAAW,cAAA,IAAsC1jC,iBAAW;AAAChR,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEhBnC,KAAAmd,CAAA,QAAA;AAChCu3B,mBAAev3B,GAAG;AAAA,EAAA,GACnB/d,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAFD,QAAA40C,gBAAsBh0C;AAEhB,MAAAI,IAAAC;AAAAjB,WAAA+vB,aAIF9uB,KAAA8uB,aAAS;AAAA,IAAA,GACJA;AAAAA,IAAS6Y,YAAA19B;AAAAA,IAAAq/B,UAAA3/B;AAAAA,EAOb5K,GAAAA,OAAA+vB,WAAA/vB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KARDC;AAFJ,QAAAwpB,cAAgDzpB;AAY/CiC,MAAAA;AAAAjD,IAAA00C,CAAAA,MAAAA,qBAAA10C,EAAA,CAAA,MAAA20C,eAAA30C,EAAA6X,EAAAA,MAAAA,MAAA7X,EAAA,EAAA,MAAAwH,YAAAxH,UAAAkG,QAKCjD,KAAAE,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA4pC;AAAAA,IAAAA,IAAA5pC;AACC,WAAA9B,+BAAC,6BACK6E,GAAAA,MACSyuC,aACMD,mBACf78B,IACW+8B,eACP7H,QAEPvlC,SACH,CAAA;AAAA,EAA4B,GAC7BxH,OAAA00C,mBAAA10C,OAAA20C,aAAA30C,QAAA6X,IAAA7X,QAAAwH,UAAAxH,QAAAkG,MAAAlG,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAdH,QAAAu1C,gCAAsCtyC;AAkBlC,MAAA,CAACwnB,eAAW,CAAKxO;AAAO,WAAA;AAAA9Y,MAAAA;AAAA,SAAAnD,EAAAyqB,EAAAA,MAAAA,eAAAzqB,UAAAic,WAAAjc,EAAA,EAAA,MAAAu1C,iCAG1BpyC,oCAAC,6BAAyCsnB,EAAAA,aAAsBxO,mBAEhE,8BAAA,CAAA,GAA8Bjc,QAAAyqB,aAAAzqB,QAAAic,SAAAjc,QAAAu1C,+BAAAv1C,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAF9BmD;AAE8B,CAGpC;AAEAkyC,wBAAwB59B,cAAc;AAnDpC,SAAAvM,UAAA;AAAA;ACpFF,SAASsqC,kBAAkB;AAAA,EACzBC;AAAAA,EACAC;AAAAA,EACAxmB,YAAAA;AAAAA,EACAymB;AACkB,GAAmB;AACrC,SAAOzmB,YACJzkB,IAAI,CAACyiB,WAAW9hB,UAAU;AACnBykB,UAAAA,WAAW8lB,mBAAmBvqC,KAAK;AAEzC,WAAI,CAACykB,YAAYA,SAAStZ,SAAe,OAElC;AAAA,MACLzN,QAAQ,GAAG+lB,qBAAqB,GAAG3B,UAAU3kB,IAAI;AAAA,MACjD4b,OAAO0L,SAASvL,eAAe1Z,SAAY;AAAA,MAC3CrH,MAAMssB,SAAStsB;AAAAA,MACfga,YAAY,CAACm4B;AAAAA,MACbhhC,UAAU+gC,kBAAkBltC,SAAS2kB,UAAU3kB;AAAAA,MAC/C6b,UAAUyL,SAASlS,SAAS3T,KAAK,GAAG;AAAA,MACpCsa,cAAcuL,SAASvL;AAAAA,MACvBljB,OAAOyuB,SAASzuB;AAAAA,MAChB0Q,MAAM+d,SAAS/d;AAAAA,IACjB;AAAA,EAAA,CACD,EACA7G,OAAO+E,OAAO;AACnB;AAEA,SAAS4lC,eAAe;AAAA,EAACF;AAAAA,EAAUh1C;AAAqB,GAAiB;AAChE,SAAA;AAAA,IACLoI,QAAQ;AAAA,IACRqb,OAAO;AAAA,IACP/iB,OAAOV,EAAE,oCAAoC;AAAA,IAC7C6C,MAAMsyC,MAAAA;AAAAA,IACNt4B,YAAY,CAACm4B;AAAAA,IACbtxB,UAAU;AAAA,EACZ;AACF;AAEO,SAAS0xB,yBAAyB;AAAA,EAACC;AAAAA,EAAYr1C;AAAqB,GAAwB;AACjG,SAAKq1C,aAEE;AAAA,IACLjtC,QAAQ;AAAA,IACRqb,OAAO;AAAA,IACP/iB,OAAOV,EAAE,oCAAoC;AAAA,IAC7C6C,MAAMyyC,MAAAA;AAAAA,IACN5xB,UAAU;AAAA,EAAA,IAPY;AAS1B;AAEO,SAAS6xB,aAAa7vC,QAA4C;AACvE,QAAM8vC,iBAAiBV,kBAAkBpvC,MAAM,GACzC+vC,QAAQ;AAAA;AAAA,IAEZL,yBAAyB1vC,MAAM;AAAA,EAAA,EAC/B6E,OAAO+E,OAAO;AAET,SAAA;AAAA;AAAA,IAEL;AAAA,MACElH,QAAQ;AAAA,MACRwb,cAAc;AAAA,MACdljB,OAAOgF,OAAO1F,EAAE,gCAAgC;AAAA,MAChD6C,MAAM6yC,MAAAA;AAAAA,IACR;AAAA,IACA,GAAGF;AAAAA;AAAAA,IAGHN,eAAexvC,MAAM;AAAA,IAErB,GAAG+vC;AAAAA,EAAK;AAEZ;ACjFA,MAAMzsB,mBAAoB7oB,CACxB6C,UAAAA,OAAAA,SAAS7C,KAAK,KAAK,OAAOA,MAAMkD,OAAQ,YAAY,OAAOlD,MAAMN,SAAU;AAEtE,SAAA81C,cAAAx1C,OAAA;AAAAb,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAq2C;AAAAA,EAAAA,IAA+BC,OAAAA,UAAWr2C,EAAAA;AAAS,MAAAI,IAAAM;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAE3CnC,KAAA,IAAA41C,qBAAA5rC,MAAA,GAAmE5K,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAAnEM;AADR,QAAA61C,UAAgBn2C;AAGf,MAAAU,IAAAC;AAAAjB,WAAAa,SAESG,KAAAA,MAAA;AACRy1C,YAAOjnB,KAAM3uB,KAAK;AAAA,EACjBI,GAAAA,KAAA,CAACw1C,SAAS51C,KAAK,GAACb,OAAAa,OAAAb,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IAFnBuS,gBAAUvR,IAEPC,EAAgB;AAAC,MAAAgC,IAAAE;AAAAnD,SAAAA,SAAAs2C,wBAGXnzC,KAAAszC,QAAOC,eAAenqC,KAE3BG,UAAAA,qBAAAA,GACAoxB,UAAAA,aAAgB,GAAA,GAChBnxB,UAAAA,UAAAzM,CAAAA,cACEwpB,iBAAiBxpB,SAAQ,IAAI4P,UAAKwmC,qBAAoB;AAAA,IAAAp2C,UAAAA;AAAAA,EAAW,CAAA,CAAC,IAAIqO,KAAAA,GAAA3D,MAAY,CACpF,GACA8B,UAAAA,wBACAkC,UAAAA,WAAA1D,OAIC,CACH,GAAClL,OAAAs2C,sBAAAt2C,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA,GAbDiD,KAAOE,IAgBFkB,QAAAA,cAjBuBpB,EAiBY;AAAC;AA5BtC,SAAAiI,QAAAgvB,KAAA;AAqBCh5B,QAAAA,UACEwC,gBAASw2B,GAAG,KAAK,OAAOA,IAAGh5B,WAAa,WAAWg5B,IAAGh5B,UAAW;AAAe,QAAA,IAAA2E,MAClE,6DAA6D3E,OAAO,EAAE;AAAA;ACpBvF,SAAAy1C,oBAAA52C,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAyH;AAAAA,IAAA7G;AAAAA,IAAAyT;AAAAA,IAAA0W;AAAAA,IAAAhgB;AAAAA,MAAkEjL,OAClE;AAAA,IAAAW;AAAAA,MAAYC,sBAAe;AAACL,MAAAA;AAAAN,WAAA0H,gBAYZpH,KAAA;AAAA,IAAAoH;AAAAA,EAAA,GAAc1H,OAAA0H,cAAA1H,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAAU,CAAAA,MAAAA,KAAAV,SAAAM,MAHxBM,oCAAC4I,OAAAA,WACI9I,EAAAA,GACK,SAAA,mDACA,QAAAJ,GACR,CAAA,GAAAN,OAAAU,GAAAV,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAA0H,CAAAA,MAAAA,gBAAA1H,SAAAU,KAKDM,KAAA0G,gBACErG,2BAAA,IAAAwB,GAAA,MAAA,EAAQ,IAAA,KACP,UAAAxB,2BAAA,IAACmI,oBACI9I,GACK,SAAA,kDACA,QAAA;AAAA,IAAAgH;AAAAA,EAAAA,EAAc,CAAA,EAE1B,CAAA,GACD1H,OAAA0H,cAAA1H,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA0H,CAAAA,MAAAA,gBAAA1H,SAAAU,KAEAO,MAACyG,gBACCrG,2BAAAA,IAAAwB,GAAAA,MAAA,EAAQ,IAAA,KAAKnC,UAAAA,EAAE,+DAA+D,EAAA,CAAE,GAClFV,OAAA0H,cAAA1H,OAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAAa,SAEAoC,KAAAmoB,gBAASvqB,SAGNuC,2BAAA,KAAA7B,qBAAA,EAAA,UAAA;AAAA,IAACF,2BAAA,IAAAwB,GAAA,MAAA,EAAQ,IAAA,KAAI,UAAgD,oDAAA;AAAA,IAE5DxB,2BAAA,IAAAiJ,GAAA,MAAA,EAAc,SAAC,GAAW,UAAA,QAAe,WAAW,QAAA,GAAQ,MAAA,WAC3D,UAACjJ,2BAAAA,IAAA0nB,GAAAA,MAAA,EAAc,UAAA,QAAa,MAAA,CAAA,GAAA,GAAA,CAAA,GACzBzB,UAAAC,KAAAA,UAAe1mB,OAAK,MAAA,CAAS,EAChC,CAAA,EACF,CAAA;AAAA,EAAO,EAAA,CAAA,GAGVb,QAAAa,OAAAb,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,IAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiB,MAAAjB,EAAA,EAAA,MAAAiD,MA3BHE,KAACC,2BAAA,KAAAoH,GAAA,OAAA,EAAa,OAAA,GACXxJ,UAAAA;AAAAA,IAAAA;AAAAA,IAUAC;AAAAA,IAIAgC;AAAAA,EAAAA,GAaH,GAAQjD,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA,SAAA7E,EAAAsU,EAAAA,MAAAA,mBAAAtU,EAAA,EAAA,MAAAgL,YAAAhL,EAAAgrB,EAAAA,MAAAA,WAAAhrB,EAAA,EAAA,MAAAY,MAAAZ,UAAAmD,MA1CV0B,oCAAC,WACkByP,EAAAA,iBACX,WACItJ,UACDggB,SAEP,OAAApqB,IAMG,MAAA,WAELuC,UA6BF,GAAA,CAAA,GAAYnD,QAAAsU,iBAAAtU,QAAAgL,UAAAhL,QAAAgrB,SAAAhrB,QAAAY,IAAAZ,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA,GA3CZ6E;AA2CY;ACbhB,MAAMmD,cAAkB,CAAE,GAEpB4uC,2BAA4D;AAAA;AAAA,EAEhE;AAAA,EACA;AAAA;AAAA,EAEA;AAAU,GAGNC,4BAA4Bp1C,wBAAOq1C,0BAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrD,SAASC,iBAAiB;AACzB,QAAA;AAAA,IACJrL;AAAAA,IACAjkC;AAAAA,IACAC;AAAAA,IACA+b;AAAAA,IACAke;AAAAA,IACAqV;AAAAA,IACA9pB;AAAAA,IACAgC,YAAAA;AAAAA,IACAkR;AAAAA,IACA6W;AAAAA,IACAzI;AAAAA,IACAvhB;AAAAA,IACAjC;AAAAA,IACAvqB;AAAAA,IACAI;AAAAA,IACAq2C;AAAAA,IACAhlC;AAAAA,EACF,IAAIua,mBACE;AAAA,IAACrmB,QAAQ+wC;AAAAA,EAAU,IAAIpvC,iBACvB;AAAA,IAAC4qB;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAAC5tB;AAAAA,EAAAA,IAAKC,aAAAA,eAAenB,wBAAwB,GAC7C;AAAA,IAACuV,WAAWC;AAAAA,EAAmBtP,IAAAA,cAE/B0xC,GAAAA,WAAWpe,OAAAA,UAAU,GACrB+c,aAAaM,cAAcx1C,KAAK,GAEhC8yC,qBAAqB0D,OAAAA,4BAA4Bx2C,KAAK,GACtD;AAAA,IACJy2C,6BAA6BC;AAAAA,IAC7BC,qBAAqBC;AAAAA,EAAAA,IACnB3D,OAAAA,sBAAsB,EAAEC,cAAc,IAEpC,CAACn/B,aAAaC,cAAc,IAAIjD,eAAgC,IAAI,GACpE,CAAC8lC,eAAeC,gBAAgB,IAAI/lC,MAAAA,SAAgC,IAAI,GACxE,CAACgmC,eAAeC,gBAAgB,IAAIjmC,eAAgC,IAAI,GAExE,CAAC8iC,mBAAmBoD,oBAAoB,IAAIlmC,MAAAA,SAAgC,IAAI,GAChF,CAACmmC,4BAA4BzU,6BAA6B,IAAI1xB,eAClE,IACF;AAEiComC,0CAAA;AAAA,IAC/BjlC,SAAS6B;AAAAA,IACT+sB;AAAAA,IACA9gC;AAAAA,EAAAA,CACD;AAED,QAAM,CAAC80C,oBAAoBsC,qBAAqB,IAAIrmC,MAAAA,SAAsC,CAAA,CAAE,GACtF,CAACsmC,sBAAsBC,uBAAuB,IAAIvmC,MAAAA,SAAoC,CAAA,CAAE,GAExFwmC,aAAaz7B,GAAAA,eAAe+6B,aAAa,GACzCW,aAAa17B,GAAAA,eAAei7B,aAAa,GACzCzU,eAAeiV,YAAYx7B,QAC3BwmB,eAAeiV,YAAYz7B,QAC3BtI,kBACJoa,oCAAoCxB,YAAYyB,+BAA+B,IAC3E3jB,WAAWyjB,4BAA4BvB,YAAYyB,+BAA+B,IAElF8mB,mBAAmBrtB,MACvB,QAAA,MAAM8G,aAAY7Z,KAAMiL,OAAMA,EAAE/X,SAAS2kB,WAAW3kB,IAAI,GACxD,CAAC2mB,aAAYhC,WAAW3kB,IAAI,CAC9B,GAEMmtC,WAAW1lC,CAAQnP,CAAAA,OAEnB6iB,YAAY0E,MAAAA,QAChB,MACE6tB,aAAa;AAAA,IACXR;AAAAA,IACA9iB;AAAAA,IACA+iB;AAAAA,IACAC;AAAAA,IACAzmB,YAAAA;AAAAA,IACA6mB;AAAAA,IACAr1C;AAAAA,EACD,CAAA,GACH,CAAC+0C,kBAAkB9iB,UAAU+iB,UAAUC,oBAAoBzmB,aAAY6mB,YAAYr1C,CAAC,CACtF,GAEM43C,cAActwB,kBACjB7U,CAA+C,UAAA;AAC9C,eAAW/J,QAAQsa;AACjB,UAAIta,KAAKgb,YACH8wB,YAAAA,SAAS9rC,KAAKgb,UAAUjR,KAAK,GAAG;AAClCA,cAAMC,kBACND,MAAMolC,gBAAgB,GACtB/J,aAAaplC,IAAI;AACjB;AAAA,MAAA;AAAA,EACF,GAIN,CAAColC,cAAc9qB,SAAS,CAC1B,GAEM80B,sBAAsBxwB,MAAAA,YACzBzI,CAAe,SAAA;AACHA,eAAAA,IAAI,GACf6gB,QAAQ7gB,IAAI;AAAA,EAAA,GAEd,CAAC0N,YAAYmT,OAAO,CACtB,GAEMqY,iBAAiBrwB,cACrB,OAAO;AAAA,IAAC,CAACiG,6BAA6B,GAAG0pB;AAAAA,EAAAA,IACzC,CAACA,0BAA0B,CAC7B;AAEKt3C,SAAAA,aAaF2C,2BAAA,KAAAs1C,OAAA,sBAAA,EAAqB,OACnBxpB,UAAAA;AAAAA,IAAWvsB,YAAAA,SAAS,KAClBtB,2BAAAA,IAAA,oCAAA,EACC,YACA,cACA,YAAA6tB,aACA,aAAa+oB,sBAEhB,CAAA;AAAA,IAEAx0B,aAAa9gB,SAAS,KAAKlC,6CACzBk4C,OACC,sBAAA,EAAA,SAASl1B,cACT,YACA,cACA,WAAW00B,yBACX,MAAMnwC,aACN,YAEH;AAAA,IAED3G,2BAAAA,IAACu3C,+BAAqB,SAASV,sBAAsB,MAAMlwC,aACzD,UAAA5E,2BAAAA,KAAC,yBACC,EAAA,mBACA,IAAI2Q,MACJ,iBACA,eAAY,iBACZ,MAAM,KACN,IAAIiX,SACJ,UACA,SAASstB,aACT,SAASzjC,gBAET,UAAA;AAAA,MAACxT,2BAAAA,IAAA,qBAAA,EAAoB,KAAKw2C,kBAAkB,UAAqB,CAAA;AAAA,MAEhElE,sBACCU,OAAqBV,qBAAAA,kBAAkB,KACvC4D,6BACEl2C,2BAAAA,IAAC,oBACC,UAACA,+BAAA,QAAA,EACC,MAAK,eACL,gBAAa,kCACb,SAASA,+BAAC,6BAA0B,UAAUsyC,mBAAAA,CAAmB,EAAI,CAAA,GAEzE;AAAA,MAGJtyC,2BAAAA,IAACm5B,qBAAe,UAAUoc,0BAA0B,SAASQ,SAASyB,YACpE,yCAACv2C,GAAAA,MAAK,EAAA,WAAU,UAAS,MAAM,GAAG,QAAQ0S,kBAAkBpK,SAAY,QACtE,UAACvJ,+BAAA,2BAAA,EACC,eAAY,yBACZ,qBAAqBqqC,eAAeyL,YAAY2B,wBAAwB,UACxE,qBAAqB7B,eACrB,YAAYuB,qBAEZ,UAAAn3C,+BAAC,iBACC,cAAc8hC,gBAAgB,MAC9B,cAAcC,gBAAgB,MAC9B,eAAe4T,aACf,aACA,8BAA6D,CAAA,GAEjE,GACF,EACF,CAAA;AAAA,MAIA31C,2BAAAA,IAAC+jC,GAAAA,gBAAe,EAAA,qBAAqBqT,gBACnC,UAAAr1C,2BAAA,KAACo3B,qBAAe,UAAUoc,0BAA0B,SAASQ,SAAS7+B,QACnEk/B,UAAAA;AAAAA,QAAAA,sDACE,kBACC,EAAA,UAAAp2C,2BAAA,IAAC,qBACC,EAAA,UAAUR,OACV,YACA,cAAcJ,YACd,eAAeyR,OACf,uBAAuB,CAAC,CAACglC,uBACzB,sBAAsB7oB,8BAA8B,CAAA,GAExD;AAAA,QAEDhtB,2BAAA,IAAA,YAAA,EAAW,KAAKs2C,kBACf,UAACt2C,2BAAA,IAAAiD,qDAAA,EACC,UAACjD,2BAAA,IAAA,mBAAA,EACC,eAAey2C,sBACf,mBAAuC,CAAA,EAAA,CAE3C,EACF,CAAA;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,qCACC,0BAAwB,CAAA,CAAA;AAAA,IAAA,EAAA,CAC3B,EACF,CAAA;AAAA,EAAA,GACF,IA1GGz2C,+BAAA,qBAAA,EACC,iBACA,cACA,UACA,SACA,OACA;AAsGR;AAMA,SAAA03C,iBAAAh5C,OAAA;AACE,QAAA;AAAA,IAAAgV;AAAAA,MAAoB2C,QAAQ;AACrB3C,SAAAA,YAAS,OAAUhV,MAAKyH;AAAS;ACjS1C,SAASwxC,KAAKC,QAAuB;AAC5BA,SAAAA,OAAO/4C,UAAU6zC,YAAYmF;AAGtC;AAMO,SAAAC,6BAAA;AAAAn5C,QAAAA,IAAAC,uBAAA,CAAA;AAAAK,MAAAA;AAAA,SAAAN,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAG0BzC,KAAA;AAAA,IAAA04C;AAAAA,IAAAI,kBAAArC;AAAAA,EAAAA,GAG9B/2C,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAHMq5C,OAAAA,wBAAwB/4C,EAG9B;AAAC;AChBG,MAAMg5C,oBAAoBlhB,UAAAA,YAAY;AAAA,EAC3C7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC,GAMY4wB,eAAenhB,sBAAY;AAAA,EACtC7vB,MAAM;AAAA,EACN8vB,SAAS;AAAA,EACT1P,aAAa;AACf,CAAC;ACNe6wB,SAAAA,4BACdr0B,WACAs0B,MACiE;AACjE,QAAMpzC,UAAUozC,KAAKC,eAAe,CAAA,GAC9BC,wBAAwBF,KAAKG;AAE/BH,OAAKI,eAAeF,yBAAyBA,0BAA0BF,KAAKI,eAE9E5xB,QAAQxK,KACN,oCAAoCg8B,KAAKI,WAAW,2BAA2BF,qBAAqB,aAAaA,qBAAqB,IACxI;AAGF,QAAM/xC,WAAW+xC,yBAAyBF,KAAKI,aACzCC,gBAAgB30B,UAAUla,OAAQvK,CAAAA,MAAMA,EAAED,eAAeg5C,KAAK/xC,YAAY,GAE1EghB,iBAAiB;AAAA,IACrB,GAAG+wB,KAAK/wB;AAAAA,IACR,GAAI,OAAOriB,WAAY,WAAWA,WAAW,CAAA,IAAK,CAAA;AAAA,EACpD;AAEA,MAAIuzC,eAAehyC;AAIf,SAAA,CAACA,YAAYkyC,cAAcn3C,WAAW,MACxCi3C,eAAeE,cAAc,CAAC,EAAE3zC,KAG3B;AAAA,IAACyzC;AAAAA,IAA6BlxB;AAAAA,EAAc;AACrD;ACuBaqxB,MAAAA,uBAAuBryB,MAAAA,KAAM3nB,CAAqC,UAAA;AACvE,QAAA;AAAA,IAACyH;AAAAA,IAAU4D;AAAAA,IAAOzF,MAAAA;AAAAA,IAAMqlB;AAAAA,IAASgvB;AAAAA,EAAAA,IAAej6C,OAChDK,SAASC,OAAAA,UACT8kB,GAAAA,YAAYQ,uBACZ;AAAA,IAACs0B;AAAAA,EAAe,IAAIC,uBACpB;AAAA,IACJlN;AAAAA,IACA9sC,UAAU;AAAA,MACR+b,SAASk+B;AAAAA,MACTtvB,QAAQuvB;AAAAA,MACRC,uBAAuBC;AAAAA,MACvB3L,yBAAyB4L;AAAAA,MACzBrrB,YAAYsrB;AAAAA,IAAAA;AAAAA,EAEZjE,IAAAA,OAAAA,UAAAA,GACE5Z,aAAYhE,sBACZ8hB,gBAAgBC,OAAAA,oBAChBjqB,aAAa1oB,cACb4yC,GAAAA,gBAAgBlqB,WAAWrD,WAC3B;AAAA,IAACuF;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAACxiB,MAAMqkB;AAAAA,EAAS,IAAIhnB,eACpB;AAAA,IACJiY;AAAAA,IACAuC,iBAAiBmL;AAAAA,IACjB1tB,QAAQ;AAAA,IACRoiC,OAAOoX,YAAY,CAAA;AAAA,EACrB,IAAIj1C,OACEk1C,cAAcn0C,OAAU0a,UAAAA,OAAO,GAC/B05B,gBAAgBD,YAAY10C,IAC5BsB,aAAaU,OAAAA,eAAe2yC,aAAa,GACzCpzC,eAAe0Z,QAAQtZ,MACvB1B,SAASM,OAAAA,UAAU+pB,WAAWrqB,MAAM,KAAK+nB,gBACzCurB,cAAchzC,OAAAA,UAAU+pB,WAAWpqB,OAAO,GAC1C;AAAA,IAACuzC;AAAAA,IAAclxB;AAAAA,EAAAA,IAAkBN,MAAAA,QACrC,MACEoxB,4BAA4Br0B,WAAW;AAAA,IACrCzd;AAAAA,IACAkyC,cAAciB,YAAYjzC;AAAAA,IAC1B8gB,gBAAgBmyB,YAAYE;AAAAA,IAC5BrB;AAAAA,IACAG,aAAazzC,OAAOwB;AAAAA,EAAAA,CACrB,GACH,CAACF,cAAcmzC,aAAaz0C,QAAQszC,aAAav0B,SAAS,CAC5D,GACM61B,kBAAkBC,uBAAgB;AAAA,IACtCxzC;AAAAA,IACAC;AAAAA,IACAkyC;AAAAA,IACAlxB;AAAAA,EAAAA,CACD,GACKwyB,eAAex0C,iBAAUs0C,eAAe,GACxC9D,wBAAwBgE,aAAa7+B,SAErC;AAAA,IAACkmB;AAAAA,EAAAA,IAAS9K,4BAAqBhwB,YAAYC,YAAY,GACvDqoB,YAAY4b,oBAAalkC,YAAYC,YAAY,GACjD;AAAA,IAACw4B,YAAYib;AAAAA,EAAiB5P,IAAAA,OAAAA,oBAAoB9jC,YAAYC,YAAY,GAC1EslB,kBAAkBouB,OAAAA,mBAAmB3zC,YAAYC,YAAY,GAC7DjH,aAAaL,OAAOI,IAAIkH,YAAY,GACpC7G,QAA4BkvB,WAAW7rB,SAAS6rB,WAAW3rB,aAAa82C,aAAar6C,OACrF,CAAC8iC,YAAYkF,aAAa,IAAIj3B,MAAAA,SAAS,EAAK,GAG5CqK,UAAUmM,MAAAA,QACd,MAAM+xB,iBAAgB;AAAA,IAAC15C,YAAYiH;AAAAA,IAAcD;AAAAA,EAAAA,CAAW,GAC5D,CAAC0yC,kBAAiB1yC,YAAYC,YAAY,CAC5C,GAGMmjB,SAASzC,cACb,MAAMgyB,gBAAe;AAAA,IAAC35C,YAAYiH;AAAAA,IAAcD;AAAAA,EAAAA,CAAW,GAC3D,CAAC2yC,iBAAgB3yC,YAAYC,YAAY,CAC3C,GAGM2zC,iBAAiBjzB,cACrB,MAAMmyB,uBAAuB;AAAA,IAAC95C,YAAYiH;AAAAA,IAAcD;AAAAA,EAAW,CAAA,GACnE,CAACA,YAAYC,cAAc6yC,sBAAsB,CACnD,GAEMra,aAAax5B,OAAAA,UAAUy0C,aAAa,GACpC3X,SAAQ98B,OAAAA,UAAUk0C,SAAS,GAE3B,CAACjZ,WAAW2Z,YAAY,IAAI1pC,MAAe,SAAA,MAC/CxL,OAAOmZ,OAAOge,UAAen3B,WAAAA,OAAOmZ,IAAI,IAAIvX,OAAAA,WAC9C,GACMuzC,eAAe3lC,aAAa,CAAA,CAAE,GAC9B2tB,eAAen9B,OAAOk+B,QAASd,OAAM,CAAC,KAAKA,OAAM,CAAC,EAAEr9B,MAAO,MAC3D,CAACq1C,cAAcC,eAAe,IAAI7pC,MAAAA,SAAqC,QAAQ,GAE/E,CAAC8pC,eAAeC,gBAAgB,IAAI/pC,eAAuB,IAAI,GAO/DiyB,gBAAgB+X,OAAAA,iBAAiB;AAAA,IACrCn0C;AAAAA,IACAC;AAAAA,IACAm0C,SAASF;AAAAA,IACTre,KAAKl3B,OAAOk3B;AAAAA,IACZwe,OAAO11C,OAAO01C;AAAAA,EAAAA,CACf,GAGKtH,kBAAkBzP,OAAoBlB,oBAAAA,eAAgBr+B,YAAUA,OAAMgvC,eAAe,GACrF1G,UAAU/I,OAAAA,oBAAoBlB,eAAgBr+B,CAAAA,YAAUA,QAAMsoC,OAAO,GACrEiO,kBAAkBhX,OAAAA,oBAAoBlB,eAAgBr+B,CAAAA,YAAUA,QAAMu2C,eAAe,GACrFC,oBAAoBjX,OAAAA,oBAAoBlB,eAAgBr+B,CAAUA,YAAAA,QAAMw2C,iBAAiB,GACzFC,gBAAgBlX,OAAoBlB,oBAAAA,eAAgBr+B,CAAUA,YAAAA,QAAMy2C,aAAa,GACjFC,aAAanX,OAAAA,oBAAoBlB,eAAgBr+B,aAAUA,QAAM02C,UAAU,GAc3EtY,YAAYxb,MAAAA,QAAQ,MACnB6zB,gBAGU,CAAClsB,WAAW7rB,SAAS,CAAC6rB,WAAW3rB,aAAc,CAAC83C,aAFtD,IAGR,CAACnsB,WAAW7rB,OAAO6rB,WAAW3rB,WAAW83C,YAAYD,aAAa,CAAC,GAIhElG,aAAaM,cAAcx1C,KAAK,GAEhC,CAAC4C,UAAU04C,WAAW,IAAIvqC,MAAAA,SAA6B,EAAE;AAC/DW,QAAAA,UAAU,MAAM;AACd,UAAM6pC,eAAe3B,cAAcryC,iBAAiBX,UAAU,EAAEya,UAAWm6B,CAAiB,iBAAA;AAC1FF,kBAAYE,YAAY;AAAA,IAAA,CACzB;AACD,WAAO,MAAM;AACXD,mBAAalwB,YAAY;AAAA,IAC3B;AAAA,EAAA,GACC,CAACzkB,YAAYgzC,aAAa,CAAC;AAExBvrB,QAAAA,cAAkC9G,cACtC,MAAMoyB,mBAAmB;AAAA,IAAC/yC;AAAAA,IAAYC;AAAAA,EAAAA,CAAa,GACnD,CAACD,YAAYC,cAAc8yC,kBAAkB,CAC/C,GAEM,CAAC8B,eAAeC,gBAAgB,IAAI3qC,MAAAA,SAAwB,MAAMxL,OAAOsnB,WAAW,IAAI,GAGxF8uB,kBAAkB5mC,MAA2BxP,OAAAA,OAAOsnB,OAAO;AACjEnb,QAAAA,UAAU,MAAM;AACViqC,oBAAgB3mC,YAAYzP,OAAOsnB,YACrC8uB,gBAAgB3mC,UAAUzP,OAAOsnB,SACjC6uB,iBAAiBn2C,OAAOsnB,WAAW,IAAI;AAAA,EAAA,GAExC,CAACtnB,OAAOsnB,OAAO,CAAC;AAEnB,QAAM+nB,mBAAmBvmB,aAAY7Z,KAAMiL,OAAMA,EAAE/X,SAAS+zC,aAAa,GACnEG,2BAA2BvtB,YAAW7Z,KAAMiL,CAAAA,QAAMA,IAAE/X,SAASwmB,sBAAsB,GAEnF2c,cAAc+J,kBAAkBltC,SAASwmB,wBAEzC;AAAA,IAACruB;AAAAA,EAAAA,IAAKC,OAAAA,eAAenB,wBAAwB,GAE7Cw3C,cAAc5wC,OAAOsnB,YAAY,MACjCgvB,eAA+ChR,cACjDqQ,kBACAhsB,WAAW3rB,aAAa,MAEtBqf,eAAsC2E,cAC1C,MAAO3nB,aAAa65C,qBAAqB;AAAA,IAAC7yC;AAAAA,IAAYC;AAAAA,IAAcjH;AAAAA,EAAW,CAAA,IAAI,CACnF,GAAA,CAACgH,YAAYC,cAAc4yC,sBAAsB75C,UAAU,CAC7D,GAcMyR,QACJ8a,oBAAoB,eACpB+C,UAAU7d,UACT,CAAC9L,OAAOk3B,OAAO2e,iBAAiB,CAAC,CAACP,gBAE/Bhd,YAAiDtW,MAAAA,QACrD,MAAOosB,kBAAkBwH,qBAAqB;AAAA,IAACj4C,KAAKlD,MAAMkD;AAAAA,IAAKxD,OAAOM,MAAMN;AAAAA,EAASM,IAAAA,OACrF,CAAC2zC,iBAAiBwH,mBAAmBn7C,KAAK,CAC5C,GAEM87C,mBAAmB30B,MAAAA,YACvB,CAAC40B,UAAkBC,WAA0B;AAC7B,kBAAA;AAAA,MACZ,GAAGz2C;AAAAA,MACH01C,OAAOc;AAAAA,MACPtf,KAAKuf,UAAUjyC;AAAAA,IAAAA,CAChB;AAAA,EAAA,GAEH,CAACxE,QAAQu0C,aAAa,CACxB,GAEMmC,aAAa90B,MAAAA,YAChB+0B,CAAsB,gBAAA;AACjBC,mBAAennC,YAInBylC,aAAatzC,OAAAA,WAAW,GAEpBuzC,aAAa1lC,YAAY7N,uBAC3BuzC,aAAa1lC,UAAU7N,OAAAA,aACvBgyC,cAAchyC,OAAAA,WAAW;AAAA,EAAA,GAM7B,CAACgyC,aAAasB,YAAY,CAC5B,GAEM2B,WAAWrnC,aAAoC,MAAM;AACnD,UAAA,IAAI/P,MACR,gLACF;AAAA,EAAA,CACD;AACDq3C,QAAAA,mBAAmB,MAAM;AAIvBD,aAASpnC,UAAW1C,CAAsB,UAAA;AAEpC,OAAC4c,UAAU7rB,SAAS,CAAC6rB,UAAU3rB,aACjCu4B,WAAU1C,IAAIsf,YAAY,GAE5BhX,MAAM3K,QAAQulB,yBAAkBhqC,MAAMiuB,OAAO,GAAG8Z,aAAar6C,KAAK;AAAA,IACpE;AAAA,EAAA,GACC,CAACkvB,UAAU7rB,OAAO6rB,UAAU3rB,WAAW82C,aAAar6C,OAAO0hC,OAAO5F,UAAS,CAAC;AAE/E,QAAM1G,eAAejO,MAAAA,YAAa7U,CAAsB8pC,YAAAA,SAASpnC,QAAQ1C,OAAK,GAAG,CAAE,CAAA,GAE7Euf,iBAAiB1K,MAAAA,YACpBo1B,CAAgC,uBAAA;AAE/B,UAAMlwB,YAAYkwB,sBAAsBluB,YAAW7Z,KAAMiL,CAAMA,QAAAA,IAAE/X,SAAS60C,kBAAkB;AAExFA,QAAAA,sBAAsB,CAAClwB,WAAW;AAC5BzP,cAAAA,KAAK,uBAAuB2/B,kBAAkB,GAAG;AACzD;AAAA,IAAA;AAGF,QAAK3H,kBAIL;AAAA,UAAIvoB,WAAW;AACP6Q,cAAAA,SAAS7Q,UAAUwE,UAAU;AAAA,UAACtrB;AAAAA,QAAAA,CAAO,KAAK;AAAA,UAACA;AAAAA,QAAM;AAEvDm2C,yBAAiB,IAAI,GACrBC,gBAAgB3mC,UAAUjL,QAE1B+vC,cAAc;AAAA,UAAC,GAAG5c,OAAO33B;AAAAA,UAAQsnB,SAAS9iB;AAAAA,QAAAA,CAAU;AAEpD;AAAA,MAAA;AAGF,UAAI6qC,kBAAkB;AACd1X,cAAAA,WAAS0X,iBAAiB/jB,UAAU;AAAA,UAACtrB;AAAAA,QAAAA,CAAO,KAAK;AAAA,UAACA;AAAAA,QAAM;AAE9Dm2C,yBAAiB,IAAI,GACrBC,gBAAgB3mC,UAAUjL,QAE1B+vC,cAAc;AAAA,UAAC,GAAG5c,SAAO33B;AAAAA,UAAQsnB,SAAS9iB;AAAAA,QAAAA,CAAU;AAAA,MAAA;AAAA,IACtD;AAAA,EAEF,GAAA,CAAC6qC,kBAAkBvmB,aAAY9oB,QAAQu0C,aAAa,CACtD,GAEMxtB,gBAAgBnF,MAAAA,YACpB,CAACq1B,mBAA2BlG,eAAwC;AAClE,UAAMmG,gBAAgBpuB,YAAW7Z,KAAMiL,CAAMA,QAAAA,IAAE/X,SAAS80C,iBAAiB;AAEzE,QAAI,CAACC,eAAe;AACV7/B,cAAAA,KAAK,uBAAuB4/B,iBAAiB,GAAG;AACxD;AAAA,IAAA;AAIE5H,QAAAA,kBAAkBltC,SAAS+0C,cAAc/0C,MAAM;AACnC,oBAAA;AAAA,QAAC,GAAGnC;AAAAA,QAAQ,GAAG+wC;AAAAA,QAAYzpB,SAAS4vB,cAAc/0C;AAAAA,MAAAA,CAAK;AACrE;AAAA,IAAA;AAGF,QAAIg1C,gBAAgBn3C;AAEhBqvC,yBAKF8H,iBAJoBD,cAAc5rB,UAAU;AAAA,MAACtrB,QAAQm3C;AAAAA,IAAAA,CAAc,KAAK;AAAA,MACtEn3C,QAAQm3C;AAAAA,IAGkBn3C,GAAAA;AAGxB23B,UAAAA,WAASuf,cAAcE,SAAS;AAAA,MAACp3C,QAAQm3C;AAAAA,IAAAA,CAAc,KAAK;AAAA,MAACn3C,QAAQm3C;AAAAA,IAAa;AAExFhB,qBAAiBe,cAAc/0C,IAAI,GACnCi0C,gBAAgB3mC,UAAUynC,cAAc/0C,MAExCoyC,cAAc;AAAA,MAAC,GAAG5c,SAAO33B;AAAAA,MAAQ,GAAG+wC;AAAAA,MAAYzpB,SAAS4vB,cAAc/0C;AAAAA,IAAAA,CAAK;AAAA,EAAA,GAE9E,CAACktC,kBAAkBvmB,aAAY9oB,QAAQu0C,aAAa,CACtD,GAEM8C,qBAAqBz1B,MAAAA,YAAY,MAAM;AACvCy0B,gCACF/pB,eAAe+pB,yBAAyBl0C,IAAI;AAAA,EAAA,GAE7C,CAACmqB,gBAAgB+pB,wBAAwB,CAAC,GAEvCiB,oBAAoB11B,kBAAY,MAAM;AACrC2K,aAASgrB,iBAIVlB,4BACFtvB,cAAcsvB,yBAAyBl0C,MAAM;AAAA,MAACuwC,qBAAqB;AAAA,IAAA,CAAS;AAAA,EAE7E,GAAA,CAACnmB,SAASgrB,eAAexwB,eAAesvB,wBAAwB,CAAC,GAE9DmB,kBAAkB51B,MAAY,YAAA,MAAMyI,WAAWotB,aAAAA,GAAgB,CAACptB,UAAU,CAAC,GAE3EqtB,kBAAkB91B,MAAAA,YAAY,MAAMyI,WAAWstB,iBAAoB,GAAA,CAACttB,UAAU,CAAC,GAE/EutB,sBAAsBh2B,MAAAA,YAC1B,CAACi2B,SAAS,CAACjH,gBAAgB;AAEvB2D,kBADEsD,SACY;AAAA,MAAC,GAAG73C;AAAAA,MAAQsnB,SAAS;AAAA,IAAA,IAErBwwB,cAAAA,QAAK93C,QAAQ,SAAS,CAFI;AAAA,EAAA,GAK5C,CAAC4wC,aAAa5wC,QAAQu0C,aAAa,CACrC,GAEMwD,mBAAmBn2B,MAAAA,YACtB5e,CAAuB,SAAA;AAClBA,QAAAA,KAAKN,WAAW,wBAAwBitC;AACnCqI,aAAAA,OAAAA,KAAKrI,UAAU,GACf;AAGL3sC,QAAAA,KAAKN,WAAW,uBAAuB4C;AAC/BuuB,aAAAA,WAAAA,IAAIqf,iBAAiB,GAK/B5tC,UAAUC,UAAUC,UAAU+H,OAAOia,SAASywB,SAAU,CAAA,GACxDluB,UAAU;AAAA,QACRhqB,IAAI;AAAA,QACJ1B,QAAQ;AAAA,QACRrD,OAAOV,EAAE,6DAA6D;AAAA,MACvE,CAAA,GACM;AAGT,QAAI0I,KAAKN,WAAW;AAClBk1C,aAAAA,oBAAoB,EAAI,GACjB;AAGT,QAAI50C,KAAKN,WAAW;AAClB40C,aAAAA,kBACO,GAAA;AAGL,QAAA,OAAOt0C,KAAKN,UAAW,YAAYM,KAAKN,OAAOw1C,WAAWzvB,qBAAqB,GAAG;AACpF,YAAMwuB,sBAAoBj0C,KAAKN,OAAOxD,MAAMupB,sBAAsBlsB,MAAM,GAClE26C,kBAAgBpuB,YAAW7Z,KAAMiL,CAAMA,QAAAA,IAAE/X,SAAS80C,mBAAiB;AAErEC,UAAAA;AACEA,eAAAA,gBAAc/0C,SAAS+zC,gBACzB5pB,eAAe4qB,gBAAc/0C,IAAI,IAEjC4kB,cAAcmwB,gBAAc/0C,IAAI,GAE3B;AAAA,IAAA;AAIJ,WAAA;AAAA,EAAA,GAET,CACE7H,GACAgyB,gBACAgrB,mBACApB,eACAptB,aACA/B,eACA4oB,YACAiI,qBACA7tB,WACAwM,UAAS,CAEb,GAEM4hB,2BAA2Bv2B,MAC/B,YAAA,MAAMg2B,oBAAoB,EAAK,GAC/B,CAACA,mBAAmB,CACtB,GAEM,CAACvd,UAAU+d,aAAa,IAAI5sC,MAAe,SAAA,EAAE,GAC7C,CAAC6sC,iBAAiBC,oBAAoB,IAAI9sC,MAAAA,SAAAA,GAC1C,CAACquB,gBAAgBK,kBAAkB,IAAI1uB,MAAAA,YACvC,CAACouB,oBAAoB2e,uBAAuB,IAAI/sC,MAAAA,YAEhDgtC,2BAA2B52B,MAAAA,YAAY,CAACzI,MAAYxK,cAAuB;AAC/EurB,uBAAoBue,CAAcC,cAAAA,OAAAA,UAAUD,WAAWt/B,MAAMxK,SAAS,CAAC;AAAA,EAAA,GACtE,CAAA,CAAE,GAECgqC,+BAA+B/2B,MAAY,YAAA,CAACzI,QAAYxK,gBAAuB;AACnF4pC,4BAAyBE,CAAcC,gBAAAA,OAAAA,UAAUD,aAAWt/B,QAAMxK,WAAS,CAAC;AAAA,EAAA,GAC3E,CAAA,CAAE,GAECiqC,4BAA4Bh3B,kBAChC,CAACzI,QAAY0/B,cACXP,qBAAsBG,iBAAcC,OAAAA,UAAUD,aAAWt/B,QAAM0/B,SAAS,CAAC,GAC3E,CAAA,CACF,GAEMnjB,qBAAqBj7B,MAAMwjC,aAAa,WAAW,UACnDlT,WAAWnhB,CAAQvP,CAAAA,YAAY0wB,UAC/B+tB,QAAQr+C,MAAMkD,MAAMlD,MAAMkD,MAAM,YAChCo7C,sBAAsB/2B,MAAAA,QAAQ,OAC3B;AAAA,IACL,GAAGvnB;AAAAA,IACHkD,KAAKotB,WAAWhpB,OAAAA,eAAe+2C,KAAK,IAAI7xC,kBAAW6xC,KAAK;AAAA,EAAA,IAEzD,CAAC/tB,UAAUtwB,OAAOq+C,KAAK,CAAC,GAErB,CAACzb,aAAaC,oBAAoB,IAAI0b,mCAA4B;AAAA,IACtEl/C,UAAUi/C;AAAAA,IACVx4B,YAAYmV;AAAAA,EACb,CAAA,GAEKujB,iBAAiBC,oCAA6Bz+C,KAAK,GACnD0+C,gBAAgB,CAAC1+C,OAAOkD,KAExBm+B,WAAW9Z,MAAAA,QAAQ,MAAM;AAC7B,UAAMo3B,kBAAkB,CAAC9b,wBAAwB,CAACD,aAAapd,SACzDo5B,uBAAuB,CAACC,UAAgBj/C,gBAAAA,YAAa,QAAQ,GAC7Dk/C,uBAAuBJ,iBAAiB,CAACG,UAAAA,gBAAgBj/C,YAAa,QAAQ,GAC9Em/C,eAAe5yB,oBAAoB,gBACnC2T,WAAW5Q,UAAU6Q,qBAAqBnlB,SAG1CokC,qBAAqB7vC,CAAAA,EAAQmhB,YAAYpB,UAAU7rB;AAGvD,WAAA,CAACgO,SACD47B,YAAY,QACZ0R,mBACAC,wBACAE,wBACAC,gBACAjf,YACAgD,cACAC,aACAic,sBACAR;AAAAA,EAAAA,GAED,CACD3b,sBACAD,aAAapd,SACb5lB,YACA8+C,eACAvyB,iBACA+C,UAAU6Q,qBAAqBnlB,SAC/BsU,UAAU7rB,OACVitB,UACAjf,OACA47B,SACAnK,YACAC,WACAyb,cAAc,CACf,GAEKlf,YAAY2f,oBAAa;AAAA,IAC7Br/C;AAAAA,IACAN,eAAeu+B;AAAAA,IACfwD;AAAAA,IACA6d,iBAAiBrD;AAAAA,IACjB/a;AAAAA,IACAlB;AAAAA,IACAR;AAAAA,IACAx8B;AAAAA,IACAy8B;AAAAA,IACAF;AAAAA,IACAye;AAAAA,IACA/S;AAAAA,EAAAA,CACD;AAEDn5B,QAAAA,UAAU,MAAM;AACE,oBAAA;AAAA,MACd9K;AAAAA,MACAC;AAAAA,MACAjH;AAAAA,MACAs1B,UAAUE;AAAAA,IAAAA,CACX;AAAA,EAAA,GACA,CAACxuB,YAAYC,cAAcjH,YAAYw1B,cAAcgkB,eAAe,CAAC;AAElE+F,QAAAA,eAAepqC,aAAOuqB,SAAS;AACrC5tB,QAAAA,UAAU,MAAM;AACdytC,iBAAanqC,UAAUsqB;AAAAA,EAAAA,GACtB,CAACA,SAAS,CAAC;AAER8f,QAAAA,cAAcj4B,kBACjBzI,CAAe,WAAA;AACF2gC,+BAAoBF,aAAanqC,SAAU0J,MAAI,EACvD4gC,QAASxvB,CAAO,OAAA;AACdA,SAAG7oB,SAAS,gBACdw4B,mBAAoBue,iBAAcC,OAAUD,UAAAA,aAAWluB,GAAGpR,MAAM,EAAK,CAAC,GAEpEoR,GAAG7oB,SAAS,oBACd62C,wBAAyBE,CAAAA,gBAAcC,OAAUD,UAAAA,aAAWluB,GAAGpR,MAAM,EAAK,CAAC,GAEzEoR,GAAG7oB,SAAS,sBACd42C,qBAAsBG,CAAAA,gBAAcC,OAAAA,UAAUD,aAAWluB,GAAGpR,MAAMoR,GAAGsuB,SAAS,CAAC;AAAA,IAAA,CAElF,GACDT,cAAcj/B,MAAI;AAAA,EAAA,GAEpB,CAACygC,YAAY,CACf,GAEMI,iBAAiBp4B,MAAAA,YACrB,CAACq4B,eAAqBh6C,YAAiC;AACrDo0C,kBAAc6F,YAAY,CACxB;AAAA,MACEx4C,MAAM;AAAA,MACNL;AAAAA,MACA8X,MAAM8gC;AAAAA,MACNE,eAAc,oBAAI7kB,KAAK,GAAE8kB,YAAY;AAAA,MACrCC,WAAWp6C,SAASo6C;AAAAA,IAAAA,CACrB,CACF;AAAA,EAAA,GAEH,CAACh5C,YAAYgzC,aAAa,CAC5B,GAEMiG,0BAA0Bt4B,MAAAA,QAC9B,MAAMu4B,kBAAAA,QAASP,gBAAgB,KAAM;AAAA,IAACQ,SAAS;AAAA,IAAMC,UAAU;AAAA,EAAA,CAAK,GACpE,CAACT,cAAc,CACjB,GAEMU,cAAc94B,kBAClB,CAAC+4B,gBAAsB16C,cAAiC;AAChDg6C,UAAAA,kBAAgBW,kBAAQD,cAAc;AACxCV,wBAAkB9E,aAAa1lC,YACjCylC,aAAa0F,UAAAA,QAAQX,eAAa,CAAC,GACnCJ,YAAYe,kBAAQX,gBAAc/6C,MAAM,GAAG,EAAE,CAAC,CAAC,GAC/Ci2C,aAAa1lC,UAAUwqC,iBACvBrG,cAAcqG,eAAa,IAE7BK,wBAAwBL,iBAAeh6C,SAAO;AAAA,EAAA,GAEhD,CAAC2zC,aAAaiG,aAAaS,uBAAuB,CACpD,GAEMh0B,eAAyCtE,MAAAA,QAC7C,OAAO;AAAA,IACLnM;AAAAA,IACAsnB;AAAAA,IACA1Y;AAAAA,IACA6gB;AAAAA,IACAhZ;AAAAA,IACAsN;AAAAA,IACAC;AAAAA,IACAyc;AAAAA,IACA1vB;AAAAA,IACA0R;AAAAA,IACAj3B;AAAAA,IACAqzC;AAAAA,IACApzC;AAAAA,IACAqoB;AAAAA,IACAtM;AAAAA,IACAke;AAAAA,IACAzU,WAAWuoB,oBAAoB;AAAA,IAC/BvmB,YAAAA;AAAAA,IACA8d;AAAAA,IACA3M,QAAQyc;AAAAA,IACR/mB,UAAUE;AAAAA,IACVmK,SAAS0gB;AAAAA,IACT7zB,YAAYgzB;AAAAA,IACZgB,gBAAgBxD;AAAAA,IAChBxG,eAAeyG;AAAAA,IACfrnB,gBAAgBkoB;AAAAA,IAChB/P,cAAc2P;AAAAA,IACd1P,aAAamP;AAAAA,IACblP,aAAaoP;AAAAA,IACbtd,uBAAuBwe;AAAAA,IACvB1e,oBAAoBse;AAAAA,IACpBre,wBAAwBwe;AAAAA,IACxB5xB;AAAAA,IACAsT;AAAAA,IACAr1B;AAAAA,IACA4rC;AAAAA,IACA9W;AAAAA,IACAvc,gBAAgBA,kBAAkB,CAAE;AAAA,IACpCqH;AAAAA,IACA+qB;AAAAA,IACA7jC;AAAAA,IACAzR;AAAAA,IACAijC;AAAAA,IACAwT;AAAAA,IACAzT;AAAAA,IACAgY;AAAAA,IACAkB;AAAAA,IACA9T;AAAAA,IACAlF;AAAAA,IACAC;AAAAA,IACA8X;AAAAA,IACAF;AAAAA,IACA3X;AAAAA,IACAziC;AAAAA,IACAP;AAAAA,IACA2iC,OAAAA;AAAAA,IACArD;AAAAA,IACAwO,yBAAyB0M;AAAAA,EAC3B,IACA,CACErO,kBACA/wB,SACAsnB,cACA1Y,QACA6gB,aACAhZ,gBACAsN,oBACAC,gBACAyc,cACA1vB,iBACAyoB,kBACA/W,WACAj3B,YACAqzC,eACApzC,cACAqoB,WACAtM,cACAke,WACAxB,WACA2c,YACA7mB,cACA6qB,aACArD,oBACAC,mBACAa,0BACAJ,kBACAY,8BACAH,0BACAhB,iBACAE,iBACAkB,2BACA5zC,OACA4rC,aACA9nB,aACA0U,WACAD,YACAD,sBACAwT,uBACAmE,gBACA13B,gBACAwJ,eACAsT,UACAzV,SACAyY,aACAsS,YACA7jC,OACAzR,YACAw/C,aACAtD,kBACAjB,eACAF,cACA3X,eACAziC,OACA8+B,YACAr/B,OACA2iC,MAAK,CAET;AAEAjxB,QAAAA,UAAU,MAAM;AACV2uC,QAAAA;AACJ,WAAIl0B,oBAAoB,mBACtBk0B,UAAU7uC,WAAW,MAAM;AACf,gBAAA;AAAA,QACRlM,IAAI;AAAA,QACJ1B,QAAQ;AAAA,QACRrD,OAAOV,EAAE,iDAAiD;AAAA,MAAA,CAC3D;AAAA,IAAA,GACA,GAAI,IAEF,MAAM;AACPwgD,iBAAS5uC,aAAa4uC,OAAO;AAAA,IACnC;AAAA,EACC,GAAA,CAACl0B,iBAAiBmD,WAAWzvB,CAAC,CAAC;AAE5Bs8C,QAAAA,iBAAiBpnC,aAAO,EAAK;AAGnCrD,SAAAA,MAAAA,UAAU,MAAM;AACVL,QAAAA,SAAS9L,OAAOmZ,MAAM;AAClB,YAAA;AAAA,QAACA,MAAAA;AAAAA,QAAM,GAAG4hC;AAAAA,MAAAA,IAAc/6C,QACxBg7C,cAAcC,2BAAiBrB,aAAanqC,SAAShV,OAAO08B,qBAAehe,MAAI,CAAC;AAEtFy9B,qBAAennC,UAAU,IAGpByrC,qBAAAA,QAAW/F,aAAa1lC,SAASurC,WAAW,MAC/C9F,aAAa8F,WAAW,GACxBnB,YAAYmB,WAAW,GACvB7F,aAAa1lC,UAAUurC,aACvBpH,cAAcoH,WAAW;AAGrBF,YAAAA,YAAU7uC,WAAW,MAAM;AAC/B2qC,uBAAennC,UAAU;AAAA,SACxB,CAAC;AAGJ4a,aAAAA,WAAWrD,UAAU+zB,UAAU,GAExB,MAAM7uC,aAAa4uC,SAAO;AAAA,IAAA;AAAA,EACnC,GAGC,CAAC96C,QAAQqB,YAAYuyC,aAAaiG,aAAa/tC,OAAOue,UAAU,CAAC,kCAGjE9D,YAAoB,oBAAA,UAApB,EAA6B,OAAOD,cAAellB,UAAS;AAEjE,CAAC;AAEDuyC,qBAAqBtiC,cAAc;ACnxBtB8pC,MAAAA,eAAe75B,MAAAA,KAAK,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAC/B;AAAA,IAAAsI,MAAAi5C;AAAAA,EAAAA,IAAiCjL,OAAAA,UAAU,GAGnBj2C,KAAAP,MAAK4F,KAAA87C,UAAgBD;AAAgB5gD,MAAAA;AAAAZ,WAAAD,SACzDa,KAACS,2BAAAA,IAAAqgD,OAAA,mBAAA,EACC,UAACrgD,+BAAA,mBAAA,KAAsBtB,OAAK,GAC9B,GAAoBC,OAAAD,OAAAC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,EAAAM,CAAAA,MAAAA,MAAAN,SAAAY,MAHtBI,KAACK,2BAAAA,IAAAsgD,OAAAA,gBAAqB,EAAA,MAAArhD,IACpBM,UAGF,GAAA,CAAA,GAAiBZ,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAJjBgB;AAIiB,CAEpB;AAED,SAAA4gD,kBAAA7hD,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACE;AAAA,IAAA0F,MAAAA;AAAAA,IAAAqlB;AAAAA,MAAwBjrB,OACxB;AAAA,IAAA8hD;AAAAA,EAAoCtL,IAAAA,iBAAWr2C,EAAAA,UAC/CuwB,aAAmB1oB,cACnBqZ,GAAAA,UAAgB0gC,eAAen8C,MAAIyb,SAAUqP,WAAUrqB,MAAO,GAC9D;AAAA,IAAAsB;AAAAA,IAAAq6C,UAAAC;AAAAA,EAAAA,IAAmDC,OAAAA,gBAAgB7gC,QAAOjb,IAAKib,QAAOtZ,IAAK,GAE3FivC,kBAAuBoC,2BAA2B;AAAC,MAAA74C,IAAAM;AAAAZ,IAAA,CAAA,MAAAohB,QAAAjb,MAAAnG,EAAAohB,CAAAA,MAAAA,QAAAtZ,QAAA9H,SAAA6hD,6BAK1CjhD,KAAAihD,0BAAyB;AAAA,IAAA/5C,MACxB;AAAA,IAAUL,YACJ2Z,QAAOjb;AAAAA,IAAA1F,YACP2gB,QAAOtZ;AAAAA,EAAAA,CACpB,GAAC9H,EAAA,CAAA,IAAAohB,QAAAjb,IAAAnG,EAAA,CAAA,IAAAohB,QAAAtZ,MAAA9H,OAAA6hD,2BAAA7hD,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJFM,KAAOM;AADT,QAAA8kB,gBAAsBplB;AAMmCU,MAAAA;AAAAhB,WAAA0lB,iBAE0B1kB,KAAA;AAAA,IAAA0kB;AAAAA,EAAA,GAElF1lB,OAAA0lB,eAAA1lB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA,CAAA4lB,qBAAAC,4BAAA,IAA4DC,OAAAA,uBAAuB9kB,EAElF,GACD+gD,WAAiBC,oBAAgB,CAAKn8B;AAA4B,MAAA5kB,IAAAgC;AAAAjD,IAAA,CAAA,MAAA0H,gBAAA1H,EAAA+hD,CAAAA,MAAAA,YAAA/hD,EAAAohB,CAAAA,MAAAA,WAAAphB,SAAAD,SAGzDkD,KAAA8+C,YAAYr6C,gBAAgB0Z,QAAOtZ,SAAUJ,eAChDw6C,kBAAkBniD,OAAOqhB,SAAS1Z,YAAY,IAC9C3H,OAAKC,OAAA0H,cAAA1H,OAAA+hD,UAAA/hD,OAAAohB,SAAAphB,OAAAD,OAAAC,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAFTiB,KAAOgC;AADT,QAAAk/C,gBAAsBlhD,IAMtB;AAAA,IAAAsG,oBAAAA;AAAAA,IAAA66C;AAAAA,IAAAj9C;AAAAA,IAAAD;AAAAA,EAAAA,IAAgFurB;AAAUttB,MAAAA;AAAAnD,IAAAmF,EAAAA,MAAAA,cAAAnF,UAAAkF,oBACtE/B,KAAA+B,iBAAiBC,aAAc,CAAA,IAAA,CAAA,EAAAiB,UAAmB,IAAApG,QAAAmF,YAAAnF,QAAAkF,kBAAAlF,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAtE,QAAAqiD,cAAoBl/C,IACpBm/C,yBAA+Bp9C,iBAAgBvC,QAC/C;AAAA,IAAAgF;AAAAA,EAAAA,IAAwB06C;AAAW,MAAAx9C,IAAAmC;AAAAhH,IAAAmF,EAAAA,MAAAA,cAAAnF,UAAA2H,iBAAA3H,EAAA,EAAA,MAAAsiD,0BAG1Bt7C,KAAAW,gBAAa;AAAA,IAAA4X,MAERge,qBAAe51B,aAAa;AAAA,IAACnC,OAGjCL,cAAcm9C,6BACV,SACAn9C,cAAcm9C,yBAA0B,IACtC,aACA;AAAA,EAAA,IAAS;AAAA,IAAA/iC,MAAA,CAAA;AAAA,IAAA/Z,OAED;AAAA,EAAA,GAAOxF,QAAAmF,YAAAnF,QAAA2H,eAAA3H,QAAAsiD,wBAAAtiD,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAX7B6E,KAAOmC;AADT,QAAAu7C,aAAyE19C,IAezE;AAAA,IAAAnE;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAAC,MAEhD4hB,QAAOtZ,SAAU,QAAQi6C,UAAQ;AAAA96C,QAAAA;AAAAjH,cAAAU,KAMxBuG,MAAAvG,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA;AAAAkH,QAAAA;AAAA,WAAAlH,EAAAgrB,EAAAA,MAAAA,WAAAhrB,UAAAiH,OAJ5DC,qCAAC,aACO,EAAA,MAAE,KACE,UAAA,KACD8jB,SACF,OAAA/jB,IACP,CAAA,GAAAjH,QAAAgrB,SAAAhrB,QAAAiH,KAAAjH,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA,GALFkH;AAAAA,EAAAA;AAKE,MAAA,CAIDQ,cAAY;AAAAT,QAAAA;AAAAjH,cAAAU,KAMJuG,MAAAvG,EAAE,8CAA8C,GAACV,QAAAU,GAAAV,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA;AAAAkH,QAAAA;AAAAlH,MAAA,EAAA,MAAAohB,QAAAjb,MAO1Ce,MAAA;AAAA,MAAAf,IAAKib,QAAOjb;AAAAA,IAAInG,GAAAA,EAAA,EAAA,IAAAohB,QAAAjb,IAAAnG,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA;AAAAoH,QAAAA;AAAApH,MAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACZqE,OAAA;AAAA,MAAA2hB,MAAA7d;AAAAA,IAAAA,GAA+ClL,QAAAoH,QAAAA,OAAApH,EAAA,EAAA;AAAAsH,QAAAA;AAAAtH,MAAAU,EAAAA,MAAAA,KAAAV,UAAAkH,OANjEI,sCAACkD,UAAa,EAAA,OAAA,GACZ,UAACnJ,2BAAA,IAAAwB,SAAA,EAAQ,IAAA,KACP,UAAAxB,+BAACmI,OAAAA,aACI9I,GACK,SAAA,+CACA,QAAAwG,KACI,YAAAE,KAEhB,CAAA,GAAA,GACF,GAAQpH,QAAAU,GAAAV,QAAAkH,KAAAlH,QAAAsH,QAAAA,OAAAtH,EAAA,EAAA;AAAA4J,QAAAA;AAAA5J,WAAAA,EAAAgrB,EAAAA,MAAAA,WAAAhrB,UAAAsH,QAAAtH,EAAA,EAAA,MAAAiH,OAfV2C,sCAAC,WACO,EAAA,MAAA,KACI,UAAE,KACHohB,SACF,OAAA/jB,KAEPK,UAAAA,KAUF,CAAA,GAAYtH,QAAAgrB,SAAAhrB,QAAAsH,MAAAtH,QAAAiH,KAAAjH,QAAA4J,QAAAA,OAAA5J,EAAA,EAAA,GAhBZ4J;AAAAA,EAAAA;AAwBK,QAAA3C,KAAGS,GAAAA,YAAY,IAAI0Z,QAAOjb,EAAA;AAAKe,MAAAA;AAAAlH,IAAA,EAAA,MAAA+2C,mBAAA/2C,EAAAohB,EAAAA,MAAAA,QAAAjb,MAAAnG,EAAAohB,EAAAA,MAAAA,QAAAtZ,QAahCZ,oCAAC6vC,mBAA2B,YAAA31B,QAAOjb,IAAmB,cAAAib,QAAOtZ,MAAS,GAAA9H,QAAA+2C,iBAAA/2C,EAAA,EAAA,IAAAohB,QAAAjb,IAAAnG,EAAA,EAAA,IAAAohB,QAAAtZ,MAAA9H,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,IAAA,EAAA,MAAAohB,QAAAjb,MAAAnG,EAAAohB,EAAAA,MAAAA,QAAAtZ,QAAA9H,UAAAkH,MADxEE,MAAA/F,2BAAAA,IAAC,mBAA4B,YAAA+f,QAAOjb,IAAmB,cAAAib,QAAOtZ,MAC5DZ,UACF,GAAA,CAAA,GAAkBlH,EAAA,EAAA,IAAAohB,QAAAjb,IAAAnG,EAAA,EAAA,IAAAohB,QAAAtZ,MAAA9H,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,IAAAuH,EAAAA,MAAAA,uBAAAvH,EAAA,EAAA,MAAAuiD,cAAAviD,EAAAoiD,EAAAA,MAAAA,uBAAApiD,EAAA,EAAA,MAAAoH,OAAApH,UAAA4lB,uBARpBte,MAACjG,2BAAAA,IAAAmhD,OAAAA,+BAAA,EAC6Bj7C,4BAAAA,qBACX66C,iBAAkB,qBACRx8B,2BAAAA,qBACf28B,YAEZn7C,UAGF,IAAA,CAAA,GAAgCpH,QAAAuH,qBAAAvH,QAAAuiD,YAAAviD,QAAAoiD,qBAAApiD,QAAAoH,KAAApH,QAAA4lB,qBAAA5lB,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA,SAAA5J,EAAAmiD,EAAAA,MAAAA,iBAAAniD,UAAAsH,OAAAtH,EAAA,EAAA,MAAAiH,MAlBlC2C,qCAAC,sBAIKu4C,EAAAA,GAAAA,eAKJ76C,UANKL,IAAAA,GAAAA,EAgBP,GAAuBjH,QAAAmiD,eAAAniD,QAAAsH,KAAAtH,QAAAiH,IAAAjH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA,GAnBvB4J;AAmBuB;AAzG3B,SAAAsB,QAAA5K,IAAA;AA6EkC,QAAA;AAAA,IAAAkH;AAAAA,EAAAA,IAAAlH;AAAe,SAAAe,+BAAuB,UAAT,UAAE;AAAO;AAgCxE,SAAAygD,eAAA1gC,SAAA9gB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA;AAAAW,MAAAA;AAAAZ,WAAAM,MAEEM,KAAAN,OAA+CsK,UAA/CtK,IAAAA,IAA+CN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAA/CoG,QAAAA,SAAAxF,IAEAukB,YAAkBQ,oBAAa;AAAC3kB,MAAAA;AAAA,OAAA;AAAA,QAI1BogB,QAAOtZ,QAASsZ,QAAOtZ,SAAU,KAAG;AAC/BsZ,WAAAA;AAAO/K,YAAAA;AAAAA,IAAAA;AAIhBujC,UAAAA,eAAqBx4B,QAAOxZ,YAAaxB,OAAMwB;AAAS3G,QAAAA;AAAAjB,MAAA45C,CAAAA,MAAAA,gBAAA55C,SAAAmlB,aACvClkB,KAAA24C,eAAez0B,UAAS9P,KAAA3U,CAAAA,MAAaA,EAACyF,OAAQyzC,YAAY,IAAChvC,QAAY5K,OAAA45C,cAAA55C,OAAAmlB,WAAAnlB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AACxF,UAAA0H,eADiBzG,IACYR;AAAY,QAAA,CAGpCiH,cAAY;AACR0Z,WAAAA;AAAO/K,YAAAA;AAAAA,IAAAA;AAAApT,QAAAA;AAAAjD,MAAA0H,CAAAA,MAAAA,gBAAA1H,SAAAohB,WAITne,KAAA;AAAA,MAAA,GAAIme;AAAAA,MAAOtZ,MAAQJ;AAAAA,IAAAA,GAAa1H,OAAA0H,cAAA1H,OAAAohB,SAAAphB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GAAvCgB,KAAOiC;AAAAA,EAAAA;AAjBFjC,SAAAA;AAkBkC;AAG3C,SAASkhD,kBACPniD,OACAqhB,SACA1Z,cAC2B;AACpB,SAAA;AAAA,IACL,GAAG3H;AAAAA,IACH4F,MAAM;AAAA,MACJ,GAAG5F,MAAM4F;AAAAA,MACTyb,SAAS;AAAA,QAAC,GAAGA;AAAAA,QAAStZ,MAAMJ;AAAAA,MAAAA;AAAAA,IAAY;AAAA,EAE5C;AACF;AC7LO,MAAM+6C,qBAAqB,KACrBC,kBAAkB,KAClBC,mBAA8B;AAAA,EAACC,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAchyC,WAAW;AAAA,EAAO,CAAA;AAAC,GAC7EiyC,eAAwC,CAAC,GCiBhDC,UAAUthD,wBAAOC,MAAG;AAAA;AAAA,aAEZ3B,CAAAA,UAAUA,MAAMijD,YAAY,CAAC;AAAA;AAAA,GAIrCC,iBAAiBxhD,wBAAOC,MAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA2B3BwhD,iBAAiB,CAAC,GAAGrzC,MAAM,EAAE,EAAEszC,MAAM;AAE3C,SAAAC,YAAArjD,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GACE;AAAA,IAAAuD;AAAAA,EAAAA,IAAiBzD;AAAKO,MAAAA;AAAAN,WAAAwD,UAIjBlD,KAAA4iD,eAAAz4C,IAAA44C,CACC,QAAAhiD,2BAAA,IAACyD,6BAAqB,EAAA,mBAAsBtB,OAAAA,GAAa6/C,GAAG,CAC7D,GAACrjD,OAAAwD,QAAAxD,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,SAAAM,MAHJM,KAAAS,2BAAAA,IAACmJ,GAAAA,OAAgB,EAAA,aAAa,UAAA,GAAe,YAAC,GAAS,OAAC,GACrDlK,UAAAA,GAGH,CAAA,GAAQN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJRY;AAIQ;AAIL,SAAA0iD,wBAAAvjD,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAsjD;AAAAA,IAAAziD;AAAAA,IAAA0iD;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAxV;AAAAA,IAAAyV;AAAAA,IAAAx/C;AAAAA,IAAAgyC;AAAAA,IAAA3yC;AAAAA,IAAAogD;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAiBIlkD,OAEJK,SAAeC,OAAAA,aAEf;AAAA,IAAA0U,WAAAC;AAAAA,EAAA,IAAqCtP,iBACrC;AAAA,IAAAqP;AAAAA,IAAA3J;AAAAA,EAAAA,IAA2BsM,QAAQ,GACnC,CAAA08B,cAAA8P,eAAA,IAAwCtyC,MAAAA,SAAA,CAAUmD,SAAS,GAC3D;AAAA,IAAArU;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAA6jD,CAAAA,MAAAA,gBAAA7jD,SAAAo0C,gBAEf9zC,KAAAA,MAAA;AAC/B8zC,oBACFyP,aAAa;AAAA,EAEhB7jD,GAAAA,OAAA6jD,cAAA7jD,OAAAo0C,cAAAp0C,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAAmkD,mBAAyB7jD;AAIOM,MAAAA;AAAAZ,WAAA+U,aAEtBnU,KAAAA,MAAA;AACJmU,QAAAA;AAAS;AAEblI,UAAAA,QAAcwF,WAAA,MAAA;AACZ6xC,wBAAoB;AAAA,OAAC,CACnB;AAAC,WAAA,MAAA;AAGH5xC,mBAAazF,KAAK;AAAA,IAAC;AAAA,EAAA,GAEtB7M,OAAA+U,WAAA/U,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAA+U,CAAAA,MAAAA,aAAA/U,SAAAm2C,SAAEn1C,KAAA,CAAC+T,WAAWohC,KAAK,GAACn2C,OAAA+U,WAAA/U,OAAAm2C,OAAAn2C,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAVrBuS,MAAAA,UAAU3R,IAUPI,EAAkB;AAACC,MAAAA;AAAAjB,IAAAujD,CAAAA,MAAAA,eAAAvjD,SAAAyjD,eAAAzjD,EAAA,EAAA,MAAAkuC,YAAAluC,EAAA2jD,EAAAA,MAAAA,iBAAA3jD,EAAA,EAAA,MAAAm2C,MAAAxzC,UAAA3C,EAAAwD,EAAAA,MAAAA,UAAAxD,EAAA,EAAA,MAAAI,UAAAJ,EAAAikD,EAAAA,MAAAA,aAAAjkD,UAAAU,KAGpBO,KAAAA,CAAAmI,MAAAnG,QAAA;AAAO,UAAA;AAAA,MAAA0xC;AAAAA,IAAA,IAAA1xC,KACLqK,cAAoBnF,OAAeiB,eAAAA,KAAIrF,GAAI,GAC3CqgD,aAAmBb,gBAAgBj2C,aACnC6b,UAAgB,CAAC+kB,YAAYkW,YAC7B1vC,WAAiBw5B,YAAYkW,YAC7BC,aAAmB1P,gBAAgBwB,MAAKxzC,SAAW,GACnD2hD,cAAoBD,cAAcV,eAClCY,sBAA4BF,cAAcZ;AAAW,WAIjDrgD,2BAAA,KAAA7B,qBAAA,EAAA,UAAA;AAAA,MAACF,2BAAAA,IAAA,UAAA,EACO,MAAA4iD,mBAAmBr5C,KAAAA,QACrB0C,IAAU,aACN9J,QACM,cAAC,GACN2lB,SACG,YAAA/oB,OAAMI,IAAK4I,KAAI7I,KAAM,GACvBmU,UACHtL,OAAAA,MAGR;AAAA,MAAAk7C,8CAAgB9yC,OAAc,cAAA,EAAA;AAAA,MAE9B+yC,uBACEljD,2BAAAA,IAAAK,GAAA,KAAA,EAAa,SAAA,GAAa,UAAA,GAAa,aACtC,UAACL,+BAAAwB,GAAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IAAQ,SAC9BnC,YAAE,2CAAyC;AAAA,QAAA8jD,OAAA9B;AAAAA,MAA0B,CAAA,EACxE,CAAA,EACF,CAAA;AAAA,IAAA,GACD;AAAA,EAAA,GAGN1iD,OAAAujD,aAAAvjD,OAAAyjD,aAAAzjD,QAAAkuC,UAAAluC,QAAA2jD,eAAA3jD,EAAA,EAAA,IAAAm2C,MAAAxzC,QAAA3C,QAAAwD,QAAAxD,QAAAI,QAAAJ,QAAAikD,WAAAjkD,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAlCH,QAAAykD,aAAmBxjD;AAoClBgC,MAAAA;AAAA,OAAA;AAAA,QAGKygD,gBAAc;AAAAvgD,UAAAA;AAAAnD,gBAAAU,KAMLyC,MAAAzC,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA;AAAA6E,UAAAA;AAAA7E,gBAAAmD,OAJxD0B,MAACxD,2BAAA,IAAAiB,SAAA,EAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAACjB,+BAAA+gC,GAAAA,WAAA,EAAiB,OAAC,GACjB,UAAA/gC,2BAAAA,IAACK,GAAAA,KAAc,EAAA,UAAC,GAAY,UAAC,GAC3B,UAACL,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IACtBM,UAAAA,IACH,CAAA,EACF,CAAA,EACF,CAAA,GACF,GAAOnD,QAAAmD,KAAAnD,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA,GATTiD,KACE4B;AASDwR,YAAAA;AAAAA,IAAAA;AAAAlT,QAAAA;AAAAnD,MAAAwjD,EAAAA,MAAAA,gCAAAxjD,UAAAU,KAQQyC,MACGzC,EADH8iD,+BACK,uDACA,qDADoD,GACExjD,QAAAwjD,8BAAAxjD,QAAAU,GAAAV,QAAAmD,OAAAA,MAAAnD,EAAA,EAAA;AAAA6E,QAAAA;AAAA7E,cAAAmD,OANpE0B,MAACxD,2BAAA,IAAAiB,SAAA,EAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAACjB,+BAAA+gC,GAAAA,WAAA,EAAiB,OAAC,GACjB,UAAA/gC,2BAAAA,IAACK,GAAAA,KAAc,EAAA,UAAC,GAAY,UAAC,GAC3B,UAACL,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IACtBM,UAAAA,IAGH,CAAA,EACF,CAAA,EACF,CAAA,GACF,GAAOnD,QAAAmD,KAAAnD,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA,GAXTiD,KACE4B;AAAAA,EAAAA;AAhBJ,QAAA6/C,qBAA2BzhD;AA4B0BE,MAAAA;AAAA,OAAA;AAAA,QAAA,CAG9CixC,cAAY;AACf,WAAA;AAAW99B,YAAAA;AAAAA,IAAAA;AAAA,QAGTxV,OAAK;AAAA+D,UAAAA;AAAA7E,gBAAAU,KAKmBmE,MAAAnE,EAAE,sCAAsC,GAACV,QAAAU,GAAAV,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA;AAAAgH,UAAAA;AAAAhH,gBAAA6E,OAA3DmC,MAAC3F,+BAAAq+B,GAAAA,SAAA,EAAW,IAAA,MAAM76B,UAAAA,KAA0C,GAAU7E,QAAA6E,KAAA7E,QAAAgH,OAAAA,MAAAhH,EAAA,EAAA;AAAAiH,UAAAA;AAAAjH,QAAA,EAAA,MAAAc,MAAAI,WAK1D+F,MAAA;AAAA,QAAAnG,OAAQA,MAAKI;AAAAA,MAASlB,GAAAA,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA;AAAAkH,UAAAA;AAAAlH,QAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAClBmE,KAAA;AAAA,QAAA6hB,MAAA7d;AAAAA,MAAAA,GAA+ClL,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,UAAAA;AAAApH,QAAAU,EAAAA,MAAAA,KAAAV,UAAAiH,OAL/DG,MAAC/F,2BAAA,IAAAwB,WAAQ,IAAA,KACP,yCAAC2G,OAAAA,WACI9I,EAAAA,GACK,SAAA,uCACA,QAAAuG,KACI,YAAAC,IAEhB,EAAA,CAAA,GAAOlH,QAAAU,GAAAV,QAAAiH,KAAAjH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,UAAAA;AAAAtH,QAAAc,EAAAA,MAAAA,SAAAd,UAAA8jD,WACPx8C,qCAACq9C,OAAoB7jD,cAAAA,EAAAA,OAAgB,eAAegjD,SAAW,GAAA9jD,QAAAc,OAAAd,QAAA8jD,SAAA9jD,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,UAAAA;AAAA5J,QAAAoH,EAAAA,MAAAA,OAAApH,UAAAsH,OAAAtH,EAAA,EAAA,MAAAgH,OAZrE4C,MAAAvI,2BAAAA,IAACiB,WAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,yCAAC8/B,GAAAA,WAAiB,EAAA,OAAA,GAChB,UAAAh/B,2BAAA,KAACoH,YAAgB,UAAA,GAAa,UAAA,GAAU,OAAA,GACtCxD,UAAAA;AAAAA,QAAAA;AAAAA,QACAI;AAAAA,QAQAE;AAAAA,MACF,EAAA,CAAA,EACF,CAAA,GACF,GAAOtH,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAAgH,KAAAhH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA,GAhBTmD,KACEyG;AAgBD0M,YAAAA;AAAAA,IAAAA;AAAA,QAGC,CAACnS,aAAagyC,MAAKxzC,WAAa,GAAA;AAC3B+hD,WAAAA;AAAkBpuC,YAAAA;AAAAA,IAAAA;AAGvBstC,QAAAA,mBAAmB,aAAaz/C,WAAS;AAAAU,UAAAA;AAAA7E,gBAAAwD,UAEzCqB,MAACxD,2BAAAA,IAAA,OAAA,EAAU,IAAA,KACT,UAACA,2BAAAA,IAAA,aAAA,EAAoBmC,OACvB,CAAA,EAAA,CAAA,GAAQxD,QAAAwD,QAAAxD,QAAA6E,OAAAA,MAAA7E,EAAA,EAAA,GAHVmD,KACE0B;AAGDyR,YAAAA;AAAAA,IAAAA;AAGCstC,QAAAA,mBAAmB,aAAaz/C,WAAS;AAC3C,WAAA;AAAWmS,YAAAA;AAAAA,IAAAA;AAIb0C,UAAAA,MAAY,GAAG5N,KAAK,IAAI2J,SAAS,IAGoBlQ,MAAA++C,mBAAmB,WAAkB,MAAA;AAAA58C,QAAAA;AAAAhH,cAAAmkD,oBAAAnkD,EAAAm2C,EAAAA,MAAAA,SAAAn2C,EAAAgZ,EAAAA,MAAAA,OAAAhZ,EAAA,EAAA,MAAA+jD,aAAA/jD,UAAAykD,cAAAzkD,EAAA,EAAA,MAAAgkD,sBACtFh9C,qCAAC,gBACC,EAAA,UAAA3F,2BAAAA,IAACujD,sBACoB,oBAAA,gBACRb,WAAQ,WACnB,iBAAc,IACAC,cAAiB,oBACnB,YAAC,IACN7N,OAEOgO,cAAe,kBAC7B,6BAA0B,IAChB,UAAC,IACI,eAAC,GACN,UAAA,GACEM,YACA,YAAI,GAPT,GAAA,GASX,EAAA,CAAA,GAAiBzkD,QAAAmkD,kBAAAnkD,QAAAm2C,OAAAn2C,QAAAgZ,KAAAhZ,QAAA+jD,WAAA/jD,QAAAykD,YAAAzkD,QAAAgkD,oBAAAhkD,QAAAgH,OAAAA,MAAAhH,EAAA,EAAA;AAAAiH,QAAAA;AAAAjH,MAAA6E,EAAAA,MAAAA,OAAA7E,UAAAgH,OAlBnBC,KAAA5F,2BAAA,IAAC,WAAiB,UAAA,UAAgB,QAAA,QAAiB,UAAAwD,KACjDmC,UAAAA,IAkBF,CAAA,GAAUhH,QAAA6E,KAAA7E,QAAAgH,KAAAhH,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA,GApBZmD,KACE8D;AAAAA,EAAAA;AA9CJ,QAAA49C,cAAoB1hD,IAwFN0B,KAAAmQ,mBAAmB4uC,mBAAmB,YAAY,WAAW;AAAM58C,MAAAA;AAAA,SAAAhH,EAAA6kD,EAAAA,MAAAA,eAAA7kD,UAAA6E,MAF/EmC,KAAC3F,2BAAA,IAAA,aAAA,EACa,eAAA,sBACF,UAAAwD,2BAGZ,GAAc7E,QAAA6kD,aAAA7kD,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GALdgH;AAKc;AA5MX,SAAAkE,QAAA5K,IAAA;AAiI+B,QAAA;AAAA,IAAAkH;AAAAA,EAAAA,IAAAlH;AAAe,SAAAe,+BAAuB,UAAT,UAAE;AAAO;AClLrE,SAASyjD,0BAA0BC,WAAyD;AACjG,SAAOC,OAAQD,QAAAA,SAAS,EAAEt6C,IAAKw6C,CAEtB,WAAA;AAAA,IACL,GAFUA,MAAM/gD,SAAS+gD,MAAM7gD;AAAAA,IAG/B8gD,cAAc,CAAC,CAACD,MAAM7gD;AAAAA,IACtB+nC,UAAU,CAAC,CAAC8Y,MAAM/gD;AAAAA,EAAAA,EAErB;AACH;AAEgBihD,SAAAA,uBAAuBC,OAAkB3kD,YAAyC;AAChG,QAAM4kD,UAAUD,MAAMxC,GAAGn4C,IAAKm4C,CAAO,OAAA;AAEnC,QAAIA,GAAG0C;AACE1C,aAAAA;AAGT,UAAM2C,YAAYC,4BAA4B/kD,YAAYmiD,GAAGC,KAAK;AAClE,WAAK0C,YAMDE,iBAAiBF,WAAW,UAAU,IACjC;AAAA,MAAC,GAAG3C;AAAAA,MAAI0C,SAAS;AAAA,IAAA,IAGtBC,UAAUG,aAAa,WAClB;AAAA,MAAC,GAAG9C;AAAAA,MAAI0C,SAAS;AAAA,QAGnB1C,KAbEA;AAAAA,EAAAA,CAcV;AAEMyC,SAAAA,QAAQt/B,MAAM,CAAC3c,MAAMgC,UAAUhC,SAASg8C,MAAMxC,GAAGx3C,KAAK,CAAC,IAAIg6C,QAAQ;AAAA,IAAC,GAAGA;AAAAA,IAAOxC,IAAIyC;AAAAA,EAAO;AAClG;AAEA,SAASG,4BAA4BG,UAAsBpmC,MAAsC;AACzFqmC,QAAAA,eAAeC,qBAAUC,WAAWvmC,IAAI;AAE9C,MAAI1J,UAAkC8vC;AACtC,aAAWI,WAAWH,cAAc;AAClC,QAAI,CAAC/vC;AACH;AAGE,QAAA,OAAOkwC,WAAY,UAAU;AACrBC,gBAAAA,mBAAmBnwC,SAASkwC,OAAO;AAC7C;AAAA,IAAA;AAIE,QAAA,EADoBE,MAAAA,aAAaF,OAAO,KAAKG,MAAAA,eAAeH,OAAO,MAC/ClwC,QAAQ6vC,aAAa;AAC3C;AAGF,UAAM,CAACS,YAAYC,SAAS,IAAIvwC,QAAQtH,MAAM,CAAE;AAChD,QAAI63C,aAAa,CAACD;AAEhB;AAGE,QAAA,CAACE,MAAAA,sBAAsBF,UAAU,GAAG;AAC5BA,gBAAAA;AACV;AAAA,IAAA;AAGF,UAAM,CAACG,SAASC,YAAY,IAAIJ,WAAWK,MAAM,CAAE;AACnD,QAAID,gBAAgB,CAACD;AAEnB;AAGQA,cAAAA;AAAAA,EAAAA;AAGLzwC,SAAAA;AACT;AAEA,SAASmwC,mBAAmBl+C,MAAkB2+C,WAA2C;AACvF,MAAI,EAAE,YAAY3+C;AAChB;AAGF,QAAMy9C,YAAYz9C,KAAK4+C,OAAOrxC,KAAMwtC,CAAUA,UAAAA,MAAMt6C,SAASk+C,SAAS;AAC/DlB,SAAAA,YAAYA,UAAUz9C,OAAO8C;AACtC;AAEgB66C,SAAAA,iBAAiB5C,OAAsC8D,QAAyB;AAC9F,MAAI9wC,UAAkCgtC,MAAM/6C;AAC5C,SAAO+N,WAAS;AAKd,QAJIA,QAAQtN,SAASo+C,UAIjB,CAAC9wC,QAAQ/N,QAAQ+N,QAAQ6vC,aAAaiB;AACjC,aAAA;AAGT9wC,cAAUA,QAAQ/N;AAAAA,EAAAA;AAGb,SAAA;AACT;AAOA,SAAS8+C,UAAUluC,MAAoC;AACrD,UAAQA,KAAK5Q,MAAI;AAAA,IACf,KAAK,UAAU;AACP,YAAA;AAAA,QAACoW;AAAAA,QAAMC;AAAAA,MAAAA,IAASzF;AAEtB,cAAQA,KAAKiY,IAAE;AAAA;AAAA,QAEb,KAAK;AAECzS,iBAAAA,KAAKpW,SAAS,qBAAqBoW,KAAK3V,SAAS,WAAW,CAAC2V,KAAKnC,OAChEoC,MAAMrW,SAAS,WAAW,OAAOqW,MAAMtd,SAAU,WAAiB,OAC3DkP,oBAAAA,IAAI,CAACoO,MAAMtd,KAAK,CAAC,IAI1Bsd,MAAMrW,SAAS,qBAAqBqW,MAAM5V,SAAS,WAAW,CAAC4V,MAAMpC,OACnEmC,KAAKpW,SAAS,WAAW,OAAOoW,KAAKrd,SAAU,WAAiB,OAC7D,oBAAIkP,IAAI,CAACmO,KAAKrd,KAAK,CAAC,IAItB;AAAA;AAAA,QAIT,KAAK,MAAM;AAELqd,cAAAA,KAAKpW,SAAS,qBAAqBoW,KAAK3V,SAAS,WAAW2V,KAAKnC,QAEjEoC,MAAMrW,SAAS,QAAgB,QAAA;AAE7B++C,gBAAAA,6BAAY92C,IAAY;AAEnBgD,qBAAAA,WAAWoL,MAAM0B,UAAU;AAEhC9M,gBAAAA,QAAQ+zC,WAER/zC,QAAQlS,MAAMiH,SAAS,WAEvB,OAAOiL,QAAQlS,MAAMA,SAAU,SAAiB,QAAA;AAE9CogB,YAAAA,OAAAA,IAAIlO,QAAQlS,MAAMA,KAAK;AAAA,UAAA;AAI3BgmD,iBAAAA,OAAM/W,OAAa+W,SAEhB;AAAA,QAAA;AAAA,QAGT;AACS,iBAAA;AAAA,MAAA;AAAA,IAEX;AAAA;AAAA,IAIF,KAAK;AACID,aAAAA,UAAUluC,KAAKqD,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ5B,KAAK,MAAM;AACHmC,YAAAA,OAAO0oC,UAAUluC,KAAKwF,IAAI;AAC5B,UAAA,CAACA,KAAa,QAAA;AAEZC,YAAAA,QAAQyoC,UAAUluC,KAAKyF,KAAK;AAC7BA,aAAAA,4BAEMpO,IAAI,CAAC,GAAGmO,MAAM,GAAGC,KAAK,CAAC,IAFf;AAAA,IAAA;AAAA;AAAA;AAAA;AAAA,IAQrB,KAAK,OAAO;AACJD,YAAAA,OAAO0oC,UAAUluC,KAAKwF,IAAI,GAC1BC,QAAQyoC,UAAUluC,KAAKyF,KAAK;AAElC,aAAI,CAACD,QAAQ,CAACC,QAAc,2BACjBpO,IAAI,CAAC,GAAImO,QAAQ,CAAK,GAAA,GAAIC,SAAS,CAAG,CAAA,CAAC;AAAA,IAAA;AAAA,IAGpD;AACS,aAAA;AAAA,EAAA;AAGb;AAEO,SAAS4oC,wBACd97C,QACA7E,SAAkC,IACjB;AACb,MAAA;AACIygD,UAAAA,SAAQD,UAAUp/B,OAAAA,MAAMvc,QAAQ;AAAA,MAAC7E;AAAAA,IAAAA,CAAO,CAAC;AAC/C,WAAKygD,SAEEh3C,MAAMC,KAAK+2C,MAAK,EAAE52C,SAFN;AAAA,EAAA,QAGb;AAEC,WAAA;AAAA,EAAA;AAEX;AC5OA,MAAM+2C,8BAA8B,CAAC,OAAO,SAAS,cAAc,cAAc,MAAM;AAGvF,SAASC,eAAexmD,YAAwB8e,MAAgB2nC,SAAkB,IAAe;AAC/F,QAAM,CAACC,MAAM,GAAGC,IAAI,IAAI7nC;AAExB,MAAI,EAAE,YAAY9e;AACT,WAAA;AAGT,QAAM4mD,cAAc5mD,WAAWimD,OAAOrxC,KAAMwtC,CAAUA,UAAAA,MAAMt6C,SAAS4+C,IAAI;AACzE,MAAI,CAACE,aAAa;AAChB,QAAI,CAACL,4BAA4Bt2B,SAASy2B,IAAI,GAAG;AAC/C,YAAMhmD,eAAe,+DAA+DgmD,IAAI,qBAAqB1mD,WAAW8H,IAAI,0BAA0B9H,WAAWimD,OAAOj8C,IAAKo4C,WAAUA,MAAMt6C,IAAI,EAAEyB,KAAK,IAAI,CAAC;AACzMk9C,UAAAA;AACI,cAAA,IAAIrhD,MAAM1E,YAAY;AAG5B8mB,cAAQxK,KAAKtc,YAAY;AAAA,IAAA;AAGtB,WAAA;AAAA,EAAA;AAGT,MAAI,QAAQkmD,YAAYv/C,QAAQu/C,YAAYv/C,KAAKS,SAAS,aAAa;AAC/D++C,UAAAA,WAAWD,YAAYv/C,KAAK0+C;AAClC,WAAO,GAAGW,IAAI,MAAMG,SAAS78C,IAAK67C,CAAAA,YAAYW,eAAeX,SAASc,IAAI,CAAC,EAAEp9C,KAAK,GAAG,CAAC;AAAA,EAAA;AAGxF,QAAMu9C,aAAaH,KAAKzkD,SAAS,KAAKskD,eAAeI,YAAYv/C,MAAMs/C,IAAI,GACrEI,cAAcD,aAAa,IAAIA,UAAU,MAAM;AACrD,SAAOH,KAAKzkD,SAAS,IAAI,GAAGwkD,IAAI,GAAGK,WAAW,KAAKL;AACrD;AAEO,SAASM,sBACdhnD,YACA4kD,SACA6B,SAAkB,IACV;AACR,SAAO7B,QACJ56C,IAAKi9C,CAAaT,aAAAA,eAAexmD,YAAYinD,SAAS7E,MAAMnpC,MAAM,GAAG,GAAGwtC,MAAM,CAAC,EAC/El9C,KAAK,IAAI;AACd;ACGA,MAAM29C,MAAMC,OAAAA,UAAgC;AAAA,EAAC7zB,SAAS;AAAG,CAAC;AAEnD,SAAS8zB,kBAAkBzmC,SAA4D;AACtF,QAAA;AAAA,IACJ0X;AAAAA,IACA14B;AAAAA,IACA6P;AAAAA,IACAu0C;AAAAA,IACAp+C;AAAAA,IACA6E;AAAAA,IACA68C;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,IACE7mC,SACE8mC,SAASj4C,KAAK2yC,IACduF,qBAAqBl4C,MAAMk4C,oBAK3BC,UAAUC,KAAAA,MAAM,MACbvvB,OAAO3pB,OAAO,KAAKlE,MAAM,KAAK7E,QAAQ;AAAA,IAC3CkiD,QAAQ,CAAC,WAAW,YAAY,WAAW;AAAA,IAC3CC,eAAe;AAAA,IACfvY,YAAY;AAAA,EAAA,CACb,CACF,EAAEzjC,KACDi8C,cAAS,CAAC3oB,IAAIvf,MACIA,MAAM,KACPuf,GAAG/3B,SAAS,YAGlB2gD,gBACL,MACE,IAAI5iD,MACFg6B,GAAG/3B,SAAS,cACR,+CACA,4CAA4C+3B,GAAG/3B,IAAI,GACzD,CACJ,IAEKyG,KAAAA,GAAGsxB,EAAE,CACb,GACD6oB,WACF,CAAA,GAEM,CAACC,UAAUC,qBAAqB,IAAIC,KAAAA,UAAUT,SAAUvoB,CAAOA,OAAAA,GAAG/3B,SAAS,SAAS,GAEpFghD,SAASxhC,KAAKC,UAAU;AAAA,IAACtc;AAAAA,IAAQu5C;AAAAA,IAAOp+C;AAAAA,IAAQ0hD;AAAAA,IAAa73C;AAAAA,IAAM83C;AAAAA,EAAAA,CAAgB;AAElFz8B,SAAAA,WACLq9B,SAASp8C,KAAKw8C,KAAK,KAAA,CAAC,CAAC,GACrBH,sBAAsBr8C,KAAK8C,kBAAa,KAAM25C,KAAAA,gBAAgB;AAAA,IAACpI,SAAS;AAAA,IAAMC,UAAU;AAAA,EAAA,CAAK,CAAC,CAChG,EAAEt0C,KACA08C,kDAAwB91C,CAAAA,WAGH40C,kBACfx5C,KAAAA,GAAGw5C,eAAe,IAClBjvB,OAAOhrB,WAAWoB,MAAM,mBAAmBjE,MAAM,cAAc7E,MAAM,GAGvDmG,KAChBi8C,cAAUU,CAAwB,cAAA;AAC1BrC,UAAAA,SAAQsC,OAAAA,mBAAmB/oD,QAAQ2nD,mBAAmB,CAAE,CAAA,EAAE98C,OAAQnD,CAAAA,SAClEohD,UAAUx4B,SAAS5oB,KAAKS,IAAI,KAI9Bk/C,sBAAsB3/C,MAAMmI,KAAK2yC,IAAI,EAAI,GAClC,MAEF,EACR,GAEKwG,SAASC,oBAAaxC,QAAO/tB,QAAQ;AAAA,MACzC7tB;AAAAA,MACA7E;AAAAA,MACAkjD,UAAUrB;AAAAA,MACVsB,UAAUvB;AAAAA,IAAAA,CACX,GAEKwB,UAAUA,MAcPJ,OAba;AAAA,MAClBz7C,OAAOm6C,eAAe;AAAA,MACtBjB,OAAAA;AAAAA,IAAAA,GAGoB;AAAA,MACpB4C,+BAA+BtB;AAAAA,MAC/BuB,UAAU,CAAC,uBAAuB5B,cAAc,eAAe,MAAM,EAAE;AAAA,MACvEtD;AAAAA,MACAmF,iBAAiB;AAAA,MACjB15C,MAAMi4C;AAAAA,IAAAA,CAGgC,EAAE37C,KACxC9B,KAAKszB,IAAAA,CAAAA;AAAAA;AAAAA,MAEHA,OAAO6rB,KAAKn/C,IAAI,CAAC;AAAA,QAACo/C;AAAAA,MAAAA,MAASA,GAAG;AAAA,KAChC,CACF;AAGF,WAAI12C,MAAMrL,SAAS,cAAcqL,MAAM68B,eAAe,UAI7CnjC,KAAAA,MAAM,IAAI,EAAEN,KAAKi8C,KAAAA,SAASgB,OAAO,CAAC,IAEpCA,QAAQ;AAAA,EAChB,CAAA,CACH,CACD,GACD7B,IAAImB,MAAM,GACVr+C,SAAI,CAAC;AAAA,IAACq/C;AAAAA,IAAWjpD;AAAAA,EAAAA,OAAY;AAAA,IAACipD;AAAAA,IAAW/E,WAAWlkD;AAAAA,IAAO,CAC7D;AACF;ACxHA,MAAMkpD,sBAAyC;AAAA,EAC7CjpD,OAAO;AAAA,EACPqD,WAAW;AAAA,EACX6lD,mBAAmB;AAAA,EACnBF,WAAW;AAAA,EACX3T,OAAO,CAAA;AACT;AAUO,SAAS8T,gBAAgBxQ,MAAqD;AAC7E,QAAA;AAAA,IAACxuC,QAAQi/C;AAAAA,IAAc9jD,QAAQ+jD;AAAAA,IAAYC;AAAAA,IAAWtC;AAAAA,IAAajvB;AAAAA,EAAAA,IAAc4gB,MACjF3gB,SAAStpB,iBAAU;AAAA,IACvB,GAAGC,OAAAA;AAAAA,IACHopB,YAAYA,cAAcppB,qCAA8BopB;AAAAA,EAAAA,CACzD,GACK;AAAA,IAACywB,UAAUrB;AAAAA,EAAAA,IAAkBoC,OAAAA,aAAejB,EAAAA,QAC5ChpD,SAASC,OAAAA,UAAU,GACnB2nD,gBAAgBsC,8BAAuB,GAGvCC,qBAAqBniC,MACzB,QAAA,MAAM2+B,wBAAwBmD,cAAcC,UAAU,GACtD,CAACD,cAAcC,UAAU,CAC3B,GAEM,CAAC,CAACK,UAAU1G,OAAO,CAAC,IAAIlyC,MAAAA,SAAS,MAAM64C,mBAAAA,mBAAoB,CAAA,GAC3D,CAAC,CAACC,kBAAkBC,cAAc,CAAC,IAAI/4C,eAAS,MAAM64C,uCAAoB,GAE1EG,gBAAgBxiC,MAAAA,QAAQ,MAAM;AAClC,UAAMyiC,wBAAwB;AAAA,MAC5B/xB;AAAAA,MACA7tB,QAAQi/C;AAAAA,MACR1F,OAAO/B;AAAAA,MACPr8C,QAAQ+jD;AAAAA,MACR/pD;AAAAA,MACA0nD,aAAaA,eAAe;AAAA,MAC5B73C,MAAMm6C,aAAazH;AAAAA,MACnBoF,iBAAiBwC;AAAAA,MACjBvC;AAAAA,MACAC;AAAAA,OAGI6C,eAAejD,kBAAkBgD,qBAAqB,EAAEt+C,KAC5DQ,UAAAA,YAAY;AAAA,MAACC,UAAU;AAAA,MAAMC,YAAY;AAAA,IAAA,CAAE,CAC7C,GAGM89C,YAAYL,iBAAiBn+C;AAAAA,MACjCy+C,UAAAA,eAAeF,YAAY;AAAA,MAC3B7/C,UAAAA,OAAO,CAAC,CAAA,EAAG8yB,MAAM,MAAMA,QAAQgnB,UAAUpiD,WAAW8/C,kBAAkB;AAAA;AAAA,MAEtEsG,UAAAA,KAAK,CAAC;AAAA,MACNP,mBAAS,MACP5qB,KAAAA,OACErvB,QAAG;AAAA,QAACzG,MAAM;AAAA,MAAwB,CAAA,GAClC+/C,kBAAkB;AAAA,QAAC,GAAGgD;AAAAA,QAAuBrG,OAAO9B;AAAAA,MAAgB,CAAA,EAAEn2C,KACpE9B,cAAKszB,CAAY,cAAA;AAAA,QAACj2B,MAAM;AAAA,QAAmBi2B,QAAAA;AAAAA,MAAAA,EAAQ,CACrD,CACF,CACF;AAAA,MACA2qB,UAAM,MAAA;AAAA,IACR;AAGA,WAAOp9B,KAAAA,MACLw/B,aAAav+C;AAAAA,MACX9B,cAAKszB,CAAY,cAAA;AAAA,QACfj2B,MAAM;AAAA,QACNi2B,QAAAA;AAAAA,MAAAA,EACA;AAAA;AAAA,MAEFktB,UAAAA,UAAUF,SAAS;AAAA,IAAA,GAErBA,SACF,EAAEx+C,KACAqC,qBAAW,CAACsrB,KAAcgxB,YACjBttB,KAAAA,OACLrvB,QAAG;AAAA,MAACzG,MAAM;AAAA,MAAkBhH,OAAOqqD,UAAUjxB,GAAG;AAAA,IAAA,CAAE,GAClD5O,KAAAA,MAAMhf,KAAAA,UAAUqH,QAAQ,QAAQ,GAAG62C,QAAQ,EAAEj+C,KAC3Cw8C,UAAAA,KAAK,CAAC,GACNP,UAAAA,SAAS,MAAM0C,OAAO,CACxB,CACF,CACD,GACDE,eAAK,CAAC77B,MAAMpc,UAAU;AACpB,UAAIA,MAAMrL,SAAS;AACV,eAAA;AAAA,UACL,GAAGynB;AAAAA,UACHzuB,OAAOqS,MAAMrS;AAAAA,QACf;AAEF,UAAIqS,MAAMrL,SAAS;AACV,eAAA;AAAA,UACL,GAAGynB;AAAAA,UACHzuB,OAAO;AAAA,UACPgpD,WAAW32C,MAAM4qB,OAAO+rB;AAAAA,UACxB3lD,WAAW;AAAA,UACXgyC,OAAO2O,0BAA0B3xC,MAAM4qB,OAAOgnB,SAAS;AAAA,UACvDiF,mBAAmB;AAAA,QACrB;AAEF,UAAI72C,MAAMrL,SAAS;AACV,eAAA;AAAA,UACL,GAAGynB;AAAAA,UACHzuB,OAAO;AAAA,UACPkpD,mBAAmB;AAAA,QACrB;AAEI,YAAA,IAAInkD,MAAM,YAAY;AAAA,IAC9B,GAAGkkD,mBAAmB,CACxB;AAAA,EACC,GAAA,CACDjxB,QACAoxB,cACAC,YACA/pD,QACA0nD,aACAsC,WACAG,oBACAvC,eACAC,gBACAyC,kBACAF,QAAQ,CACT,GAEK;AAAA,IAAC1pD;AAAAA,IAAOq1C;AAAAA,IAAOhyC;AAAAA,IAAW2lD;AAAAA,IAAWE;AAAAA,EAAAA,IAAqB3lD,QAC9DumD,cAAAA,eACAb,mBACF;AAEO,SAAA;AAAA,IACLjpD;AAAAA,IACAgjD;AAAAA,IACA3/C;AAAAA,IACAgyC;AAAAA,IACA2T;AAAAA,IACAa;AAAAA,IACAX;AAAAA,EACF;AACF;AAGA,MAAMqB,wBAAwB;AAC9B,SAASF,UAAUG,QAAwB;AACzC,SAAIA,kBAAkBzlD,QACbylD,SAEL,OAAOA,UAAW,YAAYA,WAAW,OACvC,aAAaA,UAAU,OAAOA,OAAOpqD,WAAY,WAC5C,IAAI2E,MAAM,GAAGylD,OAAOpqD,OAAO,IAAImqD,qBAAqB,EAAE,IAExD,IAAIxlD,MAAM,GAAGqiC,OAAOojB,MAAM,CAAC,IAAID,qBAAqB,EAAE,IAExD,IAAIxlD,MAAM,GAAGqiC,OAAOojB,MAAM,CAAC,IAAID,qBAAqB,EAAE;AAC/D;AC/KA,MAAME,SAASpa,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GASTqa,SAASra,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAYTsa,sBAAsBhqD,wBAAOiqD,iBAAW;AAAA,eAC/BH,MAAM;AAAA,GAGfI,oBAAoBlqD,wBAAOiqD,iBAAW;AAAA,eAC7BH,MAAM;AAAA;AAAA,GAIfK,2BAA2BnqD,wBAAOiqD,iBAAW;AAAA;AAAA,MAE7CH,MAAM;AAAA,MACNC,MAAM;AAAA;AAAA,GAQCK,mBAAmBnkC,MAAAA,KAAK,SAA0B3nB,OAA8B;AACrF,QAAA;AAAA,IAACwjD;AAAAA,IAAarV;AAAAA,IAAUvoC,MAAAA;AAAAA,IAAMqlB;AAAAA,IAASo/B,WAAW0B;AAAAA,IAActoD;AAAAA,EAAAA,IAAUzD,OAC1EK,SAASC,OAAAA,aAET;AAAA,IAAC0rD;AAAAA,IAAgB3qC;AAAAA,MAAWzb,OAC5B;AAAA,IAACkzB;AAAAA,IAAY5tB;AAAAA,EAAAA,IAAUmW,SACvBhb,SAAS4lD,iBAAiB5qC,QAAQhb,UAAU08C,YAAY,GACxD19B,WAAWgD,MAAAA,QAAQ,MAAM;AACvB6jC,UAAAA,cAAclF,wBAAwB97C,QAAQ7E,MAAM;AAC1D,WAAI6lD,aAAatpD,WAAW,IAAUspD,YAAY,CAAC,IAC5C;AAAA,EAAA,GACN,CAAChhD,QAAQ7E,MAAM,CAAC,GAEb69C,YAAY8H,gBAAgB9H,cAAc,IAE1C;AAAA,IAACvjD;AAAAA,EAAAA,IAAKC,OAAAA,eAAenB,wBAAwB,GAC7C;AAAA,IAAC4B;AAAAA,EAAAA,IAASoY,OAAAA,YAAY7T,KAAI,GAE1B,CAACmiD,aAAaoE,cAAc,IAAIt6C,eAAiB,EAAE,GACnD,CAACu6C,kBAAkBC,mBAAmB,IAAIx6C,MAAAA,SAAiB,EAAE,GAC7D,CAACoyC,oBAAoBqI,qBAAqB,IAAIz6C,MAAkC,SAAA,IAAI,GAEpF06C,qBACJlnC,YAAY0mC,eACR3G,uBAAuB2G,cAAc1rD,OAAOI,IAAI4kB,QAAQ,CAAQ,IAChE0mC,cAEA1B,YAAY1jD,OAAAA,UAAU4lD,kBAAkB,GAExC;AAAA,IAACxrD;AAAAA,IAAOkpD;AAAAA,IAAmB7lD;AAAAA,IAAWgyC;AAAAA,IAAO2T;AAAAA,IAAWa;AAAAA,IAAgB7G;AAAAA,MAC5EmG,gBAAgB;AAAA,IACdpxB;AAAAA,IACA5tB;AAAAA,IACA7E;AAAAA,IACA0hD,aAAaA,aAAayE,KAAK;AAAA,IAC/BnC;AAAAA,EAAAA,CACD,GAEGoC,oBAAoBC,QAAAA,mBACvBC,YACQA,OAAOngD,KACZ9B,KAAAA,IAAK0I,CAAAA,UAAUA,MAAM6iB,OAAOn1B,KAAK,GACjCkgC,KAAAA,IAAIqrB,mBAAmB,GACvBO,KAAAA,SAAU9rD,CAAWA,UAAAA,UAAU,KAAK0N,KAAAA,GAAG,EAAE,IAAI1B,WAAM,GAAG,CAAE,GACxDk0B,KAAAA,IAAImrB,cAAc,CACpB,CAEJ,GAEMU,oBAAoB5kC,MAAAA,YAAY,MAAM;AAC3B,mBAAA,EAAE,GACjBokC,oBAAoB,EAAE;AAAA,KACrB,CAAE,CAAA,GAECS,sBAAsB7kC,kBACzB7U,CAAiD,YAAA;AAC5CA,YAAM6F,QAAQ,YAChB4zC,kBAAkB;AAAA,EAAA,GAGtB,CAACA,iBAAiB,CACpB,GAEM,CAACE,qBAAqBC,sBAAsB,IAAIn7C,eAAwB;AAE9EW,QAAAA,UAAU,MAAM;AACV,KAACu6C,uBAAuB,CAAC3oD,aAC3B4oD,uBAAuB/hC,OAAO;AAAA,EAAA,GAE/B,CAAC8hC,qBAAqB3oD,WAAW6mB,OAAO,CAAC,GAE5CzY,gBAAU,MAAM;AAGdq6C,sBAAAA,GACAG,uBAAuB;AAAA,EAAA,GACtB,CAAC/hC,SAAS4hC,iBAAiB,CAAC;AAE/B,QAAMhJ,iBAAiCx7B,MAAAA,QAAQ,MACzCjkB,aAAa2oD,wBAAwB9hC,UAChC,YAEL8+B,YACK,WAGF,WACN,CAACgD,qBAAqBhD,WAAW3lD,WAAW6mB,OAAO,CAAC,GAEjDgiC,gBAAgB5kC,MAAAA,QAAQ,MACxBw7B,mBAAmB,YACd6H,sBAELU,oBAAoBvI,mBAAmB,WAClC+H,oBAEFx1B,MAAAA,YACN,CAACytB,gBAAgBuI,gBAAgB,CAAC;AAErC,SAEI/oD,2BAAA,KAAA7B,qBAAA,EAAA,UAAA;AAAA,IAACF,2BAAAA,IAAAK,GAAAA,KAAA,EAAI,UAAU,GAAG,eAAe,GAC/B,UAACL,2BAAA,IAAA60B,GAAA,WAAA,EACC,cAAYx1B,EAAE,kDAAkD,GAChE,cAAa,OACb,QAAQ,IACR,aAAasP,CAAQ83C,CAAAA,aACrB,UAAU93C,CAAAA,CAAQlP,OAClB,UAAU,CAAC,GAAG,GAAG,CAAC,GAClB,MAAMksD,eACN,WACEpJ,mBAAmB,YAAY,CAACuI,mBAAmBP,2BAA2B,MAEhF,UAAUY,mBACV,SAASI,mBACT,WAAWC,qBACX,SAAS,GACT,aAAansD,EAAE,mDAAmD,GAClE,QAAQ,GACR,KAAK2rD,uBACL,YAAY,IACZ,OAAOF,iBAAAA,CAAiB,EAE5B,CAAA;AAAA,IACC9qD,2BAAAA,IAAA,yBAAA,EACC,aACA,OACA,8BAA8B,CAAC,CAAC+jB,UAChC,aAAa+wB,MAAMxzC,WAAW+/C,iBAC9B,gBAAgB1yC,CAAAA,CAAQ83C,aACxB,UACA,eAAekC,mBACf,WACA,OAEA,QACA,gBACA,cAAcW,gBACd,SACA,WAAWvpD,OACX,oBACA,aAPK4pB,OAOgB;AAAA,EAAA,GAEzB;AAEJ,CAAC,GC3LYhP,aAAa0L,MAAAA,KACxBpnB,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAmc;AAAAA,IAAAhR;AAAAA,IAAA6hD,uBAAArsD;AAAAA,IAAA+iB,gBAAA3iB;AAAAA,IAAA0iB,WAAAziB;AAAAA,IAAAisD;AAAAA,IAAAC;AAAAA,IAAA/rD;AAAAA,EAAAA,IAAAd;AASiB2C,MAAAA;AAAAjD,WAAAY,MANhBqC,KAAArC,OAA0BgK,UAA1BhK,IAAAA,IAA0BZ,OAAAY,IAAAZ,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAA1B,QAAAitD,wBAAAhqD;AAA0BE,MAAAA;AAAAnD,WAAAgB,MAC1BmC,KAAAnC,OAAmB4J,UAAnB5J,IAAAA,IAAmBhB,OAAAgB,IAAAhB,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAAnB,QAAA2jB,iBAAAxgB;AAAmB0B,MAAAA;AAAA7E,WAAAiB,MACnB4D,KAAA5D,OAAc2J,UAAd3J,IAAAA,IAAcjB,OAAAiB,IAAAjB,OAAA6E,MAAAA,KAAA7E,EAAA,CAAA;AAAd,QAAA0jB,YAAA7e,IAKA;AAAA,IAAA8tB;AAAAA,EAAA,IAAmBrE,oBACnB;AAAA,IAAAvZ;AAAAA,IAAAU;AAAAA,EAAAA,IAA4BiC,QAAQ,GAEpC8E,WAAiB/G,UAAM,CAAKV,YAAkB,KAAA;AAAA,MAAA/N,IAAAC;AAAAjH,WAAAktD,aAI/BjmD,KAAAC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA1D,QAAA3C;AAAAA,IAAAA,IAAAqG;AACVgmD,cAAUrsD,KAAK;AAAA,EAAC,GACjBb,OAAAktD,WAAAltD,OAAAiH,MAAAA,KAAAjH,EAAA,CAAA;AAAAkH,MAAAA;AAAAlH,WAAAmtD,gBACajmD,KAAA+I,CAAA,SAAA;AACZk9C,iBAAal9C,IAAI;AAAA,EAAC,GACnBjQ,OAAAmtD,cAAAntD,OAAAkH,MAAAA,KAAAlH,EAAA,CAAA;AAAAoH,MAAAA;AAAApH,IAAAiH,EAAAA,MAAAA,MAAAjH,UAAAkH,MANIE,MAAA;AAAA,IAAA8lD,WACMjmD;AAAAA,IAEVkmD,cACajmD;AAAAA,EAAAA,GAGflH,QAAAiH,IAAAjH,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA,GAPDgH,KAAOI;AADT,QAAAygB,iBAAuB7gB;AASMM,MAAAA;AAAAtH,IAAA,EAAA,MAAA6nB,kBAAA7nB,EAAAitD,EAAAA,MAAAA,yBAAAjtD,EAAA2jB,EAAAA,MAAAA,kBAAA3jB,UAAA0jB,aAMrBpc,MAACjG,2BAAAA,IAAA,mBAAA,EAC4B4rD,2BAAoB,uBAC/BplC,gBACAlE,gBACLD,WACX,GAAA1jB,QAAA6nB,gBAAA7nB,QAAAitD,uBAAAjtD,QAAA2jB,gBAAA3jB,QAAA0jB,WAAA1jB,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,YAAA2yB,SAAAzW,cAAAlc,UAAAoL,SAGFxB,MAAA+oB,SAAQzW,cACR9Q,QAAS,KACP/J,2BAAAA,IAACkK,0BACKxG,QAAAA,EAAAA,IAAOA,UACH,WAAA,KACFuqC,MAAAA,MAAAA,eACD,MAAA,SACS,cAAA;AAAA,IAAA7jC,SAAU;AAAA,EAAA,EAE3B,CAAA,GAAAzL,EAAA,EAAA,IAAA2yB,SAAAzW,YAAAlc,QAAAoL,OAAApL,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAA,SAAAlK,EAAAoc,EAAAA,MAAAA,gBAAApc,EAAA,EAAA,MAAAsH,OAAAtH,EAAA4J,EAAAA,MAAAA,OAAA5J,EAAA,EAAA,MAAAwc,YAAAxc,UAAAoB,SApBP8I,MAAC7I,2BAAAA,IAAAiD,0BAAAA,2BACC,EAAA,UAAAjD,2BAAAA,IAAC+rD,cAEG,EAAA,SAAA9lD,KAQA,YAAAsC,KAWYwS,cACJI,UACHpb,MAEX,CAAA,EAAA,CAAA,GAA4BpB,QAAAoc,cAAApc,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAwc,UAAAxc,QAAAoB,OAAApB,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA,GA1B5BkK;AA0B4B,CAGlC;AAEA8R,WAAWvE,cAAc;ACjFlB,SAAS41C,wBAAwBttD,OAA6C;AAC7E,QAAA;AAAA,IAACutD;AAAAA,IAAKtrD;AAAAA,MAASjC,OAEf;AAAA,IAACwtD;AAAAA,IAAgBC;AAAAA,EAAAA,IAAqBxrD,MAAMof,QAAQqsC,QAAQ,CAE5DC,GAAAA,gBAAgB1lC,MAAAA,YACnB9b,CAAoC,MAAA;AACnC,QAAIA,EAAEyhD,YAAYJ,mBAAmB,QAAQA,mBAAmB3iD,QAAW;AACnEgjD,YAAAA,kBAAkBN,IAAIliD,OACtByiD,aAAaD,kBAAkBL,iBAAiBK,kBAAkBL,gBAClEO,aAAaF,kBAAkBL,iBAAiBA,iBAAiBK,iBAEjEG,yBAAyB/rD,MAC5BgsD,YAAY,EACZC,SAAS3oD,MAAMuoD,YAAYC,aAAa,CAAC,EACzCrjD,IAAI,CAAC;AAAA,QAACtE;AAAAA,MAAAA,MAAQA,EAAE,GAEb+nD,sBAAsBlsD,MAAMmsD,sBAAsBC,KAAK3jD,IAAI,CAAC;AAAA,QAACtE,IAAAA;AAAAA,YAAQA,IAAE;AACvEkoD,YAAAA,gBAAgB,MACpB,CAAC,GAAGN,wBAAwB,GAAGG,mBAAmB,EAAEjoC,OAClD,CAACqoC,kBAAkBC,WAAW;AAAA,QAAC,GAAGD;AAAAA,QAAkB,CAACC,KAAK,GAAG;AAAA,MAAA,IAC7D,CACF,CAAA,CACF;AAAA,eACSf,mBAAmB;AACtBgB,YAAAA,yBAAyBlB,IAAImB,cAAc;AAG/CjB,wBAFEgB,yBAEgB,OAGAlB,IAAIliD,KAHA,GAMxBkiD,IAAIoB,eAAe;AAAA,IAAA;AAAA,KAGvB,CAACnB,gBAAgBD,KAAKE,mBAAmBxrD,KAAK,CAChD;AAGE,SAAAX,2BAAA;AAAA,IAACstD,GAAA;AAAA,IAAA;AAAA,MACC,OAAO;AAAA,QAACC,aAAa;AAAA,MAAC;AAAA,MACtB,SAAS7uD,MAAMutD,IAAImB,cAAc;AAAA,MACjC,UAAU,CAAC1uD,MAAMutD,IAAIuB,aAAa;AAAA,MAIlC,UAAU,MAAM;AAAA,MAChB,SAASnB;AAAAA,IAAAA;AAAAA,EACT;AAEN;AC/BO,MAAMoB,8BAA8BA,MAAA;AACzC7kD,QAAAA,UAAgB7E,iBAAA2pD,oCAAmC;AAAC,MAEhD9kD,YAAOW;AAAc/E,UAAAA,IAAAA,MACP,8EAA8E;AAEzFoE,SAAAA;AAAO;AAIT,SAAS+kD,0BAA0B;AAAA,EACxCxnD;AAAAA,EACAxF;AAC8B,GAAc;AAC5C,QAAM,CAACitD,2BAA2BC,4BAA4B,IAC5Dt9C,MAAAA,SAA8B,IAAI,GAC9B,CAACu9C,0BAA0BC,2BAA2B,IAAIx9C,MAAAA,SAAmB,CAAA,CAAE,GAE/Ey9C,4BAA4BrnC,MAAAA,YAChC,CAACsnC,oBAAyC,SAAS;AAE/CL,+BAA2BzpD,UAAU,aACrCtF,SAASqvD,yBAAyBC,eAElCtvD,SAASqvD,cAAcE,QAGzBP,6BAA6BI,iBAAiB,GAC9CF,4BAA4B,CAAA,CAAE;AAAA,KAEhC,CAACH,yBAAyB,CAC5B,GAEMS,sBAAsB1nC,MAC1B,YAAA,MAAMqnC,6BACN,CAACA,yBAAyB,CAC5B,GAEMM,wBAAwB3nC,kBAC3BnX,CAAgC,cAAA;AAC/B,QAAI,CAACo+C,0BAA2B;AAEhC,UAAMW,iBAAiB5tD,MAAM6tD,sBAAsB,GAC7CC,uBACJF,eAAejyB,UAAWoyB,CAAQA,QAAAA,IAAI5pD,OAAO8oD,0BAA0Be,KAAK,KAC3En/C,cAAc,SAAS,KAAK;AAE3Bi/C,2BAAuB,KAAKA,wBAAwBF,eAAejtD,UAEvE0sD,0BAA0B;AAAA,MACxBW,OAAOJ,eAAeE,oBAAoB,EAAE3pD;AAAAA,MAC5C8pD,UAAUhB,0BAA0BgB;AAAAA,MACpCzqD,OAAO;AAAA,IAAA,CACR;AAAA,EAAA,GAEH,CAAC6pD,2BAA2BJ,2BAA2BjtD,KAAK,CAC9D,GAEMkuD,uBAAuBloC,MAAAA,YAC1BnX,CAA6B,gBAAA;AACvBo+C,iCAELG,4BAA6Be,CAAsB,sBAAA;AAC3C,YAAA;AAAA,QAACF,UAAUG;AAAAA,MAAAA,IAAenB,2BAC1BoB,eAAgBC,mBACpBA,iBAAiBz/C,gBAAc,SAAS,IAAI;AAE1C,UAAA,CAACs/C,kBAAkBxtD,QAAQ;AACvB4tD,cAAAA,qBAAqBF,aAAaD,WAAW;AACnD,eAAIG,qBAAqB,IAAU,CAAE,IAC9B,CAACA,kBAAkB;AAAA,MAAA;AAEtBC,YAAAA,oBAAoBL,kBAAkBA,kBAAkBxtD,SAAS,CAAC,GAClE8tD,YAAYJ,aAAaG,iBAAiB;AAGhD,aAAIC,YAAY,IAAUN,oBAGtBM,cAAcL,cAAoB,CAAA,IAGlCD,kBAAkBz/B,SAAS+/B,SAAS,IAC/BN,kBAAkB7qD,MAAM,GAAG,EAAE,IAG/B,CAAC,GAAG6qD,mBAAmBM,SAAS;AAAA,IAAA,CACxC;AAAA,EAAA,GAEH,CAACxB,yBAAyB,CAC5B,GAEMyB,wBAAwB1oC,MAAAA,YAC5B,CAACgoC,OAAeC,aAAqB;AACT,8BAAA;AAAA,MAACD;AAAAA,MAAOC;AAAAA,MAAUzqD,OAAO;AAAA,IAAA,CAAW;AAAA,KAEhE,CAAC6pD,yBAAyB,CAC5B,GAEMsB,oBAAoB3oC,kBAAY,MAAM;AACrCinC,QAAAA;AACL,UAAIE,yBAAyBxsD;AAE3BysD,oCAA4B,CAAA,CAAE;AAAA,WACzB;AACL,cAAMwB,wBACJ3B,0BAA0BzpD,UAAU,aAChC,OACA;AAAA,UACE,GAAGypD;AAAAA,UACHzpD,OAAO;AAAA,QACT;AACN6pD,kCAA0BuB,qBAAqB;AAAA,MAAA;AAAA,EAEhD,GAAA,CAACvB,2BAA2BJ,2BAA2BE,yBAAyBxsD,MAAM,CAAC,GAEpFkuD,kBAAkB7oC,MAAAA,YACtB,CAAC8oC,YAAqB93C,QAAgB;AACpC,QAAI,CAACi2C,0BAA2B;AAE1Bp+C,UAAAA,cAAYmI,QAAQ,cAAc,SAAS,MAC3C+3C,SAASlgD,gBAAc,SAAS,IAAI;AAEtCigD,QAAAA;AACFZ,2BAAqBr/C,WAAS;AAAA,SACzB;AACCmgD,YAAAA,0BAA0B/B,0BAA0BgB,WAAWc;AACrE,UAAIC,0BAA0B,EAAG;AAEX/B,4BAAAA,0BAA0Be,OAAOgB,uBAAuB;AAAA,IAAA;AAAA,EAChF,GAEF,CAACd,sBAAsBjB,2BAA2ByB,qBAAqB,CACzE,GAEMO,sBAAsBjpC,MAAAA,YACzB7U,CAAyB,UAAA;AACxB,QAAI,CAAC87C,0BAA2B;AAE1B,UAAA;AAAA,MAACj2C,KAAAA;AAAAA,MAAK20C;AAAAA,IAAAA,IAAYx6C;AAExB,YAAQ6F,OAAG;AAAA,MACT,KAAK;AACH;AAAA;AAAA,MAEF,KAAK;AACe,0BAAA;AAClB;AAAA,MAEF,KAAK;AAAA,MACL,KAAK;AACH7F,cAAMC,eAAe,GACrBy9C,gBAAgBlD,UAAU30C,KAAG;AAC7B;AAAA,MAEF,KAAK;AAAA,MACL,KAAK;AAGCi2C,kCAA0BzpD,UAAU,eACtC2N,MAAMC,eAAAA,GACNu8C,sBAAsB32C,UAAQ,cAAc,SAAS,OAAO;AAE9D;AAAA,IAGA;AAAA,EACJ,GAEF,CAACi2C,2BAA2B0B,mBAAmBE,iBAAiBlB,qBAAqB,CACvF,GAEMuB,oBAAoBlpC,kBACvB7U,CAAsB,YAAA;AACrB,IAAK87C,8BACuB/uD,SACzBixD,eACC,QAAQlC,0BAA0Be,KAAK,IAAIf,0BAA0BgB,QAAQ,EAC/E,GACEmB,SAASj+C,QAAM6iB,MAAc,KAEP05B,oBAAoB;AAAA,EAAA,GAEhD,CAACA,qBAAqBT,yBAAyB,CACjD;AAEA18C,QAAAA,UAAU,OACJ08C,8BACF/uD,SAAS2T,iBAAiB,WAAWo9C,mBAAmB,GACxD/wD,SAAS2T,iBAAiB,SAASq9C,iBAAiB,IAG/C,MAAM;AACPjC,kCACF/uD,SAAS0T,oBAAoB,WAAWq9C,mBAAmB,GAC3D/wD,SAAS0T,oBAAoB,SAASs9C,iBAAiB;AAAA,EAG1D,IAAA,CAACA,mBAAmBD,qBAAqBhC,yBAAyB,CAAC;AAEtE,QAAMoC,kBAAkBrpC,MAAAA,YACtB,MACEknC,6BAA8BoC,uBACvBA,oBAEE;AAAA,IAAC,GAAGA;AAAAA,IAAmB9rD,OAAO;AAAA,EAAA,IAFN,IAGhC,GACH,CACF,CAAA,GAEM+rD,mBAAmBvpC,MAAAA,YACvB,CAACgoC,SAAeC,eACVhB,2BAA2Be,UAAUA,UAAc,OAEnDf,0BAA0BgB,aAAaA,aAClChB,0BAA0BzpD,UAAU,YAAY,YAAY,mBAEjE2pD,yBAAyBz+B,SAASu/B,UAAQ,IAAU,kBAEjD,MAET,CAAChB,2BAA2BE,wBAAwB,CACtD,GAEMqC,oBAAoBxpC,MAAAA,YAAY,MAAM;AACrCinC,iCAELI,0BAA0B;AAAA,MACxBW,OAAOf,0BAA0Be;AAAAA,MACjCC,UAAUhB,0BAA0BgB,WAAW;AAAA,MAC/CzqD,OAAO;AAAA,IAAA,CACR;AAAA,EAAA,GACA,CAAC6pD,2BAA2BJ,yBAAyB,CAAC,GAEnDpuD,QAAQunB,cACZ,OAAO;AAAA,IACLipC;AAAAA,IACA3B;AAAAA,IACAgB;AAAAA,IACAa;AAAAA,IACAC;AAAAA,EAAAA,IAEF,CACEH,iBACA3B,qBACAgB,uBACAa,kBACAC,iBAAiB,CAErB;AAEA,SACGnwD,2BAAAA,IAAA0tD,YAAAA,yBAAyB,UAAzB,EAAkC,OAAevnD,SAAS,CAAA;AAE/D;AC9QA,MAAMiqD,WAAWhwD,iBAAOiwD,OAAAA;AAAAA;AAAAA;AAAAA;AAAAA,WAIb,CAAC;AAAA,EAAC50C;AAAK,MAAMA,KAAK;AAAA;AAAA;AAAA,GAKvB60C,iBAAiBlwD,wBAAOgwD,QAAQ;AAAA;AAAA;AAAA;AAa/B,SAASG,mBAAmB7xD,OAAgC;AAC3D,QAAA;AAAA,IAAC8xD;AAAAA,IAAUC;AAAAA,IAAQxE;AAAAA,IAAK/H;AAAAA,EAAaxlD,IAAAA,OACrCgyD,SAAS,QAAQD,OAAO3rD,EAAE,IAAImnD,IAAIliD,KAAK,IACvC,CAAC4mD,aAAaC,cAAc,IAAIrgD,MAAAA,SAAiBigD,SAAAA,CAAoB,GACrE,CAACK,SAASC,UAAU,IAAIvgD,MAAS,SAAA,EAAK,GACtCwgD,WAAWx8C,MAAiB,OAAA,IAAI,GAChC;AAAA,IACJy7C;AAAAA,IACA3B;AAAAA,IACAgB;AAAAA,IACAa;AAAAA,IACAC;AAAAA,EACE1C,IAAAA,4BACEuD,GAAAA,YAAYd,iBAAiBO,OAAO3rD,IAAImnD,IAAIliD,KAAK,GAEjDknD,gBAAgBtqC,MAAAA,YAAY,MAAM;AAEtC0oC,0BAAsBoB,OAAO3rD,IAAImnD,IAAIliD,KAAK,GAC1CimD,gBAAgB;AAAA,EAAA,GACf,CAACS,OAAO3rD,IAAIkrD,iBAAiB/D,IAAIliD,OAAOslD,qBAAqB,CAAC,GAC3D;AAAA,IAAC6B;AAAAA,EAAAA,IAAiBxyD,MAAMiC,MAAMof,QAAQqsC,QAAQ,CAAA,GAE9C+E,0BAA0BA,MAAM;AAC3B38C,aAAAA,SAAS48C,SACdL,SAASv8C,mBAAmB68C,oBAC9BN,SAASv8C,QAAQ+e,OAAO;AAAA,EAAA,GAItB+9B,oBAA0Dx/C,CAAU,UAAA;AACpEA,UAAMy/C,WAAW,IACnBJ,wBAAAA,KAEAr/C,MAAMC,kBACNs9C,sBAAsBoB,OAAO3rD,IAAImnD,IAAIliD,KAAK;AAAA,EAAA,GAIxCynD,oBAAoB7qC,kBACvB7U,CAAyB,YAAA;AAClB,UAAA;AAAA,MAAC6F;AAAAA,IAAAA,IAAO7F;AACV6F,YAAQ,YACNq5C,cAAc,oBAAkBG,2BAChCH,cAAc,aAAWb;EAAkB,GAGnD,CAACa,WAAWb,iBAAiB,CAC/B,GAEMsB,iBAAkB3/C,CAA+C,YAAA;AACrEg/C,eAAW,EAAI,GACfF,eAAe9+C,QAAM6iB,OAAOn1B,KAAK;AAAA,EACnC,GAEMkyD,eAAeA,MAAM;AACrBb,gBACFK,gBAAgBjF,IAAInnD,IAAI2rD,OAAO3rD,IAAI6rD,WAAW,GAC9CG,WAAW,EAAK,IAElBzC,oBAAoB;AAAA,EAAA,GAGhBsD,cAAchrC,kBACjB7U,CAA0B,YAAA;AACzB,UAAM8/C,gBAAgB9/C,QAAM8/C,eAAeC,QAAQ,MAAM;AAEzD,KAAI,OAAOD,iBAAkB,YAAY,OAAOA,iBAAkB,cAChEhB,eAAegB,aAAa,GAE5BV,gBAAgBjF,IAAInnD,IAAI2rD,OAAO3rD,IAAI8sD,aAAa;AAAA,EAAA,GAGpD,CAACnB,OAAO3rD,IAAIosD,eAAejF,IAAInnD,EAAE,CACnC,GAEMgtD,aAAanrC,MAAAA,YAAY,MAAM;AACnCtc,cAAUC,UAAUC,UAAUomD,YAAY3T,SAAAA,CAAU;AAAA,EAAA,GACnD,CAAC2T,WAAW,CAAC;AAENz/C,QAAAA,UAAA,QACJ8/C,cAAc,oBAAoBA,cAAc,cAElDnyD,SAAS2T,iBAAiB,WAAWg/C,iBAAiB,IACpDR,cAAc,oBAAoBA,cAAc,oBAElDnyD,SAAS2T,iBAAiB,SAASm/C,WAAW,GAE5CX,cAAc,oBAEhBnyD,SAAS2T,iBAAiB,QAAQs/C,UAAU,GAEvC,MAAM;AACPd,KAAAA,cAAc,oBAAoBA,cAAc,cAClDnyD,SAAS0T,oBAAoB,WAAWi/C,iBAAiB,IACvDR,cAAc,oBAAoBA,cAAc,oBAClDnyD,SAAS0T,oBAAoB,SAASo/C,WAAW,GAC/CX,cAAc,oBAAkBnyD,SAAS0T,oBAAoB,QAAQu/C,UAAU;AAAA,EAEpF,IAAA,CACDpB,QACAM,WACAP,OAAO3rD,IACPorD,kBACA4B,YACAN,mBACAG,aACA1F,IAAIliD,KAAK,CACV;AAED,QAAMgoD,iBAAiBA,MACjBf,cAAc,YAAkB,mBAChCA,cAAc,kBAAwB,oBACtCA,cAAc,mBAAyB,mBAEpC,yBAGHgB,aAAa;AAAA,IACjB,SAAWf;AAAAA,IACX,QAAUS;AAAAA,IACV,aAAeJ;AAAAA,IACf,iBAAiB,CAAC,CAACN;AAAAA,IACnB,eAAeN;AAAAA,IACf,IAAMA;AAAAA,IACN,KAAQ9sD,CAAkB,QAAA;AACxBmtD,eAASv8C,UAAU5Q;AAAAA,IAAAA;AAAAA,EAEvB;AAEA,SAAIsgD,UAAUh9C,SAAS,YAEnBnF,2BAAAA,KAACkwD,GAAAA,QACC,EAAA,GAAID,YACJ,UAAU,MAAM,MAChB,QAAQ,GACR,OAAO;AAAA,IACLE,WAAW;AAAA,IACXp3C,QAAQi3C,eAAe;AAAA,IACvBr7C,SAAS;AAAA,EAEX,GAAA,OAAOuP,KAAKC,UAAUyqC,WAAW,GAEjC,UAAA;AAAA,IAAC3wD,2BAAA,IAAA,UAAA,EAAO,OAAM,QAAO,UAAI,QAAA;AAAA,IACxBA,2BAAA,IAAA,UAAA,EAAO,OAAM,SAAQ,UAAK,QAAA,CAAA;AAAA,EAC7B,EAAA,CAAA,IAKDA,2BAAA,IAAA60B,cAAA,EACKm9B,GAAAA,YACJ,MAAM,GACN,QAAQ,GACR,QAAQ,IACR,OAAO;AAAA,IACLl3C,QAAQi3C,eAAe;AAAA,IACvBr7C,SAAS;AAAA,EAEX,GAAA,OACE,OAAOi6C,eAAgB,YAAY,OAAOA,eAAgB,WACtDA,cACA1qC,KAAKC,UAAUyqC,WAAW,GAEhC,UAAUc,eACV,CAAA;AAEN;AAGO,SAASU,cAAcC,MAAqC;AACjE,QAAMC,WAAWD,KAAK3B,OAAO6B,YAAY,GACnCC,OAAOF,WAAW/B,iBAAiBF,UACnCoC,cAAcH,YAAYD,KAAK3B,OAAOgC,gBAAgB,MAAM,IAAI,IAAI;AAGxE,SAAAzyD,2BAAA,IAAC,QAEC,OAAO;AAAA,IACL6c,MAAMu1C,KAAK3B,OAAOiC,SAAS,MAAM,KAAKnpD;AAAAA,IACtCopD,aAAa,GAAGH,WAAW;AAAA,EAAA,GAE7B,OAAOJ,KAAK3B,OAAOmC,WAElBC,UAAAA,WAAAA,WAAWT,KAAK3B,OAAOqC,UAAUV,MAAMA,KAAKW,cAAc,EAPtDX,GAAAA,KAAKnG,IAAIjsC,SAAStd,MAAM0vD,KAAKttD,EAQpC;AAEJ;ACpMO,MAAMkuD,uBAAuB,GAE9BC,cAAev0D,CAMf,UAAA;AACE,QAAA;AAAA,IAAC+D;AAAAA,IAAsBwpD;AAAAA,IAAK7sD;AAAAA,EAAAA,IAAcV,OAC1CqB,QAAQ,kBACR6C,yBAAyBmkB,MAAAA,QAC7B,MAAMpkB,OAAAA,0BAA0BF,sBAAsBrD,YAAY6sD,IAAIjsC,SAAStd,KAAK3C,KAAK,GACzF,CAAC0C,sBAAsBwpD,IAAIjsC,SAAStd,KAAKtD,UAAU,CACrD,GACM;AAAA,IAACyD;AAAAA,IAAOE;AAAAA,IAAWD;AAAAA,EAAAA,IAAaE,QAAAA,cAAcJ,wBAAwB;AAAA,IAC1EC,OAAO;AAAA,IACPC,WAAW;AAAA,IACXC,WAAW;AAAA,EAAA,CACZ;AACGD,MAAAA;AACF,0CACGtB,SAAK,EAAA,MAAM,GAAG,OAAK,IAAA,UAEpB,cAAA;AAGJ,QAAM0xD,eAAgBrwD,OAAO9C,SAASgD,WAAWhD,SAAS;AAC1D,SACGgC,2BAAAA,KAAAd,GAAAA,MAAA,EAAK,OAAM,UAAS,KAAK,GACxB,UAAA;AAAA,IAACjB,2BAAAA,IAAAmD,OAAA,yBAAA,EAAwB,OAAc,UAAqB,CAAA;AAAA,IAC3DnD,2BAAA,IAAAwB,GAAA,MAAA,EAAK,MAAM,GAAI0xD,UAAa,aAAA,CAAA;AAAA,EAAA,GAC/B;AAEJ,GAEMC,eAAeC,WAAAA,sBACfC,mBAAmB,CAAC,UAAU,UAAU,SAAS,GAOjDC,wBAAwBA,CAACl0D,YAA8Bm0D,kBACpDn0D,WAAWimD,OAAOzgC,OAAgB,CAAC4uC,cAAuBhS,UAAU;AACnE,QAAA;AAAA,IAAC/6C;AAAAA,IAAMS;AAAAA,EAAAA,IAAQs6C;AACrB,MAAI6R,iBAAiBhkC,SAAS5oB,KAAKS,IAAI,GAAG;AACxC,UAAMusD,UAAUN,aAAaO;AAAAA;AAAAA,MAE3BH,gBAAgB,GAAGA,aAAa,IAAI/R,MAAMt6C,IAAI,KAAKs6C,MAAMt6C;AAAAA,MACzD;AAAA,QACEpC,IAAIyuD,gBAAgB,GAAGA,aAAa,IAAI/R,MAAMt6C,IAAI,KAAKs6C,MAAMt6C;AAAAA,QAC7Ds+B,QAAQgc,MAAM/6C,KAAK1G;AAAAA,QACnB4zD,cAAc;AAAA,QACdvB,MAAOwB,CAAS,SAAA5zD,+BAAC,sBAAmB,GAAI4zD,MAAM,WAAWntD,KAAK,CAAA;AAAA,MAAA;AAAA,IAElE;AAEO,WAAA,CAAC,GAAG+sD,cAAcC,OAAO;AAAA,EAAA;AAIlC,SAAIhtD,KAAKS,SAAS,YAAY2sD,MAAAA,mBAAmBptD,IAAI,KAAK,CAAC8sD,gBAClD,CACL,GAAGC,cACHL,aAAarwC,MAAM;AAAA,IAAC0iB,QAAQt+B;AAAAA,IAAM4sD,SAASR,sBAAsB7sD,MAAM+6C,MAAMt6C,IAAI;AAAA,EAAE,CAAA,CAAC,IAIjFssD;AACT,GAAG,EAAE;AAIP,SAASO,uBACPtD,QACyD;AACzD,SAAO,iBAAiBA;AAC1B;AACA,SAASuD,iBACPvD,QACmD;AACnD,SAAO,aAAaA;AACtB;AAEA,MAAMwD,cAAeC,UACZA,KAAKC,QAASzF,SACfqF,uBAAuBrF,GAAG,IACrBA,MAELsF,iBAAiBtF,GAAG,IACfA,IAAIoF,UAAUG,YAAYvF,IAAIoF,OAAO,IAAI,CAE3C,IAAA,EACR;AAGI,SAASM,wBAAwBC,oBAAuC;AACvE5xD,QAAAA,uBAAuBwE,kCAEvB6sD,UAAmB/sC,cAAQ,MAC1BstC,qBAGE,CACLlB,aAAamB,QAAQ;AAAA,IACnBxvD,IAAI;AAAA,IACJ6uD,cAAc;AAAA,IACdnuB,QAASouB,CACP,SAAA7xD,2BAAA,KAAC1B,GACC,KAAA,EAAA,UAAA;AAAA,MAAAL,+BAACstD,GAAAA,YACC,OAAO;AAAA,QAACC,aAAa;AAAA,MAAA,GACrB,eAAeqG,KAAKjzD,MAAM4zD,sBAAAA,GAC1B,UAAUX,KAAKjzD,MAAM6zD,oCAAAA,GAAsC;AAAA,MAG5DZ,KAAKjzD,MAAMmsD,oBAAoB,EAAEC,KAAKzrD;AAAAA,MAAO;AAAA,IAAA,GAChD;AAAA,IAEF8wD,MAAMpG;AAAAA,EAAAA,CACP,GACDmH,aAAaO,SAAS,WAAW;AAAA,IAC/BC,cAAc;AAAA,IACd7uD,IAAI;AAAA,IACJstD,MAAOwB,YAEF5zD,2BAAAA,IAAA,aAAA,KACK4zD,QACJ,sBACA,YAAYS,mBACZ,CAAA;AAAA,EAAA,CAGP,GACD,GAAGf,sBAAsBe,kBAAkB,CAAC,IAhCrC,CAkCR,GAAA,CAAC5xD,sBAAsB4xD,kBAAkB,CAAC,GAEvC,CAACI,wBAAwB,IAA+B1tC,cAC5D,MACEktC,YAAYH,OAAO,EAAElvC,OACnB,CAAC,CAAC8vC,SAASC,mBAAmB,GAAGlE,WAAW;AAC1C,QAAI,CAACA,OAAO3rD,GAAU,OAAA,IAAIN,MAAM,wBAAwB;AACxD,UAAMowD,gBAAgBnE,OAAO3rD;AAG7B,WAAK2rD,OAAOkD,eAKRgB,wBAAwB3B,uBACnB,CAAC;AAAA,MAAC,GAAG0B;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,IAAA,GAAQD,mBAAmB,IAG5D,CAAC;AAAA,MAAC,GAAGD;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,IAAA,GAAOD,sBAAsB,CAAC,IAR3D,CAAC;AAAA,MAAC,GAAGD;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,OAAOD,mBAAmB;AAAA,EASpE,GACA,CAAC,CAAA,GAAI,CAAC,CACR,GACF,CAACb,OAAO,CACV;AAEO,SAAA;AAAA,IAACA;AAAAA,IAASW;AAAAA,EAAwB;AAC3C;AC9KO,SAASI,eAAe;AAAA,EAACl0D;AAA0B,GAAG;AACrD,QAAA;AAAA,IAACtB;AAAAA,EAAAA,IAAKC,OAAAA,eAAe,GACrBw1D,wBACJn0D,MAAM6tD,wBAAwB5kD,OAAQ8kD,CAAQA,QAAAA,IAAIqG,WAAY,CAAA,EAAEzzD,UAAU0xD,sBAEtEgC,oBAAoBruC,MAAAA,YAAY,MAAM;AAC1ChmB,UAAMs0D,sBAAsB;AAAA,KAC3B,CAACt0D,KAAK,CAAC,GAEJu0D,uBAAwBzE,YAA4C,MAAM;AAC9EA,WAAO0E,iBAAiB;AAAA,EAAA,GAGpBC,8BAA+B3E,CAA4C,aAAA;AAC/E,UAAM4E,kBAAkB5E,SAAO6E,aAAa,GACtCC,wBACJ50D,MAAM6tD,sBAAAA,EAAwB5kD,OAAQ8kD,CAAQA,UAAAA,MAAIqG,WAAW,CAAC,EAAEzzD,WAAW;AAErEwzD,WAAAA,yBAAyB,CAACO,mBAAqBE,yBAAyBF;AAAAA,EAClF;AAGE,SAAAr1D,+BAAC0Z,0BAAAA,cACC,QAAQ1Z,2BAAA,IAACkK,oCAAO,MAAK,SAAQ,MAAM7K,EAAE,yBAAyB,GAAE,GAChE,IAAG,mBACH,MACEW,+BAACyZ,GAAAA,QAAK,SAAS,GAAG,YAAY,GAAG,OAAO;AAAA,IAACgC,OAAO;AAAA,EAAG,GACjD,0CAACxa,GAAK,MAAA,EAAA,WAAU,UAAS,QAAO,QAAO,KAAK,GAC1C,UAAA;AAAA,IAAAjB,2BAAAA,IAACwB,WAAK,QAAO,YAAW,MAAM,GAC3BnC,UAAAA,EAAE,0BAA0B,GAC/B;AAAA,IACAW,+BAACiB,GAAAA,QAAK,OAAO;AAAA,MAACkS,MAAM;AAAA,MAAYqiD,WAAW;AAAA,MAAKC,WAAW;AAAA,OACzD,UAACz1D,2BAAAA,IAAAmJ,GAAA,OAAA,EACExI,gBACE+0D,oBACA9rD,OAAQ6mD,CAAWA,aAAAA,SAAOsE,WAAY,CAAA,EACtC3rD,IAAKqnD,CACJ,aAAA1uD,gCAACd,GAAAA,QAAqB,SAAS,GAAG,OAAM,UACtC,UAAA;AAAA,MAAAjB,+BAACstD,GAAAA,YACC,UAAU8H,4BAA4B3E,QAAM,GAC5C,SAASA,SAAO6E,aAAa,GAC7B,UAAUJ,qBAAqBzE,QAAM,GACrC,IAAI,kBAAkBA,SAAO3rD,EAAE,IAC/B,OAAO;AAAA,QAACwvD,SAAS;AAAA,MAAA,GAAS;AAAA,MAE5Bt0D,2BAAAA,IAACK,GAAAA,OAAI,MAAM,GAAG,aAAa,GACzB,UAAAL,2BAAAA,IAACwB,GAAAA,MAAK,EAAA,MAAM,GACV,UAAAxB,2BAAA,IAAC,WAAM,SAAS,kBAAkBywD,SAAO3rD,EAAE,IACxC2rD,UAAAA,SAAOqC,UAAUttB,QAAQwX,SAAAA,EAC5B,CAAA,EACF,CAAA,EACF,CAAA;AAAA,IAAA,EAAA,GAdSyT,SAAO3rD,EAelB,CACD,EAAA,CACL,EACF,CAAA;AAAA,IACA9E,2BAAAA,IAACkK,0BACC,QAAA,EAAA,OAAM,QACN,MAAK,SACL,MAAM7K,EAAE,0BAA0B,GAClC,SAAS21D,kBAAkB,CAAA;AAAA,EAAA,EAAA,CAE/B,EACF,CAAA,GAEF,WAAU,UACV,SAAS;AAAA,IAAC99C,QAAQ;AAAA,EAAA,GAClB;AAEN;AChFA,MAAMy+C,kBAAkBv1D,wBAAOa,OAAI;AAAA;AAAA;AAI5B,SAAA20D,0BAAA;AAAAj3D,QAAAA,IAAAC,uBAAA,CAAA,GACL;AAAA,IAAAuF,OAAAlF;AAAAA,EAAA,IAEI42D,yBADK;AAAA,IAAAC;AAAAA,EAAAA,IAAA72D;AAAgBM,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAKrBnC,KAACS,2BAAA,IAAA+1D,OAAA,cAAA,CAAe,CAAA,GAAAp3D,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAm3D,kBACfn2D,KAAAm2D,kBAAkB91D,+BAACg2D,OAAAA,WAAwB,gBAAI,GAAA,CAAK,GAAAr3D,OAAAm3D,gBAAAn3D,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,SAAAgB,MAFvDC,qCAAC,iBACCL,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IACCI;AAAAA,EAAAA,EAAAA,CACH,GAAkBhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAHlBiB;AAGkB;ACLtB,MAAMq2D,SAAS71D,iBAAO81D,OAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,WAQX,CAAC;AAAA,EAACz6C;AAAK,MAAMA,KAAK;AAAA,eACd,CAAC;AAAA,EAACA;AAAK,MAAMA,KAAK;AAAA,GAG3B06C,eAAe/1D,wBAAO61D,MAAM;AAAA;AAAA;AAAA,GAK5BG,YAAYh2D,iBAAAA,OAAOmwB;AAAAA;AAAAA;AAAAA,IAGrB0lC,MAAM;AAAA;AAAA;AAAA;AAUH,SAASI,wBAAwB33D,OAAqC;AACrE,QAAA;AAAA,IAAC8mC;AAAAA,IAAQ8wB;AAAAA,MAAe53D,OACxB;AAAA,IAACW;AAAAA,EAAKC,IAAAA,OAAAA,eAAAA,GAEN+yD,WAAW7sB,OAAOirB,OAAO6B,YAAY,GAErCiE,cACJD,YAAYE,QAAQ,KAAK,CAAChxB,OAAOirB,OAAOgG,SAAS,OAC/Cz2D,2BAAA,IAACwB,GAAK,MAAA,EAAA,MAAM,GAAG,QAAO,YAAW,cAAa,YAC3CqxD,UAAAA,WAAAA,WAAWrtB,OAAOirB,OAAOqC,UAAUttB,QAAQA,OAAOutB,WAAW,CAAC,EACjE,CAAA,GAGE2D,YAAYrE,WAAW8D,eAAeF,QAEtCU,oBACJnxB,OAAOirB,OAAOsE,WAAAA,MACbuB,YAAYE,UAAU,IAAI,CAAChxB,OAAOirB,OAAOqD,QAAQxyD,SAASkkC,OAAOirB,OAAOgG,SAErEjE,cAAcH,YAAY7sB,OAAOirB,OAAOgC,gBAAgB,MAAM,IAAI,IAAI;AAG1E,SAAAzyD,2BAAA,IAAC,aACC,OAAO;AAAA,IACL6c,MAAM2oB,OAAOirB,OAAOiC,SAAS,MAAM,KAAKnpD;AAAAA,IACxCopD,aAAa,GAAGH,WAAW;AAAA,EAAA,GAG7B,eAAa,UAAUhtB,OAAO1gC,EAAE,IAChC,OAAO0gC,OAAOotB,QAAQ,GAEtB,0CAAC3xD,GAAAA,MAAK,EAAA,SAAQ,iBAAgB,SAAS,GAAG,OAAM,YAC9C,UAAA;AAAA,IAAAjB,2BAAAA,IAAC6B,qCAAQ,OAAO,KAAK,SAAS00D,aAC5B,UAAAv2D,2BAAAA,IAACK,UAAI,OAAO;AAAA,MAACu2D,WAAW;AAAA,IAAA,GAAe,YAAY,GAAG,aAAa,GAChEL,sBACH,CAAA,GACF;AAAA,IACCI,oDACE,WACC,EAAA,UAAA32D,2BAAA,IAAC0Z,wCACC,QACE1Z,2BAAAA,IAACkK,oCACC,cAAc;AAAA,MAACE,SAAS;AAAA,IAAiB,GACzC,MAAK,SACL,MAAMysD,8BACN,eAAY,oBAEhB,CAAA,GACA,IAAG,cACH,SAAS;AAAA,MAAC5/C,WAAW;AAAA,IAAA,GACrB,MACGjX,+BAAAyZ,GAAAA,MAAA,EACC,yCAAChB,0BACC,UAAA,EAAA,MAAMpZ,EAAE,uBAAuB,GAC/B,MAAMixB,MAAAA,WACN,SAAS,MAAMkV,OAAOirB,OAAO0E,mBAAmB,CAAA,GAEpD,GACD,EAEL,CAAA;AAAA,EAAA,GAEJ,EAAA,GAnCK3vB,OAAO1gC,EAoCd;AAEJ;ACzFO,SAASgyD,2BAA2B;AAAA,EAACn2D;AAAqC,GAAG;AAClF,wCACGsC,0BAAAA,2BACC,EAAA,UAAAlB,2BAAAA,KAACd,GAAAA,QAAK,KAAK,GAAG,OAAO,UACnB,UAAA;AAAA,IAAAjB,2BAAA,IAACkK,0BACC,QAAA,EAAA,SAAS,MAAMvJ,MAAMo2D,aAAa,CAAC,GACnC,UAAU,CAACp2D,MAAMq2D,mBAAAA,GACjB,MAAMC,MAAAA,uBACN,cAAc;AAAA,MACZ7sD,SAAS;AAAA,IAAA,GACT;AAAA,IAEHpK,2BAAAA,IAAAkK,0BAAAA,QAAA,EACC,SAAS,MAAMvJ,MAAMu2D,aAAa,GAClC,UAAU,CAACv2D,MAAMq2D,mBAAAA,GACjB,MAAMG,MAAAA,iBACN,cAAc;AAAA,MACZ/sD,SAAS;AAAA,IAAA,GACT;AAAA,IAEJrI,gCAACP,GAAAA,QAAK,OAAO;AAAA,MAAC+tC,YAAY;AAAA,IACvB5uC,GAAAA,UAAAA;AAAAA,MAAMy2D,MAAAA,SAAAA,EAAWC,WAAWC,YAAY;AAAA,MAAE;AAAA,MAAK32D,MAAM42D,aAAa;AAAA,IAAA,GACrE;AAAA,IAECv3D,2BAAAA,IAAAkK,0BAAAA,QAAA,EACC,SAAS,MAAMvJ,MAAM62D,SAAS,GAC9B,UAAU,CAAC72D,MAAM82D,eAAAA,GACjB,MAAMjvC,MAAAA,kBACN,cAAc;AAAA,MACZpe,SAAS;AAAA,IAAA,GACT;AAAA,mCAEHF,0BACC,QAAA,EAAA,SAAS,MAAMvJ,MAAMo2D,aAAap2D,MAAM42D,aAAa,IAAI,CAAC,GAC1D,UAAU,CAAC52D,MAAM82D,kBACjB,MAAMC,8BACN,cAAc;AAAA,MACZttD,SAAS;AAAA,IAAA,GACT;AAAA,IAEJpK,2BAAAA,IAAC,YACC,OAAOW,MAAMy2D,WAAWC,WAAWM,UACnC,UAAW9sD,CAAM,MAAA;AACflK,YAAMi3D,YAAYC,OAAOhtD,EAAE8pB,OAAOn1B,KAAK,CAAC;AAAA,IAAA,GAGzC,UAAA,CAAC,IAAI,IAAI,GAAG,EAAE4J,IAAKuuD,CAClB,aAAA33D,2BAAA,IAAC,YAAsB,OAAO23D,UAC3BA,UADUA,SAAAA,GAAAA,QAEb,CACD,EACH,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;ACtCA,SAASG,mBAAmBpU,WAA6B;AAEvD,SADsBA,UAAU9+B,OAAO,CAACQ,KAAKvY,SAAS;AAAA,IAAC,GAAGuY;AAAAA,IAAK,CAACvY,IAAInK,GAAG,GAAGmK;AAAAA,EAAG,IAAI,CAAA,CAAE;AAErF;AAEA,SAASkrD,iBACP5zD,QACAsD,QACuB;AACvB,UAAQA,OAAOhB,MAAI;AAAA,IACjB,KAAK,iBAAiB;AAEdi9C,YAAAA,YAAYoU,mBAAmBrwD,OAAOi8C,SAAS;AAE9C,aAAA;AAAA,QACL,GAAGv/C;AAAAA,QACHu/C;AAAAA,MACF;AAAA,IAAA;AAAA,IAGF,KAAK,qBAAqB;AACxB,YAAMsU,qBAAqBvwD,OAAOzC;AAE3B,aAAA;AAAA,QACL,GAAGb;AAAAA,QACHu/C,WAAW;AAAA,UACT,GAAGv/C,OAAMu/C;AAAAA,UACT,CAACsU,mBAAmBt1D,GAAG,GAAGs1D;AAAAA,QAAAA;AAAAA,MAE9B;AAAA,IAAA;AAAA,IAGF,KAAK,oBAAoB;AAEjB,YAAA;AAAA,QAAC,CAACvwD,OAAO3C,EAAE,GAAGmzD;AAAAA,QAAG,GAAGC;AAAAA,UAAiB/zD,OAAMu/C;AAE1C,aAAA;AAAA,QACL,GAAGv/C;AAAAA,QACHu/C,WAAWwU;AAAAA,MACb;AAAA,IAAA;AAAA,IAGF,KAAK,oBAAoB;AACvB,YAAMC,kBAAkB1wD,OAAOzC,SACzBF,KAAKqzD,gBAAgBz1D,KAGrB01D,eAAe;AAAA;AAAA,QAEnB,GAJej0D,OAAMu/C,UAAU5+C,EAAE;AAAA;AAAA,QAMjC,GAAGqzD;AAAAA,MACL;AAEO,aAAA;AAAA,QACL,GAAGh0D;AAAAA,QACHu/C,WAAW;AAAA,UACT,GAAGv/C,OAAMu/C;AAAAA,UACT,CAAC5+C,EAAE,GAAGszD;AAAAA,QAAAA;AAAAA,MAEV;AAAA,IAAA;AAAA,IAGF;AACSj0D,aAAAA;AAAAA,EAAAA;AAEb;AAEA,MAAMk0D,iBAAgC;AAAA,EACpCpR,QAAQ,CAAC,WAAW,YAAY,WAAW;AAAA,EAC3CC,eAAe;AAAA,EACfvY,YAAY;AACd;AAQO,SAAA2pB,0BAAAr5D,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAmC;AAAA,IAAAgL;AAAAA,IAAA7E;AAAAA,IAAAyyB;AAAAA,EAAAA,IAAAv4B,IASxCs5D,QAAc,KAAK3uD,MAAM,eAGXrK,KAAAi4B,cAAUppB,OAAAA,8BAAAopB;AAA4C73B,MAAAA;AAAAhB,WAAAY,MAF3CI,KAAA;AAAA,IAAA,GAAAyO,OAAAA;AAAAA,IAAAopB,YAEXj4B;AAAAA,EAAsD,GACnEZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHD84B,QAAAA,SAAetpB,iBAAUxO,EAGxB;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACqD9B,KAAA;AAAA,IAAA8jD,WAAA,CAAA;AAAA,EAAA,GAEtD/kD,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFDwF,QAAAA,CAAAA,QAAAq0D,QAAA,IAA0BC,MAAAA,WAAAV,kBAA6Bn4D,EAEtD,GACDkD,CAAAA,WAAA41D,YAAA,IAAkCnoD,eAAkBknB,eAAe,GACnE,CAAAh4B,OAAA6Q,QAAA,IAA0BC,MAAAA,aAA2B;AAAC3O,MAAAA;AAAAjD,IAAA45D,CAAAA,MAAAA,SAAA55D,SAAA84B,UAAA94B,EAAA,CAAA,MAAAoG,UAErBnD,iBAAA;AAAA,QAAA,CAC1B61B,QAAM;AACTihC,qBAAkB;AAAC;AAAA,IAAA;AAAA,QAAA;AAInB,YAAAC,YAAkBlhC,OAAM5pB,MAAO0qD,OAAOxzD,MAAM;AACpC,eAAA;AAAA,QAAA0B,MAAQ;AAAA,QAAei9C,WAAaiV;AAAAA,MAAAA,CAAI,GAChDD,eAAkB;AAAA,aAAC52D,KAAA;AAEnBwO,eADOuoB,GACK;AAAA,IAAA;AAAA,EAAC,GAEhBl6B,OAAA45D,OAAA55D,OAAA84B,QAAA94B,OAAAoG,QAAApG,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAZD,QAAAi6D,eAAqBh3D;AAYME,MAAAA;AAAAnD,WAAAi6D,gBAGzB92D,YAAAgQ,UAAA;AAEMA,QAAAA,MAAKrL,SAAU,cACjBiyD,eAAiB,GAAC,MACZE,aACNF,GAAAA,eAAkB,IAOhB5mD,MAAKrL,SAAU,eACjBiyD,eAAiB,GAKf5mD,MAAKrL,SAAU,YAAU;AACvBqL,UAAAA,MAAKq+B,eAAgB,UAAQ;AAC/B,cAAAioB,eAAqBtmD,MAAK4qB;AAEtB07B,wBACFI,SAAQ;AAAA,UAAA/xD,MACA;AAAA,UAAmBzB,SAChBozD;AAAAA,QAAAA,CACV;AAAA,MAAA;AAIDtmD,UAAAA,MAAKq+B,eAAgB,eACvBqoB,SAAQ;AAAA,QAAA/xD,MAAQ;AAAA,QAAkB3B,IAAMgN,MAAK1L;AAAAA,MAAAA,CAAY,GAGvD0L,MAAKq+B,eAAgB,UAAQ;AAC/B,cAAAgoB,kBAAwBrmD,MAAK4qB;AAEzBy7B,2BACFK,SAAQ;AAAA,UAAA/xD,MACA;AAAA,UAAkBzB,SACfmzD;AAAAA,QAAAA,CACV;AAAA,MAAA;AAAA,IAAC;AAAA,EAAA,GAITx5D,OAAAi6D,cAAAj6D,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AA9CH,QAAAk6D,sBAA4B/2D;AAgD3B0B,MAAAA;AAAA,OAAA;AAAA,QAAA,CAGMi0B,QAAM;AAAA9xB,UAAAA;AAAAhH,QAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAASiE,MAAAuH,KAAAA,GAAAA,GAAIvO,OAAAgH,OAAAA,MAAAhH,EAAA,CAAA,GAAX6E,KAAOmC;AAAIqP,YAAAA;AAAAA,IAAAA;AAAArP,QAAAA;AAAA,QAAAhH,EAAA,EAAA,MAAA45D,SAAA55D,EAAA,EAAA,MAAA84B,OAAAhrB,cAAA9N,EAAA,EAAA,MAAAoG,QAAA;AAAAa,UAAAA;AAAAjH,QAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAGXkE,MAAAkzD,CAAAA,WACTxoD,SAASuoB,KAAG,GACL3rB,QAAG2rB,KAAG,IACdl6B,QAAAiH,OAAAA,MAAAjH,EAAA,EAAA,GAJagH,MAAA8xB,OAAMhrB,WAAAqB,OAAmByqD,OAAOxzD,QAAMszD,cAAgB,EAACntD,KACrEqC,gBAAW3H,GAGV,CACH,GAACjH,QAAA45D,OAAA55D,EAAA,EAAA,IAAA84B,OAAAhrB,YAAA9N,QAAAoG,QAAApG,QAAAgH;AAAAA,IAAA;AAAAA,YAAAhH,EAAA,EAAA;AALegH,SAAAA;AAAAA,EAAAA;AAHlB,QAAAozD,YAAkBv1D;AAWS,MAAAmC,IAAAC;AAAAjH,IAAAk6D,EAAAA,MAAAA,uBAAAl6D,UAAAo6D,aAEjBpzD,KAAAA,MAAA;AACRilB,UAAAA,MAAYmuC,UAASl4C,UAAWg4C,mBAAmB;AAAC,WAAA,MAAA;AAGlDjuC,WAAGC,YAAA;AAAA,IAAA;AAAA,EAEJjlB,GAAAA,KAAA,CAACizD,qBAAqBE,SAAS,GAACp6D,QAAAk6D,qBAAAl6D,QAAAo6D,WAAAp6D,QAAAgH,IAAAhH,QAAAiH,OAAAD,KAAAhH,EAAA,EAAA,GAAAiH,KAAAjH,EAAA,EAAA,IANnCuS,MAAAA,UAAUvL,IAMPC,EAAgC;AAAC,MAAAC,IAAAE;AAAA,MAAApH,EAAA,EAAA,MAAAwF,OAAAu/C,WAAA;AAKlCsV,UAAAA,UAAgBpzC,OAAAk8B,KAAY39C,OAAKu/C,SAAU,EAAC9+B,OAAAQ,CAAAA,KAAAzN,QAAA;AAExC,YAAA9Y,YAAiBsF,OAAKu/C,UAAW/rC,GAAG,GACpCshD,UAAgBp6D,UAAQ6D,QAASsJ,OAAAA,WAAWnN,UAAQ6D,GAAI,GACxDoC,KAAWm0D,UAAUp6D,UAAQ6D,MAAOsJ,OAAAA,WAAWnN,UAAQ6D,GAAI;AAGvD0iB,aAAAA,IAAItgB,EAAE,KAAA,CAAMm0D,YAGhB7zC,IAAItgB,EAAE,IAAIjG,YACHumB;AAAAA,IAAG,GAAA,EAGd;AACOQ,UAAAA,OAAAszC,OAAcF,OAAO,GAACr6D,EAAA,EAAA,IAAAwF,OAAAu/C,WAAA/kD,QAAAoH;AAAAA,EAAA;AAAAA,UAAApH,EAAA,EAAA;AAAtBoH,OAAAA;AAjBT,QAAAozD,cAAoBtzD;AAkBCI,MAAAA;AAAA,SAAAtH,EAAAw6D,EAAAA,MAAAA,eAAAx6D,UAAAc,SAAAd,EAAA,EAAA,MAAAmE,aAEdmD,MAAA;AAAA,IAAAub,MACC23C;AAAAA,IAAWr2D;AAAAA,IAAArD;AAAAA,EAAAA,GAGlBd,QAAAw6D,aAAAx6D,QAAAc,OAAAd,QAAAmE,WAAAnE,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA,GAJMsH;AAIN;AC3OI,SAASmzD,qBAAqB;AAAA,EAACr1C;AAAkC,GAAG;AACnE,QAAA;AAAA,IAAC5f,OAAAA;AAAAA,EAAS0xD,IAAAA,sBAEV/gB,GAAAA,QAAQ/tB,MAAAA,QAAQ,MAAM;AACpB3d,UAAAA,0BAAUsW,IAAI;AACpBvb,WAAAA,OAAMu4B,OAAO6rB,KAAKzJ,QAASua,CAAAA,MAAMjwD,IAAIsV,IAAI5X,OAAAA,eAAeuyD,EAAE7Q,IAAI9lD,GAAG,GAAG22D,EAAE7Q,GAAG,CAAC,GACnEp/C;AAAAA,KACN,CAACjF,OAAMu4B,OAAO6rB,IAAI,CAAC,GAGhB;AAAA,IAAC/mC;AAAAA,IAAM1e;AAAAA,MAAaw1D,0BAA0B;AAAA,IAClD1uD,QAAQ,aAAama,QAAQ;AAAA,EAAA,CAC9B;AAOM,SAAA;AAAA,IAACvC,MAJUuF,MAAQ,QAAA,MACjBvF,KAAK5X,OAAQiD,SAAQioC,MAAMzzB,IAAIva,OAAAA,eAAe+F,IAAInK,GAAG,CAAC,CAAC,GAC7D,CAAC8e,MAAMszB,KAAK,CAAC;AAAA,IAEShyC;AAAAA,EAAS;AACpC;ACFA,MAAMw2D,kBAAgBl5D,wBAAOa,OAAI;AAAA;AAAA,GAG3Bs4D,iBAAiBn5D,iBAAAA,OAAOmwB;AAAAA;AAAAA;AAAAA,GAIxB7vB,QAAQN,iBAAAA,OAAOO;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAsBrB,SAAS64D,2BAA2B;AAAA,EAClCnF;AACmE,GAAG;AAChE,QAAA;AAAA,IAACmE;AAAAA,IAAUr0D,OAAAA;AAAAA,EAAK,IAAI0xD,yBACpB;AAAA,IAAC/B;AAAAA,IAASW;AAAAA,EAAAA,IAA4BL,wBAAwBC,kBAAkB,GAChF;AAAA,IAAC7yC;AAAAA,MAAQ43C,qBAAqB;AAAA,IAClCr1C,UAAUswC,mBAAmBntD;AAAAA,EAC9B,CAAA,GACK,CAACglD,gBAAgBC,iBAAiB,IAAI57C,MAAAA,SAAwB,IAAI,GAElEkpD,YAAYt1D,OAAMu4B,OAAO6rB,KAAKjnD,QAC9BX,QAAQ+4D,WAAAA,cAAc;AAAA,IAC1Bl4C;AAAAA,IACAsyC;AAAAA,IACA6F,iBAAiBA,WAAAA,gBAAgB;AAAA,IACjCC,qBAAqBA,WAAAA,oBAAoB;AAAA,IACzCC,uBAAuBA,WAAAA,sBAAsB;AAAA;AAAA,IAE7CC,oBAAoB;AAAA,IACpBC,cAAc;AAAA,MACZC,eAAe;AAAA,QAACn9C,MAAM,CAAC,YAAY,SAAS;AAAA,MAAC;AAAA,MAC7Cw6C,YAAY;AAAA,QAACM,UAAU;AAAA,MAAE;AAAA,MACzBsC,kBAAkBxF;AAAAA,IACpB;AAAA,IACAyF,UAAWjO,SAAQA,IAAIvpD;AAAAA,IACvB0pD,MAAM;AAAA,MACJF;AAAAA,MACAC;AAAAA,MACA+E,eAAeA,CAAC9qD,YAAY+zD,SAAS36D,UAAU;AAAA,IAAA;AAAA,EACjD,CACD,GAEK;AAAA,IAACutD;AAAAA,EAAAA,IAAQpsD,MAAMgsD,YAAY;AAEjCz7C,QAAAA,UAAU,OACRsnD,SAAS;AAAA,IAAC/xD,MAAM;AAAA,IAAkBrH,YAAYi1D;AAAAA,EAAmB,CAAA,GAC1D,MAAM;AACF,aAAA;AAAA,MAAC5tD,MAAM;AAAA,MAAqBrH,YAAYi1D;AAAAA,IAAAA,CAAmB;AAAA,EAAA,IAErE,CAACA,oBAAoBmE,QAAQ,CAAC;AAE3B4B,QAAAA,YAAYzzC,MAAAA,YAAaslC,CAE3B,UAAAjsD,2BAAAA,IAACK,GAAAA,OACC,IAAG,MAEH,UAAU,GACV,OAAO;AAAA,IAACi0D,SAAS;AAAA,IAAQ74C,OAAO;AAAA,EAAA,GAE/BwwC,UAAAA,MAAIoO,gBAAgB,EAAEjxD,IAAKgpD,CAC1B,SAAAkI,sBAAA,cAAC,eAAkBlI,EAAAA,GAAAA,MAAM,KAAKnG,MAAIjsC,SAAStd,MAAM0vD,KAAKttD,KACvD,EAAA,GANImnD,MAAIjsC,SAAStd,MAAMupD,MAAInnD,EAO9B,GAED,CAAA,CAAE,GAECy1D,YAAY,UAAUd,SAAS,kBAAkB1M,KAAKzrD,MAAM;AAClE,yCACGg4D,iBAAc,EAAA,WAAU,UAAS,UAAU,GAAG,eAAY,4BACzD,UAAA;AAAA,IAACv3D,2BAAAA,KAAAd,GAAAA,MAAA,EAAK,WAAU,OAAM,OAAM,UAAS,UAAU,GAAG,UAAU,GAAG,SAAQ,iBACrE,UAAA;AAAA,MAAAc,2BAAA,KAACd,GAAK,MAAA,EAAA,WAAU,OAAM,OAAM,UAC1B,UAAA;AAAA,QAAAjB,2BAAA,IAAC,yBAAuB,EAAA;AAAA,uCACvBwB,GAAAA,MAAK,EAAA,MAAM,GAAG,OAAK,IACjB+4D,UACH,UAAA,CAAA;AAAA,MAAA,GACF;AAAA,MACAv6D,+BAAC,kBAAe,MAAa,CAAA;AAAA,IAAA,GAC/B;AAAA,mCACC,gBACC,EAAA,UAAAA,2BAAA,IAAC,2BAA0B,EAAA,OACzB,0CAAC,OACC,EAAA,UAAA;AAAA,MAACA,2BAAA,IAAA,SAAA,EACEW,UAAM65D,MAAAA,gBAAkBpxD,EAAAA,IAAKktD,iBAC3Bt2D,2BAAAA,IAAAK,GAAAA,KAAA,EAAI,IAAG,MACLi2D,UAAYmE,YAAAA,QAAQrxD,IAAKo8B,CACxB,WAAAxlC,2BAAAA,IAAC,yBAEC,EAAA,QACA,YAFKwlC,GAAAA,OAAO1gC,GAIf,EAPewxD,GAAAA,YAAYxxD,EAQ9B,CACD,EACH,CAAA;AAAA,MACA9E,+BAAC,WAAOW,UAAMgsD,MAAAA,YAAAA,EAAcI,KAAK3jD,IAAIgxD,SAAS,EAAE,CAAA;AAAA,IAAA,EAClD,CAAA,EACF,CAAA,GACF;AAAA,IACCp6D,2BAAA,IAAAiB,GAAA,MAAA,EAAK,SAAS,YAAY,SAAS,GAAG,KAAK,GAAG,UAAU,GACvD,UAACjB,2BAAAA,IAAA,4BAAA,EAA2B,OAAa,EAC3C,CAAA;AAAA,EAAA,GACF;AAEJ;AAEO,SAAS06D,sBAAsBh8D,OAAmC;AACjEK,QAAAA,SAASC,OAAAA,aACT+kB,WAAWrlB,MAAM4F,KAAKq2D,gBAEtBv7D,aAAaL,OAAOI,IAAI4kB,QAAQ;AACtC,MAAI,CAAC3kB,cAAc,CAACw7D,MAAAA,qBAAqBx7D,UAAU;AACjD,UAAM,IAAIoF,MAAM,gBAAgBuf,QAAQ,sCAAsC;AAG9E,SAAA/jB,+BAAC66D,OAAAA,kBACC,UAAC76D,2BAAAA,IAAA,4BAAA,EAA+BtB,GAAAA,OAAO,oBAAoBU,YAAW,EACxE,CAAA;AAEJ;AC7IA,MAAM07D,8BAA+B/6C,CAI/B,YAAA;AACE,QAAA;AAAA,IAACsC;AAAAA,IAAWooC;AAAAA,IAActoD;AAAAA,EAAAA,IAAU4d;AAE1C,SAAOsC,WAAWjZ,IAAKrB,CACjBA,SAAAA,KAAKhD,QAAQ5C,SACR;AAAA,IACL,GAAG4F;AAAAA,IACHsL,UAAUlR,WAAW4F,KAAKhD,QAAQ5C;AAAAA,EAAAA,IAIlC4F,MAAMhD,QAAQw8C,KACT;AAAA,IACL,GAAGx5C;AAAAA,IACHsL,UAAU0nD,iBAAQtQ,QAAAA,cAAclJ,IAAIx5C,MAAMhD,QAAQw8C,MAAM56C,OAAW,WAAA;AAAA,EAAA,IAIhE;AAAA,IAAC,GAAGoB;AAAAA,IAAMsL,UAAU;AAAA,EAAA,CAC5B;AACH;AAEO,SAAAs3C,iBAAAnrD,OAAA;AACL,QAAA,CAAAw7D,UAAAC,WAAA,IAAgC1qD,MAAAA,SAAoB/Q,KAAK;AAAC,SACrD07D,+BAAcF,UAAUx7D,KAAK,IAI3Bw7D,YAHLC,YAAYz7D,KAAK,GACVA;AAEM;AAMJ85D,MAAAA,gBAAgBjzC,MAAAA,KAAK,SAAA3nB,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAGhC;AAAA,IAAAmL;AAAAA,IAAAg5C;AAAAA,IAAAz+C,MAAAA;AAAAA,IAAAqlB;AAAAA,MAA2CjrB,OAC3C;AAAA,IAAAwI,MAAAi5C;AAAAA,EAAA,IAAiCjL,oBAEjC;AAAA,IAAAimB,eAAAl8D;AAAAA,IAAA2sD,uBAAArsD;AAAAA,IAAA+iB;AAAAA,IAAAD;AAAAA,IAAAtC;AAAAA,EAAA,IAMIzb,OALF62D,gBAAAl8D,OAAyBsK,SAAT,YAAhBtK,IACA2sD,wBAAArsD,OAAmCgK,SAAA5C,OAAAA,cAAnCpH,IAKF;AAAA,IAAA67D,iBAAAz7D;AAAAA,IAAAiK;AAAAA,EAAAA,IAAgDmW,SAAzCq7C,kBAAAz7D,OAA6B4J,SAAA5C,OAAAA,cAA7BhH,IACPoF,SAAe4lD,iBAAiB5qC,QAAOhb,UAAA08C,YAAuB,GAC9D4Z,aAAmB/2D,MAAI87C;AAAOxgD,MAAAA;AAAA,OAAA;AAAAgC,QAAAA;AAAAjD,MAAAiL,CAAAA,MAAAA,UAAAjL,SAAAoG,UAERnD,MAAA8jD,wBAAwB97C,QAAQ7E,MAAM,GAACpG,OAAAiL,QAAAjL,OAAAoG,QAAApG,OAAAiD,OAAAA,MAAAjD,EAAA,CAAA;AAA3D,UAAAisD,cAAoBhpD;AAChBgpD,QAAAA,aAAWtpD,WAAc,GAAA;AAAE1B,WAAOgrD,YAAW,CAAA;AAAG51C,YAAAA;AAAAA,IAAAA;AACpD,SAAA;AAAA,EAAA;AAHF,QAAA+O,WAAiBnkB,IAMjB,CAAAuC,QAAA0pD,SAAA,IAA4Bj6B,wBAC1B,UACA7N,YAAYzf,MAAIQ,IAChBq2D,aACF,GAEA;AAAA,IAAAp7D;AAAAA,EAAAA,IAAgBoY,OAAAA,YAAY7T,KAAI;AAAC,MAAA1C,IAAAE;AAAAnD,WAAAy8D,mBAIxBt5D,KAAAs5D,iBAAe95D,SAAY,IAAA;AAAA,IAAAigD,IAAQ6Z;AAAAA,EAAe9Z,IAAAA,kBAAoB3iD,OAAAy8D,iBAAAz8D,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA,GAA7EiD,KAAOE;AADTw5D,QAAAA,mBAAyB15D,IAIzB,CAAA6oD,cAAAqB,YAAA,IAAqCl6B,wBACnC,cACA7N,YAAYzf,MAAIQ,IAChBw2D,gBACF;AAAC,MAAA93D,IAAAmC;AAAAhH,IAAAwD,CAAAA,MAAAA,UAAAxD,SAAA0jB,aAAA1jB,EAAA,CAAA,MAAA8rD,gBAIG9kD,KAAAm1D,4BAAA;AAAA,IAAAz4C;AAAAA,IAAAooC;AAAAA,IAAAtoD;AAAAA,EAAAA,CAIC,GAACxD,OAAAwD,QAAAxD,OAAA0jB,WAAA1jB,OAAA8rD,cAAA9rD,OAAAgH,MAAAA,KAAAhH,EAAA,CAAA,GAAA6E,KAJFmC;AAFJ41D,QAAAA,6BAAmC/3D,IAUnCg4D,oBAA0Br5D,WAAW;AAAWyD,MAAAA;AAAAjH,IAAA,CAAA,MAAA68D,qBAAA78D,EAAAwD,EAAAA,MAAAA,UAAAxD,EAAAD,EAAAA,MAAAA,SAAAC,UAAA8rD,gBAC7B7kD,KAAA41D,oBAChBlB,oCAAA,uBAAA,EAA0B57D,GAAAA,OAAY,KAAAA,MAAK4F,KAAAQ,GAAQ,CAAA,IAEpD9E,2BAAAA,IAAC,oBAAgB,GAAKtB,OAAkB+rD,WAAAA,cAAsBtoD,OAC/D,CAAA,GAAAxD,OAAA68D,mBAAA78D,QAAAwD,QAAAxD,QAAAD,OAAAC,QAAA8rD,cAAA9rD,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAJDmjB,QAAAA,aAAmBlc,IAOKC,KAAAw1D,cAAclb;AAAgBp6C,MAAAA;AAAApH,YAAA68D,qBAK3Cz1D,MAAAy1D,oBAAiB,CAAA,IAAA;AAAA,IAAAtoD,iBAAA;AAAA,IAAAE,UAAA;AAAA,EAAA,GAA6CzU,QAAA68D,mBAAA78D,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,IAAA,EAAA,MAAA2F,MAAA87C,UAGlEn6C,MAAA4mB,QAIAluB,EAAA,EAAA,IAAA2F,MAAA87C,QAAAzhD,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,IAAAoL,EAAAA,MAAAA,SAAApL,EAAAitD,EAAAA,MAAAA,yBAAAjtD,EAAA2jB,EAAAA,MAAAA,kBAAA3jB,UAAA48D,8BAAA58D,EAAA,EAAA,MAAAktD,aAAAltD,EAAA,EAAA,MAAAmtD,gBAAAntD,EAAA,EAAA,MAAAoB,SAEDwI,qCAAC,YACQwB,EAAAA,OACgB6hD,uBACPtpC,gBACLi5C,uCACA1P,WACGC,cACP/rD,MACP,CAAA,GAAApB,QAAAoL,OAAApL,QAAAitD,uBAAAjtD,QAAA2jB,gBAAA3jB,QAAA48D,4BAAA58D,QAAAktD,WAAAltD,QAAAmtD,cAAAntD,QAAAoB,OAAApB,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,YAAAokD,cAAApkD,EAAAgrB,EAAAA,MAAAA,WAAAhrB,EAAAmjB,EAAAA,MAAAA,cAAAnjB,EAAA,EAAA,MAAAoH,OAAApH,UAAAsH,OAAAtH,EAAA,EAAA,MAAA4J,OArBJM,sCAAC,MACS,EAAA,WAAA,oBACJ8gB,aACM,eAAG,GACR5jB,KACKg9C,UAAS,YAElB98C,UAAAA;AAAAA,IAAAA;AAAAA,IAMDsC;AAAAA,IASCuZ;AAAAA,EAAAA,EAAAA,CACH,GAAOnjB,QAAAokD,YAAApkD,QAAAgrB,SAAAhrB,QAAAmjB,YAAAnjB,QAAAoH,KAAApH,QAAAsH,KAAAtH,QAAA4J,KAAA5J,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAA,SAAApK,EAAAkK,EAAAA,MAAAA,OAAAlK,UAAAkH,MAxBTkD,MAAC/I,2BAAAA,IAAAsgD,OAAAA,gBAAqB,EAAA,MAAAz6C,IACpBgD,UAwBF,IAAA,CAAA,GAAiBlK,QAAAkK,KAAAlK,QAAAkH,IAAAlH,QAAAoK,OAAAA,MAAApK,EAAA,EAAA,GAzBjBoK;AAyBiB,CAEpB;AACDuwD,cAAcljD,cAAc;AClJrB,MAAMqlD,uBAAuBj3D,MAAM;AAAA,EAIxCk3D,YACE77D,SACA87D,YACAC,aACAC,MACA;AACMh8D,UAAAA,OAAO,GACb,KAAKqH,OAAO;AACZ,UAAMw9C,UAAU,OAAOkX,cAAgB,MAAc,cAAc,GAAGA,WAAW;AAC5E19C,SAAAA,QAAQy9C,cAAc,CAAA,GAAIp/B,OAAOs/B,OAAO,GAAGnX,OAAO,KAAKmX,IAAI,MAAMnX,OAAO;AAAA,EAAA;AAAA,EAG/EoX,YAAYh3D,IAA8B;AACxC,WAAA,KAAKi3D,SAASj3D,IACP;AAAA,EAAA;AAEX;AAGYk3D,IAAAA,oCAAAA,WAAQ;AAARA,SAAAA,UAAQ,cAAA,8BAARA,UAAQ,iBAAA,4BAARA,UAAQ,kBAAA,6BAARA,UAAQ,oBAAA,+BAARA,UAAQ,qBAAA,qCAARA,UAAQ,uBAAA,kCAARA,UAAQ,yBAAA,oCAARA,UAAQ,uBAAA,kCAARA,UAAQ,wBAAA,mCAARA,UAAQ,2BAAA,sCAARA,UAAQ,4BAAA,uCAARA,UAAQ,4BAAA,uCAARA,UAAQ,+BAAA,0CAARA,UAAQ,uCAAA,kDAARA,UAAQ,yCAAA,oDAARA;AAAQ,EAAA,CAAA,CAAA;ACtBb,MAAMC,sBAAoC;AAAA,EAC/Cl8D,OAAO;AAAA,EACP6iB,MAAM;AAAA,IACJ7iB,OAAO;AAAA,MACL4X,KAAK;AAAA,MACLukD,IAAI/9D;AAAAA,IAAAA;AAAAA,EAER;AAAA,EACA+I,MAAM;AAAA,EACNq6C,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAchyC,WAAW;AAAA,EAAO,CAAA;AAC/C,GAEa2sD,sBAAoC;AAAA,EAC/Cp8D,OAAO;AAAA,EACP6iB,MAAM;AAAA,IACJ7iB,OAAO;AAAA,MACL4X,KAAK;AAAA,MACLukD,IAAI/9D;AAAAA,IAAAA;AAAAA,EAER;AAAA,EACA+I,MAAM;AAAA,EACNq6C,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAchyC,WAAW;AAAA,EAAO,CAAA;AAC/C,GAEa4sD,mCAAmCH,qBAEnCI,2BAA2C;AAAA,EACtDJ;AAAAA;AAAAA,EACAE;AAAAA;AAAqB;ACpBPG,SAAAA,uBACdv0D,MACAgC,OACAmU,MACU;AACHnW,SAAAA,gBAAgBw0D,kBAAkBx0D,KAAKy0D,UAAU;AAAA,IAACt+C;AAAAA,IAAMnU;AAAAA,EAAM,CAAA,IAAIhC;AAC3E;AAwDO,MAAMw0D,gBAAkD;AAAA;AAAA,EAI7Db,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7Bj1D,OAAOA,QAA6C;AAClD,WAAO,KAAKk1D,MAAM;AAAA,MAACl1D;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5Bm1D,YAAuC;AACrC,WAAO,KAAKF,KAAKj1D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBuQ,OAAOA,QAAiC;AACtC,WAAO,KAAK2kD,MAAM;AAAA,MAAC3kD;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B6L,YAAuC;AACrC,WAAO,KAAK64C,KAAK1kD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBjY,MAAMA,OAAgC;AACpC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3B88D,WAA+B;AAC7B,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB6iB,KAAKA,MAAgD;AACnD,WAAO,KAAK+5C,MAAM;AAAA,MAAC/5C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1Bk6C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK95C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBE,MAAMA,OAAgC;AACpC,WAAO,KAAK65C,MAAM;AAAA,MAAC75C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3Bi6C,WAAqC;AACnC,WAAO,KAAKL,KAAK55C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB5gB,KAAKA,MAA8D;AACjE,WAAO,KAAKy6D,MAAM;AAAA,MAACz6D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1B86D,UAAmC;AACjC,WAAO,KAAKN,KAAKx6D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB6C,OAAOA,QAA6C;AAClD,WAAO,KAAK43D,MAAM;AAAA,MAAC53D;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5Bk4D,YAAuC;AACrC,WAAO,KAAKP,KAAK33D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBke,aAAaA,eAAe,IAAuB;AACjD,WAAO,KAAK05C,MAAM;AAAA,MAAC15C,cAActU,CAAQsU,CAAAA;AAAAA,IAAAA,CAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzDi6C,kBAAmD;AACjD,WAAO,KAAKR,KAAKz5C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBu5C,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACpD,UAAA;AAAA,MAACne;AAAAA,MAAO0H;AAAAA,MAAQuQ;AAAAA,QAAU,KAAK0kD;AACrC,QAAI,CAAC38D,OAAO;AACV,YAAM87D,OAAO,OAAOp0D,UAAW,WAAW,YAAYA,MAAM,MAAM8B;AAC5D,YAAA,IAAIkyD,eACR,qCACA17C,QAAQ7B,MACR6B,QAAQhW,OACR8xD,IACF,EAAEC,YAAYE,SAASmB,cAAc;AAAA,IAAA;AAGnC,QAAA,CAAC11D,UAAU,CAACuQ;AACd,YAAM,IAAIyjD,eACR,8DAA8D,KAAKiB,KAAK38D,KAAK,IAC7EggB,QAAQ7B,MACR6B,QAAQhW,OACR,IAAIhK,KAAK,GACX,EAAE+7D,YAAYE,SAASoB,yBAAyB;AAGlD,QAAIplD,UAAUvQ;AACZ,YAAM,IAAIg0D,eACR,yCACA17C,QAAQ7B,MACR6B,QAAQhW,OACR,IAAIhK,KAAK,GACX,EAAE+7D,YAAYE,SAASqB,oCAAoC;AAGtD,WAAA;AAAA,MAAC,GAAG,KAAKX;AAAAA,MAAM38D;AAAAA,IAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B48D,MAAMW,UAA6C;AACjD,UAAMC,UAAU,IAAIhB,gBAAgB,KAAKE,QAAQ;AACjDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AAUO,SAASC,oBACd50D,SACA;AAAA,EAAC24C;AAAAA,EAAIxhD;AAAAA,EAAO6iB;AAAkB,GAC9BkkC,oBACiB;AACjB,MAAIyW,UAAU,IAAIhB,gBAAgB3zD,OAAO,EACtCka,MAAM,SAAS,EACf/iB,MACC6I,QAAQga,KAAKvjB,EAAE,oCAAoC;AAAA;AAAA,IAEjD68D,IAAI;AAAA,IACJn1B,SAAS;AAAA,MAAChnC;AAAAA,IAAAA;AAAAA;AAAAA,EAAK,CAChB,CACH,EACCmC,KAAKu7D,MAAQ,QAAA,EACbh2D,OAAO,cAAc,EACrB1C,OAAO;AAAA,IAACw8C;AAAAA,IAAIuF;AAAAA,EAAAA,CAAmB;AAElC,SAAIlkC,SACF26C,UAAUA,QAAQ36C,KAAKA,IAAI,IAGtB26C;AACT;AAGgBG,SAAAA,kCACd90D,SACAmb,UACmB;AACb,QAAA;AAAA,IAAChlB;AAAAA,EAAAA,IAAU6J,SACXnC,OAAO,OAAOsd,YAAa,WAAWhlB,OAAOI,IAAI4kB,QAAQ,IAAIA;AAC/D,SAAA,CAACtd,QAAQ,EAAE,eAAeA,QACrB,CAAA,KAIPA,KAAKk3D,YAAYl3D,KAAKk3D,UAAUphC,OAAO8/B,wBAAwB,IAAIA,0BACnEjzD,IAAKi9C,CAAAA,aACLmX,oBAAoB50D,SAASy9C,UAAUD,sBAAsB3/C,MAAM4/C,SAAS9E,EAAE,CAAC,CACjF;AACF;AC3TgBqc,SAAAA,4BACd71D,MACAgC,OACAmU,MACe;AACRnW,SAAAA,gBAAgB81D,uBAAuB91D,KAAKy0D,UAAU;AAAA,IAACt+C;AAAAA,IAAMnU;AAAAA,EAAM,CAAA,IAAIhC;AAChF;AAmBO,MAAM81D,qBAA4D;AAAA;AAAA;AAAA,EAQvEnC,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAK/5D,MAAMg6D,OAAOA,KAAK53D,KAAK,IAC5B,KAAKg5D,SAASpB,OAAOA,KAAK38D,QAAQ,IAClC,KAAKg+D,QAAQrB,OAAOA,KAAK95C,OAAOrZ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQlCzE,GAAGA,IAAkC;AAC5B,WAAA,IAAI+4D,qBAAqB,KAAKpB,UAAU;AAAA,MAAC33D;AAAAA,MAAI/E,OAAO,KAAK+9D;AAAAA,MAAQl7C,MAAM,KAAKm7C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3FC,QAAgB;AACd,WAAO,KAAKt7D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQd3C,MAAMA,OAAqC;AAClC,WAAA,IAAI89D,qBAAqB,KAAKpB,UAAU;AAAA,MAAC18D;AAAAA,MAAO+E,IAAI,KAAKpC;AAAAA,MAAKkgB,MAAM,KAAKm7C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxFlB,WAAmB;AACjB,WAAO,KAAKiB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQdl7C,KAAKA,MAAqD;AACjD,WAAA,IAAIi7C,qBAAqB,KAAKpB,UAAU;AAAA,MAAC75C;AAAAA,MAAM9d,IAAI,KAAKpC;AAAAA,MAAK3C,OAAO,KAAK+9D;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzFhB,UAA+C;AAC7C,WAAO,KAAKiB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQdvB,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAoB;AACzD,UAAA;AAAA,MAACxb;AAAAA,MAAKo7D;AAAAA,MAAQC;AAAAA,IAAAA,IAAS;AAC7B,QAAI,CAACr7D;AACG,YAAA,IAAI+4D,eACR,0CACA17C,QAAQ7B,MACR6B,QAAQhW,OACR+zD,MACF,EAAEhC,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACH;AACG,YAAA,IAAIrC,eACR,6CACA17C,QAAQ7B,MACRxb,GACF,EAAEo5D,YAAYE,SAASmB,cAAc;AAGhC,WAAA;AAAA,MACLr4D,IAAIpC;AAAAA,MACJ3C,OAAO+9D;AAAAA,MACPl7C,MAAMm7C;AAAAA,IACR;AAAA,EAAA;AAEJ;AClIO,MAAMG,oBAAoB;AAEjBC,SAAAA,WACdr5D,IACA62D,YACAC,aACQ;AACR,MAAI,OAAO92D,MAAO;AAChB,UAAM,IAAI22D,eACR,iDAAiD,OAAO32D,EAAE,IAC1D62D,YACAC,WACF;AAGF,QAAM,CAACwC,cAAc,IAAIt5D,GAAGu5D,MAAMH,iBAAiB,KAAK,CAAE;AACtDE,MAAAA;AACF,UAAM,IAAI3C,eACR,+CAA+C2C,cAAc,KAC7DzC,YACAC,WACF;AAGE92D,MAAAA,GAAGm4C,WAAW,UAAU;AAC1B,UAAM,IAAIwe,eACR,gDACAE,YACAC,WACF;AAGK92D,SAAAA;AACT;AC/BgBw5D,SAAAA,mBAAmBv+D,OAAe+E,IAAqB;AACjEA,MAAAA;AACKA,WAAAA;AAGHy5D,QAAAA,aAAaC,2BAAUz+D,KAAK;AAE3Bm+D,SAAAA,kBAAkBO,KAAKF,UAAU,IAAIC,2BAAUE,6BAAQ3+D,KAAK,CAAC,IAAIw+D;AAC1E;ACqEO,MAAMI,iBAAoD;AAAA;AAAA,EAI/DjD,YAAYgB,MAAuB;AACjC,SAAKA,OAAO;AAAA,MAAC38C,SAAS,CAAC;AAAA,MAAG,GAAI28C,QAAc,CAAA;AAAA,IAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjD53D,GAAGA,IAA8B;AAC/B,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxBk5D,QAAkC;AAChC,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAAiC;AACrC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,MAAO+E,IAAIw5D,mBAAmBv+D,OAAO,KAAK28D,KAAK53D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxE+3D,WAAwC;AACtC,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB6iB,KAAKA,MAAiD;AACpD,WAAO,KAAK+5C,MAAM;AAAA,MAAC/5C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bk6C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK95C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBnL,MAAMA,OAAgC;AACpC,WAAO,KAAKklD,MAAM;AAAA,MAACllD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3BmnD,WAAwC;AACtC,WAAO,KAAKlC,KAAKjlD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBga,UAAUA,YAA4C;AACpD,WAAO,KAAKkrC,MAAM;AAAA,MAAClrC,WAAAA;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BotC,eAAgD;AAC9C,WAAO,KAAKnC,KAAKjrC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB1R,QAAQA,SAAqD;AAC3D,WAAO,KAAK48C,MAAM;AAAA,MAAC58C;AAAAA,IAAAA,CAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM7B++C,aAAyD;AAChD,WAAA,KAAKpC,KAAK38C,WAAW,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/BsC,UAAUA,WAA6D;AACrE,WAAO,KAAKs6C,MAAM;AAAA,MAACt6C;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BuyB,eAAgD;AAC9C,WAAO,KAAK8nB,KAAKr6C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBC,eAAeA,gBAA4E;AACzF,WAAO,KAAKq6C,MAAM;AAAA,MAACr6C;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpCy8C,oBAA0D;AACxD,WAAO,KAAKrC,KAAKp6C;AAAAA,EAAAA;AAAAA,EAGnB08C,gBAAgBA,iBAAkD;AAChE,WAAO,KAAKrC,MAAM;AAAA,MAACqC;AAAAA,IAAAA,CAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrCxC,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAgB;AACrD,UAAA;AAAA,MAACpZ;AAAAA,MAAI/E;AAAAA,MAAO0X;AAAAA,MAAOsI,SAASk/C;AAAAA,MAAkBxtC,WAAAA;AAAAA,QAAa,KAAKirC;AACtE,QAAI,CAAC53D;AACG,YAAA,IAAI22D,eACR,mDACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACxsC;AACG,YAAA,IAAIgqC,eACR,0DACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASiC,WAAW;AAG7B,WAAA;AAAA,MACLn5D,IAAIq5D,WAAWr5D,IAAIib,QAAQ7B,MAAM6B,QAAQhW,KAAK;AAAA,MAC9ChK;AAAAA,MACA0G,MAAM;AAAA,MACNgR;AAAAA,MACAga,WAAAA;AAAAA,MACAutC,iBAAiB,KAAKtC,KAAKsC;AAAAA,MAC3Bj/C,SAASk/C,oBAAoB,CAAC;AAAA,MAC9B58C,YAAY,KAAKq6C,KAAKr6C,aAAa,CAAA,GAAIjZ,IAAI,CAACrB,MAAMkX,MAChDq9C,uBAAuBv0D,MAAMkX,GAAGc,QAAQ7B,IAAI,CAC9C;AAAA,MACAoE,iBAAiB,KAAKo6C,KAAKp6C,kBAAkB,CAAIlZ,GAAAA,IAAI,CAACrB,MAAMkX,MAC1D2+C,4BAA4B71D,MAAMkX,GAAGc,QAAQ7B,IAAI,CACnD;AAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFy+C,MAAMW,UAAiD;AAC/CC,UAAAA,UAAU,IAAIoB,iBAAiB;AACrCpB,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AC/PsB2B,eAAAA,uBACpBC,WACAr6D,IAC6B;AACvBwH,QAAAA,QAAQ,2CACRlG,aAAaU,OAAAA,eAAehC,EAAE,GAC9BiH,UAAUC,kBAAWlH,EAAE;AAQ7B,UANc,MAAMq6D,UAAU/wD,OAA6B,6BAAA,EAAEP,MAC3DvB,OACA;AAAA,IAAClG;AAAAA,IAAY2F;AAAAA,EAAAA,GACb;AAAA,IAACS,KAAK;AAAA,EACR,CAAA,GAEa,CAAC;AAChB;ACIO,MAAe4yD,mBAEtB;AAAA;AAAA,EAEY1C,OAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB53D,GAAGA,IAA0B;AAC3B,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAKxBk5D,QAAqB;AACnB,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAA6B;AACjC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,MAAO+E,IAAI,KAAK43D,KAAK53D,MAAMu6D,2BAAUt/D,KAAK;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjE88D,WAA2B;AACzB,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBmC,KAAKA,MAA2D;AAC9D,WAAO,KAAKy6D,MAAM;AAAA,MAACz6D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1B86D,UAAyB;AACvB,WAAO,KAAKN,KAAKx6D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBs6D,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACpD,UAAA;AAAA,MAACpZ;AAAAA,MAAI/E;AAAAA,MAAOmC;AAAAA,QAAQ,KAAKw6D;AAC/B,QAAI,CAAC53D;AACG,YAAA,IAAI22D,eACR,kCACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACl+D;AACG,YAAA,IAAI07D,eACR,qCACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASmB,cAAc;AAGhC,WAAA;AAAA,MACLr4D,IAAIq5D,WAAWr5D,IAAIib,QAAQ7B,MAAM6B,QAAQhW,KAAK;AAAA,MAC9ChK;AAAAA,MACAmC;AAAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAQJ;AAEA,SAASo9D,eAAer8B,MAAyE;AACxF,SAAA,OAAQA,KAAgCu5B,aAAc;AAC/D;AAGgB+C,SAAAA,mBACdx3D,MACAgC,OACAmU,MACM;AACN,SAAOohD,eAAev3D,IAAI,IAAIA,KAAKy0D,UAAU;AAAA,IAACt+C;AAAAA,IAAMnU;AAAAA,EAAM,CAAA,IAAIhC;AAChE;ACzGA,MAAMy3D,kBAAmB9C,CACvBr6D,SAAAA,OAAAA,SAASq6D,IAAI,KAAKA,KAAKj2D,SAAS;AAM3B,MAAMg5D,6BAA6BL,mBAGxC;AAAA;AAAA,EAIA1D,YAKEgE,iBACA;AACMhD,UAAAA,OAAO8C,gBAAgBE,eAAe,IAAI;AAAA,MAAC,GAAGA;AAAAA,IAAAA,IAAmB;AAAA,MAAC3/C,SAAS,CAAA;AAAA,IAAE;AAE7E,UAAA,GACN,KAAK28C,OAAOA;AAEZ,UAAMiD,gBACJ,OAAOD,mBAAoB,aAAaA,kBAAkB,KAAKhD,KAAKjrC;AAElEkuC,sBAEF,KAAKjD,OAAO,KAAKjrC,UAAUkuC,aAAa,EAAEjD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ9CjrC,UAAUA,YAAoD;AAC5D,WAAO,KAAKkrC,MAAM;AAAA,MAAClrC,WAAAA;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BotC,eAAoD;AAClD,WAAO,KAAKnC,KAAKjrC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB1R,QAAQA,SAAqD;AAC3D,WAAO,KAAK48C,MAAM;AAAA,MAAC58C;AAAAA,IAAAA,CAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM7B++C,aAAuC;AAC9B,WAAA,KAAKpC,KAAK38C,WAAW,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/By8C,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAoB;AAC/D,UAAMxD,OAAO,MAAM8hD,UAAUz8C,OAAO,GAE9B0R,aAAY,KAAKirC,KAAKjrC;AAC5B,QAAI,OAAOA,cAAc;AACjB,YAAA,IAAIgqC,eACR,8EACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAAS4D,kBAAkB;AAGpC,WAAA;AAAA,MACL,GAAGllD;AAAAA,MACH+W,WAAAA;AAAAA,MACA1R,SAAS,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,MAC/BtZ,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFk2D,MAAMW,UAAyD;AACvDC,UAAAA,UAAU,IAAIkC,qBAAqB;AACzClC,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACvGO,MAAMsC,wBAAwBT,mBAAuD;AAAA;AAAA,EAI1F1D,YAAYgB,MAA0B;AAC9B,UAAA,GACN,KAAKA,OAAO;AAAA,MAAC53D,IAAI;AAAA,MAAU/E,OAAO;AAAA,MAAU,GAAI28D,QAAc,CAAA;AAAA,IAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQnEF,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACnD,WAAA;AAAA,MACL,GAAG,MAAMs+C,UAAUz8C,OAAO;AAAA,MAC1BtZ,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQFk2D,MAAMW,UAA+C;AAC7CC,UAAAA,UAAU,IAAIsC,gBAAgB;AACpCtC,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACrCauC,MAAAA,OAAQpD,CAA8C,SAAA,IAAImD,gBAAgBnD,IAAI,GAG9EjrC,YACXiuC,CAAAA,oBACyB,IAAID,qBAAqBC,eAAe;;;;;;;;;;ACMnE,MAAMK,8BACJA,CAAC;AAAA,EAACC;AAAAA,EAAqBb;AAA2B,MAClD,OAAOc,QAAQ;AAAA,EAACl7D;AAAAA,EAAQmZ;AAAI,MAAM;AAChC,MAAIzX,OAAO1B,OAAO0B;AAElB,QAAMk1D,aAAaz9C,KAAKja,MAAM,GAAGia,KAAK5c,SAAS,CAAC,GAC1C4+D,iBAAiBhiD,KAAKA,KAAK5c,SAAS,CAAC;AAM3C,MAJKmF,SACHA,OAAO,MAAMy4D,uBAAuBC,WAAWc,MAAM,IAGnD,CAACx5D;AACH,UAAM,IAAIg1D,eACR,mEACAE,YACAuE,cACF;AAGF,SAAOF,oBAAoB;AAAA,IAAC55D,YAAY65D;AAAAA,IAAQ7gE,YAAYqH;AAAAA,EAAAA,CAAK;AACnE;AA4CK,MAAM05D,gBAAsD;AAAA;AAAA,EAIjEzE,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B53D,GAAGA,IAA6B;AAC9B,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxBk5D,QAAmC;AACjC,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAAgC;AACpC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,MAAO+E,IAAIw5D,mBAAmBv+D,OAAO,KAAK28D,KAAK53D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxE+3D,WAAyC;AACvC,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB6iB,KAAKA,MAAgD;AACnD,WAAO,KAAK+5C,MAAM;AAAA,MAAC/5C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bk6C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK95C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBnL,MAAMA,OAA+B;AACnC,WAAO,KAAKklD,MAAM;AAAA,MAACllD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3BmnD,WAAyC;AACvC,WAAO,KAAKlC,KAAKjlD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBrR,WAAWA,YAAqC;AAExCg6D,UAAAA,SAAS,KAAK1D,KAAK53D,MAAMsB;AAC/B,WAAO,KAAKu2D,MAAM;AAAA,MAChB73D,IAAIs7D;AAAAA,MACJrgD,SAAS;AAAA,QACP,GAAI,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,QAC1Bjb,IAAIsB;AAAAA,MAAAA;AAAAA,IACN,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHi6D,gBAAgD;AACvC,WAAA,KAAK3D,KAAK38C,SAASjb;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5B1F,WAAWiH,cAAoD;AAC7D,WAAO,KAAKs2D,MAAM;AAAA,MAChB58C,SAAS;AAAA,QACP,GAAI,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,QAC1BtZ,MAAM,OAAOJ,gBAAiB,WAAWA,eAAeA,aAAaa;AAAAA,MAAAA;AAAAA,IACvE,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHo5D,gBAAkD;AACzC,WAAA,KAAK5D,KAAK38C,SAAStZ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ5B85D,qBAAqBv8C,YAAoBG,YAAuD;AAC9F,WAAO,KAAKw4C,MAAM;AAAA,MAChB58C,SAAS;AAAA,QACP,GAAI,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,QAC1BxZ,UAAUyd;AAAAA,QACV01B,oBAAoBv1B;AAAAA,MAAAA;AAAAA,IACtB,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHq8C,0BAAgE;AACvD,WAAA,KAAK9D,KAAK38C,SAASxZ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAM5Bk6D,oCAAoF;AAC3E,WAAA,KAAK/D,KAAK38C,SAAS25B;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BvX,MAAMA,QAAgD;AACpD,WAAO,KAAKw6B,MAAM;AAAA,MAACx6B,OAAAA;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3Bu+B,WAAmC;AAC1B,WAAA,KAAKhE,KAAKv6B,SAAS,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9Bq6B,UAAU;AAAA,IAACt+C,OAAO,CAAE;AAAA,IAAEnU;AAAAA,IAAO8xD;AAAAA,EAAAA,IAA0B;AAAA,IAAC39C,MAAM,CAAA;AAAA,EAAA,GAAmB;AAC/E,UAAMyiD,QAAQziD,KAAKnU,SAASmU,KAAK5c,SAAS,CAAC,GAGrCwD,KAAK,KAAK43D,KAAK53D,MAAO67D,SAAS,GAAGA,KAAK,MAAO,IAC9C5gD,UAAoC;AAAA,MACxCjb;AAAAA,MACA2B,MAAM8C;AAAAA,MACNhD,UAAUgD;AAAAA,MACVmwC,oBAAoBnwC;AAAAA,MACpB,GAAG,KAAKmzD,KAAK38C;AAAAA,IACf;AAEI,QAAA,OAAOjb,MAAO,YAAY,CAACA;AACvB,YAAA,IAAI22D,eACR,uCACAv9C,MACAnU,OACA8xD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGhC,QAAA,CAACl+C,WAAW,CAACA,QAAQjb;AACjB,YAAA,IAAI22D,eACR,qDACAv9C,MACApZ,IACA+2D,IACF,EAAEC,YAAYE,SAAS4E,oBAAoB;AAGzC,QAAA,CAAC7gD,WAAW,CAACA,QAAQtZ;AACvB,YAAM,IAAIg1D,eACR,+DACAv9C,MACApZ,IACA+2D,IACF;AAGI15B,UAAAA,UAAS,KAAKu6B,KAAKv6B,SAAS,KAAKu6B,KAAKv6B,MAAM7gC,SAAS,IAAI,KAAKo7D,KAAKv6B,QAAQ,CAAC29B,MAAM,GAAG12D,IACzF,CAACrB,MAAMkX,MAAMsgD,mBAAmBx3D,MAAMkX,GAAGf,IAAI,CAC/C,GAEM2iD,UAAU1+B,OAAM/4B,IAAK65B,UAASA,KAAKn+B,EAAE,GACrCg8D,QAAQC,cAAAA,QAAKF,QAAQj3D,OAAO,CAACkjC,QAAQ7tB,MAAM4hD,QAAQxxC,SAASyd,QAAQ7tB,IAAI,CAAC,CAAC,CAAC;AACjF,QAAI6hD,MAAMx/D,SAAS;AACX,YAAA,IAAIm6D,eACR,+CAA+CqF,MAAMn4D,KAAK,KAAK,CAAC,IAChEuV,MACApZ,IACA+2D,IACF;AAGK,WAAA;AAAA,MACL,GAAG,KAAKa;AAAAA,MACRjlD,OAAO,KAAKilD,KAAKjlD,SAASsoD,4BAA4B,KAAKtD,QAAQ;AAAA,MACnE33D,IAAIq5D,WAAWr5D,IAAIoZ,MAAMnU,KAAK;AAAA,MAC9BtD,MAAM;AAAA,MACNsZ,SAASihD,mBAAmBjhD,OAAO;AAAA,MACnCoiB,OAAAA;AAAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFw6B,MAAMW,WAAgC,IAAqB;AACzD,UAAMC,UAAU,IAAI4C,gBAAgB,KAAK1D,QAAQ,GAC3C18C,UAAU;AAAA,MAAC,GAAI,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,MAAI,GAAIu9C,SAASv9C,WAAW,CAAA;AAAA,IAAG;AAC1Ew9C,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGY;AAAAA,MAAUv9C;AAAAA,IAAAA,GACpCw9C;AAAAA,EAAAA;AAEX;AAEA,SAASyD,mBAAmBtE,MAAiD;AAC3E,QAAMtkB,OAAwB;AAAA,IAC5BtzC,IAAI43D,KAAK53D,MAAM;AAAA,IACf2B,MAAMi2D,KAAKj2D,QAAQ;AAAA,EACrB;AAEIi2D,SAAAA,KAAKn2D,aACP6xC,KAAK7xC,WAAWm2D,KAAKn2D,WAGnBm2D,KAAKhjB,uBACPtB,KAAKsB,qBAAqBgjB,KAAKhjB,qBAG1BtB;AACT;AAGgB6oB,SAAAA,mBAAmBr4D,SAA2B8zD,MAAoC;AAChG,MAAI7vD,MAAM6vD,MAAMj2D;AAAAA;AAAAA,IAEZmC,QAAQo3D,oBAAoB;AAAA,MAAC5gE,YAAYs9D,KAAKj2D;AAAAA,IAAK,CAAA;AAAA;AAAA;AAAA,IAEnD,IAAI05D,gBAAgBv3D,OAAO;AAAA;AAE3B,MAAA,CAAC8zD,KAAa7vD,QAAAA;AAEZ,QAAA;AAAA,IAAC/H;AAAAA,IAAI2B;AAAAA,IAAMF;AAAAA,IAAUmzC;AAAAA,MAAsBgjB,KAAK38C;AACtDlT,SAAAA,MAAMA,IAAI/H,GAAG43D,KAAK53D,EAAE,EAAEsB,WAAWtB,EAAE,GAE/B2B,SACFoG,MAAMA,IAAIzN,WAAWqH,IAAI,IAEvBF,aACFsG,MAAMA,IAAI0zD,qBAAqBh6D,UAAUmzC,kBAAkB,IAEzDgjB,KAAKjlD,UACP5K,MAAMA,IAAI4K,MAAMilD,KAAKjlD,KAAK,IAGrB5K;AACT;AAGO,SAASq0D,mCACd;AAAA,EAAClB;AAAAA,EAAqBl8C;AAA2B,GACjDE,YACAG,YACiB;AACjB,QAAM5d,WAAWud,UAAU9P,KAAM3U,CAAMA,MAAAA,EAAEyF,OAAOkf,UAAU;AAE1D,MAAI,CAACzd;AACH,UAAM,IAAI/B,MAAM,qBAAqBwf,UAAU,eAAe;AAGhE,SAAOg8C,oBAAoB;AAAA,IAAC5gE,YAAYmH,SAASnH;AAAAA,EAAAA,CAAW,EAAEmhE,qBAC5Dv8C,YACAG,UACF;AACF;ACpXO,MAAMg9C,gCAAkF;AAAA;AAAA,EAI7FzF,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B53D,GAAGA,IAA6C;AAC9C,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxBk5D,QAAiD;AAC/C,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAAgD;AACpD,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B88D,WAAuD;AACrD,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBunB,YAAYA,aAAsD;AAChE,WAAO,KAAKq1C,MAAM;AAAA,MAACr1C;AAAAA,IAAAA,CAAY;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjC85C,iBAAmE;AACjE,WAAO,KAAK1E,KAAKp1C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBtD,WAAWA,YAAqD;AAExDo8C,UAAAA,SAAS,KAAK1D,KAAK53D,MAAMkf;AAC/B,WAAO,KAAK24C,MAAM;AAAA,MAChB73D,IAAIs7D;AAAAA,MACJp8C;AAAAA,IAAAA,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHq9C,gBAAiE;AAC/D,WAAO,KAAK3E,KAAK14C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBG,WAAWA,YAAmE;AAC5E,WAAO,KAAKw4C,MAAM;AAAA,MAACx4C;AAAAA,IAAAA,CAAW;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhCm9C,gBAAiE;AAC/D,WAAO,KAAK5E,KAAKv4C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBq4C,UAAU;AAAA,IAACt+C,OAAO,CAAE;AAAA,IAAEnU;AAAAA,IAAO8xD;AAAAA,EAAAA,IAA0B;AAAA,IAAC39C,MAAM,CAAA;AAAA,EAAA,GAA+B;AACrF,UAAA;AAAA,MAACw+C;AAAAA,MAAMD;AAAAA,QAAY,MACnB;AAAA,MAAC34C;AAAAA,IAAAA,IAAa24C;AAEpB,QAAI,OAAOC,KAAK53D,MAAO,YAAY,CAAC43D,KAAK53D;AACjC,YAAA,IAAI22D,eACR,0DACAv9C,MACAnU,OACA8xD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACvB,KAAK14C;AACF,YAAA,IAAIy3C,eACR,gFACAv9C,MACAw+C,KAAK53D,IACL+2D,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGpC,UAAM13D,WAAWud,UAAU9P,KAAM3U,OAAMA,EAAEyF,OAAO43D,KAAK14C,UAAU;AAE/D,QAAI,CAACzd;AACG,YAAA,IAAIk1D,eACR,gFACAv9C,MACAw+C,KAAK53D,IACL+2D,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAG7B,WAAA;AAAA,MACLn5D,IAAI43D,KAAK53D;AAAAA,MACTkf,YAAY04C,KAAK53D;AAAAA,MACjB1F,YAAYmH,SAASnH;AAAAA,MACrBqH,MAAM;AAAA,MACN6gB,aAAao1C,KAAKp1C,eAAe/gB,SAAS+gB;AAAAA,MAC1CvnB,OAAO28D,KAAK38D,SAASwG,SAASxG;AAAAA,MAC9BwhE,UAAU7E,KAAK6E;AAAAA,MACfr/D,MAAMw6D,KAAKx6D,QAAQqE,SAASrE;AAAAA,MAC5BgiB,mBAAmBw4C,KAAKx4C;AAAAA,MACxBC,YAAYu4C,KAAKv4C;AAAAA,IACnB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFw4C,MAAMW,WAA8C,IAAqC;AACvF,UAAMC,UAAU,IAAI4D,gCAAgC,KAAK1E,QAAQ;AACjEc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGY;AAAAA,IAAAA,GAC1BC;AAAAA,EAAAA;AAEX;AAGO,SAASiE,iCACd54D,SACmC;AAC7B,QAAA;AAAA,IAAC7J;AAAAA,IAAQ0iE;AAAAA,IAAqB39C;AAAAA,EAAalb,IAAAA,SAG3Ci/C,YAAY9oD,OAAO2iE,aAAa;AAQtC,SAPgB59C,UAGbla,OAAQ+3D,CAAQ,QAAA,CAACA,IAAIx9C,YAAY7iB,MAAM,EACvCsN,KAAK,CAACgQ,GAAGC,MAAMgpC,UAAU5zC,QAAQ2K,EAAExf,UAAU,IAAIyoD,UAAU5zC,QAAQ4K,EAAEzf,UAAU,CAAC,EAGpEgK,IAAKu4D,CAAAA,QAAQF,oBAAoB,EAAEG,yBAAyBD,IAAI78D,EAAE,CAAC;AACpF;AAGgB+8D,SAAAA,uCACd95D,MACAgC,OACAmU,MAC0B;AACnBnW,SAAAA,gBAAgBo5D,kCAAkCp5D,KAAKy0D,UAAU;AAAA,IAACt+C;AAAAA,IAAMnU;AAAAA,EAAM,CAAA,IAAIhC;AAC3F;AAGgB+5D,SAAAA,uCACdl5D,SACAyb,eACY;AACN,QAAA;AAAA,IAACtlB;AAAAA,IAAQ+kB;AAAAA,EAAAA,IAAalb;AACrByb,SAAAA,cAAcjb,IAAKrB,CAAS,SAAA;AACjC,UAAMxB,WAAWud,UAAU9P,KAAM3U,CAAMA,MAAAA,EAAEyF,OAAOiD,KAAKic,UAAU,GACzDjkB,QAAQgI,KAAKhI,SAASwG,UAAUxG,SAAS,UAEzCgF,SAA2B,CAAC;AAC9BwB,gBAAYA,SAASnH,eACvB2F,OAAO0B,OAAOF,SAASnH,aAGrB2I,KAAKic,eACPjf,OAAOwB,WAAWwB,KAAKic;AAGzB,UAAMoD,eAA6Brf,KAAKoc,aAAa,CAACpf,QAAQgD,KAAKoc,UAAU,IAAIpf,QAC3E3F,aAAamH,YAAYxH,OAAOI,IAAIoH,SAASnH,UAAU,GAEvDwjB,OAAO7a,KAAK6a,QAAQrc,UAAUqc;AAEpC,QAAI26C,UAAU,IAAIhB,gBAAgB3zD,OAAO,EACtC7I,MAAMA,KAAK,EACXmC,KAAMqE,YAAYA,SAASrE,QAAS9C,YAAY8C,QAAQ4iB,MAAAA,OAAO,EAC/D9M,OAAO;AAAA,MAACvR,MAAM;AAAA,MAAU1B,QAAQqiB;AAAAA,IAAAA,CAAa;AAEhD,WAAIxE,SACF26C,UAAUA,QAAQ36C,KAAKA,IAAI,IAGtB26C,QAAQf,UAAU;AAAA,EAAA,CAC1B;AACH;AC/KO,MAAMuF,yBAAyBtgE,OAAO,oCAAoC,GAyCpEugE,uBAAsCA,CAACC,YAAYl9D,QAAQ;AAAA,EAACT,MAAAA;AAAI,MAAe;AAC1F,QAAM49D,SAASD,eAAe,QACxBE,WAAWF,eAAe,UAC1BG,YAAY99D,OACZ+9D,aAAaD,UAAUriD,SAASnW,UAAU,IAC1CksC,aAAassB,UAAUriD,SAAShb,UAAU,CAC1C8iD,GAAAA,YAAYua,UAAUzH,iBACxB,CAACyH,UAAUzH,cAAc,IACzB2H,uBAAuBD,YAAYvsB,UAAU,GAE3C8V,wBAAwBwW,UAAUxW,yBAAyB,CAAE;AAE/DuW,SAAAA,YAAYp9D,OAAOwB,WACdqlD,sBAAsB7+C,KAAM40D,CAAQA,QAAAA,IAAI39C,eAAejf,OAAOwB,QAAQ,IAI5E27D,UAAUn9D,OAAOD,MAAM+iD,UAAUx4B,SAAStqB,OAAO0B,IAAI,KACrD07D,YAAYta,UAAUx4B,SAAStqB,OAAO0B,IAAI;AAE/C;AAEAu7D,qBAAqBO,WAAWR;ACxHzB,MAAMS,gBAAgB,CAAC,WAAW,QAAQ,SAAS,UAAU,OAAO;ACwB3E,SAASC,kBAAkB;AAE3B;AAGaC,MAAAA,uBAAsCA,CAACT,YAAYl9D,QAAQ;AAAA,EAACT,MAAAA;AAAAA,EAAMyF;AAAK,MAC3EA,SAAS,KAAKi4D,qBAAqBC,YAAYl9D,QAAQ;AAAA,EAACT,MAAAA;AAAAA,EAAMyF;AAAK,CAAC;AAwFtE,MAAe44D,mBAEtB;AAAA;AAAA,EAEYC,iCAAiC;AAAA;AAAA,EAEjClG,OAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB53D,GAAGA,IAA0B;AAC3B,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxBk5D,QAAqB;AACnB,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAA6B;AACjC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,MAAO+E,IAAIw5D,mBAAmBv+D,OAAO,KAAK28D,KAAK53D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxE+3D,WAA2B;AACzB,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB6iB,KAAKA,MAA6C;AAChD,WAAO,KAAK+5C,MAAM;AAAA,MAAC/5C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bk6C,UAAyB;AACvB,WAAO,KAAKJ,KAAK95C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBu4C,cAAcA,eAA+C;AAC3D,WAAO,KAAKwB,MAAM;AAAA,MAACxB;AAAAA,IAAAA,CAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnC0H,mBAA2C;AACzC,WAAO,KAAKnG,KAAKvB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB94C,UAAUA,WAAqE;AAC7E,WAAO,KAAKs6C,MAAM;AAAA,MAACt6C;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BuyB,eAAmC;AACjC,WAAO,KAAK8nB,KAAKr6C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBC,eAAeA,gBAAwE;AACrF,WAAO,KAAKq6C,MAAM;AAAA,MAACr6C;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpCy8C,oBAA6C;AAC3C,WAAO,KAAKrC,KAAKp6C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB7K,MAAMA,OAA4B;AAChC,WAAO,KAAKklD,MAAM;AAAA,MAACllD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3BmnD,WAA2B;AACzB,WAAO,KAAKlC,KAAKjlD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBunD,gBAAgBA,iBAA+C;AAC7D,WAAO,KAAKrC,MAAM;AAAA,MAACqC;AAAAA,IAAAA,CAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMrC8D,qBAA+C;AAC7C,WAAO,KAAKpG,KAAKsC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBpc,UAAUxoC,UAAU,IAAoB;AACtC,WAAO,KAAKuiD,MAAM;AAAA,MAChBjS,gBAAgB;AAAA,QAAC,GAAI,KAAKgS,KAAKhS,kBAAkB,CAAC;AAAA,QAAI9H,WAAWxoC;AAAAA,MAAAA;AAAAA,IAAO,CACzE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMH2oD,eAAoC;AAClC,WAAO,KAAKrG,KAAKhS,iBAAiB,KAAKgS,KAAKhS,eAAe9H,YAAYr5C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOzEqiD,sBACE9nC,WAIc;AACT8+C,WAAAA,KAAAA,iCAAiC,IAC/B,KAAKjG,MAAM;AAAA,MAAC/Q,uBAAuBp9C,MAAMmX,QAAQ7B,SAAS,IAAIA,YAAY,CAACA,SAAS;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/Fk/C,2BAA2D;AACzD,WAAO,KAAKtG,KAAK9Q;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB4Q,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAkB;AACvDpZ,UAAAA,KAAK,KAAK43D,KAAK53D,MAAM,IACrBoZ,OAAO6B,QAAQ7B,MAEfi9C,gBAAgB,KAAKuB,KAAKvB;AAChC,QAAIA,iBAAiB,CAACqH,cAAcnzC,SAAS8rC,aAAa;AAClD,YAAA,IAAIM,eACR,6BAA6B+G,cAAcp5D,IAAKrB,CAAS,SAAA,IAAIA,IAAI,GAAG,EAAEY,KAAK,IAAI,CAAC,IAChFuV,MACApZ,MAAMib,QAAQhW,OACd,KAAK2yD,KAAK38D,KACZ;AAGF,UAAM6rD,yBAAyB,KAAK8Q,KAAK9Q,yBAAyB,CAAA,GAAIxiD,IAAI,CAACrB,MAAMkX,MAC/E4iD,uCAAuC95D,MAAMkX,GAAGf,IAAI,CACtD;AAEO,WAAA;AAAA,MACLpZ,IAAIq5D,WAAWr5D,IAAIib,QAAQ7B,MAAMpZ,MAAMib,QAAQhW,KAAK;AAAA,MACpDhK,OAAO,KAAK28D,KAAK38D;AAAAA,MACjB6iB,MAAM,KAAK85C,KAAK95C;AAAAA,MAChBnc,MAAM;AAAA,MACN00D;AAAAA,MACA1jD,OAAO,KAAKilD,KAAKjlD,SAASgrD;AAAAA,MAC1BzD,iBAAiB,KAAKtC,KAAKsC,mBAAmB0D;AAAAA,MAC9ChY,gBAAgB,KAAKgS,KAAKhS;AAAAA,MAC1BkB;AAAAA,MACAvpC,YAAY,KAAKq6C,KAAKr6C,aAAa,CAAIjZ,GAAAA,IAAI,CAACrB,MAAMkX,MAChDq9C,uBAAuBv0D,MAAMkX,GAAGf,IAAI,CACtC;AAAA,MACAoE,iBAAiB,KAAKo6C,KAAKp6C,kBAAkB,CAAA,GAAIlZ,IAAI,CAACrB,MAAMkX,MAC1D2+C,4BAA4B71D,MAAMkX,GAAGf,IAAI,CAC3C;AAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAQJ;ACxTA,MAAM+kD,iBAAiBA,CAACvG,MAA2B38C,YAA8B;AAC/E,QAAMnW,SAAS8yD,KAAK38C,SAASnW,OAAOshD,KAAU,KAAA;AAE9C,MAAI,CAAC,KAAK,GAAG,EAAE77B,SAASzlB,OAAO,CAAC,CAAC;AAC/B,UAAM,IAAI6xD,eACR,kCAAkC7xD,OAAO,CAAC,CAAC,2DAC3CmW,QAAQ7B,MACRw+C,KAAK53D,IACL43D,KAAK38D,KACP,EAAE+7D,YAAYE,SAASkH,yBAAyB;AAG3Ct5D,SAAAA;AACT,GAEMu5D,qCACHv6D,CAAAA,YACD,CAACq3D,QAAgBlgD,YAA8E;AACvFqjD,QAAAA,aAAarjD,QAAQ02C,QACrBlwD,WAAWwZ,QAAQhb,QAAQwB,WAC7BqC,QAAQkb,UAAU9P,KAAM2tD,CAAAA,QAAQA,IAAI78D,OAAOib,QAAQhb,OAAOwB,QAAQ,IAClEgD,QACE9C,OAAOF,WACTA,SAASnH,aACTgkE,WAAWzI,kBAAkBuE,uBAAuBt2D,QAAQu2D,WAAWc,MAAM;AAE1EoD,SAAAA,QAAQC,QAAQ78D,IAAI,EAAE+D,KAAMpL,CACjCA,eAAAA,aACIwJ,QAAQo3D,oBAAoB;AAAA,IAAC5gE;AAAAA,IAAYgH,YAAY65D;AAAAA,EAAO,CAAA,IAC5D,IAAIE,gBAAgBv3D,OAAO,EAAE9D,GAAG,QAAQ,EAAEsB,WAAW65D,MAAM,EAAE7gE,WAAW,EAAE,CAChF;AACF;AA4DK,MAAMmkE,4BAA4BZ,mBAGvC;AAAA;AAAA,EAIAjH,YAIYe,UACVC,MACA;AACA,UAAO,GAAA,KAHGD,WAAAA,UAIV,KAAKC,OAAOA,QAAQ,CACpB,GAAA,KAAKkG,iCAAiCj0D,CAAAA,CAAQ+tD,MAAM9Q;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOtDp0B,WAAWA,YAAyC;AAClD,WAAO,KAAKmlC,MAAM;AAAA,MAAC58C,SAAS;AAAA,QAAC,GAAI,KAAK28C,KAAK38C,WAAW;AAAA,UAACnW,QAAQ;AAAA,QAAE;AAAA,QAAI4tB;AAAAA,MAAAA;AAAAA,IAAU,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnFgsC,gBAAoC;AAC3B,WAAA,KAAK9G,KAAK38C,SAASyX;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5B5tB,OAAOA,QAAqC;AAC1C,WAAO,KAAK+yD,MAAM;AAAA,MAAC58C,SAAS;AAAA,QAAC,GAAI,KAAK28C,KAAK38C,WAAW,CAAC;AAAA,QAAInW;AAAAA,MAAAA;AAAAA,IAAM,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMrE65D,YAAgC;AACvB,WAAA,KAAK/G,KAAK38C,SAASnW;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BxK,WAAWqH,MAAgD;AACzD,UAAMk0D,iBAAiB,OAAOl0D,QAAS,WAAWA,OAAOA,KAAKS;AAC9D,WAAO,KAAKy1D,MAAM;AAAA,MAAChC;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpC2F,gBAAoC;AAClC,WAAO,KAAK5D,KAAK/B;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB51D,OAAOA,QAAsD;AAC3D,WAAO,KAAK43D,MAAM;AAAA,MAChB58C,SAAS;AAAA,QAAC,GAAI,KAAK28C,KAAK38C,WAAW;AAAA,UAACnW,QAAQ;AAAA,QAAE;AAAA,QAAI7E;AAAAA,MAAAA;AAAAA,IAAM,CACzD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHk4D,YAAiD;AACxC,WAAA,KAAKP,KAAK38C,SAAShb;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5Bq2D,gBAAgB/U,UAAmD;AAC7D,QAAA,CAAC73C,MAAMmX,QAAQ0gC,QAAQ;AACnB,YAAA,IAAI7hD,MAAM,qDAAqD;AAGvE,WAAO,KAAKm4D,MAAM;AAAA,MAChB58C,SAAS;AAAA,QAAC,GAAI,KAAK28C,KAAK38C,WAAW;AAAA,UAACnW,QAAQ;AAAA,QAAE;AAAA,QAAIwxD,iBAAiB/U;AAAAA,MAAAA;AAAAA,IAAQ,CAC5E;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHqd,qBAAqD;AAC5C,WAAA,KAAKhH,KAAK38C,SAASq7C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BoB,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAmB;AAC9D,QAAI,OAAO,KAAKw+C,KAAK53D,MAAO,YAAY,CAAC,KAAK43D,KAAK53D;AACjD,YAAM,IAAI22D,eACR,uCACA17C,QAAQ7B,MACR6B,QAAQhW,OACR,KAAK2yD,KAAK38D,KACZ,EAAE+7D,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAAC,KAAKvB,KAAK38C,WAAW,CAAC,KAAK28C,KAAK38C,QAAQnW;AAC3C,YAAM,IAAI6xD,eACR,2CACA17C,QAAQ7B,MACR,KAAKw+C,KAAK53D,IACV,KAAK43D,KAAK38D,KACZ,EAAE+7D,YAAYE,SAAS2H,eAAe;AAIpC,WADoB,KAAKjH,KAAK38C,SAASnW,WAAW,oBAC9B,KAAK8yD,KAAK38C,QAAQnW,UAAU,CAAC,KAAK8yD,KAAK38C,QAAQyX,cACrE5Q,QAAQxK,KACN,wEAAwE,KAAKsgD,KAAK38C,QAAQnW,MAAM,kEAChGg6D,oBAAAA,gBAAgB5H,SAAS6H,sCAAsC,CACjE,GAEK;AAAA,MACL,GAAG,MAAMrH,UAAUz8C,OAAO;AAAA,MAC1BtZ,MAAM;AAAA,MACNk0D,gBAAgB,KAAK+B,KAAK/B;AAAAA,MAC1BljD,OAAO,KAAKilD,KAAKjlD,SAAS0rD,mCAAmC,KAAK1G,QAAQ;AAAA,MAC1E18C,SAAS;AAAA,QACP,GAAG,KAAK28C,KAAK38C;AAAAA;AAAAA,QAEbyX,YAAY,KAAKklC,KAAK38C,QAAQyX,cAAcppB,OAA8BopB,8BAAAA;AAAAA,QAC1E5tB,QAAQq5D,eAAe,KAAKvG,MAAM38C,OAAO;AAAA,MAAA;AAAA,IAE7C;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOF48C,MAAMW,UAAqD;AACzD,UAAMC,UAAU,IAAIgG,oBAAoB,KAAK9G,QAAQ;AACrDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GAE1C,KAAKsF,mCACRrF,QAAQb,KAAK9Q,wBAAwBkY,2BAA2B,KAAKrH,UAAUc,QAAQb,IAAI,IAGxFa,QAAQb,KAAK/B,mBAChB4C,QAAQb,KAAK/B,iBAAiBoJ,cAAcxG,QAAQb,IAAI,IAGnDa;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAMTyG,UAA+B;AAC7B,WAAO,KAAKtH;AAAAA,EAAAA;AAEhB;AAEA,SAASoH,2BACPl7D,SACA8zD,MACwC;AAClC,QAAA;AAAA,IAAC79D,UAAAA;AAAAA,MAAY+J,SACb;AAAA,IAAC+xD;AAAAA,IAAgB56C;AAAAA,MAAW28C,MAC5B;AAAA,IAAC9yD;AAAAA,IAAQ7E;AAAAA,MAAUgb,WAAW;AAAA,IAACnW,QAAQ;AAAA,IAAI7E,QAAQ,CAAA;AAAA,EACnD8iD,GAAAA,YAAY8S,iBACd,CAACA,cAAc,IACfnsD,MAAMC,KAAK,IAAIC,IAAI4zD,uBAAuB14D,QAAQ7E,MAAM,CAAC,CAAC;AAE9D,MAAI8iD,UAAUvmD,WAAW;AAIzB,WAAOumD,UACJsM,QAAS/0D,CACRP,eAAAA,UAAS2hD,0BAA0B;AAAA,MACjC/5C,MAAM;AAAA,MACNrH;AAAAA,IAAAA,CACD,CACH,EACCgK,IAAK66D,CAAY,YAAA;AAAA,MAAC,GAAGA;AAAAA,MAAQ/hE,MAAM4iB,MAAAA;AAAAA,IAAAA,EAAS;AACjD;AAEA,SAASi/C,cAAcrH,MAA+C;AAC9D,QAAA;AAAA,IAAC38C;AAAAA,MAAW28C,MACZ;AAAA,IAAC9yD;AAAAA,IAAQ7E;AAAAA,MAAUgb,WAAW;AAAA,IAACnW,QAAQ;AAAA,IAAI7E,QAAQ,CAAA;AAAA,EACnD8iD,GAAAA,YAAYya,uBAAuB14D,QAAQ7E,MAAM;AACvD,SAAO8iD,UAAUvmD,WAAW,IAAIumD,UAAU,CAAC,IAAIt+C;AACjD;AAGO,SAAS+4D,uBACd14D,QACA7E,SAAkC,IACxB;AACN8iD,MAAAA,YAAYqc,+BAA+Bt6D,QAAQ7E,MAAM;AAE7D,SAAI8iD,UAAUvmD,WAAW,MACvBumD,YAAYsc,8BAA8Bv6D,QAAQ7E,MAAM,IAGnD8iD;AACT;AAGA,SAASqc,+BACPt6D,QACA7E,SAAkC,IACxB;AACJq/D,QAAAA,UACJ,0FACIC,UAAoB,CAAE;AACxBhG,MAAAA;AACJ,UAAQA,QAAQ+F,QAAQE,KAAK16D,MAAM,OAAO;AACxCy6D,YAAQ55D,KAAK4zD,MAAM,CAAC,KAAKA,MAAM,CAAC,CAAC;AAG5BgG,SAAAA,QACJj7D,IAAKm7D,CACaA,gBAAAA,UAAU,CAAC,MAAM,MAAMx/D,OAAOw/D,UAAUtgE,MAAM,CAAC,CAAC,IAAIsgE,cACzB,IAAIrZ,KAAOnkB,EAAAA,QAAQ,gBAAgB,EAAE,CAElF,EACAn9B,OAAO+E,OAAO;AACnB;AAGA,SAASw1D,8BACPv6D,QACA7E,SAAkC,IACxB;AACV,QAAMq/D,UAAU,4BACVC,UAAUz6D,OAAOy0D,MAAM+F,OAAO;AACpC,SAAKC,UAIEA,QAAQ,CAAC,EACbhsD,MAAM,MAAM,EACZjP,IAAKi1D,CAAAA,UAAUA,MAAMnT,KAAK,EAAEnkB,QAAQ,kBAAkB,EAAE,CAAC,EACzD39B,IAAKrB,CAAAA,SAAUA,KAAK,CAAC,MAAM,MAAMhD,OAAOgD,KAAK9D,MAAM,CAAC,CAAC,IAAI8D,IAAK,EAC9D6B,OAAO+E,OAAO,IAPR,CAAE;AAQb;AC7VA,MAAM61D,aAAcC,CACdA,UAAAA,iBAAiBC,cACZ,gBAGLC,UAAoBF,KAAK,IACpB,YAGFj2D,MAAMmX,QAAQ8+C,KAAK,IAAI,UAAU,OAAOA,OAG3CG,aAAc78D,CACXA,SAAAA,KAAKtB,SAAS,YAGjBo+D,yBAAwCA,CAAC5C,YAAoBl9D,QAAQ6D,aAC5DA,QAAQtE,KACFwwC,SAAS,IAGvBlrC,OAAOk7D,kBAAkB,EACzB/3D,KAAMhF,CAASA,SAAAA,KAAK3I,WAAW8H,SAASnC,OAAO0B,QAAQsB,KAAKrF,QAAQqC,OAAOD,EAAE,KAChF49D,qBAAqBT,YAAYl9D,QAAQ6D,OAAO,GAI9Cm8D,sBAAqCA,CAAC9E,QAAgBlgD,YAAkC;AAG5F,QAAM4U,UAFa5U,QAAQ02C,OACF3hB,MAAMlrC,OAAOg7D,UAAU,EAC1B5wD,KAAMjM,CAASA,SAAAA,KAAKjD,OAAOm7D,MAAM,KAAK;AAAA,IAACxoD,OAAOlO;AAAAA,EAAAA,GAAYkO;AAEhF,SAAI,CAACkd,UAAU,OAAOA,UAAW,aACxBA,SAGF,OAAOA,UAAW,aAAaA,OAAOsrC,QAAQlgD,OAAO,IAAI4U;AAClE;AAEA,SAASqwC,uBACPj9D,MACAgC,OACAmU,MACoB;AACpB,MAAInW,gBAAgBk9D;AAClB,WAAOl9D,KAAKy0D,UAAU;AAAA,MAACt+C;AAAAA,MAAMnU;AAAAA,IAAAA,CAAM;AAGrC,QAAMm7D,WAAWn9D;AACbm9D,MAAAA,YAAYA,SAASz+D,SAAS;AACzBsB,WAAAA;AAGT,MAAI,CAACm9D,YAAYA,SAASz+D,SAAS,YAAY;AACvC0+D,UAAAA,UAAWD,YAAYA,SAASz+D,QAAS+9D,WAAWU,QAAQ,GAC5DE,WAAWD,YAAY,UAAU,gDAAgD;AACvF,UAAM,IAAI1J,eACR,+CAA+C0J,OAAO,IAAIC,QAAQ,IAClElnD,MACAnU,KACF,EAAE+xD,YAAYE,SAASqJ,iBAAiB;AAAA,EAAA;AAGnCt9D,SAAAA;AACT;AAEA,SAAS48D,UAAaF,OAAyC;AAC7D,SAAOpiE,OAASoiE,SAAAA,KAAK,KAAK,OAAOA,MAAMj6D,QAAS;AAClD;AAqCO,MAAMk6D,oBAAoB/B,mBAA+C;AAAA;AAAA,EAI9EjH,YAIYe,UACVC,MACA;AACA,UAAA,GAAO,KAHGD,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAA,GAC1B,KAAKkG,iCAAiCj0D,CAAAA,EAAQ+tD,QAAQA,KAAK9Q;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ7D9W,MAAMA,OAA8D;AAClE,WAAO,KAAK6nB,MAAM;AAAA,MAAC7nB;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3BwwB,WAAmC;AACjC,WAAO,KAAK5I,KAAK5nB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB0nB,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAW;AAChDpZ,UAAAA,KAAK,KAAK43D,KAAK53D;AACjB,QAAA,OAAOA,MAAO,YAAY,CAACA;AACvB,YAAA,IAAI22D,eACR,8BACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASiC,WAAW;AAG9BnpB,UAAAA,QAAQ,OAAO,KAAK4nB,KAAK5nB,QAAU,MAAc,CAAK,IAAA,KAAK4nB,KAAK5nB;AAClE,QAAA,CAACtmC,MAAMmX,QAAQmvB,KAAK;AAChB,YAAA,IAAI2mB,eACR,qCACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASuJ,wBAAwB;AAG3CrnD,UAAAA,QAAQ6B,QAAQ7B,QAAQ,CAAA,GAAIqe,OAAOz3B,EAAE,GACrC0gE,kBAAkB1wB,MAAM1rC,IAAI,CAACrB,MAAMgC,UAAUi7D,uBAAuBj9D,MAAMgC,OAAOmU,IAAI,CAAC,GACtF4iD,QAAQ0E,gBAAgB57D,OAAO,CAAC67D,KAAKxmD,MAAMjL,cAAAA,QAAKwxD,iBAAiB;AAAA,MAAC1gE,IAAI2gE,IAAI3gE;AAAAA,IAAAA,GAAKma,IAAI,CAAC,CAAC;AAEvF6hD,QAAAA,MAAMx/D,SAAS,GAAG;AACdokE,YAAAA,UAAU5E,MAAM13D,IAAKrB,CAAAA,SAASA,KAAKjD,EAAE,EAAEb,MAAM,GAAG,CAAC,GACjD0hE,WAAW7E,MAAMx/D,SAAS,IAAI,GAAGokE,QAAQ/8D,KAAK,IAAI,CAAC,QAAQ+8D,QAAQ/8D,KAAK,IAAI;AAClF,YAAM,IAAI8yD,eACR,kCAAkCkK,QAAQ,KAC1C5lD,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAAS4J,4BAA4B;AAAA,IAAA;AAG9C,WAAA;AAAA,MACL,GAAG,MAAMpJ,UAAUz8C,OAAO;AAAA,MAC1BtZ,MAAM;AAAA,MACNu4D,iBAAiB,KAAKtC,KAAKsC,mBAAmB6F;AAAAA,MAC9CptD,OAAO,KAAKilD,KAAKjlD,SAASstD;AAAAA,MAC1BjwB,OAAO0wB;AAAAA,IACT;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQF7I,MAAMW,UAAuC;AAC3C,UAAMC,UAAU,IAAImH,YAAY,KAAKjI,QAAQ;AAC7Cc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACzEO,MAAM0H,gBAAkD;AAAA;AAAA,EAI7DvJ,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B53D,GAAGA,IAA6B;AAC9B,WAAO,KAAK63D,MAAM;AAAA,MAAC73D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxBk5D,QAA+B;AAC7B,WAAO,KAAKtB,KAAK53D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/E,MAAMA,OAAgC;AACpC,WAAO,KAAK48D,MAAM;AAAA,MAAC58D;AAAAA,MAAO+E,IAAIw5D,mBAAmBv+D,OAAO,KAAK28D,KAAK53D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxE+3D,WAAqC;AACnC,WAAO,KAAKH,KAAK38D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB6iB,KAAKA,MAAgD;AACnD,WAAO,KAAK+5C,MAAM;AAAA,MAAC/5C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bk6C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK95C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB1gB,KAAKA,MAA8D;AACjE,WAAO,KAAKy6D,MAAM;AAAA,MAACz6D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1B2jE,SAASzrD,UAAU,IAAuB;AACxC,WAAO,KAAKuiD,MAAM;AAAA,MAChBjS,gBAAgB;AAAA,QAAC,GAAI,KAAKgS,KAAKhS,kBAAkB,CAAC;AAAA,QAAImb,UAAUzrD;AAAAA,MAAAA;AAAAA,IAAO,CACxE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOH0rD,cAAmC;AACjC,WAAO,KAAKpJ,KAAKhS,iBAAiB,KAAKgS,KAAKhS,eAAemb,WAAWt8D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOxEyzD,UAAmC;AACjC,WAAO,KAAKN,KAAKx6D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBuV,MAAMA,OAAmD;AACvD,WAAO,KAAKklD,MAAM;AAAA,MAACllD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3BmnD,WAAqC;AACnC,WAAO,KAAKlC,KAAKjlD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBrY,WAAWA,YAAkD;AAC3D,WAAO,KAAKu9D,MAAM;AAAA,MAACv9D;AAAAA,IAAAA,CAAW;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhCkhE,gBAA+C;AACvClhE,UAAAA,aAAa,KAAKs9D,KAAKt9D;AAEzB,WAAA,OAAOA,cAAe,WACjB,KAAKq9D,SAAS19D,OAAOI,IAAIC,UAAU,IAGrC,KAAKs9D,KAAKt9D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBo9D,UAAUz8C,UAAoC;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AAC5D,UAAA;AAAA,MAACpZ;AAAAA,MAAI/E;AAAAA,MAAO0X;AAAAA,QAAS,KAAKilD;AAC5B,QAAA,OAAO53D,MAAO,YAAY,CAACA;AACvB,YAAA,IAAI22D,eACR,mCACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACl+C,QAAQgmD,oBAAoB,OAAOhmE,SAAU,YAAY,CAACA;AACvD,YAAA,IAAI07D,eAAe,sCAAsC17C,QAAQ7B,MAAMpZ,EAAE,EAAEg3D,YAC/EE,SAASmB,cACX;AAGE/9D,QAAAA,aAAa,KAAKs9D,KAAKt9D;AACvB,QAAA,OAAOA,cAAe,UAAU;AAClC,YAAMqH,OAAO,KAAKg2D,SAAS19D,OAAOI,IAAIC,UAAU;AAChD,UAAI,CAACqH;AACG,cAAA,IAAIg1D,eACR,wBAAwBr8D,UAAU,eAClC2gB,QAAQ7B,MACRpZ,EACF,EAAEg3D,YAAYE,SAASgK,qBAAqB;AAGjCv/D,mBAAAA;AAAAA,IAAAA;AAGf,UAAMw/D,mBAAmB;AAAA,MAAC/nD,MAAM6B,QAAQ7B,KAAKqe,OAAOz3B,EAAE;AAAA,MAAG+2D,MAAM;AAAA,IAAO;AACtE,QAAIqK,YACFzuD,iBAAiBknD,oBACjBlnD,iBAAiB8rD,uBACjB9rD,iBAAiB0oD,mBACjB1oD,iBAAiBitD,cACbjtD,MAAM+kD,UAAUyJ,gBAAgB,IAChCxuD;AAIF,QAAA,OAAOyuD,aAAc,YAAY;AACnC,YAAMC,gBAAgBD;AACtBA,kBAAYA,CAACjG,QAAQmG,iBACZD,cAAclG,QAAQ;AAAA,QAAC,GAAGmG;AAAAA,QAAcH;AAAAA,MAAAA,CAAiB;AAAA,IAAA;AAI7D,WAAA;AAAA,MACL,GAAG,KAAKvJ;AAAAA,MACR53D,IAAIq5D,WAAWr5D,IAAIib,QAAQ7B,MAAM6B,QAAQhW,KAAK;AAAA,MAC9C3K;AAAAA,MACAqY,OAAOyuD;AAAAA,MACPnmE;AAAAA,MACA0G,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFk2D,MAAMW,UAA6C;AACjD,UAAMC,UAAU,IAAI0H,gBAAgB,KAAKxI,QAAQ;AACjDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AC7SA,MAAM8I,6BACJA,CAACz9D,SAA2B8zD,SAAmCt2D,CAAuB,eAAA;AAC9EhH,QAAAA,aACJs9D,KAAKt9D,eACJ,OAAOs9D,KAAKt9D,cAAe,WAAWs9D,KAAKt9D,aAAas9D,KAAKt9D,WAAW8H;AAEpE9H,SAAAA,aACHwJ,QAAQo3D,oBAAoB;AAAA,IAAC5gE;AAAAA,IAAYgH;AAAAA,EAAAA,CAAW,IACpD,IAAI+5D,gBAAgBv3D,OAAO,EAAE9D,GAAG,gBAAgB,EAAEsB,WAAWA,UAAU;AAC7E;AAOK,MAAMkgE,gCAAgCrB,gBAAgB;AAAA;AAAA,EAI3DvJ,YAIYe,UACVC,MACA;AACMD,UAAAA,UAAUC,IAAI,GAAC,KAHXD,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7BF,UAAUz8C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAuB;AAC5Dw+C,UAAAA,OAAO,MAAMF,UAAU;AAAA,MAAC,GAAGz8C;AAAAA,MAASgmD,iBAAiB;AAAA,IAAA,CAAK;AAEhE,QAAI,CAACrJ,KAAKt9D;AACF,YAAA,IAAIq8D,eACR,oDACA17C,QAAQ7B,MACR6B,QAAQhW,KACV,EAAE+xD,YAAYE,SAASuK,oBAAoB;AAG7C,UAAM9uD,QAAQilD,KAAKjlD,SAAS4uD,2BAA2B,KAAK5J,UAAUC,IAAI;AACnE,WAAA;AAAA,MAAC,GAAGA;AAAAA,MAAMjlD;AAAAA,MAAOrY,YAAYs9D,KAAKt9D;AAAAA,MAAYsD,KAAKg6D,KAAK53D;AAAAA,IAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnE63D,MAAMW,UAA6D;AACjE,UAAMC,UAAU,IAAI+I,wBAAwB,KAAK7J,QAAQ;AACzDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AAGO,SAASuH,mBAAmB/8D,MAAyC;AACnE1F,SAAAA,OAAAA,SAAS0F,IAAI,KAAK,OAAOA,KAAK3I,aAAe,OAAe,OAAO2I,KAAKrF,OAAQ;AACzF;ACrFO,MAAM8jE,gCAAgCjD,oBAAoB;AAAA;AAAA,EAI/D7H,YAIYe,UACVC,MACA;AACMD,UAAAA,QAAQ,GAAC,KAHLA,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7BjlD,MAAMA,OAAuC;AAC3C,WAAO,KAAKgvD,iCAAiC;AAAA,MAAChvD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtDklD,MAAMW,UAAyD;AACvD7G,UAAAA,SAAS,MAAMkG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,KAAK/J,QAAQ;AACzDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGjG,OAAOuN,QAAQ;AAAA,MAAG,GAAI1G,YAAY,CAAA;AAAA,IAAC,GAC7DC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOTkJ,iCAAiCnJ,UAAyD;AACxF,UAAM7G,SAAS,MAAMkG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,KAAK/J,QAAQ,GACnDuC,kBAAkB,KAAKtC,KAAKsC,iBAE5B0H,WADiB1H,mBAAmBA,gBAAgBuD,aAAaR,yBACrC;AAAA,MAAC/C,iBAAiBz1D;AAAAA,IAAAA,IAAa,CAAC;AAClEg0D,WAAAA,QAAQb,OAAO;AAAA,MACb,GAAGjG,OAAOuN,QAAQ;AAAA,MAClB,GAAG,KAAKtH;AAAAA,MACR,GAAIY,YAAY,CAAC;AAAA,MACjB,GAAGoJ;AAAAA,IAAAA,GAEEnJ;AAAAA,EAAAA;AAEX;AC7DA,MAAMoJ,oBAAoB,CAAC,qBAAqB,kBAAkB;AAElE,SAASC,iBAAiB7iD,UAAkB;AACnC4iD,SAAAA,kBAAkBt3C,SAAStL,QAAQ;AAC5C;AAEA,SAAS8iD,eAAeznE,YAAwB;AACvCA,SAAAA,WAAWqH,MAAMS,SAAS;AACnC;AAEA,SAAS4/D,OAAOC,YAA4C;AAC1D,SAAOA,WAAWtgE,SAAS;AAC7B;AAEO,SAASugE,iBAAiB;AAAA,EAACjoE;AAAwB,GAAa;AACrE,SAAOA,OACJ2iE,aAAAA,EACA93D,OAAQq9D,CAAM,MAAA;AACP7nE,UAAAA,aAAaL,OAAOI,IAAI8nE,CAAC;AACxB7nE,WAAAA,cAAcynE,eAAeznE,UAAU;AAAA,EAAA,CAC/C,EACAwK,OAAQq9D,OAAM,CAACL,iBAAiBK,CAAC,CAAC;AACvC;AAEO,SAASC,yBAAyBt+D,SAA8C;AACvEo+D,SAAAA,iBAAiBp+D,OAAO,EACzBQ,IAAK2a,cAAaojD,wBAAwBv+D,SAASmb,QAAQ,CAAC;AAC3E;AAEgBojD,SAAAA,wBACdv+D,SACAmb,UACiB;AACX,QAAA;AAAA,IAAChlB;AAAAA,EAAU6J,IAAAA,SAEXnC,OAAO1H,OAAOI,IAAI4kB,QAAQ;AAChC,MAAI,CAACtd;AACH,UAAM,IAAIjC,MAAM,0BAA0Buf,QAAQ,aAAa;AAGjE,QAAMhkB,QAAQ0G,KAAK1G,SAASqnE,mBAAAA,QAAUrjD,QAAQ;AAE9C,SAAO,IAAIkhD,gBAAgBr8D,OAAO,EAC/B9D,GAAGif,QAAQ,EACXhkB,MAAMA,KAAK,EACXX,WAAWqH,IAAI,EACfgR,MAAM,CAAC3S,IAAIuiE,iBAAiB;AAC3B,UAAM5Q,SAAS4Q,aAAa5Q,QACtB2M,aAAa0D,OAAOrQ,MAAM,IAC3BA,OAAO3hB,MAAM9gC,KAAMjM,CAAAA,SAASA,KAAKjD,OAAOA,EAAE,IAC3C;AAEAwiE,QAAAA,OAAOC,oBAAoB3+D,SAASmb,QAAQ;AAC5Cq/C,WAAAA,cAAcA,WAAWrjE,UAC3BunE,OAAOA,KAAKvnE,MAAMqjE,WAAWrjE,KAAK,IAG7BunE;AAAAA,EAAAA,CACR;AACL;AAEgBC,SAAAA,oBACd3+D,SACA4+D,gBACqB;AACf,QAAA;AAAA,IAACzoE;AAAAA,IAAQihE;AAAAA,EAAAA,IAAuBp3D,SAEhCxJ,aAAa,OAAOooE,kBAAmB,WAAWA,iBAAiBA,eAAepoE,YAClF2kB,WAAW,OAAO3kB,cAAe,WAAWA,aAAaA,WAAW8H,MACpEw1D,OACJ,OAAO8K,kBAAmB,WAAW;AAAA,IAACpoE;AAAAA,EAAcooE,IAAAA,gBAEhD/gE,OAAO1H,OAAOI,IAAI4kB,QAAQ;AAChC,MAAI,CAACtd;AACH,UAAM,IAAIjC,MAAM,0BAA0Buf,QAAQ,aAAa;AAGjE,QAAMhkB,QAAQ0G,KAAK1G,SAASqnE,mBAAAA,QAAUrjD,QAAQ;AAE9C,SAAO,IAAIyiD,wBAAwB59D,OAAO,EACvC9D,GAAG43D,KAAK53D,MAAMif,QAAQ,EACtBhkB,MAAM28D,KAAK38D,SAASA,KAAK,EACzB6J,OAAO,gBAAgB,EACvB7E,OAAO;AAAA,IAAC0B,MAAMsd;AAAAA,EAAS,CAAA,EACvB3kB,WAAWqH,IAAI,EACf20D,gBAAgBgB,iCAAiC7a,EAAE,EACnDj/B,eACCo6C,KAAKp6C,kBAAkB,CACrB;AAAA,IACExd,IAAI;AAAA,IACJ/E,OAAO;AAAA,IACP6iB,MAAM;AAAA,MAAC7iB,OAAO;AAAA,QAAC4X,KAAK;AAAA,QAAkCukD,IAAI/9D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,GAErF;AAAA,IACE2G,IAAI;AAAA,IACJ/E,OAAO;AAAA,IACP6iB,MAAM;AAAA,MAAC7iB,OAAO;AAAA,QAAC4X,KAAK;AAAA,QAAiCukD,IAAI/9D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,GAEpF;AAAA,IACE2G,IAAI;AAAA,IACJ/E,OAAO;AAAA,IACP6iB,MAAM;AAAA,MAAC7iB,OAAO;AAAA,QAAC4X,KAAK;AAAA,QAAkCukD,IAAI/9D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,CACpF,CAEL,EACCsZ,MACCilD,KAAKjlD,UACDrR,gBAAuB45D,oBAAoB;AAAA,IAAC5gE,YAAY2kB;AAAAA,IAAU3d;AAAAA,EAAAA,CAAW,EACnF,EACC44D,gBAAgBtC,KAAKsC,mBAAmBgD,oBAAoB,EAC5D3/C,UACCq6C,KAAKr6C,aAAa;AAAA;AAAA;AAAA,IAIhB,GAAGq7C,kCAAkC90D,SAASnC,IAAI;AAAA;AAAA,IAGlD,IAAI81D,gBAAgB3zD,OAAO,EACxBka,MAAM,QAAQ,EACdF,KAAK;AAAA,MAAC7iB,OAAO;AAAA,QAAC4X,KAAK;AAAA,QAAkCukD,IAAI/9D;AAAAA,MAAAA;AAAAA,IAAwB,CAAE,EACnF4B,MAAM,cAAc,EACpBmC,KAAKulE,MAAgB,gBAAA,EACrBhgE,OAAO,WAAW,EAClB1C,OAAO;AAAA,MAAC5C,QAAQ;AAAA,IAAA,CAAU;AAAA,IAE7B,IAAIo6D,gBAAgB3zD,OAAO,EACxBka,MAAM,QAAQ,EACdF,KAAK;AAAA,MAAC7iB,OAAO;AAAA,QAAC4X,KAAK;AAAA,QAAmCukD,IAAI/9D;AAAAA,MAAAA;AAAAA,IAAwB,CAAE,EACpF4B,MAAM,eAAe,EACrBmC,KAAKwlE,MAAS,SAAA,EACdjgE,OAAO,WAAW,EAClB1C,OAAO;AAAA,MAAC5C,QAAQ;AAAA,IAAS,CAAA;AAAA;AAAA,EAAA,CAIhC;AACJ;ACjHA,SAASwlE,QAAQvoE,YAA2C;AAC1D,SAAI,CAACA,cAAc,OAAOA,cAAe,WAChC,KAGFuP,EAAQvP,WAAW8C;AAC5B;AAEA,SAAS0lE,oBAAoBh/D,SAAwC;AAC7DksC,QAAAA,QAAQoyB,yBAAyBt+D,OAAO;AACvC,SAAA,IAAI87D,YAAY97D,OAAO,EAC3B9D,GAAG,UAAU,EACb/E,MAAM,SAAS,EACf6iB,KAAK;AAAA,IAAC7iB,OAAO;AAAA,MAAC4X,KAAK;AAAA,MAAoCukD,IAAI/9D;AAAAA,IAAAA;AAAAA,EAA0B,CAAA,EACrF22C,MAAMA,KAAK,EACX8N,UAAU9N,MAAM/nC,KAAMhF,CAAAA,SAAS4/D,QAAQ5/D,KAAKu4D,cAAc,CAAC,CAAC,CAAC;AAClE;AAGO,SAASuH,uBAAuB;AAAA,EACrCC;AAAAA,EACA1nB;AACuB,GAAqB;AAC5C,QAAM2nB,gBAAgBC,OAAAA,2BAA2B5nB,MAAM,GACjDx3C,UAA4B;AAAA,IAChC,GAAGw3C;AAAAA,IACHqhB,qBAAqBA,MAAMwG;AAAAA,IAC3BjI,qBAAsBjgD,CAAY,YAAA;AAC5Bw9C,UAAAA,UACFuK,sBAAsBG,kBAAkB;AAAA,QAAC,GAAGloD;AAAAA,QAAS,GAAGgoD;AAAAA,MAAAA,CAAc,KACtE,IAAI5H,gBAAgBv3D,OAAO;AAExB20D,aAAAA,QAAQS,MACXT,MAAAA,UAAUA,QAAQz4D,GAAG,gBAAgB,IAGnCib,QAAQ3Z,eACVm3D,UAAUA,QAAQn3D,WAAWU,sBAAeiZ,QAAQ3Z,UAAU,CAAC,IAG1Dm3D,QAAQn+D,WAAW2gB,QAAQ3gB,UAAU;AAAA,IAAA;AAAA,KAI1C6oE,mBAAqC;AAAA,IACzCC,UAAUA,MAAMN,oBAAoBh/D,OAAO;AAAA,IAC3Cu/D,kBAAkBA,IAAIC,SAASb,oBAAoB3+D,SAAS,GAAGw/D,IAAI;AAAA,IACnEC,sBAAsBA,IAAID,SAASjB,wBAAwBv+D,SAAS,GAAGw/D,IAAI;AAAA,IAC3EE,uBAAuBA,IAAIF,SAASlB,yBAAyBt+D,SAAS,GAAGw/D,IAAI;AAAA,IAC7EvpE,UAAUA,IAAIupE,SAAS,IAAIjI,gBAAgBv3D,SAAS,GAAGw/D,IAAI;AAAA,IAC3DG,kCAAkCA,IAAIH,SACpClH,mCAAmCt4D,SAAS,GAAGw/D,IAAI;AAAA,IACrDI,iBAAiB5/D,QAAQo3D;AAAAA,IAEzBsH,MAAMA,IAAIc,SAAS,IAAI1D,YAAY97D,SAAS,GAAGw/D,IAAI;AAAA,IACnDlD,UAAUA,IAAIkD,SAAS,IAAInD,gBAAgBr8D,SAAS,GAAGw/D,IAAI;AAAA,IAE3D55C,UAAUA,IAAI45C,SAAS,IAAI7L,gBAAgB3zD,SAAS,GAAGw/D,IAAI;AAAA,IAC3DK,eAAeA,IAAIL,SAAS,IAAIvK,qBAAqBj1D,SAAS,GAAGw/D,IAAI;AAAA,IACrEtG,wCAAwCA,IAAIsG,SAC1CtG,uCAAuCl5D,SAAS,GAAGw/D,IAAI;AAAA,IAEzDM,cAAcA,IAAIN,SAAS,IAAI7E,oBAAoB36D,SAAS,GAAGw/D,IAAI;AAAA,IACnEO,kBAAkBA,IAAIP,SAAS,IAAI9B,wBAAwB19D,SAAS,GAAGw/D,IAAI;AAAA,IAE3EQ,kBAAkBA,IAAIR,SAAS5K,oBAAoB50D,SAAS,GAAGw/D,IAAI;AAAA,IACnES,0BAA0BA,IAAIT,SAAS1K,kCAAkC90D,SAAS,GAAGw/D,IAAI;AAAA,IAEzFU,QAAQA,IAAIV,SAASnH,mBAAmBr4D,SAAS,GAAGw/D,IAAI;AAAA,IAExD5G,kCAAkCA,IAAI4G,SACpC5G,iCAAiC54D,SAAS,GAAGw/D,IAAI;AAAA,IAEnDxG,0BAA0BA,CACxB59C,YACAG,eAEA,IAAIg9C,gCAAgCv4D,SAAS;AAAA,MAC3C9D,IAAIkf;AAAAA,MACJG;AAAAA,MACAH;AAAAA,IAAAA,CACD;AAAA,IAEHyN,WAAYirC,CAAAA,SACHqM,QAAmBrM,mBAAAA,IAAI,IAC1B,IAAIiC,iBAAiB,EAAEltC,UAAUirC,IAAqB,IACtD,IAAIiC,iBAAiBjC,IAAsB;AAAA,IAGjDtnD,SAASA,OAAgB;AAAA,MAACtQ,IAAIkkE,0BAAS,aAAa;AAAA,MAAGviE,MAAM;AAAA,IAAA;AAAA,IAE7Dw8B,MAAMd;AAAAA,IACNv5B;AAAAA,EACF;AAEOq/D,SAAAA;AACT;ACpIO,MAAMgB,gBAAyCvqE,CAAU,UAAA;AACxD,QAAA;AAAA,IAACoxB;AAAAA,EAAAA,IAAYpxB;AAEnB,SAAIoxB,WACK;AAAA,IACLgX,OAAO;AAAA,IACP7mC,OAAO;AAAA,EAAA,IAIJ;AACT;AACAgpE,cAAc7yD,cAAc;ACV5B,MAAMjS,QAEF;AAAA,EAAC+kE,aAAa,CAAA;AAAE;AAEb,SAASC,eAAejlE,OAAoD;AACjFC,QAAM+kE,cAAchlE;AACtB;AAQO,SAASklE,eACdpxD,QACAjT,QACAskE,aACArkE,SAC2F;AAC3F,QAAMd,QAAQmlE,aAAanlE,SAAS,CAC9BglE,GAAAA,cAAc/kE,MAAM+kE,eAAe,CACnCI,GAAAA,iBAAiBvkE,OAAOD,MAAM+jC,aAC9B0gC,aAAavxD,WAAW,YAAYjT,OAAOwB;AAGjD,WAAS0Y,IAAIiqD,YAAY5nE,SAAS,GAAG2d,KAAK,GAAGA,KAAK;AAC1C3a,UAAAA,QAAO4kE,YAAYjqD,CAAC;AAE1B,QAAI,OAAO3a,SAAS,aAKlBA,MAAK06D,kBAAkBhnD,QAAQjT,QAAQ;AAAA,MACrCT,MAAAA;AAAAA,MACAyF,OAAOkV;AAAAA,IAAAA,CACR;AAAA,IAEA3a,MAAKmC,SAAS,kBACbnC,MAAKq2D,mBAAmB51D,OAAO0B,QAC/BnC,MAAKyb,QAAQnW,WAAW,mBAC1B;AACA,YAAMksC,aAAayzB,aAAa;AAAA,QAAChjE,UAAUxB,OAAOwB;AAAAA,MAAAA,IAAYumB;AAEvD,aAAA;AAAA,QACL5oB,OAAOA,MACJD,MAAM,GAAGgb,CAAC,EACVsd,OAAO,CAAC,CAAC;AAAA,UAACz3B,IAAIwkE;AAAAA,UAAgBvkE,QAAQ+wC;AAAAA,UAAY9wC;AAAAA,QAAAA,CAAQ,CAAC,CAAC;AAAA,MACjE;AAAA,IAAA;AAAA,EACF;AAGK,SAAA;AAAA,IAACgT;AAAAA,IAAgBjT;AAAAA,IAAQC;AAAAA,EAAO;AACzC;ACjDO,MAAMwkE,2BAAuE;AAAA,EAClFC,QAAQ3kD,MAAAA;AAAAA,EACRhF,QAAQmoB,MAAAA;AAAAA,EACRyhC,cAAcp5C,MAAAA;AAAAA,EACdq5C,SAAS7kD,MAAAA;AAAAA,EACT8kD,WAAWC,MAAAA;AAAAA,EACXC,UAAUD,MAAAA;AAAAA,EACVnsC,SAAS0N,MAAAA;AAAAA,EACTE,WAAWC,MAAAA;AACb;ACdO,SAASw+B,8BAA8BtjE,MAA4C;AACxF,SAAO+iE,yBAAyB/iE,IAAI;AACtC;ACOA,SAASujE,sBAAsBr3C,aAAqB;AAElD,MAAIA,YAAY;AAEVs3C,QAAAA,cAAcprE,SAASixD,eAAeoa,wBAAwB;AAEpE,MAAID,aAAa;AACTE,UAAAA,gBAAgBF,YAAY9jE,SAAS,CAAC;AAE5C,QAAI,EADiBgkE,cAAcC,eAAeD,cAAcE,eAC7C;AAEXC,YAAAA,eAAeC,iBAAiBJ,aAAa,EAAE1U;AAErD0U,oBAAc50D,MAAMkgD,YAAY,UAChCzkD,WAAW,MAAM;AAEfm5D,sBAAc50D,MAAMkgD,YAAY6U;AAAAA,SAC/B,CAAC;AAAA,IAAA;AAAA,EACN;AAEJ;AAEA,MAAME,WAAWpqE,wBAAO+2D,qBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC,SAAAsT,6BAAAxrE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAsC;AAAA,IAAA+zB,YAAAA;AAAAA,IAAAhR;AAAAA,MAAA1iB,IAO3C;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAg0B,CAAAA,MAAAA,eAAAh0B,SAAAgjB,YAGlDpiB,KAAAsL,CAAA,MAAA;AACEA,MAACqsC,gBAAiB,GAClB8yB,sBAAsBr3C,WAAU,GAChChR,SAAS;AAAA,EACVhjB,GAAAA,OAAAg0B,aAAAh0B,OAAAgjB,UAAAhjB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AALH,QAAA+rE,oBAA0BnrE;AAOzBI,MAAAA;AAAAhB,WAAAg0B,eAKShzB,KAACK,2BAAAA,IAAA,UAAA,EAAwB2yB,iBAAAA,YAAc,CAAA,GAAAh0B,OAAAg0B,aAAAh0B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAAg0B,CAAAA,MAAAA,eAAAh0B,SAAAU,KAElCO,KACLP,EADKszB,cACH,uCACA,kCADoC,GACDh0B,OAAAg0B,aAAAh0B,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAiB,MAH7BgC,KAAA;AAAA,IAAAwI,SACHxK;AAAAA,EAEgC,GAC1CjB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAA+rE,EAAAA,MAAAA,qBAAA/rE,UAAAgB,MAAAhB,EAAA,EAAA,MAAAiD,MAPHE,KAAC9B,+BAAAkK,0BAAAA,QAAA,EACM,MAAA,SACC,MAAAvK,IACQ,cAAAiC,IAKL8oE,SAAgB,kBACzB,CAAA,GAAA/rE,QAAA+rE,mBAAA/rE,QAAAgB,IAAAhB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GATFmD;AASE;ACpEO6oE,MAAAA,eAAevqE,wBAAO+I,QAAK;AAAA;AAAA,GAI3ByhE,cAAcxqE,wBAAOa,OAAI;AAAA,gBACrBvC,CAAAA,UAAUA,MAAMmsE,UAAU;AAAA;AAAA,GAI9Bv5D,SAAOlR,iBAAAA,OAAOC,GAAG,GAAA,EAAwB,CAAC;AAAA,EAACyqE;AAAQ,MACvDhxD,iBAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAKHgxD,YACFhxD,iBAAAA;AAAAA;AAAAA;AAAAA,KAGC;AAAA,GAEJ,GCjBYixD,iCAA8E;AAAA,EACzFpB,SAAS;AAAA,EACTF,QAAQ;AAAA,EACR/rC,SAAS;AAAA,EACTosC,UAAU;AAAA,EACVF,WAAW;AAAA,EACXt+B,WAAW;AAAA,EACXo+B,cAAc;AAAA,EACd5pD,QAAQ;AACV;ACNO,SAAAkrD,gBAAA/rE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAyB;AAAA,IAAAqsE;AAAAA,IAAAC;AAAAA,IAAAz8B;AAAAA,IAAA08B,aAAA5rE;AAAAA,EAAAN,IAAAA,IAI9BksE,cAAA5rE,OAAkBgK,cAAlBhK;AAAkBI,MAAAA;AAAA,MAAAhB,EAAAusE,CAAAA,MAAAA,WAAAvsE,SAAAwsE,aAAA;AAAAvrE,QAAAA;AAAAjB,aAAAwsE,eAIDvrE,MAAAwrE,CAAAA,0CACVC,OAAAA,YAA8BD,EAAAA,cAAqBD,YAAAA,GAA9B,MAA6C,GACpExsE,OAAAwsE,aAAAxsE,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAFAgB,KAAAurE,QAAO9hE,IAAKxJ,GAEZ,GAACjB,OAAAusE,SAAAvsE,OAAAwsE,aAAAxsE,OAAAgB;AAAAA,EAAA;AAAAA,SAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAssE,CAAAA,MAAAA,aAAAtsE,SAAA8vC,QAAA9vC,EAAA,CAAA,MAAAgB,MAHJC,oCAAC0rE,GAAAA,aAAuBL,EAAAA,WAAiBx8B,MACtC9uC,UAGH,GAAA,CAAA,GAAchB,OAAAssE,WAAAtsE,OAAA8vC,MAAA9vC,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAJdiB;AAIc;ACAX,MAAM2rE,UAAUnrE,iBAAAA,OAAOa,OAAI,EAAuCvC,CAAU,UAAA;AACjF,QAAMkC,UAAQ4qE,MAAAA,YAAY9sE,MAAMkC,KAAK,GAC/BX,QAAQvB,MAAM+sE;AAEb3xD,SAAAA,iBAAAA;AAAAA,yBACgBlZ,QAAMX,MAAMyrE,OAAOzrE,KAAK,EAAEga,EAAE;AAAA,wBAC7BrZ,QAAMX,MAAMyrE,OAAOzrE,KAAK,EAAEia,EAAE;AAAA;AAAA;AAAA;AAAA,aAIvCtZ,QAAM8qE,OAAOz3C,MAAM,CAAC,EAAEwa,IAAI;AAAA,cACzB7tC,QAAM8qE,OAAOz3C,MAAM,CAAC,EAAEwa,IAAI;AAAA;AAAA;AAAA;AAAA;AAKxC,CAAC,GAEKk9B,2BAA4F;AAAA,EAChGhC,SAAS;AAAA,EACTF,QAAQ;AAAA,EACR/rC,SAAS;AAAA,EACTosC,UAAU;AAAA,EACVF,WAAW;AAAA,EACXt+B,WAAW;AAAA,EACXo+B,cAAc;AAAA,EACd5pD,QAAQ;AAAA,EACR8rD,iBAAiB;AACnB,GAUMC,wBAA6C;AAAA,EACjDC,SAAS;AAAA,EACTniC,mBAAmB;AACrB,GAEMoiC,iBAAiB3rE,iBAAAA,OAAO4rE,WAAQ,EAAGttE,CAAU,UAAA;AAC3CkC,QAAAA,UAAQ4qE,MAAAA,YAAY9sE,MAAMkC,KAAK;AAC9BkZ,SAAAA,iBAAAA;AAAAA;AAAAA,aAEIlZ,QAAM8qE,OAAOz3C,MAAM,CAAC,EAAEwa,IAAI;AAAA,cACzB7tC,QAAM8qE,OAAOz3C,MAAM,CAAC,EAAEwa,IAAI;AAAA;AAExC,CAAC,GAEKw9B,eAAe7rE,iBAAAA,OAAO4rE,GAAAA,QAAQ,EAAGttE,CAAU,UAAA;AACzCkC,QAAAA,UAAQ4qE,MAAAA,YAAY9sE,MAAMkC,KAAK;AAC9BkZ,SAAAA,iBAAAA;AAAAA;AAAAA,cAEKlZ,QAAMsrE,KAAKl8D,KAAKikB,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAEjD,CAAC,GAEKk8C,WAAWltE,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAC;AAAA,IAAAwsE;AAAAA,EAAAA,IAAAnsE,IAChB,CAAAmtE,MAAApxD,OAAA,IAAwBqxD,OAAAA,QAAQjB,MAAM;AAAC7rE,MAAAA;AAAAZ,IAAAqc,CAAAA,MAAAA,WAAArc,SAAAytE,QAInC7sE,KAACS,2BAAA,IAAAK,UAAK2a,UAAO,WAAA,CAAKoxD,OAAQpsE,2BAAA,IAAA,gBAAA,EAAe,UAAA,GAAQ,CAAA,IAAOA,2BAAAA,IAAAqrE,OAAA,YAAA,EAAiBe,MAAO,EAAE,CAAA,GAAMztE,OAAAqc,SAAArc,OAAAytE,MAAAztE,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAqc,CAAAA,MAAAA,WAAArc,SAAAytE,QACxFzsE,KAACK,2BAAAA,IAAAK,GAAA,KAAA,EACE2a,sBAAYoxD,MAAIh2D,cACdpW,+BAAAwB,GAAAA,MAAA,EAAW,MAAC,GACX,UAAAxB,2BAAAA,IAAC,cAAa,EAAA,UAAO,GACvB,CAAA,GAAA,IAECA,+BAAAwB,GAAAA,MAAA,EAAK,OAAI,IAAQ,MAAA,GACf4qE,UAAIh2D,KAAAA,YACP,CAAA,EAEJ,CAAA,GAAMzX,OAAAqc,SAAArc,OAAAytE,MAAAztE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,EAAAY,CAAAA,MAAAA,MAAAZ,SAAAgB,MAAAhB,EAAA,CAAA,MAAAysE,UAZRxrE,qCAACqB,SAAW,EAAA,OAAA,UAAc,KAAA,GAAyB,SAAC,GAClD1B,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,EAAAA,KAFgCyrE,MAalC,GAAOzsE,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAysE,QAAAzsE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAbPiB;AAaO,GAGL0sE,iBAAiBrtE,CAAA,OAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAC;AAAA,IAAA2tE;AAAAA,MAAAttE,IACtB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,QAAQ;AAACC,MAAAA;AAAAZ,WAAAU,KAK3BE,KAAAF,EAAE,wBAAwB,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MAFhCI,KAACK,2BAAAA,IAAAK,GAAAA,KAAa,EAAA,SAAA,GAAkB,eAAA,GAC9B,UAAAL,2BAAAA,IAACwB,GAAAA,QAAW,MAAA,GAAU,QAAA,UACnBjC,UACH,GAAA,CAAA,EACF,CAAA,GAAMZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAA4tE,iBACL3sE,KAAA2sE,cAAanjE,IAAAS,OAEb,GAAClL,OAAA4tE,eAAA5tE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAA,SAAAjD,EAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MARJgC,KAACG,2BAAA,KAAAoH,GAAqB,OAAA,EAAA,eAAC,GACrBxJ,UAAAA;AAAAA,IAAAA;AAAAA,IAKCC;AAAAA,EAAAA,EAGH,CAAA,GAAQjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA,GATRiD;AASQ;AAGL,SAAA4qE,aAAAvtE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAsB;AAAA,IAAA6tE;AAAAA,IAAA1pB;AAAAA,IAAA2pB;AAAAA,IAAAH;AAAAA,IAAAI;AAAAA,MAAA1tE,IAO3B;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,QAAQ,GACnC;AAAA,IAAAmH;AAAAA,IAAAmmE,cAAAC;AAAAA,EAAAA,IAAwCJ;AAAKltE,MAAAA;AAAAZ,WAAA8H,QACvBlH,KAAAwqE,8BAA8BtjE,IAAI,GAAC9H,OAAA8H,MAAA9H,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAzD,QAAAmuE,gBAAsBvtE;AAAmCI,MAAAA;AAAAhB,IAAA,CAAA,MAAA8tE,MAAAM,WACnCptE,KAAA6O,MAAAC,KAAWg+D,MAAKM,OAAQ,GAACpuE,EAAA,CAAA,IAAA8tE,MAAAM,SAAApuE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAA/C,QAAAquE,gBAAsBrtE;AAAyBC,MAAAA;AAAAjB,WAAA4tE,iBACjB3sE,KAAA2sE,gBAAgB/9D,MAAAC,KAAW89D,aAAa,IAAM,CAAA,GAAA5tE,OAAA4tE,eAAA5tE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAA5EsuE,QAAAA,wBAA8BrtE,IAC9BstE,eAAqBzmE,SAAS;AAAQ7E,MAAAA;AAAAjD,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACDE,KAAA;AAAA,IAAAurE,WAAY;AAAA,IAAQC,WAAa;AAAA,EAAA,GAAQzuE,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAA9E0uE,QAAAA,aAAmBC,yBAAkB1rE,EAAyC;AAACE,MAAAA;AAAAnD,WAAAkuE,aAClE/qE,KAAA,IAAAu4B,KAASwyC,SAAS,GAACluE,OAAAkuE,WAAAluE,OAAAmD,MAAAA,KAAAnD,EAAA,CAAA;AAEhC,QAAA4uE,iBAAuB1jC,OAAAA,gBAFV/nC,MAEkC,IAAE+pE,qBAAuB;AAAC,MAAAroE,IAAAmC;AAAA,MAAAhH,EAAA0uE,CAAAA,MAAAA,cAAA1uE,UAAAkuE,WAAA;AAGvEW,UAAAA,aAAA,IAAAnzC,KAA4BwyC,SAAS;AACflnE,SAAA0nE,WAAUx7B,OAAQ27B,UAAU,GAAC7uE,OAAA0uE,YAAA1uE,QAAAkuE,WAAAluE,QAAAgH;AAAAA,EAAA;AAAAA,SAAAhH,EAAA,EAAA;AAA7BgH,OAAAA;AAFxB,QAAA8nE,qBAA2BjqE;AAKAoC,MAAAA;AAAAjH,IAAA8tE,EAAAA,MAAAA,SAAA9tE,UAAAuuE,gBAAAvuE,EAAA,EAAA,MAAA+tE,YAGzB9mE,KAAA8nE,CAAA,QAAA;AACEA,QAAG37D,kBACH27D,IAAGx2B,mBAECg2B,gBACFR,SAASD,KAAK;AAAA,EAAA,GAEjB9tE,QAAA8tE,OAAA9tE,QAAAuuE,cAAAvuE,QAAA+tE,UAAA/tE,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AARH,QAAAma,cAAoBlT;AAUnBC,MAAAA;AAAAlH,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAemBmE,KAAA;AAAA,IAAAkqB,UAAW;AAAA,EAAA,GAAWpxB,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,YAAAquE,iBAChCjnE,qCAAC,iBAA2B,EAAA,WAAC,GAAWinE,wBAAqB,SAAK,GAAAruE,QAAAquE,eAAAruE,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AACjBsH,QAAAA,MAAA0lE,yBAAyBllE,IAAI;AAAC8B,MAAAA;AAAA5J,YAAAmuE,iBAC7DvkE,MAAAukE,gDAAkB,eAAgB,EAAA,GAAAnuE,QAAAmuE,eAAAnuE,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAAlK,YAAA4J,OAAlDM,MAAC7I,+BAAAwB,GAAAA,MAAA,EAAW,MAAA,GAAI+G,UAAAA,KAAmC,GAAO5J,QAAA4J,KAAA5J,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,IAAAsH,EAAAA,MAAAA,OAAAtH,UAAAkK,OAD5DE,MAAC/I,2BAAAA,IAAA,SAAA,EAAc,OAAA,UAAiB,SAAA,UAAiB,QAAAiG,KAC/C4C,UAAAA,IACF,CAAA,GAAUlK,QAAAsH,KAAAtH,QAAAkK,KAAAlK,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAoK,OAJZC,MAKMjH,2BAAA,KAAA,OALM,EAAA,OAAA8D,IACVE,UAAAA;AAAAA,IAAAA;AAAAA,IACAgD;AAAAA,EAAAA,EAGF,CAAA,GAAMpK,QAAAoH,KAAApH,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAAU,EAAAA,MAAAA,KAAAV,UAAA8H,QAGDyC,MAAA7J,EAAC0rE,+BAAgCtkE,IAAI,CAAC,KAAwBzG,2BAAA,IAAA,QAAA,EAAT,UAAE,KAAA,CAAA,GAAOrB,QAAAU,GAAAV,QAAA8H,MAAA9H,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAAAmL,MAAAA;AAAAnL,YAAAuK,OADjEY,MAAC9J,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,SAAU,QAAA,UACnB0H,eACH,GAAOvK,QAAAuK,KAAAvK,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA;AAAA2W,MAAAA;AAAA3W,IAAA8uE,EAAAA,MAAAA,sBAAA9uE,UAAAkuE,aAAAluE,EAAA,EAAA,MAAA4uE,kBAEPj4D,qCAAC9T,SAAQ,EAAA,IAAA,QAAa,MAAA,GAAG,OAAI,IAAYqrE,UAAAA,WAAkBY,OAAiB,oBACzEF,0BACH,GAAO5uE,QAAA8uE,oBAAA9uE,QAAAkuE,WAAAluE,QAAA4uE,gBAAA5uE,QAAA2W,OAAAA,MAAA3W,EAAA,EAAA;AAAA6W,MAAAA;AAAA7W,IAAAmL,EAAAA,MAAAA,OAAAnL,UAAA2W,OAPTE,MAACzT,2BAAA,KAAAoH,GAAa,OAAA,EAAA,OAAC,GACbW,UAAAA;AAAAA,IAAAA;AAAAA,IAIAwL;AAAAA,EAAAA,EAGF,CAAA,GAAQ3W,QAAAmL,KAAAnL,QAAA2W,KAAA3W,QAAA6W,OAAAA,MAAA7W,EAAA,EAAA;AAAA8W,MAAAA;AAAA9W,YAAAsuE,yBAEPx3D,MAAAw3D,sBAAqB3rE,SAAW,KAC/BtB,2BAAAA,IAACiB,GAAAA,MAAW,EAAA,SAAW,SAAA,YAAiB,OAAA,UACtC,UAAAjB,2BAAA,IAAC6B,0BACW,SAAA,EAAA,WAAA,OACD,SAAC7B,2BAAAA,IAAA,gBAAA,EAA8BitE,eAAAA,sBAAAA,CAAwB,GAChE,QAAK,IAEL,UAAAjtE,2BAAA,IAACK,UAAiB,gBAAa,UAAA,GAC7B,UAACL,2BAAAA,IAAA,iBAAA,EACY,cACFitE,SAAAA,uBACH,MAAC,GACM,aAAA,GAAA,CAEjB,EAAA,CAAA,EAAA,CACF,EACF,CAAA,GACDtuE,QAAAsuE,uBAAAtuE,QAAA8W,OAAAA,MAAA9W,EAAA,EAAA;AAAA+W,MAAAA;AAAA/W,IAAAqK,EAAAA,MAAAA,OAAArK,UAAA6W,OAAA7W,EAAA,EAAA,MAAA8W,OAlCHC,MAAA3T,2BAAA,KAACd,WAAW,OAAA,UAAc,KAAC,GACzB+H,UAAAA;AAAAA,IAAAA;AAAAA,IAMAwM;AAAAA,IAUCC;AAAAA,EAAAA,GAkBH,GAAO9W,QAAAqK,KAAArK,QAAA6W,KAAA7W,QAAA8W,KAAA9W,QAAA+W,OAAAA,MAAA/W,EAAA,EAAA;AAAAgX,MAAAA;AAAAhX,IAAA8tE,EAAAA,MAAAA,MAAA3nE,MAAAnG,EAAA,EAAA,MAAAma,eAAAna,EAAAokD,EAAAA,MAAAA,cAAApkD,UAAA+W,OA7CTC,MAAC3V,2BAAAA,IAAAiJ,GAAAA,MAAA,EACI,IAAA,UACM6P,SAAAA,aACA,SAAC,GACDiqC,SAAAA,YACD,WACA,WAAA,gBACI,eAAA,wBACG,iBAAA0pB,MAAK3nE,IAEpB4Q,UAoCF,IAAA,CAAA,GAAO/W,EAAA,EAAA,IAAA8tE,MAAA3nE,IAAAnG,QAAAma,aAAAna,QAAAokD,YAAApkD,QAAA+W,KAAA/W,QAAAgX,OAAAA,MAAAhX,EAAA,EAAA;AAAAiX,MAAAA;AAAA,SAAAjX,EAAAguE,EAAAA,MAAAA,eAAAhuE,UAAAgX,OA/CTC,MAAC7T,2BAAA,KAAAd,GAAA,MAAA,EAAW,OAAA,UAAc,KAAC,GACzB0U,UAAAA;AAAAA,IAAAA;AAAAA;IAgDF,CAAA,GAAOhX,QAAAguE,aAAAhuE,QAAAgX,KAAAhX,QAAAiX,OAAAA,MAAAjX,EAAA,EAAA,GAjDPiX;AAiDO;AAtGY,SAAA/L,QAAAuhE,QAAA;AAUf,SAAAprE,2BAAA,IAAC,UAA8BorE,EAAAA,OAAAA,GAAhBA,MAA0B;AAAA;AClGpCuC,MAAAA,oBAAqBlB,WAChCA,MAAMhmE,SAAS,WAEJmnE,iBAAkBnB,CAAAA,UAAwCA,MAAMhmE,SAAS;AAQtF,SAASonE,yBAAyBC,QAAiB;AACjD,MAAIC,kBAAuC;AAE3C,WAAShkE,QAAQ+jE,OAAOxsE,SAAS,GAAGyI,SAAS,GAAGA,SAAS;AACjD0iE,UAAAA,QAAQqB,OAAO/jE,KAAK;AACtB6jE,QAAAA,eAAenB,KAAK,GAAG;AACPA,wBAAAA;AAClB;AAAA,IAAA;AAEF,QAAIA,MAAMhmE,SAAS;AAEZ;AAAA,EAAA;AAGFsnE,SAAAA;AACT;AAQO,SAASC,kBAAkBF,QAA8C;AAC9E,QAAMpxC,SAAsC,CAAE;AAE9C,aAAW+vC,SAASqB,QAAQ;AACtBF,QAAAA,eAAenB,KAAK,GAAG;AACzB/vC,aAAOjyB,KAAK;AAAA,QACV,GAAGgiE;AAAAA,QACHhmE,MAAM;AAAA,QACNN,UAAU,CAAE;AAAA,QACZomE,mCAAmB79D,IAAI;AAAA;AAAA,MAAA,CACxB;AACD;AAAA,IAAA;AAEEi/D,QAAAA,kBAAkBlB,KAAK,GAAG;AACtBsB,YAAAA,kBAAkBF,yBAAyBnxC,MAAM;AACvD,UAAI+vC,MAAMhmE,SAAS,eAAesnE,iBAAiBtnE,SAAS,WAAW;AACrE+H,cAAMC,KAAKg+D,MAAMM,OAAO,EAAEjuB,QAASh6C,CAAO,OAAA;AACxBynE,0BAAAA,cAAc3sD,IAAI9a,EAAE;AAAA,QAAA,CACrC,GACDipE,gBAAgB5nE,SAASsE,KAAKgiE,MAAM3nE,EAAE,GACtC43B,OAAOjyB,KAAK;AAAA,UACV,GAAGgiE;AAAAA,UACH1wC,UAAUgyC,gBAAgBjpE;AAAAA,QAAAA,CAC3B;AACD;AAAA,MAAA;AAAA,IACF;AAEE6oE,sBAAkBlB,KAAK,KACzB/vC,OAAOjyB,KAAKgiE,KAAK;AAAA,EAAA;AAId/vC,SAAAA;AACT;AChDawtC,MAAAA,2BAA2B,yBAE3B+D,WAAWA,CAAC;AAAA,EACvBH;AAAAA,EACAI;AAAAA,EACAC,WAAWC;AAAAA,EACXC;AAAAA,EACA3B;AAAAA,EACA4B,gBAAgB;AACH,MAAM;AACnB,QAAM,CAACtjD,SAASC,UAAU,IAAI1a,MAAAA,SAAS,EAAK,GACtC;AAAA,IAAClR;AAAAA,EAAAA,IAAKC,OAAAA,eAAe,QAAQ,GAC7BivE,kBAAkBH,eAAetpE,IACjC0pE,qBAAqBznD,cAAQ,MAAMinD,kBAAkBF,MAAM,GAAG,CAACA,MAAM,CAAC,GAEtE,CAACW,iBAAiBC,kBAAkB,IAAIn+D,MAAAA,SAAsB,MAAM;AACxE,QAAIg+D,iBAAiB;AAEnB,YAAMl7D,WAAWm7D,mBAAmBx6D,KAAMy4D,CAAUA,UAAAA,MAAM3nE,OAAOypE,eAAe;AAChF,UAAIl7D,YAAYs6D,kBAAkBt6D,QAAQ,KAAKA,SAAS0oB;AACtD,eAAWrtB,oBAAAA,IAAI,CAAC2E,SAAS0oB,QAAQ,CAAC;AAAA,IAAA;AAGtC,+BAAWrtB,IAAI;AAAA,EAAA,CAChB;AAEDwC,QAAAA,UAAU,MAAM;AAEd,QAAIq9D,iBAAiB;AACnB,YAAMl7D,aAAWm7D,mBAAmBx6D,KAAMy4D,CAAUA,YAAAA,QAAM3nE,OAAOypE,eAAe;AAChF,UAAIl7D,cAAYs6D,kBAAkBt6D,UAAQ,KAAKA,WAAS0oB,UAAU;AAChE,cAAMA,WAAW1oB,WAAS0oB;AAC1B2yC,2BAAoBxgD,CAAS,SAAA;AAC3B,cAAIA,KAAK7M,IAAI0a,QAAQ,EAAU7N,QAAAA;AACzBC,gBAAAA,OAAO,IAAIzf,IAAIwf,IAAI;AACpBtO,iBAAAA,KAAAA,IAAImc,QAAQ,GACV5N;AAAAA,QAAAA,CACR;AAAA,MAAA;AAAA,IACH;AAAA,EACF,GACC,CAACqgD,oBAAoBD,eAAe,CAAC;AAElCI,QAAAA,iBAAiB5nD,cAAQ,MACtBynD,mBAAmB5kE,OAAQ6iE,CAC5BmB,YAAAA,eAAenB,OAAK,KAAK,CAACA,QAAM1wC,WAAiB,KAE9C0yC,gBAAgBptD,IAAIorD,QAAM1wC,QAAQ,CAC1C,GACA,CAACyyC,oBAAoBC,eAAe,CAAC;AAExCv9D,QAAAA,UAAU,MAAM;AAKVy9D,mBAAertE,SAAS,MAAM4sE,iBAChCG,WAAW;AAAA,EAEZ,GAAA,CAACM,gBAAgBT,eAAeG,UAAU,CAAC;AAE9C,QAAMO,qBAAqBjoD,MAAAA,YACxBoV,CAAqB,eAAA,MACpB2yC,mBAAoBxgD,CAAS,WAAA;AACrBC,UAAAA,SAAO,IAAIzf,IAAIwf,MAAI;AAErBA,WAAAA,OAAK7M,IAAI0a,UAAQ,IAAG5N,OAAKrO,OAAOic,UAAQ,IACvC5N,OAAKvO,IAAImc,UAAQ,GAEf5N;AAAAA,EAAAA,CACR,GACH,CAAA,CACF,GAEM0gD,gBAAgB9nD,MACpB,QAAA,MACEwnD,kBAAkBI,eAAeryC,UAAWmwC,CAAAA,YAAUA,QAAM3nE,OAAOypE,eAAe,IAAI,IACxF,CAACA,iBAAiBI,cAAc,CAClC,GACMG,oBAAoBnoD,kBACvB8lD,CAAqC,YAAA;AACpC,UAAMsC,gBAAgBjB,OAAO95D,KAAMg7D,OAAMA,EAAElqE,OAAO2nE,QAAM3nE,EAAE;AACtDiqE,oBAAerC,SAASqC,aAAa,KAEvCnoD,QAAQnnB,MAAM,+BAA+B,GAC7CitE,SAASD,OAAK;AAAA,EAAA,GAGlB,CAACqB,QAAQpB,QAAQ,CACnB,GAEMtpB,aAAaz8B,MAAAA,YACjB,CAAC8lD,SAAO;AAAA,IAACn5B;AAAAA,EAAAA,MAIJvxC,2BAAA,KAAA1B,QAAA,EACC,eAAe,GACf,YALYizC,gBAAgB,IAKN,IAAI,GAC1B,cAAc,GACd,aAAaq6B,kBAAkBlB,OAAK,KAAKA,QAAM1wC,WAAW,IAAI,GAE9D,UAAA;AAAA,IAAA/7B,+BAAC,gBACC,OAAOysE,SACP,YAAY8B,oBAAoB9B,QAAM3nE,IACtC,UAAUgqE,mBACV,eAAelB,eAAenB,OAAK,IAAIA,QAAMF,gBAAgBhjE,QAC7D,aACEqkE,eAAenB,OAAK,KAAKA,QAAMtmE,SAAS7E,SAAS,IAC9CtB,2BAAA,IAAA,8BAAA,EACC,YAAYyuE,gBAAgBptD,IAAIorD,QAAM3nE,EAAE,GACxC,UAAU8pE,mBAAmBnC,QAAM3nE,EAAE,EAAA,CACrC,IACA,MACL;AAAA,IAEFwuC,gBAAgBq7B,eAAertE,SAAS,KAAK4sE,gDAAkB/9D,OAAAA,cAAe,CAAA,CAAA;AAAA,EAAA,GACjF,GAGJ,CACEs+D,iBACAE,eAAertE,QACfstE,oBACAE,mBACAZ,eACAK,eAAe,CAEnB;AAEAr9D,SAAAA,MAAAA,UAAU,MAAM+Z,WAAW,EAAI,GAAG,CAAA,CAAE,GAGlClpB,2BAAA;AAAA,IAACuP;AAAAA,IAAA;AAAA,MASC,UAAU,CAACu9D,iBAAiB7jD;AAAAA,MAC5B,WAAQ;AAAA,MAEP2jD,UAAAA;AAAAA,QAAAA,eAAertE,WAAW,KACzBS,2BAAAA,KAAC,gBAAa,SAAS,GAAG,OAAO,GAC/B,UAAA;AAAA,UAAA/B,2BAAAA,IAACwB,WAAK,MAAM,GAAG,QAAO,UACnBnC,UAAAA,EAAE,0CAA0C,GAC/C;AAAA,UACAW,+BAACwB,GAAAA,QAAK,OAAK,IAAC,MAAM,GACfnC,UAAAA,EAAE,gDAAgD,EACrD,CAAA;AAAA,QAAA,GACF;AAAA,QAGDsvE,eAAertE,SAAS,KACtBtB,2BAAA,IAAA,aAAA,EAAY,WAAU,UAAS,YAAYsuE,eAAe,IAAIpE,0BAC7D,UAAClqE,2BAAAA,IAAAujD,OAAA,aAAA,EACC,oBAAmB,gBACnB,WAAWlkD,EAAE,0BAA0B,GACvC,WAAU,QACV,cAAcwvE,eACd,oBAAmB,UACnB,YAAY,IACZ,OAAOF,gBACP,cAAcN,YACd,yBAAyB,IACzB,UAAU,GACV,YACA,YAAY,IAAM,EAEtB,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEJ;AAEJ;AAEAJ,SAAS73D,cAAc;AC7MhB,SAAA64D,gBAAA;AAAAtwE,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,QAAQ;AAACL,MAAAA;AAAAN,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAIhCzC,KAACe,2BAAA,IAAAixC,qBAAkB,EAAA,MAAA,YACjB,UAACjxC,2BAAAA,IAAA62B,MAAA,kBAAA,EAAgB,GACnB,GAAel4B,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAU,KAGVE,KAAAF,EAAE,4CAA4C,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MADlDI,oCAACsxC,qBAAmB,EAAA,MAAC,GAAO,MAAA,YAAkB,QAAA,UAC3C1xC,UACH,GAAA,CAAA,GAAeZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAU,KAEZO,KAAAP,EAAE,kDAAkD,GAACV,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAiB,MADxDgC,KAAC5B,2BAAAA,IAAAixC,OAAA,cAAA,EAAmB,SAAQ,MAAA,YACzBrxC,cACH,GAAejB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAA,SAAAnD,EAAAgB,CAAAA,MAAAA,MAAAhB,UAAAiD,MAVnBE,qCAACb,WAAW,OAAA,cAAkB,KAAA,GAAY,SAAC,GACzChC,UAAAA;AAAAA,IAAAA;AAAAA,IAGA8C,2BAAAA,KAACoH,GAAAA,OAAa,EAAA,OAAC,GACbxJ,UAAAA;AAAAA,MAAAA;AAAAA,MAGAiC;AAAAA,IAAAA,EAGF,CAAA;AAAA,EAAA,EACF,CAAA,GAAOjD,OAAAgB,IAAAhB,QAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA,GAZPmD;AAYO;ACKX,MAAMwP,OAAOlR,wBAAOskC,iCAAO;AAAA;AAAA;AAAA,GAKdwqC,uBAAuB;AAE7B,SAAAC,aAAAlwE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAsB;AAAA,IAAA6tE;AAAAA,IAAAr3C;AAAAA,IAAAne;AAAAA,MAAAhY,IAC3B;AAAA,IAAAq8C;AAAAA,IAAAlB;AAAAA,IAAAC;AAAAA,IAAAxpC;AAAAA,IAAA2xB;AAAAA,EAAAA,IAAiFpX,mBACjF,CAAA2xB,MAAAqyB,OAAA,IAAwB7+D,MAAAA,WAAc,GACtC,CAAA8+D,QAAAC,SAAA,IAA4B/+D,MAAAA,aAAuC,GACnE,CAAAg/D,YAAAC,aAAA,IAAoCj/D,mBAAiC,GAErE1I,QAAcC,GAAAA,YAEdgmE,SAAepqC,OAAAA,oBAAoBlB,eAAa34B,OAAyB,GACzEmR,UAAgB0oB,OAAAA,oBAAoBlB,eAAa1zB,QAA4B,GAC7Eo/D,gBAAsBxqC,2BAAoBlB,eAAazzB,QAAgC,GACvF0gE,eAAqB/rC,OAAAA,oBAAoBlB,eAAaxzB,QAA+B,GACrF0gE,YAAkBhsC,OAAAA,oBAAoBlB,eAAamtC,QAA4B,GAE/E;AAAA,IAAAtwE;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,QAAQ;AAACC,MAAAA;AAAAZ,IAAAy2B,CAAAA,MAAAA,QAAAz2B,SAAAy7C,mBAEL76C,KAAAA,MAAA;AACb61B,oBAAAA,IAAI,GACpBg6C,UAAY;AAAA,EACbzwE,GAAAA,OAAAy2B,MAAAz2B,OAAAy7C,iBAAAz7C,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAAixE,aAAmBrwE;AAGQI,MAAAA;AAAAhB,WAAAy7C,mBAEKz6C,KAAAA,MAAA;AACd,oBAAA,QAAQ,GACxByvE,UAAa;AAAA,EAAC,GACfzwE,OAAAy7C,iBAAAz7C,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHD,QAAA4yB,cAAoB5xB;AAGCC,MAAAA;AAAAjB,IAAA0wE,CAAAA,MAAAA,UAAA1wE,SAAA4yB,eAAA5yB,EAAA,CAAA,MAAAo+C,QAGnBn9C,KAAAkS,CAAA,UAAA;AACMirC,aAASjrC,MAAK6F,QAAS,YAAY7F,MAAK6F,QAAS,WACnD4Z,YAAAA,GACA89C,QAAMje,MAAA;AAAA,EAAA,GAETzyD,OAAA0wE,QAAA1wE,OAAA4yB,aAAA5yB,OAAAo+C,MAAAp+C,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAIHumC,GAAAA,iBAV4BtlC,EAUQ;AAACgC,MAAAA;AAAAjD,IAAA0wE,CAAAA,MAAAA,UAAA1wE,UAAA4wE,cACK3tE,KAAAA,MAAOytE,CAAAA,QAAQE,UAAU,GAAC5wE,OAAA0wE,QAAA1wE,QAAA4wE,YAAA5wE,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAApEwmC,GAAAA,qBAAqB4X,QAAQxrB,aAAa3vB,EAA0B;AAACE,MAAAA;AAAAnD,IAAAy7C,EAAAA,MAAAA,mBAAAz7C,EAAA,EAAA,MAAA28C,oBAAA38C,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAA6jC,iBAAA7jC,UAAAkJ,SAGnE/F,KAAA+tE,CAAA,aAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,SAAAC,KAAA,IAAyBvtC,cAAawtC,gBAAiBH,QAAQ;AAC/Dz1B,sBAAgB,QAAQ,GACxBkB,iBAAiBw0B,SAASC,KAAK;AAAA,aAACvsE,KAAA;AACzBq1B,YAAAA,MAAAA;AACPhxB,YAAK4C,KAAA;AAAA,QAAAglB,UAAA;AAAA,QAAAnI,aAEUuR,IAAGh5B;AAAAA,QAAAuD,QACR;AAAA,QAAOrD,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,QAAAy7C,iBAAAz7C,QAAA28C,kBAAA38C,QAAAU,GAAAV,QAAA6jC,eAAA7jC,QAAAkJ,OAAAlJ,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAdH,QAAAsxE,YAAkBnuE;AAgBjB0B,MAAAA;AAAA7E,IAAAy7C,EAAAA,MAAAA,mBAAAz7C,EAAA,EAAA,MAAA28C,oBAAA38C,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAA6jC,iBAAA7jC,UAAAkJ,SAGCrE,KAAA0sE,CAAA,eAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,WAAAC,OAAA,IAAyB5tC,cAAa6tC,kBAAmBH,UAAU;AACnE91B,sBAAgB,QAAQ,GACxBkB,iBAAiBw0B,WAASC,OAAK;AAAA,aAACpqE,KAAA;AACzBkzB,YAAAA,QAAAA;AACPhxB,YAAK4C,KAAA;AAAA,QAAAglB,UAAA;AAAA,QAAAnI,aAEUuR,MAAGh5B;AAAAA,QAAAuD,QACR;AAAA,QAAOrD,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,QAAAy7C,iBAAAz7C,QAAA28C,kBAAA38C,QAAAU,GAAAV,QAAA6jC,eAAA7jC,QAAAkJ,OAAAlJ,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAdH,QAAA2xE,cAAoB9sE;AAgBnBmC,MAAAA;AAAAhH,IAAAqc,EAAAA,MAAAA,WAAArc,UAAA6jC,iBAEkC78B,KAAAA,MAAA;AAC5BqV,eACHwnB,cAAa+tC,SAAU;AAAA,EAE1B5xE,GAAAA,QAAAqc,SAAArc,QAAA6jC,eAAA7jC,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAJD,QAAA6xE,iBAAuB7qE;AAIKC,MAAAA;AAAA,OAAA;AAAA,QAGtBy0C,eAAa;AAAAx0C,UAAAA;AAAAlH,QAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAASmE,MAAA7F,2BAAAA,IAAC,gBAAgB,CAAA,GAAArB,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA,GAAxBiH,KAAOC;AAAiBmP,YAAAA;AAAAA,IAAAA;AAAA,QAEvCogB,SAAS,OAAK;AAAAvvB,UAAAA;AAAAlH,QAAAmvE,EAAAA,MAAAA,UAAAnvE,EAAA,EAAA,MAAA6xE,kBAAA7xE,EAAAuvE,EAAAA,MAAAA,iBAAAvvE,EAAA,EAAA,MAAA8wE,gBAAA9wE,UAAAsxE,aAEdpqE,MAAA7F,2BAAAA,IAAC,UACS8tE,EAAAA,QACOI,eACJuB,WAAW,cACVe,YAAAA,gBACFP,UAAQ,UAClB,CAAA,GAAAtxE,QAAAmvE,QAAAnvE,QAAA6xE,gBAAA7xE,QAAAuvE,eAAAvvE,QAAA8wE,cAAA9wE,QAAAsxE,WAAAtxE,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA,GAPJiH,KACEC;AAODmP,YAAAA;AAAAA,IAAAA;AAAAnP,QAAAA;AAAAlH,MAAAmvE,EAAAA,MAAAA,UAAAnvE,UAAA8wE,gBAGoB5pE,MAAA4pE,eACnB3B,OAAMlkE,OAAAolE,CAAAA,MAAeA,EAACjlE,QAAS0lE,aAAY1lE,KAAM,IACjD+jE,QAAMnvE,QAAAmvE,QAAAnvE,QAAA8wE,cAAA9wE,QAAAkH,OAAAA,MAAAlH,EAAA,EAAA;AAFV,UAAAgwE,iBAAuB9oE;AAEbE,QAAAA;AAAApH,MAAAgwE,EAAAA,MAAAA,kBAAAhwE,EAAA,EAAA,MAAA6xE,kBAAA7xE,EAAAuvE,EAAAA,MAAAA,iBAAAvvE,EAAA,EAAA,MAAA2xE,eAAA3xE,UAAA+wE,aAER3pE,OAAA/F,2BAAA,IAAC,UACS2uE,EAAAA,QAAa,gBACNT,eACJwB,WAAQ,WACPc,YAAAA,gBACFF,UAAU,YACpB,CAAA,GAAA3xE,QAAAgwE,gBAAAhwE,QAAA6xE,gBAAA7xE,QAAAuvE,eAAAvvE,QAAA2xE,aAAA3xE,QAAA+wE,WAAA/wE,QAAAoH,QAAAA,OAAApH,EAAA,EAAA,GAPJiH,KACEG;AAAAA,EAAAA;AAnBJ,QAAAqE,UAAgBxE;AAqCd,MAAA6qE,UAAA5qE;AAAA,MAAAlH,EAAA8tE,EAAAA,MAAAA,SAAA9tE,UAAAU,GAAA;AAEF,UAAAqxE,eAAA;AAAA,MAAA7D,WAAA;AAAA,QAAAM,WACyB;AAAA,QAAQC,WAAa;AAAA,MAAA;AAAA,IAAO;AAGrDqD,eAAiBhE,QACbptE,EAAC0rE,+BAAgC0B,MAAKhmE,IAAA,GAAA;AAAA,MAAAmC,SAC3B;AAAA,MAAWikE,WAAAxyC,IAAAA,KACAoyC,OAAKG,YAAA;AAAA,MAAA8D;AAAAA,IAAAA,CAE1B,IACDrxE,EAAE,0BAA0B,GAEbwG,KAAA4mE,QACfptE,EAAE,kBAAgB;AAAA,MAAAwtE,WAAAxyC,IAAAA,KACIoyC,OAAKG,YAAA;AAAA,MAAA8D;AAAAA,IAAAA,CAE1B,IACDrxE,EAAE,gCAAgC,GAACV,QAAA8tE,OAAA9tE,QAAAU,GAAAV,QAAA8xE,UAAA9xE,QAAAkH;AAAAA,EAAA;AAAA4qE,eAAA9xE,EAAA,EAAA,GAAAkH,KAAAlH,EAAA,EAAA;AAEvCgyE,QAAAA,cAAoBv7C,SAAS,QAAQq7C,WAPlB5qE;AAOuCE,MAAAA;AAAApH,YAAA4wE,cAGnBxpE,MAAA;AAAA,IAAA,CAAAmpE,oBAAA,GAAyBK;AAAAA,EAAU,GAAC5wE,QAAA4wE,YAAA5wE,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAI5D,QAAAsH,MAAA82C,QAAQ3yC,SAUA7B,MAAAw0C,OAAO,+BAA+B,6BACzCl0C,OAACgI,OAEF9H,MAAAg0C,OAAOxrB,cAAcq+C;AAAU5mE,MAAAA;AAAArK,IAAA,EAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAMjCsH,MAAA;AAAA,IAAAoK,UACK;AAAA,EAAA,GACXzU,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAAgyE,EAAAA,MAAAA,eAAAhyE,UAAAkS,SAAAlS,EAAA,EAAA,MAAAU,KAEK6J,MAAA2H,QAAQ8/D,cAActxE,EAAE,0BAA0B,GAACV,QAAAgyE,aAAAhyE,QAAAkS,OAAAlS,QAAAU,GAAAV,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAAAmL,MAAAA;AAAAnL,IAAAo+C,EAAAA,MAAAA,QAAAp+C,EAAA,EAAA,MAAA4J,OAAA5J,EAAAkK,EAAAA,MAAAA,OAAAlK,EAAA,EAAA,MAAAoK,OAAApK,UAAAuK,OAf7DY,MAAC9J,2BAAA,IAAAiB,GAAA,MAAA,EAAY,OAAA,QACX,yCAACiJ,0BAAAA,QACc,EAAA,eAAA3B,KACH,UAAAM,KACL,MAAA,SACI,SAAAE,KACJumE,gBACKvyB,UAAG,MACP,OAAA,QACQ,oBACL,SAAA,iBACF,OAAA/zC,KAGIU,kCACL,MAAAR,IAEV,CAAA,GAAA,GAAOvK,QAAAo+C,MAAAp+C,QAAA4J,KAAA5J,QAAAkK,KAAAlK,QAAAoK,KAAApK,QAAAuK,KAAAvK,QAAAmL,OAAAA,MAAAnL,EAAA,EAAA;AAAA2W,MAAAA;AAAA3W,IAAA,EAAA,MAAAo+C,QAAAp+C,EAAAsY,EAAAA,MAAAA,aAAAtY,EAAAsH,EAAAA,MAAAA,OAAAtH,UAAAmL,OA5BTwL,MAACtV,2BAAA,IAAA,MAAA,EACa,eAAA,iBACZ,eAAA,IACS,SAAAiG,KACD,WAAA,eACF82C,MACK9lC,WACX,qBAAkB,IAClB,QAAA,IACKu4D,KAAAA,eAEL1lE,UAkBF,KAAA,GAAOnL,QAAAo+C,MAAAp+C,QAAAsY,WAAAtY,QAAAsH,KAAAtH,QAAAmL,KAAAnL,QAAA2W,OAAAA,MAAA3W,EAAA,EAAA;AAAA6W,MAAAA;AAAA,SAAA7W,EAAAoH,EAAAA,MAAAA,OAAApH,UAAA2W,OA9BTE,MAACxV,2BAAAA,IAAA+jC,GAAAA,gBAAoC,EAAA,qBAAAh+B,KACnCuP,UA8BF,IAAA,CAAA,GAAiB3W,QAAAoH,KAAApH,QAAA2W,KAAA3W,QAAA6W,OAAAA,MAAA7W,EAAA,EAAA,GA/BjB6W;AA+BiB;AA7Kd,SAAAm6D,SAAAiB,SAAA;AAAA,SAY2DzsE,QAAKurE;AAAA;AAZhE,SAAA1gE,SAAA6hE,SAAA;AAAA,SAW8D1sE,QAAKsrE;AAAA;AAXnE,SAAA1gE,SAAA+hE,SAAA;AAAA,SAU+D3sE,QAAK+pE;AAAA;AAVpE,SAAAp/D,SAAAiiE,SAAA;AAAA,SASyD5sE,QAAKrB;AAAA;AAT9D,SAAA+G,QAAA1F,QAAA;AAAA,SAQwDA,OAAK2pE;AAAA;ACnBpE,MAAMpsC,aAAWthC,wBAAOuhC,sBAAe;AAAA;AAAA;AAAA;AAAA;AAAA,GAOjCyD,OAAOhlC,wBAAOC,MAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShB,SAAA2wE,iBAAA/xE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAA0B;AAAA,IAAAqyE;AAAAA,MAAAhyE,IAC/B;AAAA,IAAAmH;AAAAA,IAAAhH;AAAAA,IAAAi7C;AAAAA,IAAA7X;AAAAA,IAAAhjC;AAAAA,EAAAA,IAAsE4rB,gBAAgB,GACtF,CAAA8lD,WAAAC,YAAA,IAAkC5gE,MAAAA,aAAoC,GAEtE0rB,MAAYyH,OAAAA,oBAAoBlB,eAAa34B,OAA0B,GACvEunE,OAAa1tC,OAAAA,oBAAoBlB,eAAa1zB,QAAuB,GACrEqkC,kBAAwBzP,OAAAA,oBAAoBlB,eAAazzB,QAAkC,GAC3FsiE,iBAAuB3tC,OAAoBlB,oBAAAA,eAAaxzB,QAAiC,GACzF0gE,YAAkBhsC,OAAoBlB,oBAAAA,eAAamtC,MAA4B,GAC/E30D,UAAgBq2D,mBAAmB,WACnCC,sBAA4Bn+B,iBAI5B;AAAA,IAAA9zC,GAAAkyE;AAAAA,EAAAA,IAAwBjyE,OAAAA,eAAAnB,wBAAuC;AAAC,MAAAoB,IAAAI;AAAAhB,IAAAyyE,CAAAA,MAAAA,QAAAzyE,EAAA,CAAA,MAAAyH,cAAAzH,EAAA2yE,CAAAA,MAAAA,sBAAA3yE,EAAA,CAAA,MAAAS,cAAAT,SAAAa,SAGvDG,KAAA;AAAA,IAAAyG;AAAAA,IAAAhH;AAAAA,IAAAoyE,cAAAC,OAAAA;AAAAA,IAAAC,UAIKN;AAAAA,IAAIE;AAAAA,IAAA9xE;AAAAA,IAAAmyE,eAAA;AAAA,EAIfhzE,GAAAA,OAAAyyE,MAAAzyE,OAAAyH,YAAAzH,OAAA2yE,oBAAA3yE,OAAAS,YAAAT,OAAAa,OAAAb,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAY,KARMI;AADT,QAAAiyE,kBAAuDryE;AAWtDK,MAAAA;AAAAjB,WAAA4yE,cAOU3xE,KAAA2xE,WAAW,oBAAoB,GAAC5yE,OAAA4yE,YAAA5yE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAAiD,MAAAA;AAAAjD,WAAAiB,MADnCgC,KAAC5B,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,SAAG,OAAA,IACZ5B,cACH,GAAOjB,OAAAiB,IAAAjB,OAAAiD,MAAAA,KAAAjD,EAAA,CAAA;AAAAmD,MAAAA;AAAAnD,YAAA+wE,aAEP5tE,oCAAC,cAAkB,EAAA,MAAA,SAAe4tE,kBAAqB,WAAA,gBAAiB,GAAA/wE,QAAA+wE,WAAA/wE,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,YAAA4yE,cAErE/tE,KAAA+tE,WAAW,kBAAkB,GAAC5yE,QAAA4yE,YAAA5yE,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,YAAA6E,MADjCmC,KAAC3F,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,SAAG,OAAA,IACZgC,cACH,GAAO7E,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAAAiH,MAAAA;AAAAjH,YAAAs9B,OACPr2B,oCAAC,cAAoBq2B,EAAAA,OAAE,KAAQ,MAAA,OAAgB,WAAA,cAAe,GAAAt9B,QAAAs9B,KAAAt9B,QAAAiH,MAAAA,KAAAjH,EAAA,EAAA;AAAAkH,MAAAA;AAAAlH,IAAA,EAAA,MAAAiD,MAAAjD,EAAAmD,EAAAA,MAAAA,MAAAnD,EAAAgH,EAAAA,MAAAA,MAAAhH,UAAAiH,MAVlEC,KAAC7F,2BAAA,IAAAK,GAAa,KAAA,EAAA,SAAC,GACb,UAAA0B,2BAAAA,KAAC,MAAe,EAAA,UAAC,GAAiB,eAAA,GAChCH,UAAAA;AAAAA,IAAAA;AAAAA,IAIAE;AAAAA,IACA6D;AAAAA,IAGAC;AAAAA,EACF,EAAA,CAAA,EACF,CAAA,GAAMjH,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,YAAAyyE,QAAAzyE,EAAAizE,EAAAA,MAAAA,mBAAAjzE,EAAAqc,EAAAA,MAAAA,WAAArc,EAAA,EAAA,MAAAS,cAAAT,UAAAsyE,eAAAtyE,EAAA,EAAA,MAAA07C,iBAMGt0C,MAAAkrE,eACCjxE,2BAAAA,IAAC,SACOoxE,EAAAA,MACWQ,iBACVv3B,OAAAA,eACEr/B,SACG5b,WAEf,CAAA,GAAAT,QAAAyyE,MAAAzyE,QAAAizE,iBAAAjzE,QAAAqc,SAAArc,QAAAS,YAAAT,QAAAsyE,aAAAtyE,QAAA07C,eAAA17C,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,YAAAoH,OAVLE,MAACjG,2BAAA,IAAA0hC,YAAA,EAAiB,WAAA,YAAgByvC,mBAChC,UAACnxE,2BAAAA,IAAAK,GAAAA,KAAA,EAAU,MAAC,GAAY,UAAA,GAAU,QAAA,QAC/B0F,UAAAA,IAAAA,CASH,EACF,CAAA,GAAWpH,QAAAoH,KAAApH,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAAA4J,MAAAA;AAAA5J,IAAAuyE,EAAAA,MAAAA,aAAAvyE,UAAAsH,OAdfsC,MAACvI,2BAAA,IAAAiJ,WAAW,MAAA,GAAa,UAAA,GAAa,UAAC,GACrC,UAACjJ,2BAAAA,IAAA8V,GAAA,yBAAA,EAAiCo7D,SAAAA,WAChCjrE,cAaF,CAAA,EACF,CAAA,GAAOtH,QAAAuyE,WAAAvyE,QAAAsH,KAAAtH,QAAA4J,OAAAA,MAAA5J,EAAA,EAAA;AAAAkK,MAAAA;AAAA,SAAAlK,EAAA4J,EAAAA,MAAAA,OAAA5J,UAAAkH,MA/BTgD,MAAC9G,2BAAA,KAAAd,GAAA,MAAA,EAAiB,eAAA,uBAAgC,WAAA,UAAgB,QAAA,QAAgB,UAAA,UAChF4E,UAAAA;AAAAA,IAAAA;AAAAA,IAcA0C;AAAAA,EAAAA,EAiBF,CAAA,GAAO5J,QAAA4J,KAAA5J,QAAAkH,IAAAlH,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA,GAhCPkK;AAgCO;AA9DJ,SAAA8mE,OAAAiB,SAAA;AAAA,SAQ2DzsE,QAAKurE;AAAA;AARhE,SAAA1gE,SAAA6hE,SAAA;AAAA,SAOgE1sE,QAAKktE;AAAA;AAPrE,SAAAtiE,SAAA+hE,SAAA;AAAA,SAMiE3sE,QAAKgvC;AAAA;AANtE,SAAArkC,SAAAiiE,SAAA;AAAA,SAKsD5sE,QAAKitE;AAAA;AAL3D,SAAAvnE,QAAA1F,QAAA;AAAA,SAIqDA,OAAKsoC;AAAA;AA8DjE,SAAAniB,QAAArrB,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,CAAA,GAAiB;AAAA,IAAAa;AAAAA,IAAA2xE;AAAAA,IAAAQ;AAAAA,IAAA52D;AAAAA,IAAA5b;AAAAA,EAAAA,IAAAH;AAYhB,MACKQ,OAAK;AAAAF,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACAnC,MAAAS,+BAAC6xE,OAAAA,WAAY,CAAA,CAAA,GAAAlzE,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAbY;AAAAA,EAAAA;AAAa,MAGlByb,SAAO;AAAAzb,QAAAA;AAAAZ,WAAAA,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACFnC,MAACS,2BAAA,IAAAmQ,qBAAA,EAAa,UAAA,GAAW,CAAA,GAAAxR,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAzBY;AAAAA,EAAAA;AAAyB,MAAA,CAG7B6xE,MAAI;AAAA7xE,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KACAnC,MAAAS,+BAAC6xE,OAAAA,WAAY,CAAA,CAAA,GAAAlzE,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAbY;AAAAA,EAAAA;AAAaA,MAAAA;AAAAZ,IAAAyyE,CAAAA,MAAAA,QAAAzyE,SAAAS,cAKlBG,KAACS,2BAAAA,IAAA8xE,OAAAA,YAAiBV,EAAAA,MAAkBhyE,WAAc,CAAA,GAAAT,OAAAyyE,MAAAzyE,OAAAS,YAAAT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,EAAAizE,CAAAA,MAAAA,mBAAAjzE,SAAAY,MADpDI,KAAAK,2BAAAA,IAAA+xE,YAAAA,sBAAA,UAAA,EAAuCH,OAAAA,iBACrCryE,UAAAA,GACF,CAAA,GAAiCZ,OAAAizE,iBAAAjzE,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAFjCgB;AAEiC;AC1HrC,MAAM+hC,WAAWthC,wBAAOuhC,sBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC,SAAAqwC,gBAAA/yE,IAAA;AAAAN,QAAAA,IAAAC,uBAAA,EAAA,GAAyB;AAAA,IAAAqzE;AAAAA,MAAAhzE,IAC9B;AAAA,IAAAo7C;AAAAA,IAAAD;AAAAA,IAAAkB;AAAAA,IAAA9Y;AAAAA,EAA0EpX,IAAAA,gBAAAA,GAC1E,CAAA8lD,WAAAC,YAAA,IAAkC5gE,mBAAoC,GACtE,CAAA2hE,YAAAC,aAAA,IAAoC5hE,MAAAA,UAAU;AAAChR,MAAAA;AAAAZ,IAAA,CAAA,MAAA8C,OAAAC,IAAA,2BAAA,KAEZnC,KAAA0e,CAAA,OAAA;AAMnBA,kBAAAA,IAAEosD,eAAiBpsD,GAAEosD,eAAiB,IAAA,CAAI,GACxD8G,aAAalzD,EAAE;AAAA,EAAA,GAChBtf,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AARDyzE,QAAAA,iBAAuB7yE,IAUvBuuE,SAAepqC,OAAAA,oBAAoBlB,eAAa34B,KAAyB,GACzE4lE,eAAqB/rC,OAAAA,oBAAoBlB,eAAa1zB,MAA+B,GACrFo/D,gBAAsBxqC,2BAAoBlB,eAAazzB,MAAgC,GACvFiM,UAAgB0oB,OAAAA,oBAAoBlB,eAAaxzB,MAA4B,GAE7E;AAAA,IAAA3P;AAAAA,EAAYC,IAAAA,sBAAe,QAAQ,GACnCuI,QAAcC,GAAAA,SAAS;AAACnI,MAAAA;AAAAhB,IAAAy7C,CAAAA,MAAAA,mBAAAz7C,EAAA,CAAA,MAAA28C,oBAAA38C,EAAAU,CAAAA,MAAAA,KAAAV,EAAA,CAAA,MAAA6jC,iBAAA7jC,SAAAkJ,SAEtBlI,KAAAkwE,CAAA,aAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,SAAAC,KAAA,IAAyBvtC,cAAawtC,gBAAiBH,QAAQ;AAC/Dz1B,sBAAgB,QAAQ,GACxBkB,iBAAiBw0B,SAASC,KAAK;AAAA,aAACnwE,KAAA;AACzBi5B,YAAAA,MAAAA;AACPhxB,YAAK4C,KAAA;AAAA,QAAAglB,UAAA;AAAA,QAAAnI,aAEUuR,IAAGh5B;AAAAA,QAAAuD,QACR;AAAA,QAAOrD,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,OAAAy7C,iBAAAz7C,OAAA28C,kBAAA38C,OAAAU,GAAAV,OAAA6jC,eAAA7jC,OAAAkJ,OAAAlJ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAdH,QAAAsxE,YAAkBtwE;AAgBjBC,MAAAA;AAAAjB,IAAAqc,CAAAA,MAAAA,WAAArc,SAAA6jC,iBAEkC5iC,KAAAA,MAAA;AAE5Bob,eACHwnB,cAAa+tC,SAAU;AAAA,EAE1B5xE,GAAAA,OAAAqc,SAAArc,OAAA6jC,eAAA7jC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AALD,QAAA6xE,iBAAuB5wE;AAKKgC,MAAAA;AAAA,SAAAjD,EAAA,EAAA,MAAAmvE,UAAAnvE,EAAA6xE,EAAAA,MAAAA,kBAAA7xE,UAAAuvE,iBAAAvvE,EAAA,EAAA,MAAAuzE,cAAAvzE,EAAA8wE,EAAAA,MAAAA,gBAAA9wE,EAAAuyE,EAAAA,MAAAA,aAAAvyE,EAAA,EAAA,MAAAsxE,aAAAtxE,EAAAszE,EAAAA,MAAAA,YAAAtzE,UAAA07C,iBAG1Bz4C,KAAA5B,2BAAA,IAACiB,GAAiB,MAAA,EAAA,eAAA,uBAAgC,WAAA,UAAgB,QAAA,QAChE,UAAAjB,2BAAAA,IAACiJ,GAAAA,QAAW,MAAC,GAAW,SAAC,GAAc,YAAA,GACpCoxC,UACC,gBAAAr6C,2BAAAA,IAAC,eAAa,CAAA,CAAA,IAEbA,2BAAAA,IAAA8V,GAAAA,yBAAA,EAAiCo7D,SAAAA,WAChC,UAAClxE,2BAAA,IAAA,UAAA,EAAiB,WAAA,YAAgBoyE,KAAAA,gBAC/BF,UAAAA,cAEDD,WACEjyE,2BAAA,IAAC,UACS8tE,EAAAA,QACOI,eACJuB,WAAAA,cACCe,YAAa,gBACfP,UAAQ,WACH,eAAGiC,GAAAA,UAAU,KAC5B,CAAA,IAAA,KAEN,CAAA,EACF,CAAA,EAEJ,CAAA,EACF,CAAA,GAAOvzE,QAAAmvE,QAAAnvE,QAAA6xE,gBAAA7xE,QAAAuvE,eAAAvvE,QAAAuzE,YAAAvzE,QAAA8wE,cAAA9wE,QAAAuyE,WAAAvyE,QAAAsxE,WAAAtxE,QAAAszE,UAAAtzE,QAAA07C,eAAA17C,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA,GAvBPiD;AAuBO;AAvEJ,SAAAoN,OAAA6hE,SAAA;AAAA,SAkByD1sE,QAAKrB;AAAA;AAlB9D,SAAAiM,OAAA+hE,SAAA;AAAA,SAiB+D3sE,QAAK+pE;AAAA;AAjBpE,SAAAp/D,OAAAiiE,SAAA;AAAA,SAgB8D5sE,QAAKsrE;AAAA;AAhBnE,SAAA5lE,MAAA1F,QAAA;AAAA,SAewDA,OAAK2pE;AAAA;ACnBpE,MAAMuE,aAAajyE,wBAAOa,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOxBqxE,OAAO,CAAC,WAAW,QAAQ,GAC3BC,aAAcC,CAAAA;AAAAA;AAAAA,EAElBA,OAAOF,KAAKjjD,SAASmjD,GAAG;AAAA;AAEnB,SAAAC,YAAA/zE,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAmG;AAAAA,IAAAgnB;AAAAA,EAAA,IAA4BrlB,iBAC5B;AAAA,IAAArH;AAAAA,EAAAA,IAAYC,OAAAA,eAAAnB,wBAAuC,GACnDu0E,UAAgB3tE,QAAMsnB,YAAAqB,wBAEtBilD,gBAAsBJ,WAAWxtE,QAAM0yC,mBAAqB,IACxD1yC,OAAM0yC,sBAAA66B,KACC,CAAA;AAAArzE,MAAAA;AAAAN,IAAAoG,CAAAA,MAAAA,UAAApG,SAAAotB,aACc9sB,KAAAuzE,CAAAA,QACvBzmD,UAAS;AAAA,IAAA,GACJhnB;AAAAA,IAAM0yC,qBACY+6B;AAAAA,EAAAA,CACtB,GAAC7zE,OAAAoG,QAAApG,OAAAotB,WAAAptB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJJ,QAAAi0E,mBAAyB3zE,IAO8CM,KAAAmzE,UAAU,KAAEnpE;AAAY5J,MAAAA;AAAAhB,WAAAU,KAM9EM,KAAAN,EAAE,qBAAqB,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAi0E,oBACtBhzE,KAAAA,MAAMgzE,iBAAiB,SAAS,GAACj0E,OAAAi0E,kBAAAj0E,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAChC,QAAAiD,KAAA+wE,kBAAkB;AAAS7wE,MAAAA;AAAAnD,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAAAjB,EAAA,CAAA,MAAAiD,MALvCE,oCAAC2zB,0BACe,KAAA,EAAA,iBAAA,iBACX,IAAA,eACI,OAAA91B,IACE,SAAAC,IACC,UAAAgC,GACV,CAAA,GAAAjD,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAAiD,IAAAjD,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,YAAAU,KAIOmE,KAAAnE,EAAE,4BAA4B,GAACV,QAAAU,GAAAV,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAAhH,YAAAi0E,oBAC7BjtE,KAAAA,MAAMitE,iBAAiB,QAAQ,GAACj0E,QAAAi0E,kBAAAj0E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA;AAC/B,QAAAiH,KAAA+sE,kBAAkB;AAAQ9sE,MAAAA;AAAAlH,IAAA6E,EAAAA,MAAAA,MAAA7E,UAAAgH,MAAAhH,EAAA,EAAA,MAAAiH,MALtCC,oCAAC4vB,0BACe,KAAA,EAAA,iBAAA,wBACX,IAAA,eACI,OAAAjyB,IACE,SAAAmC,IACC,UAAAC,GACV,CAAA,GAAAjH,QAAA6E,IAAA7E,QAAAgH,IAAAhH,QAAAiH,IAAAjH,QAAAkH,MAAAA,KAAAlH,EAAA,EAAA;AAAAoH,MAAAA;AAAApH,IAAAmD,EAAAA,MAAAA,MAAAnD,UAAAkH,MAdJE,MAAChE,2BAAAA,KAAA2zB,GAAAA,SAAA,EAAe,OAAA,GAAS,SACvB5zB,UAAAA;AAAAA,IAAAA;AAAAA,IAOA+D;AAAAA,EAAAA,EAOF,CAAA,GAAUlH,QAAAmD,IAAAnD,QAAAkH,IAAAlH,QAAAoH,OAAAA,MAAApH,EAAA,EAAA;AAAAsH,MAAAA;AAAAtH,YAAAU,KAGM4G,MAAA5G,EAAE,4BAA4B,GAACV,QAAAU,GAAAV,QAAAsH,OAAAA,MAAAtH,EAAA,EAAA;AAGlC,QAAA4J,MAAA7J,MAAK2xB;AAAQxnB,MAAAA;AAAAlK,YAAAU,KACEwJ,MAAAxJ,EAAE,yCAAyC,GAACV,QAAAU,GAAAV,QAAAkK,OAAAA,MAAAlK,EAAA,EAAA;AAAAoK,MAAAA;AAAApK,YAAAkK,OAAtDE,MAAA;AAAA,IAAAqB,SAAUvB;AAAAA,EAA4C,GAAClK,QAAAkK,KAAAlK,QAAAoK,OAAAA,MAAApK,EAAA,EAAA;AAAAqK,MAAAA;AAAArK,IAAA,EAAA,MAAAD,MAAA2xB,WAAA1xB,EAAA,EAAA,MAAAsH,OAAAtH,EAAA,EAAA,MAAAoK,OANzEC,MAAChJ,2BAAA,IAAAK,QAAA,EAAS,MAAA,QACR,yCAAC6J,0BACa,QAAA,EAAA,cAAAjE,KACNqqB,MAAAA,MAAAA,WACD,MAAA,SACI,SAAA/nB,KACK,cAAAQ,IAAAA,CAElB,EAAA,CAAA,GAAMpK,EAAA,EAAA,IAAAD,MAAA2xB,SAAA1xB,QAAAsH,KAAAtH,QAAAoK,KAAApK,QAAAqK,OAAAA,MAAArK,EAAA,EAAA;AAAAuK,MAAAA;AAAAvK,IAAAoH,EAAAA,MAAAA,OAAApH,UAAAqK,OAzBRE,MAAAnH,2BAAAA,KAACd,GAAAA,QAAW,OAAA,UAAkB,SAAC,GAAO,KAAA,GACpC8E,UAAAA;AAAAA,IAAAA;AAAAA,IAgBAiD;AAAAA,EAAAA,EASF,CAAA,GAAOrK,QAAAoH,KAAApH,QAAAqK,KAAArK,QAAAuK,OAAAA,MAAAvK,EAAA,EAAA;AAKG,QAAAmL,MAAA6oE,kBAAkB,WAGCr9D,MAAAq9D,kBAAkB;AAASn9D,MAAAA;AAAA7W,YAAA2W,OAAtDE,MAACxV,2BAAAA,IAAA,iBAAA,EAA0B,UAAAsV,IAA+B,CAAA,GAAA3W,QAAA2W,KAAA3W,QAAA6W,OAAAA,MAAA7W,EAAA,EAAA;AAAA8W,MAAAA;AAAA9W,IAAAmL,EAAAA,MAAAA,OAAAnL,UAAA6W,OAN5DC,qCAACqgB,GACiB,UAAA,EAAA,mBAAA,eACT,QAAA,QACC,QAAAhsB,KACL,IAAA,iBAEH0L,eACF,GAAW7W,QAAAmL,KAAAnL,QAAA6W,KAAA7W,QAAA8W,OAAAA,MAAA9W,EAAA,EAAA;AAID,QAAA+W,MAAAi9D,kBAAkB,UAIKh9D,MAAAg9D,kBAAkB;AAAQ/8D,MAAAA;AAAAjX,YAAAgX,OAAzDC,MAAC5V,2BAAAA,IAAA,kBAAA,EAA8B,aAAA2V,IAA8B,CAAA,GAAAhX,QAAAgX,KAAAhX,QAAAiX,OAAAA,MAAAjX,EAAA,EAAA;AAAAkX,MAAAA;AAAAlX,IAAA+W,EAAAA,MAAAA,OAAA/W,UAAAiX,OAN/DC,qCAACigB,GACiB,UAAA,EAAA,mBAAA,cACR,QAAApgB,KACL,IAAA,gBACI,QAAA,QAEPE,eACF,GAAWjX,QAAA+W,KAAA/W,QAAAiX,KAAAjX,QAAAkX,OAAAA,MAAAlX,EAAA,EAAA;AAAAoX,MAAAA;AAAApX,SAAAA,EAAA,EAAA,MAAAY,MAAAZ,EAAAuK,EAAAA,MAAAA,OAAAvK,EAAA8W,EAAAA,MAAAA,OAAA9W,UAAAkX,OA7CbE,MAAChU,2BAAA,KAAA,YAAqB,EAAA,WAAA,UAAkB,SAAC,GAAS,QAAA,QAAmB,cAAAxC,IACnE2J,UAAAA;AAAAA,IAAAA;AAAAA,IA4BAuM;AAAAA,IASAI;AAAAA,EAQF,EAAA,CAAA,GAAalX,QAAAY,IAAAZ,QAAAuK,KAAAvK,QAAA8W,KAAA9W,QAAAkX,KAAAlX,QAAAoX,OAAAA,MAAApX,EAAA,EAAA,GA9CboX;AA8Ca;AC9EV,MAAM88D,mBAAsC;AAAA,EACjD3rE,MAAMwmB;AAAAA,EACNW,aAAaA,MAAM;AACX,UAAA;AAAA,MAACiD;AAAAA,IAAQ,IAAIrE,oBACb;AAAA,MAAC5tB;AAAAA,QAAKC,sBAAe;AAEpB,WAAA;AAAA,MACL4V,QAAQ,CAACoc,SAASgrB;AAAAA,MAClBp6C,MAAM4vC,MAAAA;AAAAA,MACN/xC,OAAOV,EAAE,eAAe;AAAA,IAC1B;AAAA,EACF;AAAA,EACAoyB,WAAWghD;AAAAA,EACXpiD,SAASA,CAAC;AAAA,IAACtrB;AAAAA,EAAAA,OAAa;AAAA,IACtBA,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ01C,OAAOlxC;AAAAA,MAAW0yB,KAAK1yB;AAAAA,MAAWkuC,qBAAqBluC;AAAAA,IAAAA;AAAAA,EAAS;AAAA,EAEtF4yC,QAAQA,CAAC;AAAA,IAACp3C;AAAAA,EAAAA,OAAa;AAAA,IAACA,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ01C,OAAO;AAAA,IAAA;AAAA,EAAiB;AACtE;ACnBO,SAASq4B,cAAc/yD,SAIY;AAClC,QAAA;AAAA,IAAC7B;AAAAA,IAAM9e;AAAAA,IAAYI;AAAAA,EAAAA,IAASugB,SAC5B2c,SAAgD,CAAE;AAEpDuK,MAAAA,IAAI7nC,YACJsmB,IAAalmB;AAEjB,aAAWklD,WAAWxmC,MAAM;AAEtB,QAAA,OAAOwmC,WAAY,UAAU;AAC/B,UAAI,CAACriD,OAAAA,SAASqjB,CAAC,KAAKA,MAAMnc;AACxB,cAAM,IAAI/E,MAAM,4DAA4DkgD,OAAO,EAAE;AAGvF,UAAIzd,EAAEod,aAAa;AACjB,cAAM,IAAI7/C,MACR,uEAAuEkgD,OAAO,EAChF;AAGFh/B,UAAIA,IAAIg/B,OAAO;AAEf,YAAMlD,QAAQva,EAAEoe,OAAOrxC,KAAM++D,CAAMA,MAAAA,EAAE7rE,SAASw9C,OAAO;AAErD,UAAI,CAAClD;AACH9kB,eAAAA,OAAOjyB,KAAK;AAAA,UAACvD,MAAMw9C;AAAAA,QAAQ,CAAA,GACpBhoB;AAGTuK,UAAIua,MAAM/6C,MAEVi2B,OAAOjyB,KAAKw8B,CAAC;AAEb;AAAA,IAAA;AAIE,QAAA,OAAOyd,WAAY,UAAU;AAC/B,UAAI,CAAC/+B,OAAAA,QAAQD,CAAC,KAAKA,MAAMnc;AACvB,cAAM,IAAI/E,MAAM,2DAA2DkgD,OAAO,GAAG;AAGvF,UAAIzd,EAAEod,aAAa;AACjB,cAAM,IAAI7/C,MACR,sEAAsEkgD,OAAO,GAC/E;AAGFh/B,UAAIA,IAAIg/B,OAAO;AAEf,YAAMsuB,WAAW/rC,EAAE/5B,GAAG8G,KAAMsxC,CACtB,WAAA,OAAO5/B,KAAM,WACR4/B,OAAOjB,aAAa,WAGzB,OAAO3+B,KAAM,WACR4/B,OAAOjB,aAAa,WAGzB,OAAO3+B,KAAM,YACR4/B,OAAOjB,aAAa,YAGzBhiD,OAASqjB,SAAAA,CAAC,IACL4/B,OAAOp+C,SAASwe,GAAGxmB,QAGrB,EACR;AAED,UAAI,CAAC8zE;AACH,cAAM,IAAIxuE,MAAM,yBAAyBkgD,OAAO,GAAG;AAGjDsuB,UAAAA,UAEJt2C,OAAOjyB,KAAKw8B,CAAC;AAEb;AAAA,IAAA;AAIF,QAAI5kC,gBAASqiD,OAAO,KAAKA,QAAQuuB,MAAM;AACjC,UAAA,CAACttD,eAAQD,CAAC;AACZ,cAAM,IAAIlhB,MACR,mEAAmEkgD,OAAO,GAC5E;AAGF,UAAIzd,EAAEod,aAAa;AACjB,cAAM,IAAI7/C,MACR,sEAAsEkgD,OAAO,EAC/E;AAOF,UAFAh/B,KAFeA,KAAK,CAET1R,GAAAA,KAAMiL,OAAM5c,OAAS4c,SAAAA,CAAC,KAAKA,EAAEg0D,SAASvuB,QAAQuuB,IAAI,GAEzD,CAAC5wE,gBAASqjB,CAAC;AACb,cAAM,IAAIlhB,MAAM,kCAAkCkgD,QAAQuuB,IAAI,GAAG;AAG7D3tB,YAAAA,SAASre,EAAE/5B,GAAG8G,KAAMiL,CAAAA,MAAM5c,gBAASqjB,CAAC,KAAKzG,EAAE/X,SAASwe,GAAGxmB,KAAK;AAElE,UAAI,CAAComD;AACH,cAAM,IAAI9gD,MAAM,+BAA+BkhB,GAAGxmB,KAAK,EAAE;AAGvDomD,UAAAA,QAEJ5oB,OAAOjyB,KAAKw8B,CAAC;AAEb;AAAA,IAAA;AAGF,UAAM,IAAIziC,MAAM,yBAAyByhB,KAAKC,UAAUw+B,OAAO,CAAC,EAAE;AAAA,EAAA;AAG7DhoB,SAAAA;AACT;AC3GA,MAAMw2C,cAAmE;AAAA,EACvEzzE,OAAOo3B,MAAAA;AAAAA,EACPkY,SAASjmC,MAAAA;AAAAA,EACT8qD,MAAMjyD,MAAAA;AACR,GAEMwxE,cAA8D;AAAA,EAClE1zE,OAAO;AAAA,EACPsvC,SAAS;AAAA,EACT6kB,MAAM;AACR;AAEO,SAAAwf,oBAAA10E,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GACL;AAAA,IAAAyxB;AAAAA,MAAkB3xB,OAClB;AAAA,IAAAqgC;AAAAA,IAAAnT;AAAAA,IAAAxsB;AAAAA,IAAAy/B;AAAAA,IAAAr/B;AAAAA,EAAA,IAA6D4rB,mBAC7D;AAAA,IAAA/rB;AAAAA,EAAAA,IAAYC,OAAAA,eAAe,YAAY;AAACL,MAAAA;AAAAN,IAAAogC,CAAAA,MAAAA,WAAApgC,SAAAitB,cAGtC3sB,KAAAif,CAAA,SAAA;AACaA,eAAAA,IAAI,GACf6gB,QAAQ7gB,IAAI;AAAA,EACbvf,GAAAA,OAAAogC,SAAApgC,OAAAitB,YAAAjtB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJH,QAAAixE,aAAmB3wE;AAMlBM,MAAAA;AAAAZ,WAAAU,KAMuBE,KAAAF,EAAE,+BAA+B,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAG7CM,KAAAN,EAAE,aAAa,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA0xB,CAAAA,MAAAA,WAAA1xB,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALzBC,KAACI,2BAAAA,IAAA,yBAAA,EACI,IAAA,UACe,kBAAAT,IACb,MAAA,QACI8wB,SACF,OAAA1wB,GACP,CAAA,GAAAhB,OAAA0xB,SAAA1xB,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAAiD,MAAAA;AAAAjD,YAAAU,KAAAV,EAAAkgC,EAAAA,MAAAA,WAAAv9B,UAGCM,KAAAi9B,WAAUv9B,gBACRtB,2BAAAA,IAAAK,GAAA,KAAA,EAAa,SAAA,GACZ,UAAAL,2BAAA,IAACwB,WAAK,OAAA,IAAY,MAAA,GACfnC,UAAAA,EAAE,yBAAyB,GAC9B,EAAA,CACF,GACDV,QAAAU,GAAAV,EAAA,EAAA,IAAAkgC,WAAAv9B,QAAA3C,QAAAiD,MAAAA,KAAAjD,EAAA,EAAA;AAAAmD,MAAAA;AAAAnD,IAAA,EAAA,MAAAixE,cAAAjxE,EAAAS,EAAAA,MAAAA,cAAAT,EAAAkgC,EAAAA,MAAAA,cAAAlgC,UAAAa,SAEAsC,KAAA+8B,WAAUv9B,SAAA,KACRtB,2BAAAA,IAAAmJ,GAAAA,OAAA,EAAa,OAAA,GACX01B,UAAUz1B,WAAAA,IAAAiqE,CAAAA,QAAAp0D,MACRjf,2BAAAA,IAAA,gBAAA,EAGSqzE,QACAzD,QAAAA,YACIxwE,YACLI,MAJF,GAAA,CAMR,CAAA,EACH,CAAA,GACDb,QAAAixE,YAAAjxE,QAAAS,YAAAT,QAAAkgC,YAAAlgC,QAAAa,OAAAb,QAAAmD,MAAAA,KAAAnD,EAAA,EAAA;AAAA6E,MAAAA;AAAA7E,IAAAiD,EAAAA,MAAAA,MAAAjD,UAAAmD,MAtBH0B,KAAAzB,2BAAAA,KAACkH,GAAAA,QAAW,MAAC,GAAW,UAAA,QAAgB,SAAA,GACrCrH,UAAAA;AAAAA,IAAAA;AAAAA,IAQAE;AAAAA,EAAAA,EAcH,CAAA,GAAOnD,QAAAiD,IAAAjD,QAAAmD,IAAAnD,QAAA6E,MAAAA,KAAA7E,EAAA,EAAA;AAAAgH,MAAAA;AAAA,SAAAhH,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAA6E,MAhCTmC,KAAA5D,2BAAA,KAACd,WAAe,WAAA,UAAgB,QAAA,QAAgB,UAAA,UAC9CrB,UAAAA;AAAAA,IAAAA;AAAAA,IAQA4D;AAAAA,EAAAA,EAwBF,CAAA,GAAO7E,QAAAiB,IAAAjB,QAAA6E,IAAA7E,QAAAgH,MAAAA,KAAAhH,EAAA,EAAA,GAjCPgH;AAiCO;AAIX,SAAA2tE,eAAA50E,OAAA;AAAAC,QAAAA,IAAAC,uBAAA,EAAA,GAME;AAAA,IAAAy0E;AAAAA,IAAAl3B;AAAAA,IAAA/8C;AAAAA,IAAAI;AAAAA,EAAAA,IAA4Cd;AAAKO,MAAAA;AAAAN,WAAA00E,OAAAn1D,QAAAvf,SAAAw9C,UAClBl9C,KAAAA,MAAMk9C,OAAOk3B,OAAMn1D,IAAK,GAACvf,EAAA,CAAA,IAAA00E,OAAAn1D,MAAAvf,OAAAw9C,QAAAx9C,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAxD,QAAAixE,aAAmB3wE,IACnB,CAAAs0E,WAAAC,YAAA,IAAkCjjE,mBAAqD,GACvFylB,OAAAk9C,YAAyBG,OAAMI,KAAA;AAAOl0E,MAAAA;AAAAZ,WAAA40E,aAIjCh0E,KAAAg0E,aACCvzE,2BAAA,IAACiJ,SAAc,EAAA,SAAC,GAAU,QAAA,GAAQ,MAAA,YAChC,UAACjJ,2BAAA,IAAAwB,SAAA,EAAW,MAAC,GAAG+xE,UAAS9zE,UAAAA,MAAAI,QAAe,CAAA,EAC1C,CAAA,GACDlB,OAAA40E,WAAA50E,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAq3B,CAAAA,MAAAA,QAAAr3B,SAAA40E,aAAA50E,EAAA,CAAA,MAAAixE,cAAAjxE,EAAA00E,CAAAA,MAAAA,OAAAI,SAAA90E,EAAA,CAAA,MAAA00E,OAAAxzE,WAAAlB,UAAA00E,OAAAn1D,QAAAvf,EAAAS,EAAAA,MAAAA,cAAAT,UAAAa,SAEAG,KAAC4zE,CAAAA,aACCvzE,2BAAA,IAAAiJ,GAAA,MAAA,EACC,sBAAmB,IAChB,IAAA,UACM2mE,SAAS,YACT,SAAA,GACD,QAAA,GACF,MAAAuD,YAAYE,OAAMI,KAAA,GAExB,UAAA1xE,2BAAA,KAACd,GAAW,MAAA,EAAA,OAAA,cAAkB,KAAA,GAC5B,UAAA;AAAA,IAACjB,2BAAA,IAAAK,GAAA,KAAA,EAAS,MAAA,QACR,UAACL,2BAAAA,IAAAwB,GAAA,MAAA,EAAW,MAAA,GACV,UAAAxB,2BAAA,IAAC,MACH,CAAA,CAAA,EAAA,CAAA,GACF;AAAA,IAEC+B,2BAAA,KAAAoH,GAAA,OAAA,EAAY,MAAC,GAAS,OAAA,GACrB,UAAA;AAAA,MAAAnJ,2BAAA,IAAC,6BACO,EAAA,MAAAqzE,OAAMn1D,MACA9e,YACLI,OAGT;AAAA,qCAACgC,GAAAA,MAAK,EAAA,OAAI,IAAQ,MAAC,GAChB6xE,iBAAMxzE,QACT,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,GACF,GACF,GACDlB,OAAAq3B,MAAAr3B,OAAA40E,WAAA50E,OAAAixE,YAAAjxE,EAAA,CAAA,IAAA00E,OAAAI,OAAA90E,EAAA,CAAA,IAAA00E,OAAAxzE,SAAAlB,EAAA,EAAA,IAAA00E,OAAAn1D,MAAAvf,QAAAS,YAAAT,QAAAa,OAAAb,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MApCHC,qCAAC8Q,0BAAuB8iE,eAAAA,EAAAA,uBACrBj0E,UAAAA;AAAAA,IAAAA;AAAAA,IAMAI;AAAAA,EAAAA,EA8BH,CAAA,GAAgBhB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GArChBiB;AAqCgB;AAIpB,SAAS8zE,4BAA4Bh1E,OAIlC;AACK,QAAA;AAAA,IAACwf;AAAAA,IAAM9e;AAAAA,IAAYI;AAAAA,EAAAA,IAASd,OAE5Bi1E,aAAa5sD,MAAAA,QAAQ,MAAM;AAC3B,QAAA;AACF,aAAO+rD,cAAc;AAAA,QAAC50D;AAAAA,QAAM9e;AAAAA,QAAYI;AAAAA,MAAAA,CAAM;AAAA,aACvCqL,GAAG;AACV+b,cAAQnnB,MAAMoL,CAAC;AAAA,IAAA;AAEV,WAAA;AAAA,EACN,GAAA,CAACqT,MAAM9e,YAAYI,KAAK,CAAC;AAE5B,SAAKm0E,YAAYryE,SAGdtB,2BAAAA,IAAAwB,GAAAA,MAAA,EAAK,MAAM,GACTmyE,UAAWvqE,WAAAA,IAAI,CAAC/J,GAAG4f,MAClBld,2BAAAA,KAAC7B,MAAAA,UACE+e,EAAAA,UAAAA;AAAAA,IAAI,IAAA,KAAMjf,2BAAAA,IAAA,QAAA,EAAK,OAAO;AAAA,MAACC,OAAO;AAAA,MAA8BsoB,SAAS;AAAA,IAAA,GAAM,UAAG,OAAA;AAAA,IAC/EvoB,+BAAC,UAAK,OAAO;AAAA,MAAC4zE,YAAY;AAAA,IAAOv0E,GAAAA,UAAAA,EAAEU,SAASV,EAAE6H,KAAK,CAAA;AAAA,EAFtC+X,EAAAA,GAAAA,CAGf,CACD,EACH,CAAA,IAV8B;AAYlC;ACtJA,SAASoP,YAAY3vB,OAAqE;AAClF,QAAA;AAAA,IAAC0H;AAAAA,IAAYC;AAAAA,MAAgB3H,OAC7B;AAAA,IAACW;AAAAA,EAAAA,IAAKC,OAAAA,eAAe,YAAY,GACjC;AAAA,IAACu/B,YAAYg1C;AAAAA,EAAAA,IAAqB3pC,OAAoB9jC,oBAAAA,YAAYC,YAAY,GAE9Ew4B,aAAmC9X,MACvC,QAAA,MACE8sD,kBAAkBzqE,IAAKrB,CAAU,UAAA;AAAA,IAC/B0rE,OAAO1rE,KAAK0rE;AAAAA,IACZ5zE,SAASkI,KAAKlI;AAAAA,IACdqe,MAAMnW,KAAKmW;AAAAA,EAAAA,EACX,GACJ,CAAC21D,iBAAiB,CACpB,GAEMC,YAAYj1C,WAAW9xB,KAAKgnE,OAAiB,iBAAA,GAC7CC,cAAcn1C,WAAW9xB,KAAKknE,OAAmB,mBAAA,GAEjD/xE,OAAO6kB,MAAAA,QAAQ,MACf+sD,YAAkBj9C,MAAAA,mBAClBm9C,cAAoBlrE,MAAAA,qBACjBorE,MAAAA,qBACN,CAACJ,WAAWE,WAAW,CAAC,GAErBvjE,OAAOsW,MAAAA,QAAQ,MACf+sD,YAAkB,aAClBE,cAAoB,YACjB,YACN,CAACF,WAAWE,WAAW,CAAC;AAEpB,SAAA;AAAA,IACL9+D,QAAQ2pB,WAAWv9B,WAAW;AAAA,IAC9BY;AAAAA,IACAnC,OAAOV,EAAE,aAAa;AAAA,IACtBoR;AAAAA,IACAwS,cAAc;AAAA,EAChB;AACF;AAEO,MAAMkxD,sBAAyC;AAAA,EACpDjtE,MAAMymB;AAAAA,EACN8D,WAAW2hD;AAAAA,EACX/kD;AACF,GCtDMvB,eAAe,CAAC;AAKf,SAASsnD,wBAAwBrvE,QAAyC;AAC3E,MAAA;AACF,WAAOkhB,KAAKE,MAAMkuD,mBAAmBtvE,MAAM,CAAC;AAAA,EAAA,QAChC;AAEJqX,WAAAA,QAAAA,KAAK,iCAAiC,GACvC,CAAC;AAAA,EAAA;AAEZ;AAEO,SAASk4D,mBAAmBpwE,OAA4B;AAC7D,UAAQA,SAAS,IACdkF,IAAK0Z,CAAAA,UAAUA,MAAM1Z,IAAImrE,YAAY,EAAE5rE,KAAK,GAAG,CAAC,EAChDS,IAAIorE,kBAAkB,EACtB7rE,KAAK,GAAG;AACb;AAKO,SAAS8rE,uBAAuB1vE,QAAyC;AACvEkhB,SAAAA,KAAKC,UAAUnhB,MAAM;AAC9B;AAOO,SAAS2vE,QAAQ9Y,aAAwC;AACvD+Y,SAAAA,kBAAkBN,mBAAmBzY,WAAW,CAAC;AAC1D;AAKO,SAASgZ,OAAO1wE,OAAkC;AACvD,SAAOowE,mBAAmBpwE,KAAK;AACjC;AAEa2wE,MAAAA,SAASC,SAAAA,MAAMrL,OAAO,KAAK;AAAA;AAAA,EAEtCqL,SAAAA,MAAMC,QAAQ,SAAS;AAAA;AAAA,EAGvBD,SAAAA,MAAMrL,OAAO,+BAA+B,CAC1CqL,SAAAA,MAAMrL,OAAO;AAAA,IACXvrD,MAAM;AAAA,IACN82D,WAAW;AAAA,MAACjwE,QAAQ;AAAA,QAAC2vE,SAASN;AAAAA,QAAyBQ,QAAQH;AAAAA,MAAAA;AAAAA,IAAsB;AAAA,EACtF,CAAA,CAAC,CACH;AAAA;AAAA,EAGDK,SAAAA,MAAMrL,OAAO;AAAA,IACXvrD,MAAM;AAAA;AAAA,IAEN/X,UAAU,CAAC2uE,SAAMrL,MAAAA,OAAO,YAAYqL,SAAAA,MAAMrL,OAAO,wBAAwB,CAAC,CAAC;AAAA,IAC3EuL,WAAW;AAAA,MACT9wE,OAAO;AAAA,QAACwwE;AAAAA,QAASE;AAAAA,MAAAA;AAAAA,IAAM;AAAA,EAE1B,CAAA;AAAC,CACH,GAKKK,cAAc,uCACdC,UAAWt+D,CAAAA,QAAgB,oBAAoB6nD,KAAK7nD,GAAG,GACvDu+D,gBAAiBv+D,CAAgB,QAAA,8BAA8B6nD,KAAK7nD,GAAG,GACvEw+D,kBAAkB,CAAC,QAAQ,SAAS,OAAO,WAAW,SAAS,GAa/DC,WAAW1mE;AAEjB,SAAS2mE,YAAYxH,QAAkBnE,SAA+C;AACpF,QAAM4L,UAA6B;AAAA,IAAC,GAAG5L;AAAAA,IAAS5kE,QAAQ+nB;AAAAA,IAAc9nB,SAASuE;AAAAA,EAAS;AACxF,SAAOukE,OAAOlpD,OAAO,CAACtgB,OAAMmoE,UAAU;AAChCyI,QAAAA,QAAQzI,KAAK,GAAG;AAClB,YAAM90D,MAAM80D,MAAMxoE,MAAM,GAAGwoE,MAAMx4D,QAAQ,GAAG,CAAC,GACvCzU,QAAQitE,MAAMxoE,MAAM0T,IAAIrW,SAAS,CAAC;AACxCgD,MAAAA,MAAKS,SAAS;AAAA,QAAC,GAAGT,MAAKS;AAAAA,QAAQ,CAACsvE,mBAAmB18D,GAAG,CAAC,GAAG08D,mBAAmB70E,KAAK;AAAA,MAAC;AAAA,IAC9E,MAAI21E,eAAc1I,KAAK,IAC5BnoE,MAAKU,UAAUwwE,sBAAsB/I,KAAK,IAG1C7lD,QAAQxK,KAAK,uCAAuCqwD,KAAK;AAGpDnoE,WAAAA;AAAAA,KACNixE,OAAO;AACZ;AAEA,SAAShB,aAAajwE,OAAyByF,OAAe+Y,OAAgC;AACtF,QAAA;AAAA,IAAC9d;AAAAA,IAASD,SAAS,CAAC;AAAA,IAAGD;AAAAA,EAAMR,IAAAA,OAC7B,CAACmxE,YAAY,IAAI3yD,OACjB4yD,qBAAqBpxE,UAASmxE,cAC9BE,cAAc5rE,UAAU,KAAKjF,OAAO2wE,aAAa3wE,IACjD8wE,iBACJ,OAAO5wE,UAAY,MAAcuE,SAAYssE,SAAAA,iBAAiB7wE,OAAc,GAExE8wE,gBAAgBlwD,OAAOC,QAAQ9gB,MAAM,EACxC6E,OAAQg6C,CAAqC,UAAA;AACtC,UAAA,CAACjsC,KAAKnY,KAAK,IAAIokD;AACjB,QAAA,CAACpkD,MAAc,QAAA;AACnB,QAAIk2E,mBAA2B,QAAA;AAGzBK,UAAAA,wBAAwBN,aAAa1wE,SAAS4S,GAAG;AACvD,WAAInY,EAAUu2E,UAAAA,yBAAyB,CAACX,gBAAgB/lD,SAAS1X,GAAG;AAAA,EAErE,CAAA,EACAvO,IAAI,CAAC,CAACuO,KAAKnY,KAAK,MAAM,GAAGg1E,mBAAmB78D,GAAG,CAAC,IAAI68D,mBAAmBh1E,KAAK,CAAC,EAAE;AAGhF,SAAA,CAACm2E,cAAc,KAAK7wE,EAAE,EACnBy3B,OAAO,CAACu5C,cAAcx0E,SAAS,KAAKw0E,eAAeF,cAAc,EAAEhsE,OAAOyrE,QAAQ,EAAEW,MAAM,EAC1FrtE,KAAK,GAAG,KAAK;AAEpB;AAEO,SAASgsE,kBAAkB/9D,KAA0B;AAC1D,SAAIA,IAAI3C,QAAQ,IAAI,MAAM,KACjBgiE,qBAAqBr/D,GAAG,IAG1BA,IACJyB,MAAM,GAAG,EACTjP,IAAK0Z,CAAU,UAAA;AACR,UAAA,CAAC2yD,cAAc,GAAGS,cAAc,IAAIpzD,MAAMzK,MAAM,GAAG,EAAEjP,IAAKs7C,CAAY,YAAA;AAC1E,YAAM,CAAC5/C,IAAI,GAAGgpE,MAAM,IAAIppB,QAAQrsC,MAAM,GAAG;AACzC,aAAOi9D,YAAYxH,QAAQ;AAAA,QAAChpE;AAAAA,MAAAA,CAAG;AAAA,IAAA,CAChC;AAED,WAAO,CACL2wE,cACA,GAAGS,eAAe9sE,IAAKmsE,CAAa,aAAA;AAAA,MAClC,GAAGE;AAAAA,MACH,GAAGF;AAAAA,MACHzwE,IAAIywE,QAAQzwE,MAAM2wE,aAAa3wE;AAAAA,MAC/BC,QAAQ;AAAA,QAAC,GAAG83C,sBAAK44B,aAAa1wE,QAAQqwE,eAAe;AAAA,QAAG,GAAGG,QAAQxwE;AAAAA,MAAM;AAAA,MACzEC,SAASuwE,QAAQvwE,WAAWywE,aAAazwE;AAAAA,MACzC,CAAC;AAAA,EAAA,CAEN,EACA4E,OAAQkZ,CAAUA,UAAAA,MAAMxhB,SAAS,CAAC;AACvC;AAEA,SAAS20E,qBAAqBr/D,KAA0B;AACtD,QAAMk3D,SAA0B,CAAE;AAElC,MAAIqI,SAASv/D;AACb,SAAOu/D,OAAO70E,UAAQ;AACd,UAAA,CAAC+8D,OAAOv5D,IAAIsxE,YAAY,IAAID,OAAO9X,MAAM4W,WAAW,KAAK,CAAE;AACjE,QAAI,CAAC5W,OAAO;AACD8X,eAAAA,OAAOlyE,MAAM,CAAC;AACvB;AAAA,IAAA;AAGIe,UAAAA,UAAUoxE,gBAAgBC,gBAAgBD,YAAY;AAC5DtI,WAAOrjE,KAAK;AAAA,MAAC3F;AAAAA,MAAIE;AAAAA,IAAQ,CAAA,GAEzBmxE,SAASA,OAAOlyE,MAAMo6D,MAAM/8D,MAAM;AAAA,EAAA;AAGpC,SAAO,CAACwsE,MAAM;AAChB;AAEA,SAASuI,gBAAgBhqE,MAAc;AACjC,MAAA;AACK4Z,WAAAA,KAAKE,MAAM9Z,IAAI;AAAA,WACfwsB,KAAK;AAEZjS,YAAQxK,KAAK,+BAA+Byc,IAAIh5B,OAAO,EAAE;AACzD;AAAA,EAAA;AAEJ;AAEA,SAAS21E,sBAAsBh0D,MAAuB;AAChD,MAAA;AACKA,WAAAA,OAAO80D,SAAAA,iBAAiB90D,IAAI,IAAIjY;AAAAA,WAChCsvB,KAAK;AAEZjS,YAAQxK,KAAK,+BAA+Byc,IAAIh5B,OAAO,EAAE;AACzD;AAAA,EAAA;AAEJ;ACzLA,MAAMi5C,kBAAkB,CACtBhP,eACAuB,iBACAhD,sBACAG,iBACAlB,cACA2B,oBAAoB,GAGhB8P,iBAAiB,CAACkwB,aAAa,GAE/Bp7C,aAAa,CAACsmD,qBAAqBtB,gBAAgB,GAgD5C3lD,gBAAgBqpD,OAAAA,aAA2Cx2D,CAAY,YAAA;AAC5E7d,QAAAA,OAAO6d,SAAS7d,QAAQs0E,MAAAA;AAEvB,SAAA;AAAA,IACLtvE,MAAM;AAAA,IACNrI,UAAU;AAAA,MACR+b,SAAU67D,CAAAA,gBAGDjoE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAG+nE,aAAa,GAAG39B,eAAe,CAAC,CAAC;AAAA,MAEjEtvB,QAASktD,CAAAA,eAGAloE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAGgoE,YAAY,GAAG39B,cAAc,CAAC,CAAC;AAAA,MAE/DlrB,YAAa8oD,CAAAA,mBAGJnoE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAGioE,gBAAgB,GAAG9oD,UAAU,CAAC,CAAC;AAAA,IAEjE;AAAA,IAEA+oD,OAAO,CACL;AAAA,MACE1vE,MAAM6Y,SAAS7Y,QAAQ;AAAA,MACvBnH,OAAOggB,SAAShgB,SAAS;AAAA,MACzBmC;AAAAA,MACAuvB,WAAWolD,MAAAA,KAAK,MAAM,QAAO,QAAA,EAAA,KAAA,WAAA;AAAA,eAAA,QAAA,aAA4B;AAAA,QAAC;AAAA,MAC1D7X,iBAAiBA,CAAChnD,QAAQjT,WACpBiT,WAAW,WAAiB8+D,sBAAsB/xE,MAAM,IACxDiT,WAAW,SAAe++D,oBAAoBhyE,MAAM,IACjD;AAAA,MAETqkE;AAAAA;AAAAA,MAEA4N,uBAAuB;AAAA,MACvBj3D;AAAAA,MACA80D;AAAAA,MACAoC,2BAA2B;AAAA,IAAA,CAC5B;AAAA,IAGHr0D,MAAM;AAAA,MACJs0D,SAAS,CAAC94E,8BAA8B;AAAA,IAAA;AAAA,EAE5C;AACF,CAAC;AAED,SAAS04E,sBAAsB/xE,QAAiC;AAExD,SAAA,UAAUA,SAMT,cAAcA,SAAS;AAAA,IAACwB,UAAU;AAAA,MAAQ,KALxC;AAMX;AAEA,SAASwwE,oBAAoBhyE,QAAiC;AAEtD,SAAA,QAAQA,SAOP,UAAUA,SAAS;AAAA,IAACqwB,MAAMrwB,OAAOqwB,SAAS;AAAA,MAAe,KANvD;AAOX;AClIO,SAAS+hD,sBAAsB;AAAA,EACpCrP;AAAAA,EACAsP,WAAWC;AAAAA,EACXlxE;AAC0B,GAAsB;AAC1C,QAAA,CAACwN,iBAAiB2jE,kBAAkB,IAAI/mE,eAAS,EAAK,GACtD6vC,SAASlL,iBAAU,GACnB6yB,gBAAgBwP,kCAA2Bn3B,MAAM,GACjDzyC,gBAAgBU,OAAAA,oBAEhBmpE,IAAIzwD,MAAAA,QAAQ,MACT8gD,uBAAuB;AAAA,IAC5BC;AAAAA,IACA1nB;AAAAA,EAAAA,CACD,GACA,CAAC0nB,qBAAqB1nB,MAAM,CAAC,GAE1Bq3B,eAAe1wD,MAAAA,QAAQ,MAEvBswD,mBACKA,iBAAiBG,GAAG;AAAA,IACzB,GAAGzP;AAAAA,IACHp6D;AAAAA,EACD,CAAA,IACI6pE,EAAEtP,YACR,CAACsP,GAAGH,kBAAkBtP,eAAep6D,aAAa,CAAC,GAEhD2jB,WAAkDvK,cACtD,OAAO;AAAA,IACLlM,YAAYlH;AAAAA,IACZ+d,gBAAgB,CAAC/d;AAAAA,IACjB2oC,eAAe,CAAC3oC;AAAAA,IAChByvB,YAAY,CAACzvB;AAAAA,IACbi6B,YAAY,CAACj6B;AAAAA,MAEf,CAACA,eAAe,CAClB,GAEMuZ,iBAA2CnG,cAAQ,OAChD;AAAA,IACLuK;AAAAA,IACA3d;AAAAA,IACA2jE;AAAAA,IACAG;AAAAA,IACAC,kBAAkBF,EAAE5uE;AAAAA,EAAAA,IAErB,CAAC0oB,UAAU3d,iBAAiB8jE,cAAcD,EAAE5uE,OAAO,CAAC;AAEvD,wCACGukB,YAAAA,qBAAqB,UAArB,EAA8B,OAAOD,gBAAgB/mB,UAAS;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
{"version":3,"file":"pane.mjs","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/util/toLowerCaseNoSpaces.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/Resizer.tsx","../../src/structure/panes/document/documentInspector/Resizable.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard\n                                      .writeText(documentId)\n                                      .then(() => {\n                                        toast.push({\n                                          status: 'success',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                          ),\n                                        })\n                                      })\n                                      .catch(() => {\n                                        toast.push({\n                                          status: 'error',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                          ),\n                                        })\n                                      })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(documentId, documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>(undefined)\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [handleInitialValue, hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const tabs = useMemo(() => showTabs && <DocumentHeaderTabs />, [showTabs])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={title}\n          tabs={tabs}\n          tabIndex={tabIndex}\n          backButton={backButton}\n          actions={renderedActions}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider __unstable_elements={portalElements}>\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    documentReady={ready}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useInsertionEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error(\n      'Attempted to patch the Sanity document during initial render or in an `useInsertionEffect`. Input components should only call `onChange()` in a useEffect or an event handler.',\n    )\n  })\n  useInsertionEffect(() => {\n    // note: this needs to happen in an insertion effect to make sure we're ready to receive patches from child components when they run their effects initially\n    // in case they do e.g. `useEffect(() => props.onChange(set(\"foo\")), [])`\n    // Note: although we discourage patch-on-mount, we still support it.\n    patchRef.current = (event: PatchEvent) => {\n      // when creating a new draft\n      if (!editState.draft && !editState.published) {\n        telemetry.log(CreatedDraft)\n      }\n      patch.execute(toMutationPatches(event.patches), initialValue.value)\n    }\n  }, [editState.draft, editState.published, initialValue.value, patch, telemetry])\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  useEffect(() => {\n    formStateRef.current = formState\n  }, [formState])\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","status","tooltip","getPreviewValueWithFallback","t6","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","CopyIcon","content","navigator","clipboard","writeText","then","push","catch","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","log","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","createPatchChannel","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","_portalElement","setPortalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","view","activeView","portalElement","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","isRestoreAction","historyActions","toLowerCase","revTime","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","portalElements","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","useInsertionEffect","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","renderItem","noDocumentsContent","mainContent","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","previous","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","ChevronDownIcon","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","RestoreIcon","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOaA,MAAAA,2BAA2B,aAO3BC,iCAAiCC,2BAA2B;AAAA,EACvEC,QAAQ;AAAA,EACRC,WAAWJ;AAAAA,EACXK,WAAWA,MAAM,OAAO,kBAAa;AACvC,CAAC;ACTM,SAAAC,SAAAC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAC,UAAAC;AAAAA,EAAAA,IAAkCJ,OAClCK,SAAeC,UAAU;AAACC,MAAAA;AAAAN,WAAAG,cAAAI,SAAAP,SAAAI,UACPE,KAAAF,OAAMI,IAAKL,cAAaI,KAAM,GAACP,EAAA,CAAA,IAAAG,cAAAI,OAAAP,OAAAI,QAAAJ,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAlD,QAAAS,aAAmBH,IACnB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAEbG,KAAA;AAAA,IAAAH;AAAAA,IAAAI,OAE9BV;AAAAA,EACRH,GAAAA,OAAAG,eAAAH,OAAAS,YAAAT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,yBAAgBH,EAGtC;AAAC,MAAA,CAEGH,YAAU;AAAAO,QAAAA;AAAAhB,aAAAG,cAAAI,SAAAP,SAAAU,KACCM,MAAAN,EAAE,sCAAoC;AAAA,MAAAD,YAAeN,cAAaI;AAAAA,IAAAA,CAAO,GAACP,EAAA,CAAA,IAAAG,cAAAI,OAAAP,OAAAU,GAAAV,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,SAAAgB,OAAjFC,oCAAOD,UAAAA,KAA2E,GAAOhB,OAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAAzFiB;AAAAA,EAAAA;AAAyF,MAG9FH,OAAK;AAAAE,QAAAA;AAAAhB,cAAAc,MAAAI,WAAAlB,UAAAU,KACGM,MAAAN,EAAE,wBAAsB;AAAA,MAAAS,cAAiBL,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,UAAAgB,OAA3DC,MAAGD,oBAAAA,UAAAA,EAAAA,UAAAA,KAAwD,GAAIhB,QAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAA/DiB;AAAAA,EAAAA;AAA+DD,MAAAA;AAAAhB,YAAAU,KAAAV,EAAAa,EAAAA,MAAAA,OAAAO,SAKnEJ,KAAAH,OAAKO,SACJ,oBAAyF,UAA5E,OAAA;AAAA,IAAAC,OAAQ;AAAA,EAAA,GAAgCX,YAAE,yBAAyB,EAAA,CAAE,GACnFV,QAAAU,GAAAV,EAAA,EAAA,IAAAa,OAAAO,OAAApB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,UAAAgB,MAHHC,KAAA,oBAAA,UAAA,EACGD,cAEA,GACAhB,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAJHiB;AAIG;ACzBMK,MAAAA,iBAAiBC,OAAOC,GAAG;AAAA;AAAA,GAI3BC,gCAAgCF,OAAOG;AAAAA;AAAAA;AAAAA,YAGxCJ,cAAc;AAAA;AAAA;AAAA,GAKbK,gCAAgCJ,OAAOK;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAQvCC,UAAQN,OAAOO;AAAAA;AAAAA;AAAAA,eAGb,CAAC;AAAA,EAACC;AAAK,MAAMC,IAAID,MAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,eAIvC,CAAC;AAAA,EAACH;AAAK,MAAMC,IAAID,MAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,iBAIrC,CAAC;AAAA,EAACH;AAAK,MAAMC,IAAID,MAAME,OAAOC,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQ3CC,iBAAiBZ,OAAOa,IAAI;AAAA;AAAA,GAI5BC,sBAAsBtC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACjC;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnD8C,aAAmBvC,MAAKwC,aAAcxC,MAAKyC,WAAAC;AAAkB,MAAA,CAExDH;AAAU,WAAA;AAAAhC,MAAAA;AAAAN,IAAAsC,CAAAA,MAAAA,cAAAtC,SAAAU,KAMNJ,KAAAI,EAAE,qDAAmD;AAAA,IAAAgC,OAAUJ;AAAAA,EAAAA,CAAW,GAACtC,OAAAsC,YAAAtC,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAM,MAD9EM,KAAC,oBAAA,MAAA,EAAW,SAAG,OAAA,IACZN,cACH,GAAON,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAKIM,KAAAN,EAAE,qDAAqD,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEjE3B,KAAC,oBAAA,MAAA,EAAW,SAAG,OAAA,IACb,UAAA,oBAAC,iBACH,CAAA,CAAA,EAAA,CAAA,GAAOjB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAAgB,MAPT6B,yBAAC,SACC,EAAA,QAAK,IACK,WAAA,OACD,SAAA7B,IAETC,UAGF,GAAA,CAAA,GAAUjB,OAAAgB,IAAAhB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAY,EAAAA,MAAAA,MAAAZ,UAAA6C,MAddC,KAAA,oBAAC,OAAa,YACZ,UAAC,qBAAA,QAAA,EAAc,UACblC,UAAAA;AAAAA,IAAAA;AAAAA,IAIAiC;AAAAA,EAAAA,EASF,CAAA,EACF,CAAA,GAAM7C,QAAAY,IAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAhBN8C;AAgBM;ACtCH,SAAAC,gBAAAhD,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA+C;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAzC;AAAAA,IAAAI;AAAAA,EAAAA,IAAoDd,OACpDqB,QACG+B,SAAStC,MAAKO,KAAM,KAAKgC,eAAevC,MAAKO,KAAM,KACpDiC,SAASxC,MAAKO,KAAM,KACpBkC,SAASzC,MAAKO,KAAM,IAChBP,MAAKO,QACD;AAAA,MAAAd,IAAAM;AAAAZ,IAAAD,CAAAA,MAAAA,MAAAwD,wBAAAvD,EAAAS,CAAAA,MAAAA,cAAAT,SAAAoB,SAAApB,EAAAa,CAAAA,MAAAA,MAAA2C,OAGF5C,KAAA6C,0BAA0B1D,MAAKwD,sBAAuB9C,YAAYI,MAAK2C,KAAMpC,KAAK,GAACpB,EAAA,CAAA,IAAAD,MAAAwD,sBAAAvD,OAAAS,YAAAT,OAAAoB,OAAApB,EAAA,CAAA,IAAAa,MAAA2C,KAAAxD,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAAnFM;AADR,QAAA8C,yBAA+BpD;AAG9BU,MAAAA;AAAAhB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC2E5B,KAAA;AAAA,IAAA2C,OAAA;AAAA,IAAAC,WAAA;AAAA,IAAAC,WAAA;AAAA,EAAA,GAI3E7D,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAA;AAAA,IAAA2D;AAAAA,IAAAE;AAAAA,IAAAD;AAAAA,EAAAA,IAAsCE,cAAcJ,wBAAwB1C,EAI3E;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAA2D,SAAA3D,EAAA4D,CAAAA,MAAAA,aAAA5D,EAAAkD,CAAAA,MAAAA,YAAAlD,SAAA6D,aAEa5C,KAAA2C,YAAS,OACtB,oBAAC,2BACC,EAAA,UAAA,qBAAC,MAAW,EAAA,OAAA,UAAc,KAAC,GACxBV,UAAAA;AAAAA,IAAAA,YAAYA,SAAQT,SAAA,KAAe,oBAAC,2BAAkCS,UAAQ;AAAA,IAC/E,oBAAC,yBAA+BS,EAAAA,OAAkBE,UAAS,CAAA;AAAA,EAC7D,EAAA,CAAA,EACF,CAAA,GACD7D,OAAA2D,OAAA3D,OAAA4D,WAAA5D,OAAAkD,UAAAlD,OAAA6D,WAAA7D,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAPD,QAAA+D,SAAe9C;AAOd4B,MAAAA;AAAA7C,IAAA2D,EAAAA,MAAAA,SAAA3D,UAAA6D,aAEehB,KAAC,oBAAA,gBAAsBc,EAAAA,OAAkBE,UAAa,CAAA,GAAA7D,QAAA2D,OAAA3D,QAAA6D,WAAA7D,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAtE,QAAAgE,UAAgBnB;AAAsDC,MAAAA;AAAA9C,IAAA2D,EAAAA,MAAAA,SAAA3D,UAAA6D,aAAA7D,EAAA,EAAA,MAAAa,SAI9DiC,KAAAmB,4BAAA;AAAA,IAAApD;AAAAA,IAAA8C;AAAAA,IAAAE;AAAAA,EAAAA,CAAqD,GAAC7D,QAAA2D,OAAA3D,QAAA6D,WAAA7D,QAAAa,OAAAb,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAA,SAAAlE,UAAAgD,QAAAhD,EAAA4D,EAAAA,MAAAA,aAAA5D,EAAAiD,EAAAA,MAAAA,UAAAjD,EAAA,EAAA,MAAA+D,UAAA/D,UAAA8C,MAAA9C,EAAA,EAAA,MAAAgE,WAD5DE,KAAC,oBAAA,sBACKpB,EAAAA,GAAAA,IACWc,eAAAA,WACTZ,MACEC,QACAc,QACCC,QAAAA,CACT,GAAAhE,QAAAgD,MAAAhD,QAAA4D,WAAA5D,QAAAiD,QAAAjD,QAAA+D,QAAA/D,QAAA8C,IAAA9C,QAAAgE,SAAAhE,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GAPFkE;AAOE;ACjEC,MAAMC,WAAWC,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,CAAA,GAIjC;AAAA,IAAAqE;AAAAA,IAAAC;AAAAA,EAAAA,IAAuCC,WAAAC,iBAA4B;AAAC,MAAAnE,IAAAM;AAAAZ,IAAAuE,CAAAA,MAAAA,cAAAvE,SAAAsE,oBACxC1D,KAAA0D,iBAAgBI,MAAA,GAAUH,UAAU,GAACvE,OAAAuE,YAAAvE,OAAAsE,kBAAAtE,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAArCM;AAA5B,QAAA+D,QAAcrE;AAAoF,MAAAU,IAAAC;AAAAjB,WAAA2E,SACrE1D,KAAA;AAAA,IAAA0D;AAAAA,EAAO3E,GAAAA,OAAA2E,OAAA3E,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KAAPC;AAA7B,QAAA2D,SAAc5D;AAAiC6B,MAAAA;AAAA,SAAA7C,EAAAD,CAAAA,MAAAA,SAAAC,SAAAqE,OAAArE,EAAA,CAAA,MAAA4E,UAExC/B,yBAAC,WAAc9C,EAAAA,GAAAA,OAAYsE,KAAYO,OAAAA,OAAAA,CAAS,GAAA5E,OAAAD,OAAAC,OAAAqE,KAAArE,OAAA4E,QAAA5E,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAAhD6C;AAAgD,CACxD;ACRM,SAAAgC,gBAAA;AACLC,QAAAA,QAAaN,WAAAO,iBAA4B;AAAC,MAAA,CAErCD;AAAIE,UAAAA,IAAAA,MACS,mCAAmC;AAG9CF,SAAAA;AAAI;ACRN,MAAMG,YAAYb,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA;AAAAiF,MAAAA,SAAAC,iBAAAC,cAAAC;AAAArF,WAAAD,SAIlC;AAAA,IAAAmF;AAAAA,IAAAE;AAAAA,IAAAD;AAAAA,IAAA,GAAAE;AAAAA,EAAAA,IAA0DtF,OAAKC,OAAAD,OAAAC,OAAAkF,SAAAlF,OAAAmF,iBAAAnF,OAAAoF,cAAApF,OAAAqF,SAAAH,UAAAlF,EAAA,CAAA,GAAAmF,kBAAAnF,EAAA,CAAA,GAAAoF,eAAApF,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA;AAC/D,QAAA;AAAA,IAAAsE;AAAAA,IAAAC;AAAAA,EAAAA,IAAuCC,WAAAC,iBAA4B;AAACnE,MAAAA;AAAAN,IAAAuE,CAAAA,MAAAA,cAAAvE,SAAAsE,oBAQzDhE,KAAAgE,iBAAgBI,MAAUH,GAAAA,cAAc,GAACvE,OAAAuE,YAAAvE,OAAAsE,kBAAAtE,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAAkF,CAAAA,MAAAA,WAAAlF,SAAAmF,mBAAAnF,EAAA,EAAA,MAAAoF,gBAC5CxE,KAAA,CAAA;AAAA,IAAA0E,IAAMJ;AAAAA,IAAOK,QAAUJ;AAAAA,IAAeK,SAAWJ;AAAAA,EAAAA,CAAY,GAAEpF,OAAAkF,SAAAlF,OAAAmF,iBAAAnF,QAAAoF,cAAApF,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,IAAAM,EAAAA,MAAAA,MAAAN,UAAAY,MAH5DI,KAAA;AAAA,IAAA2D,OAAA,CAAA,GAEArE,IACHM,EAA+D;AAAA,EAElEZ,GAAAA,QAAAM,IAAAN,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAqE,EAAAA,MAAAA,OAAArE,UAAAqF,QAAArF,EAAA,EAAA,MAAAgB,MARHC,KAAC,oBAAA,aACKoE,GAAAA,MACChB,KACE,OAAArD,GAMP,CAAA,GAAAhB,QAAAqE,KAAArE,QAAAqF,MAAArF,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GATFiB;AASE,CAEL,GCdYwE,oBAAoBrB,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA,GAI1C;AAAA,IAAAqE,kBAAAoB;AAAAA,IAAAnB;AAAAA,IAAAoB;AAAAA,EAAAA,IAAmEnB,WAAAC,iBAA4B;AAAC,MAAAc,QAAAC,SAAAH;AAAArF,WAAAD,SAChG;AAAA,IAAAwF;AAAAA,IAAAC;AAAAA,IAAA,GAAAH;AAAAA,EAAmCtF,IAAAA,OAAKC,OAAAD,OAAAC,OAAAuF,QAAAvF,OAAAwF,SAAAxF,OAAAqF,SAAAE,SAAAvF,EAAA,CAAA,GAAAwF,UAAAxF,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA;AACxC,QAAA4F,aAAmBC,UAAUN,MAAM,GACnCO,cAAoBD,UAAUL,OAAO;AAAClF,MAAAA;AAGpC,QAAAyF,eAAqBL,aAAanB,UAAU,GAC5CyB,iBAAuBD,aAAaJ,YAAY,GAItC/E,KAAAgF,cAAcI,eAAcT,QAC3BvE,KAAA8E,eAAeE,eAAcR;AAAQvE,MAAAA;AAAAjB,IAAAgG,CAAAA,MAAAA,kBAAAhG,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MAH5BC,KAAA;AAAA,IAAA,GACf+E;AAAAA,IAAcT,QACT3E;AAAAA,IAAmC4E,SAClCxE;AAAAA,EAAAA,GACVhB,OAAAgG,gBAAAhG,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAJD,QAAAiG,cAAoBhF;AAInB4B,MAAAA;AAAA7C,IAAA+F,CAAAA,MAAAA,gBAAA/F,SAAA2F,gBAGI9C,KAAAkD,aAAYrB,MAAA,GAAUiB,YAAY,GAAC3F,OAAA+F,cAAA/F,OAAA2F,cAAA3F,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,IAAA+F,EAAAA,MAAAA,gBAAA/F,UAAA2F,gBAEnC7C,KAAAiD,aAAYrB,MAAOiB,gBAAgB,GAAC3F,QAAA+F,cAAA/F,QAAA2F,cAAA3F,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,IAAAiG,EAAAA,MAAAA,eAAAjG,UAAA6C,MAAA7C,EAAA,EAAA,MAAA8C,MAHvBoB,KACbrB,CAAAA,GAAAA,IACHoD,gBACGnD,EAAoC,GACxC9C,QAAAiG,aAAAjG,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAJD,QAAAkG,YAAkBhC;AAIjBiC,MAAAA;AAAAnG,IAAA0F,EAAAA,MAAAA,gBAAA1F,UAAAuE,cAGI4B,KAAAT,aAAYhB,MAAA,GAAUH,UAAU,GAACvE,QAAA0F,cAAA1F,QAAAuE,YAAAvE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,IAAA0F,EAAAA,MAAAA,gBAAA1F,UAAAuE,cAEjC6B,KAAAV,aAAYhB,MAAOH,cAAc,GAACvE,QAAA0F,cAAA1F,QAAAuE,YAAAvE,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAAkG,EAAAA,MAAAA,aAAAlG,UAAAmG,MAAAnG,EAAA,EAAA,MAAAoG,MAHrBC,KACbF,CAAAA,GAAAA,IACHD,cACGE,EAAkC,GACtCpG,QAAAkG,WAAAlG,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAJD,QAAAsG,YAAkBD;AAIjBE,MAAAA;AAAAvG,YAAAsG,aAEMC,MAAA;AAAA,IAAA5B,OAAQ2B;AAAAA,EAAUtG,GAAAA,QAAAsG,WAAAtG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAAzBM,KAAOiG;AAtBT,QAAAC,YAAkBlG;AAuBmDmG,MAAAA;AAAA,SAAAzG,EAAAwG,EAAAA,MAAAA,aAAAxG,UAAAqE,OAAArE,EAAA,EAAA,MAAAqF,QAE9DoB,MAAC,oBAAA,aAAepC,KAASgB,GAAAA,MAAamB,OAAAA,UAAa,CAAA,GAAAxG,QAAAwG,WAAAxG,QAAAqE,KAAArE,QAAAqF,MAAArF,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAAnDyG;AAAmD,CAC3D,GC3CYC,qBAAqBtC,WAAW,SAAA9D,IAAA+D,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA;AAAA,MAAA0G,UAAAC,YAAAC,cAAAC,eAAAzB,MAAA0B;AAAA/G,WAAAM,MAC3C;AAAA,IAAAsG;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAH;AAAAA,IAAAI;AAAAA,IAAA,GAAA1B;AAAAA,EAAA,IAAA/E,IAA+FN,OAAAM,IAAAN,OAAA2G,UAAA3G,OAAA4G,YAAA5G,OAAA6G,cAAA7G,OAAA8G,eAAA9G,OAAAqF,MAAArF,OAAA+G,aAAAJ,WAAA3G,EAAA,CAAA,GAAA4G,aAAA5G,EAAA,CAAA,GAAA6G,eAAA7G,EAAA,CAAA,GAAA8G,gBAAA9G,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA,GAAA+G,WAAA/G,EAAA,CAAA;AAQ7E,QAAAY,KAAAmG,UAAQxB;AAAQvE,MAAAA;AAAAhB,WAAA8G,iBAGb9F,KAAAgG,SAAaF,aAAa,GAAC9G,OAAA8G,eAAA9G,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAA+G,YACtC9F,KAAA8F,YAAQ;AAAA,IAAAA,UAAeA,UAAQzB;AAAAA,EAAA,GAAKtF,OAAA+G,UAAA/G,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,IAAA6G,EAAAA,MAAAA,gBAAA7G,UAAAgB,MAAAhB,EAAA,EAAA,MAAAiB,MAHzB4B,KAAA;AAAA,IAAAoE,MACTJ;AAAAA,IAAYC,eACH9F;AAAAA,IAA2B,GACtCC;AAAAA,EAAAA,GACLjB,QAAA6G,cAAA7G,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA,SAAA9C,UAAA2G,YAAA3G,EAAA4G,EAAAA,MAAAA,cAAA5G,EAAAqE,EAAAA,MAAAA,OAAArE,EAAA,EAAA,MAAAqF,QAAArF,UAAAY,MAAAZ,EAAA,EAAA,MAAA6C,MATHC,KAAC,oBAAA,WAAA,EACKuC,GAAAA,MACChB,KACIuC,qBACK,cAAAhG,IACG,iBAAAiC,IAMhB8D,SACH,CAAA,GAAY3G,QAAA2G,UAAA3G,QAAA4G,YAAA5G,QAAAqE,KAAArE,QAAAqF,MAAArF,QAAAY,IAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAZZ8C;AAYY,CAEf;ACfM,SAAAoE,gBAAA;AAAA,SACE1C,WAAAC,iBAA4B;AAAC;ACEtC,MAAM0C,gBAAkB,CAAE;AAQnB,SAAAC,qBAAArH,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAoH;AAAAA,IAAAJ;AAAAA,IAAApG;AAAAA,EAAAA,IAA+Bd,OACIO,KAAAO,OAAK2C;AAAK5C,MAAAA;AAAAZ,WAAAM,MAAzBM,KAAA0G,eAAehH,EAAU,GAACN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAC9C,QAAAuH,mBAAyBC,oBADL5G,EACoC,GACxD2C,uBAA6BkE,2BAC7B;AAAA,IAAAf,oBAAAA;AAAAA,MAA6BQ,cAAc;AAAClG,MAAAA;AAAAhB,IAAA,CAAA,MAAA0G,uBAAA1G,EAAAiH,CAAAA,MAAAA,MAAAS,QAAA1H,EAAAa,CAAAA,MAAAA,OAAA2C,OAG1CxC,KAAA,SAAA2G,WAAA;AAEI,WAAA,oBAACjB,qBACa,EAAA,YAAA7F,OAAK2C,KACH,cAAAyD,MAAIS,MACHP,eAAUA,eACrBQ,GAAAA,UACJ,CAAA;AAAA,EAAA,GAEL3H,OAAA0G,qBAAA1G,EAAA,CAAA,IAAAiH,MAAAS,MAAA1H,EAAA,CAAA,IAAAa,OAAA2C,KAAAxD,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAKqCiB,QAAAA,KAf3BD,IAkBD6B,KAAAoE,MAAIjE,MAEAF,KAAAyE,kBAAgB9E,SAAY,IAAG8E,mBAAgBJ;AAAcjD,MAAAA;AAAAlE,IAAAuD,CAAAA,MAAAA,wBAAAvD,EAAA,CAAA,MAAA6C,MAAA7C,EAAA8C,CAAAA,MAAAA,MAAA9C,EAAA,CAAA,MAAAiH,QAAAjH,UAAAa,SAJzEqD,KAAC,oBAAA,iBACuBX,EAAAA,sBAChB,MAAAV,IACC,QAAA,WACG,UAAAC,IACEmE,YAAAA,MACLpG,MACP,CAAA,GAAAb,OAAAuD,sBAAAvD,OAAA6C,IAAA7C,OAAA8C,IAAA9C,OAAAiH,MAAAjH,QAAAa,OAAAb,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,SAAAA,EAAAqH,EAAAA,MAAAA,WAAArH,UAAAiB,MAAAjB,EAAA,EAAA,MAAAkE,MARJiC,yBAAC,aAAY,EAAA,sBAAmB,IAAM,IAAAlF,IAAuB,WAAA,KAAaoG,SAAiB,QAAC,GAC1FnD,UAAAA,GAQF,CAAA,GAAclE,QAAAqH,SAAArH,QAAAiB,IAAAjB,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GATdmG;AASc;AClBX,SAAAyB,wBAAAtH,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAiC;AAAA,IAAA4H;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAxF;AAAAA,IAAAyF;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAA7H,IAUtCF,SAAeC,UACf+H,GAAAA,QAAcC,YACd;AAAA,IAAA3H;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAmI,CAAAA,MAAAA,wBAAAnI,SAAAI,UAAAJ,EAAA,CAAA,MAAAU,KAGlDE,KAAA0H,CAAA,SAAA;AACE,UAAArB,OAAa7G,OAAMI,IAAK8H,KAAI/H,KAAM;AAC9B0G,WAAAA,2BACM,sBAA2BA,EAAAA,MAAaqB,aAAeH,SAAAA,qBAAwB,CAAA,IAKtF,oBAAA,KAAA,EAAa,SAAA,GACZ,UAAA,oBAAC,sBACOI,EAAAA,MAAUA,aACT,OAAA7H,EAAE,8DAA8D,GAC7D,UAAAA,EAAE,mEAAiE;AAAA,MAAAkG,YAC/D0B,KAAI9E;AAAAA,IACjB,CAAA,GACM,QAAA,UAEX,CAAA,GAAA;AAAA,EAAA,GAEHxD,OAAAmI,sBAAAnI,OAAAI,QAAAJ,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AApBH,QAAAwI,oBAA0B5H;AAsBzB,MAEGkH,oBAAkBvF,eAAA,KAAsBsF,wBAAsBtF,eAAkB,GAAA;AAAAvB,QAAAA;AAAAhB,aAAA+H,iBAOhE/G,MAAA;AAAA,MAAAyH,eAAAA,MAAsB,oBAAA,UAAA,EAAqB,UAAE,cAAA,CAAA;AAAA,IAAS,GAACzI,OAAA+H,eAAA/H,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,EAAAgI,CAAAA,MAAAA,UAAAhI,SAAAU,KAAAV,EAAA,CAAA,MAAAgB,OALvEC,0BAAC,QAAQ,IAAA,KAAU,MAAA,GACjB,UAAA,oBAAC,WACIP,EAAAA,GACK,SAAA,2CACCsH,iBACG,YAAAhH,KAEhB,EAAA,CAAA,GAAOhB,OAAAgI,QAAAhI,OAAAU,GAAAV,OAAAgB,KAAAhB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAPPiB;AAAAA,EAAAA;AAOO,MAAAyH,IAAAC,IAAAC,IAAArC,KAAAE,KAAAoC,KAAA7H,IAAAC,IAAA4B,IAAAC,IAAAoB,IAAAiC,IAAAC,IAAAC;AAAA,MAAArG,EAAAgI,EAAAA,MAAAA,UAAAhI,UAAA6H,0BAAA7H,EAAA,EAAA,MAAAiI,gBAAAjI,UAAA+H,iBAAA/H,EAAAkI,EAAAA,MAAAA,0BAAAlI,UAAA8H,sBAAA9H,EAAA,EAAA,MAAAwI,qBAAAxI,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAAoI,SAAApI,UAAAuC,YAAA;AAQX,UAAAuG,yBACKb,CAAAA,GAAAA,iBACCC,yBAAsB,CAAI,aAAa,IAAM,EAAA,GAGnDa,kBAAwBrI,EAAE,8CAA4C;AAAA,MAAAgC,OAC7DoG,uBAAsBrG;AAAAA,MAAAuG,UACnBF,uBAAsBG,KAAM,IAAI;AAAA,MAACC,SAClChB,0BAA0BY,uBAAsBrG,SAAU,gBAAgB;AAAA,IAAA,CACpF;AAGEL,SAAAA,MAAeiE,KAAQ,UAAME,MAAA;AAAC4C,QAAAA;AAAAnJ,MAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGzBuG,OAAC,oBAAA,MAAA,EAAiB,eAAA,QAAa,MAAA,GAC7B,UAAA,oBAAC,oBACH,CAAA,CAAA,EAAA,CAAA,GAAOnJ,QAAAmJ,QAAAA,OAAAnJ,EAAA,EAAA;AAAAoJ,QAAAA;AAAApJ,cAAA+H,iBAKWqB,OAAA;AAAA,MAAAX,eAAAA,MAAsBV;AAAAA,IAAa,GAAC/H,QAAA+H,eAAA/H,QAAAoJ,QAAAA,OAAApJ,EAAA,EAAA;AAAAqJ,QAAAA;AAAArJ,cAAAuC,cAExC8G,OAAA;AAAA,MAAA3G,OAAQH;AAAAA,IAAAA,GAAWvC,QAAAuC,YAAAvC,QAAAqJ,QAAAA,OAAArJ,EAAA,EAAA,GAAAA,EAAAU,EAAAA,MAAAA,KAAAV,UAAAoJ,QAAApJ,EAAA,EAAA,MAAAqJ,QAXrC5C,MAAC,oBAAA,MAAA,EAAc,YAAW,QAAA,GAAQ,MAAA,WAAe,MAAA,QAC/C,+BAAC,MACC0C,EAAAA,UAAAA;AAAAA,MAAAA;AAAAA,MAGA,oBAAC,OAAU,SAAe,YAAC,GACzB,UAAA,oBAAC,QAAW,SACV,8BAAC,WACS,EAAA,SAAA,uDACI,YAAAC,MACT1I,GACK,QAAA2I,QAEZ,CAAA,EACF,CAAA;AAAA,IAAA,GACF,EAAA,CACF,GAAOrJ,QAAAU,GAAAV,QAAAoJ,MAAApJ,QAAAqJ,MAAArJ,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAAsJ,QAAAA;AAAAtJ,cAAA+H,iBAOWuB,OAAA;AAAA,MAAAb,eAAAA,MAAsBV;AAAAA,IAAa,GAAC/H,QAAA+H,eAAA/H,QAAAsJ,QAAAA,OAAAtJ,EAAA,EAAA,GAAAA,EAAAgI,EAAAA,MAAAA,UAAAhI,UAAAU,KAAAV,EAAA,EAAA,MAAAsJ,QANtDT,0BAAC,OAAS,MAAA,QACR,8BAAC,MAAW,EAAA,SACV,UAAA,oBAAC,WACS,EAAA,SAAA,6DACLnI,GACMsH,SAAAA,QACG,YAAAsB,KAAAA,CAEhB,EAAA,CAAA,GACF,GAAMtJ,QAAAgI,QAAAhI,QAAAU,GAAAV,QAAAsJ,MAAAtJ,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA,GACL2I,KAAAY,MAAazG,KAAA,GAAWoB,KAAA,GAAQiC,KAAM,QAAUC,KAAA,GAC9CsC,KAAAtG,MAAepB,KAAQ,UAAAhB,EAAA8H,EAAAA,MAAAA,sBAAA9H,UAAAwI,qBACrBvH,KAAA6G,mBAAkBvF,kBAChB,qBAAA,OAAA,EAAS,IAAA,MAAmB,cAAA,GAAU,UAAe,eAAA,uBACnDuF,UAAAA;AAAAA,MAAAA,oBAAkBtF,WAAAgH,IAAAC,CACjB,WAAA,oBAAC,KAAO,EAAA,IAAA,MACLjB,UAAAA,kBAAkBF,MAAI,EAAA,GADPA,OAAI9E,GAEtB,CAAM;AAAA,MAGPsE,mBAAkBvF,aAAcuF,mBAAkBtF,WAAAC,UAChD,oBAAA,KAAA,EAAO,IAAA,MAAc,YACpB,UAAA,oBAAC,qBAAwBqF,EAAAA,GAAAA,sBAC3B,CAAA;AAAA,IAEJ,EAAA,CAAA,GACD9H,QAAA8H,oBAAA9H,QAAAwI,mBAAAxI,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAEA6C,KAAAgF,uBAAsBtF,kBACpB,qBAAA,+BAAA,EACa,eAAA,4BACL,OAAA;AAAA,MAAAmH,WAGH5B,mBAAkBvF,aAAe,IAC7B,+CAA4CoH;AAAAA,IAIpD,GAAA,UAAA;AAAA,MAAC,oBAAA,+BAAA,EACC,UAAC,oBAAA,MAAA,EACI,IAAA,KACQ,WAAA7B,mBAAkBvF,aAAe,IAAA,IAAA,GACpC,QAAA,GACA,WACE,UAAC,GAEX,UAAA,qBAAC,MAAW,EAAA,OAAA,UAAc,KAAC,GAAY,UAAA,GAAa,aAClD,UAAA;AAAA,QAAA,oBAAC,MAAW,EAAA,MAAC,GACX,UAAA,oBAAC,gBAAa,CAAA,GAChB;AAAA,QACA,qBAAC,OAAa,EAAA,UACZ,UAAA;AAAA,UAAA,oBAAC,QAAkB,cAAA,YAAiB,MAAA,GACjC7B,YAAE,2CAAyC;AAAA,YAAAgC,OACnCoG,uBAAsBrG;AAAAA,YAAAmH,eACdlJ,EAAE,oDAAkD;AAAA,cAAAgC,OAC1DmF,uBAAsBtF;AAAAA,YAC9B,CAAA;AAAA,UACF,CAAA,GACH;AAAA,UACA,oBAAC,MAAYwG,EAAAA,OAAAA,iBAA8B,cAAA,YAAiB,MAAA,GAAG,OAAA,IAC5DA,UACH,gBAAA,CAAA;AAAA,QAAA,GACF;AAAA,QACA,oBAAC,gBACC,EAAA,UAAA,oBAAC,MAAK,EAAA,OAAA,IAAY,MAAA,GAChB,UAAA,oBAAC,iBACH,CAAA,CAAA,EAAA,CAAA,EACF,CAAA;AAAA,MAAA,EACF,CAAA,EACF,CAAA,GACF;AAAA,MAEC,qBAAA,KAAA,EAAa,UAAA,QAAmB,eAC/B,UAAA;AAAA,QAAA,qBAAClH,SACC,EAAA,UAAA;AAAA,UAAA,oBAAA,SAAA,EACE,+BAgBK,MAfH,EAAA,UAAA;AAAA,YAAA,oBAIK,QAHH,UAAC,oBAAA,MAAA,EAAK,WAAY,MAAA,GAAU,OAAA;AAAA,cAAAgI,UAAW;AAAA,YAAA,GAAgB,QAAA,UACpDnJ,UAAE,EAAA,kDAAkD,EACvD,CAAA,GACF;AAAA,wCAEE,UAAC,oBAAA,MAAA,EAAK,WAAY,MAAA,GAAU,QAAA,UACzBA,UAAE,EAAA,+CAA+C,EACpD,CAAA,GACF;AAAA,YACA,oBAAA,MAAA,EACE,UAAC,oBAAA,MAAA,EAAK,OAAI,IAAQ,SAAU,QAAA,UACzBA,UAAE,EAAA,mDAAmD,GACxD,EACF,CAAA;AAAA,UAAA,EAAA,CACF,EACF,CAAA;AAAA,UACA,oBAuDQ,SAtDLmH,EAAAA,UAAAA,uBAAsBrF,WAAAsH,OAAAC,OAGpB,EAACP,IAAA,CAAAQ,MAAAC,UAAA;AACI,kBAAA;AAAA,cAAAC;AAAAA,cAAAC;AAAAA,cAAAvD;AAAAA,YAAAA,IAAAoD;AAAoC,wCAExC,MACE,EAAA,UAAA;AAAA,cAAA,4BACE,UAAC,oBAAA,MAAA,EAAW,MAAC,GAAW,qBAAE,EAC5B,CAAA;AAAA,cACA,oBAEK,QADH,UAAC,oBAAA,MAAA,EAAW,MAAC,GAAGG,UAAAA,eAAe,eAAc,EAC/C,CAAA;AAAA,cACA,oBAsCK,QArCH,UAAC,qBAAA,gBAAA,EAAqB,OAAA,UAAc,KAAC,GAAU,SAAA,YAC7C,UAAA;AAAA,gBAAA,oBAAC,QAAkB,cAAA,YAAiB,MAAC,GAClCvD,wBAAc,eACjB;AAAA,gBACCA,cACE,oBAAA,QAAA,EACM,MAAA,SACCwD,MAAOA,UACC,cAAA;AAAA,kBAAAC,SACH3J,EACP,wDACF;AAAA,gBAAC,GAGM,SAAA,MAAA;AACP4J,4BAAAC,UAAAC,UACa5D,UAAU,EAAC6D,KAAA,MAAA;AAEpBrC,0BAAKsC,KAAA;AAAA,sBAAA3G,QACK;AAAA,sBAAS3C,OACVV,EACL,uDACF;AAAA,oBAAA,CACD;AAAA,kBAAA,CACF,EAACiK,MAAA,MAAA;AAEAvC,0BAAKsC,KAAA;AAAA,sBAAA3G,QACK;AAAA,sBAAO3C,OACRV,EACL,8DACF;AAAA,oBAAA,CACD;AAAA,kBAAA,CACF;AAAA,gBAAA,EAGT,CAAA;AAAA,cAAA,EAAA,CACF,EACF,CAAA;AAAA,YAAA,EAAA,MA7CUkG,UAAU,IAAIqD,KAAK,EA8C/B;AAAA,UAAA,CACD,EACL,CAAA;AAAA,QAAA,GACF;AAAA,QAEA,oBAAC,qBAAmB,EAAA,GAAKpC,uBAC3B,CAAA;AAAA,MAAA,EAAA,CAAA;AAAA,IAAA,GACF,GACD7H,QAAAgI,QAAAhI,QAAA6H,wBAAA7H,QAAAiI,cAAAjI,QAAA+H,eAAA/H,QAAAkI,wBAAAlI,QAAA8H,oBAAA9H,QAAAwI,mBAAAxI,QAAAU,GAAAV,QAAAoI,OAAApI,QAAAuC,YAAAvC,QAAA0I,IAAA1I,QAAA2I,IAAA3I,QAAA4I,IAAA5I,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,IAAAlE,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG;AAAAA,EAAA;AAAArG,SAAAA,EAAA,EAAA,GAAA2I,KAAA3I,EAAA,EAAA,GAAA4I,KAAA5I,EAAA,EAAA,GAAAuG,MAAAvG,EAAA,EAAA,GAAAyG,MAAAzG,EAAA,EAAA,GAAA6I,MAAA7I,EAAA,EAAA,GAAAgB,KAAAhB,EAAA,EAAA,GAAAiB,KAAAjB,EAAA,EAAA,GAAA6C,KAAA7C,EAAA,EAAA,GAAA8C,KAAA9C,EAAA,EAAA,GAAAkE,KAAAlE,EAAA,EAAA,GAAAmG,KAAAnG,EAAA,EAAA,GAAAoG,KAAApG,EAAA,EAAA,GAAAqG,KAAArG,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,IAAA,EAAA,MAAA0I,MAAA1I,EAAAgB,EAAAA,MAAAA,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAA6C,MAhJHsG,MAAC,qBAAA,IAAA,EAAe,WAAAnI,IACbC,UAAAA;AAAAA,IAAAA;AAAAA,IAgBA4B;AAAAA,EAAAA,GAgIH,GAAO7C,QAAA0I,IAAA1I,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,YAAA2I,MAAA3I,EAAAmJ,EAAAA,MAAAA,OAAAnJ,EAAA8C,EAAAA,MAAAA,MAAA9C,EAAA,EAAA,MAAAkE,MAAAlE,UAAAmG,MAAAnG,EAAA,EAAA,MAAAoG,MAlJTgD,MAAC,oBAAA,IAAa,EAAA,QAAAtG,IAAW,QAAAoB,IAAQ,MAAAiC,IAAgB,SAAAC,IAC/C+C,UAkJF,IAAA,CAAA,GAAOnJ,QAAA2I,IAAA3I,QAAAmJ,KAAAnJ,QAAA8C,IAAA9C,QAAAkE,IAAAlE,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,YAAA+H,iBAOWsB,MAAA;AAAA,IAAAZ,eAAAA,MAAsBV;AAAAA,EAAa,GAAC/H,QAAA+H,eAAA/H,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAAgI,EAAAA,MAAAA,UAAAhI,UAAAU,KAAAV,EAAA,EAAA,MAAAqJ,OANtDC,0BAAC,KAAS,EAAA,MAAA,QACR,UAAA,oBAAC,QAAW,SACV,UAAC,oBAAA,WAAA,EACS,SAAA,+DACL5I,GACMsH,SAAAA,QACG,YAAAqB,IAAAA,CAEhB,EAAA,CAAA,EACF,CAAA,GAAMrJ,QAAAgI,QAAAhI,QAAAU,GAAAV,QAAAqJ,KAAArJ,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAAAgK,MAAAA;AAAA,SAAAhK,EAAA4I,EAAAA,MAAAA,MAAA5I,EAAAuG,EAAAA,MAAAA,OAAAvG,EAAAyG,EAAAA,MAAAA,OAAAzG,UAAA6I,OAAA7I,EAAA,EAAA,MAAAoJ,OAAApJ,EAAA,EAAA,MAAAsJ,OAAAtJ,EAAA,EAAA,MAAAqG,MAzLR2D,MAAC,qBAAA,IAAA,EAAe,WAAA3D,IAAc,KAAAE,KAC5BE,UAAAA;AAAAA,IAAAA;AAAAA,IAiBAoC;AAAAA,IAUAO;AAAAA,IAoJAE;AAAAA,EAAAA,EAUF,CAAA,GAAOtJ,QAAA4I,IAAA5I,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAoJ,KAAApJ,QAAAsJ,KAAAtJ,QAAAqG,IAAArG,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA,GA1LPgK;AA0LO;AA7PJ,SAAAD,QAAAa,WAAA;AAAA,SAsLwB,eAAeA;AAAS;AC/LvD,SAASC,cAAcC,GAA8B;AAC/C,SAAA,OAAOA,KAAM,YACb,CAACA,IAAU,KACR,gBAAgBA,KAAK,cAAcA;AAC5C;AAEA,MAAMC,gBAAgB;AAGtB,IAAIC;AACJ,MAAMC,kBAAkBA,OACjBD,iBACHA,eAAeE,UAAUhL,UAAU,kBAAkB,EAAEiL;AAAAA;AAAAA,EAErDC,UAAU,IAAI;AAAA,EACd5B,IAAI,MAAMtJ,SAASmL,oBAAoB,SAAS;AAAA,EAChDC,qBAAqB;AAAA,EACrBC,UAAWC,CACTA,YAAAA;AAAAA;AAAAA,IAEIC,MAAM,GAAGV,aAAa;AAAA,MACtBW,KACN;AAAA,EACAC,YAAY;AAAA,IAACC,UAAU;AAAA,IAAMC,YAAY;AAAA,EAAE,CAAA;AAC7C,IAEKb;AAuCT,SAASc,qBACPlF,YACA;AAAA,EAACmF;AAAgD,GACjB;AAC1BC,QAAAA,UAAUC,WAAWrF,UAAU,GAC/BsF,cAAc5E,eAAeV,UAAU,GACvCuF,iBAAiB;AAAA,IACrBC,KAAKL,gBAAgBM,WAAW,OAAO,GAAGL,OAAO,IAAIE,WAAW,EAAE;AAAA,IAClEI,MAAM;AAAA,IACNC,OAAO;AAAA,MAACC,gBAAgB;AAAA,IAAM;AAAA,IAC9BC,KAAK;AAAA,EACP;AACA,SAAOV,gBAAgBW,WAAWC,QAA8BR,cAAc,EAAEhB,KAC9E3B,IAAI,CAAC;AAAA,IAACoD;AAAAA,EAAAA,MAAa;AACjB,UAAMC,cAAcD,QAAQ9C,OAAQgD,CAAQA,QAAAA,IAAIC,WAAW,WAAW;AACtE,QAAIF,YAAYpK,WAAW;AAKvBoK,aAAAA,YAAYpK,WAAW,KAMpBoK,YAAYG,KAAMF,SAAQA,IAAIxH,OAAO0G,OAAO,IAJ1CE,cAI4DF;AAAAA,EAAAA,CACtE,CACH;AACF;AAMA,SAASiB,4BACPrG,YACAsC,SAC0D;AACpD,QAAA;AAAA,IAAC6C;AAAAA,EAAAA,IAAmB7C;AAEnB+B,SAAAA,gBAAkBE,EAAAA,KACvBI,UAAU,MAAMO,qBAAqBlF,YAAYsC,OAAO,CAAC,GACzDqC,UAAW2B,CAAoB,oBAAA;AAC7B,QAAI,CAACA;AACH,aAAOC,GAAG;AAAA,QAAC5K,YAAY;AAAA,QAAGC,YAAY,CAAA;AAAA,MAAA,CAAG;AAGrC4K,UAAAA,iBAAiBrB,gBAAgBsB,OAAAA,EAASC;AAEzCvB,WAAAA,gBAAgBW,WACpBC,QAAQ;AAAA,MACPY,KAAK,oBAAoBH,cAAc,cAAcF,eAAe;AAAA,MACpET,KAAK;AAAA,IACN,CAAA,EACAtB,KACCqC,WAAY1C,CAAM,MAAA;AAIhB,UAAID,cAAcC,CAAC,KAAKA,EAAE2C,eAAe;AACvC,eAAON,GAAG;AAAA,UAAC5K,YAAY;AAAA,UAAGC,YAAY,CAAA;AAAA,QAAA,CAAG;AAGrCsI,YAAAA;AAAAA,IAAAA,CACP,CACH;AAAA,EAAA,CACH,CACH;AACF;AAEA,MAAM4C,wBAAwBC,gCAC5B,CAAC,CAAC/G,YAAYgH,aAAa,MAMlBA,cAAcC,YACnB;AAAA,EAACC,OAJgB;AAAA,EAIGC,QAHF;AAGqB,GACvC;AAAA,EAACnH;AAAU,GACX;AAAA,EAAC6F,KAAK;AAAA,EAA2BuB,aAAa,CAAC,UAAU,WAAW;AAAA,EAAGC,cAAc;AAAI,CAC3F,CAEJ,GAEMC,4BAA4BP,gCAChC,CAAC,CAAC/G,YAAYmF,eAAe,MAEpBd,gBAAkBE,EAAAA,KACvBI,UAAU,MACR0B,4BAA4BrG,YAAY;AAAA,EACtCmF;AACF,CAAC,CACH,CACF,CAEJ;AAEO,SAAAoC,sBAAAvH,YAAA;AAAA5G,QAAAA,IAAAC,EAAA,EAAA,GACL8L,kBAAwBqC,UAAAC,6BAAuC,GAE/DT,gBAAsBU,iBAAiB;AAAChO,MAAAA;AAAAN,WAAA4G,cACpBtG,KAAAgH,eAAeV,UAAU,GAAC5G,OAAA4G,YAAA5G,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAA9C,QAAAkM,cAAoB5L;AAA0B,MAAAM,IAAAI;AAAAhB,IAAA4N,CAAAA,MAAAA,iBAAA5N,SAAAkM,eAG9BlL,KAAA,CAACkL,aAAa0B,aAAa,GAAC5N,OAAA4N,eAAA5N,OAAAkM,aAAAlM,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAY,KAA5BI;AADhB,QAAA,CAAA8G,oBAAAyG,2BAAA,IAA0Db,sBACxD9M,EACF;AAAC,MAAAK,IAAA4B;AAAA7C,IAAAkM,CAAAA,MAAAA,eAAAlM,SAAA+L,mBAGelJ,KAAA,CAACqJ,aAAaH,eAAe,GAAC/L,OAAAkM,aAAAlM,OAAA+L,iBAAA/L,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAAAiB,KAA9B4B;AADhB,QAAA,CAAAgF,wBAAA2G,+BAAA,IAAkEN,0BAChEjN,EACF;AAAC6B,MAAAA;AAAA9C,IAAA,CAAA,MAAA6H,wBAAArF,cAE0BM,KAAAA,MAClB2L,MAAAC,KAAAC,IAAAA,IAEH9G,wBAAsBrF,WAAAgH,IAAAO,OAAA,EAAAD,OAAA8E,OAAA,CAAA,CAI1B,EAACC,KAAM,GACR7O,EAAA,CAAA,IAAA6H,wBAAArF,YAAAxC,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAyBkE,MAAAA;AAAAlE,YAAA8C,MARPoB,KAAQpB,GAQa9C,GAAAA,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AARxC,QAAA8O,aAAmB5K;AAmBO,MAAAiC,IAAAC;AAAApG,IAAA,EAAA,MAAA6H,wBAAArF,cARjB4D,KAAAqI,MAAAC,SAAAC,IAEH9G,wBAAsBrF,WAAAgH,IAAAuF,QAAA,EAAAjF,OAAAkF,QAAA,EAK1B,EAACH,KAAM,GAAC7O,EAAA,EAAA,IAAA6H,wBAAArF,YAAAxC,QAAAoG,MAAAA,KAAApG,EAAA,EAAA,GAPRmG,KAAOC;AADT,QAAA6B,eAAqB9B;AASmBE,MAAAA;AAAArG,IAAA,EAAA,MAAA6H,wBAAArF,cAED6D,KAAAA,MAC9BuI,CACL/G,CAAAA,wBAAsBrF,WAAAwK,KAAAiC,QAAA,GAIzBjP,EAAA,EAAA,IAAA6H,wBAAArF,YAAAxC,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AANDkI,QAAAA,yBAAuC7B,GAMA,GAGzBE,OAACuB,oBAAkBvF,cAAiB,MAAKsF,wBAAsBtF,cAAA,IAMhEkE,MAAA8H,+BAA+BC;AAA+B3F,MAAAA;AAAA,SAAA7I,EAAA6H,EAAAA,MAAAA,0BAAA7H,EAAAiI,EAAAA,MAAAA,gBAAAjI,EAAAkI,EAAAA,MAAAA,0BAAAlI,UAAA8H,sBAAA9H,EAAA,EAAA,MAAA8O,cAAA9O,EAAA,EAAA,MAAAuG,OAAAvG,EAAA,EAAA,MAAAyG,OAPpEoC,MAAA;AAAA,IAAAtG,YACOgE;AAAAA,IAAiFuI;AAAAA,IAAA7G;AAAAA,IAAAC;AAAAA,IAAAJ;AAAAA,IAAAD;AAAAA,IAAAjE,WAMlF6C;AAAAA,EAAAA,GACZzG,QAAA6H,wBAAA7H,QAAAiI,cAAAjI,QAAAkI,wBAAAlI,QAAA8H,oBAAA9H,QAAA8O,YAAA9O,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA,GARM6I;AAQN;AAnDI,SAAAoG,SAAAC,yBAAA;AAsC4B,SAAA,OAAOC,wBAAqBhF,eAAiB;AAAQ;AAtCjF,SAAA6E,SAAA7E,aAAA;AA8B4ByE,SAAAA,CAAAA,CAAQzE,eAAgBA,gBAAgB;AAAE;AA9BtE,SAAA4E,SAAAK,yBAAA;AAAA,SA6BmCD,yBAAqBhF,eAAiB;AAAE;AA7B3E,SAAAJ,QAAAoF,uBAAA;AAAA,SAkBmCA,sBAAqBjF;AAAA;ACnMlDmF,MAAAA,eAAa9N,OAAOC,GAAG;AAAA;AAAA,GAKvB8N,mBAAmB/N,OAAOa,IAAI,EAAEmN,MAAM;AAAA,EACjDC,OAAO;AAAA,EACPC,WAAW;AAAA,EACXC,SAAS;AACX,CAAC;AAAA;AAAA;AAgCM,SAAAC,oBAAArP,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA6B;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAAe,QAAApH;AAAAA,IAAAgP;AAAAA,IAAAC;AAAAA,EAAAA,IAAAvP,IAGlC0H,SAAApH,OAAiB+I,SAAR,WAAT/I,IAIA;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnDsQ,WAAiB,yBAAyBC,MAAO,CAAA,IACjD;AAAA,IAAAjI;AAAAA,IAAAD;AAAAA,IAAAjE;AAAAA,IAAArB;AAAAA,IAAAuM;AAAAA,IAAA7G;AAAAA,IAAAC;AAAAA,EAAAA,IAQIiG,sBAAsB7I,EAAE;AAAC,MAAAtE,IAAAC;AAAAjB,IAAAsF,CAAAA,MAAAA,MAAAtF,SAAAiH,QAC4BhG,KAAA;AAAA,IAAAuC,KAAM8B;AAAAA,IAAE/E,OAAS0G;AAAAA,EAAAA,GAAKjH,OAAAsF,IAAAtF,OAAAiH,MAAAjH,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KAAtBC;AAAsB4B,MAAAA;AAAA7C,WAAAgB,MAAzD6B,KAAC,oBAAA,UAAA,EAAmB,UAAA7B,GAAuD,CAAA,GAAAhB,OAAAgB,IAAAhB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAjG+H,QAAAA,gBAAsBlF,IACtBmN,qBAA2BpM;AAASd,MAAAA;AAAA9C,IAAAgI,CAAAA,MAAAA,UAAAhI,SAAAU,KAMxBoC,KAAApC,EAAE,qCAAmC;AAAA,IAAAwI,SAAYlB;AAAAA,EAAAA,CAAO,GAAChI,OAAAgI,QAAAhI,OAAAU,GAAAV,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAAkE,MAAAA;AAAAlE,WAAAU,KAIvDwD,KAAAxD,EAAE,0CAA0C,GAACV,OAAAU,GAAAV,OAAAkE,MAAAA,KAAAlE,EAAA,CAAA;AAAAmG,MAAAA;AAAAnG,IAAA4P,EAAAA,MAAAA,YAAA5P,UAAAkE,MAFvCiC,KAAA;AAAA,IAAAkB,SACHuI;AAAAA,IAAQK,MACX/L;AAAAA,EACPlE,GAAAA,QAAA4P,UAAA5P,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,IAAAgI,EAAAA,MAAAA,UAAAhI,EAAA,EAAA,MAAA6P,aAAA7P,EAAAgQ,EAAAA,MAAAA,qBAAAhQ,EAAA,EAAA,MAAAU,KAAAV,UAAAuC,cACc6D,KAAA4J,oBAAiB;AAAA,IAAAC,MAGxB1N,aAAU,IACN7B,EAAE,oDAAkD;AAAA,MAAAwI,SAAYlB;AAAAA,IAAAA,CAAO,IACvEtH,EAAE,6CAA2C;AAAA,MAAAwI,SAAYlB;AAAAA,IAAAA,CAAO;AAAA,IAACX,SAC9DwI;AAAAA,EAASlG,IAAAA,QAEX3J,QAAAgI,QAAAhI,QAAA6P,WAAA7P,QAAAgQ,mBAAAhQ,QAAAU,GAAAV,QAAAuC,YAAAvC,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAAmG,EAAAA,MAAAA,MAAAnG,UAAAoG,MAbPC,KAAA;AAAA,IAAA6J,cACQ/J;AAAAA,IAGbgK,eACc/J;AAAAA,EAShBpG,GAAAA,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,IAAAgI,EAAAA,MAAAA,UAAAhI,EAAA,EAAA,MAAA6H,0BAAA7H,UAAAiI,gBAAAjI,EAAA+H,EAAAA,MAAAA,iBAAA/H,EAAA,EAAA,MAAAkI,0BAAAlI,EAAA8H,EAAAA,MAAAA,sBAAA9H,EAAA,EAAA,MAAA4D,aAAA5D,UAAA4P,YAAA5P,EAAA8O,EAAAA,MAAAA,cAAA9O,EAAA,EAAA,MAAAU,KAAAV,UAAAuC,cAIDgE,0BAAC8I,cACExH,EAAAA,UAAAA,0BAA0BC,uBAAuBlE,YAChD,oBAAC,yBACyBiE,EAAAA,wBACJC,oBACLC,eACJnE,WACCrB,YACJyF,QACI8G,YACE7G,cACUC,wBACF0H,sBAAAA,SACtB,CAAA,IAED,oBAAA,kBAAA,EAA6B,eAAA,qBAC5B,UAAC,oBAAA,cAAA,EAAa,cAAgB,OAAAlP,EAAE,oCAAoC,EAAA,CACtE,EAAA,CAAA,EAAA,CAEJ,GAAaV,QAAAgI,QAAAhI,QAAA6H,wBAAA7H,QAAAiI,cAAAjI,QAAA+H,eAAA/H,QAAAkI,wBAAAlI,QAAA8H,oBAAA9H,QAAA4D,WAAA5D,QAAA4P,UAAA5P,QAAA8O,YAAA9O,QAAAU,GAAAV,QAAAuC,YAAAvC,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAA,SAAAzG,EAAA8P,EAAAA,MAAAA,YAAA9P,EAAA,EAAA,MAAA4P,YAAA5P,EAAAuG,EAAAA,MAAAA,OAAAvG,EAAA,EAAA,MAAA8C,MAAA9C,UAAAqG,MAzCfI,MAAC,oBAAA,QAAA,EACQ,UACHqJ,IAAAA,UACI,QAAAhN,IACA,QAAAuD,IAeCuJ,SAAAA,UACOA,gBAAAA,UAEhBrJ,UAAAA,IAoBF,CAAA,GAASvG,QAAA8P,UAAA9P,QAAA4P,UAAA5P,QAAAuG,KAAAvG,QAAA8C,IAAA9C,QAAAqG,IAAArG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GA1CTyG;AA0CS;ACvGb,SAAA2J,6BAAArQ,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACE;AAAA,IAAAS;AAAAA,EAAYC,IAAAA,eAAAnB,wBAAuC,GACnD8F,KAAWyK,MAAAA,GACX,CAAAjP,OAAAuP,QAAA,IAA0BC,aAA+B;AAAChQ,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC1BtC,KAAAA,MAAM+P,aAAa,GAACrQ,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAApD,QAAAuQ,cAAoBjQ;AAAqCM,MAAAA;AAAA,SAAAZ,EAAA,CAAA,MAAAc,SAAAd,EAAAsF,CAAAA,MAAAA,MAAAtF,EAAAD,CAAAA,MAAAA,SAAAC,SAAAU,KAElDE,KAAAE,QACL,oBAAC,QACK,EAAA,IAAA,gBAAgBwE,EAAE,IACV,eAAA,+BACJ,QAAA5E,EAAE,wCAAwC,GAC1C,QAAA;AAAA,IAAAyP,eAAA;AAAA,MAAAF,MAEEvP,EAAE,+CAA+C;AAAA,MAAC2G,SAC/CkJ;AAAAA,MAAWC,MACd;AAAA,IAAA;AAAA,EAAS,GAGV,SAAAzQ,MAAK6P,UAEd,8BAAC,KAAa,EAAA,SAAC,GACb,UAAA,oBAAC,MAAW,EAAA,MAAA,GAAIlP,UAAE,EAAA,0CAA0C,EAAE,CAAA,EAChE,CAAA,GACF,wBAEC,eAAuB2P,EAAAA,SAAO,UAC7B,UAAA,oBAAC,qBAAmB,EAAA,GAAKtQ,OAAK,EAChC,CAAA,GACDC,OAAAc,OAAAd,OAAAsF,IAAAtF,OAAAD,OAAAC,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAtBMY;AAsBN;ACxCI,SAAA6P,MAAAnQ,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAe;AAAA,IAAA0G;AAAAA,IAAA+J,IAAA9P;AAAAA,EAAAN,IAAAA,IAEpBoQ,KAAA9P,OAAM+I,aAAN/I,IAKA+P,CAAAA,OAAAC,QAAA,IAA0BN,SAASI,OAAO;AAAC,MAAA1P,IAAAC;AAYnC,MAZmCjB,SAAA0Q,MAEjC1P,KAAAA,MAAA;AAAA,QACJ0P,MAAO;AAAA;AAIX,UAAAG,YAAkBC,WAAA,MAAiBF,SAAa,EAAA,GAAGF,EAAE;AAAC,WAAA,MAAA;AAGpDK,mBAAaF,SAAS;AAAA,IAAC;AAAA,EAExB5P,GAAAA,MAACyP,EAAE,GAAC1Q,OAAA0Q,IAAA1Q,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IAVPgR,UAAUhQ,IAUPC,EAAI,GAEH,CAAC0P,SAAK,CAAKhK,UAAQ;AAAA9D,QAAAA;AAAA,WAAA7C,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACdC,MAAA,oBAAA,UAAA,CAAA,CAAA,GAAK7C,OAAA6C,OAAAA,MAAA7C,EAAA,CAAA,GAAL6C;AAAAA,EAAAA;AAAKA,MAAAA;AAAA7C,SAAAA,SAAA2G,YAGP9D,KAAA,OAAO8D,YAAa,aAAaA,SAAAA,IAAaA,UAAQ3G,OAAA2G,UAAA3G,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAAtD6C;AAAsD;ACxBxD,MAAMoO,aAAa,IAKbC,uBAAuB,IAKvBC,yBAAyBD,KCPhCE,SAAO7P,OAAO8P,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDlB,SAAAC,YAAAhR,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAqB;AAAA,IAAAsR;AAAAA,IAAAC;AAAAA,MAAAlR,IAO1B;AAAA,IAAAmR;AAAAA,EAAAA,IAAiB5M,cACjB,GAAA,CAAA6M,UAAAC,WAAA,IAAgCrB,WAAc;AAAC1P,MAAAA;AAAAZ,IAAAwR,CAAAA,MAAAA,WAAAxR,SAAAyR,UAG7C7Q,KAAAgR,CAAA,UAAA;AAAA,QAAA,CACOJ;AAAO;kBAEI,GAEhBI,MAAKC,eAAgB;AAErB,UAAAC,SAAeF,MAAKG;AAEb,WAAA,SAASP,UAAU;AAE1B,UAAAQ,kBAAAlH,CAAA,MAAA;AACEA,QAAC+G,eAAgB;AAEjBI,YAAAA,SAAenH,EAACiH,QAASD;AAElB,aAAA,QAAQN,SAASS,MAAM;AAAA,IAAA,GAGhCC,gBAAAC,CAAA,QAAA;AACErH,UAAC+G,kBAEDF,cAAiB,GAEjBS,OAAAC,oBAA2B,aAAaL,eAAe,GACvDI,OAAAC,oBAA2B,WAAWH,aAAa,GAEnDT,OAAO,OAAOD,UAAU;AAAA,IAAC;AAG3BY,WAAAE,iBAAwB,aAAaN,eAAe,GACpDI,OAAAE,iBAAwB,WAAWJ,aAAa;AAAA,EACjDlS,GAAAA,OAAAwR,SAAAxR,OAAAyR,QAAAzR,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAjCHuS,QAAAA,kBAAwB3R,IAuCLI,KAAAuQ,WAAW,KAAE5H,QACb1I,KAAAyQ,WAAW,KAAE/H;AAAY9G,MAAAA;AAAA,SAAA7C,EAAAuS,CAAAA,MAAAA,mBAAAvS,SAAAgB,MAAAhB,EAAA,CAAA,MAAAiB,MAF1C4B,yBAACuO,UACgB,iBAAApQ,IACA,iBAAAC,IACFsR,aAAAA,gBACb,CAAA,GAAAvS,OAAAuS,iBAAAvS,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAJF6C;AAIE;AC7EN,MAAMuO,SAAO7P,OAAOgI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAaXiJ,OAAOpO,WAAW,SAAArE,OAAA0S,cAAA;AAAAzS,QAAAA,IAAAC,EAAA,EAAA;AAAA,MAAA0G,UAAA+L,qBAAAC,qBAAArN,IAAAsN,cAAAC,cAAAC,WAAAxS,IAAAM;AAAAZ,WAAAD,SAM7B;AAAA,IAAA4G;AAAAA,IAAAoM,iBAAAJ;AAAAA,IAAAK,iBAAAN;AAAAA,IAAAO,MAAA3S;AAAAA,IAAAgF;AAAAA,IAAAuE,UAAAgJ;AAAAA,IAAAK,UAAAN;AAAAA,IAAAO,UAAAvS;AAAAA,IAAA,GAAAkS;AAAAA,EAAAA,IAUI/S,OAAKC,OAAAD,OAAAC,OAAA2G,UAAA3G,OAAA0S,qBAAA1S,OAAA2S,qBAAA3S,OAAAsF,IAAAtF,OAAA4S,cAAA5S,OAAA6S,cAAA7S,OAAA8S,WAAA9S,OAAAM,IAAAN,OAAAY,OAAA+F,WAAA3G,EAAA,CAAA,GAAA0S,sBAAA1S,EAAA,CAAA,GAAA2S,sBAAA3S,EAAA,CAAA,GAAAsF,KAAAtF,EAAA,CAAA,GAAA4S,eAAA5S,EAAA,CAAA,GAAA6S,eAAA7S,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA;AAND,QAAAoT,WAAA9S,OAAYqJ,aAAZrJ,IAIN6S,WAAAvS,OAAgB+I,cAAhB/I,IAGF,CAAAyS,aAAAC,cAAA,IAAsChD,aAAoC,GAC1E;AAAA,IAAAiD;AAAAA,IAAAC,WAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAjP;AAAAA,MAOIE,cAAc;AAAC,MAAAC,OAAA9D;AAAA,MAAAhB,EAAA2E,EAAAA,MAAAA,SAAA3E,UAAAqT,aAAA;AAAApS,QAAAA;AAAAjB,cAAAqT,eACKpS,MAAA4S,CAAOA,MAAAA,EAACrC,YAAa6B,aAAWrT,QAAAqT,aAAArT,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAAxD8E,QAAaH,MAAKmP,KAAM7S,GAAgC,GACtCD,KAAA8D,SAAQH,MAAKoP,QAASjP,KAAI,GAAC9E,QAAA2E,OAAA3E,QAAAqT,aAAArT,QAAA8E,OAAA9E,QAAAgB;AAAAA,EAAA;AAAA8D,IAAAA,QAAA9E,EAAA,EAAA,GAAAgB,KAAAhB,EAAA,EAAA;AAA7C,QAAAgU,YAAkBhT,IAClBiT,WAAiB,OAAOD,aAAc,WAAWrP,MAAMqP,YAAa,CAAA,IAAArK,QACpEuK,SAAeF,cAAcrP,MAAKlC,SAAW,GAC7C0R,WAAiBR,oBAAoBN,aACrCG,YAAkBC,uBAA0B3O,OAAI0O,aAAoB,IACpEY,gBAAsBH,UAAQT,aAAoB,IAClDnP,MAAYgQ,OAAA,IAAkC,GAC9CpB,OAAanO,OAAImO,QAAUG,UAC3BL,kBAAwBjO,OAAIiO,mBAAqBJ,qBACjDK,kBAAwBlO,OAAIkO,mBAAqBN;AAAmBzR,MAAAA;AAAAjB,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGY3B,KAAAA,MAAMoD,IAAGiQ,SAAQtU,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAAjGuU,oBAAkE9B,cAAcxR,EAAiB;AAAC4B,MAAAA;AAAA7C,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEvEC,KAAA2R,CAAA,aAAA;AACVA,mBAAAA,QAAQ,GACvBnQ,IAAGiQ,UAAWE;AAAAA,EAAAA,GACfxU,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAHD,QAAAyU,SAAe5R;AAGT,MAAAC,IAAAoB;AAAAlE,IAAA,EAAA,MAAA0S,uBAAA1S,EAAA,EAAA,MAAA2S,uBAAA3S,EAAA,EAAA,MAAAoT,YAAApT,EAAAsF,EAAAA,MAAAA,MAAAtF,EAAA4S,EAAAA,MAAAA,gBAAA5S,EAAA6S,EAAAA,MAAAA,gBAAA7S,EAAA4T,EAAAA,MAAAA,SAAA5T,UAAAqT,eAEUvQ,KAAAA,MAAA;AACTuQ,QAAAA;AAAW,aACTO,MAAMP,aAAW;AAAA,QAAAN,iBACLJ;AAAAA,QAAmBK,iBACnBN;AAAAA,QAAmBO,MAC9BG;AAAAA,QAAQ9N;AAAAA,QAAAuE,UAEJgJ;AAAAA,QAAYK,UACZN;AAAAA,MAAAA,CACX;AAAA,EACA1O,GAAAA,KACDyO,CAAAA,qBACAD,qBACAU,UACA9N,IACAuN,cACAD,cACAgB,OACAP,WAAW,GACZrT,QAAA0S,qBAAA1S,QAAA2S,qBAAA3S,QAAAoT,UAAApT,QAAAsF,IAAAtF,QAAA4S,cAAA5S,QAAA6S,cAAA7S,QAAA4T,OAAA5T,QAAAqT,aAAArT,QAAA8C,IAAA9C,QAAAkE,OAAApB,KAAA9C,EAAA,EAAA,GAAAkE,KAAAlE,EAAA,EAAA,IAnBD0U,gBAAgB5R,IAUboB,EASF;AAACiC,MAAAA;AAAAnG,IAAAuT,EAAAA,MAAAA,YAAAvT,UAAAqT,eAEiClN,KAAAA,MAAA;AAC5BkN,mBACLE,SAASF,WAAW;AAAA,EACrBrT,GAAAA,QAAAuT,UAAAvT,QAAAqT,aAAArT,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAHD,QAAA2U,iBAAuBxO;AAGIC,MAAAA;AAAApG,IAAA0T,EAAAA,MAAAA,UAAA1T,UAAAqT,eAEMjN,KAAAA,MAAA;AAC1BiN,mBACLK,OAAOL,WAAW;AAAA,EACnBrT,GAAAA,QAAA0T,QAAA1T,QAAAqT,aAAArT,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAHD,QAAA4U,eAAqBxO;AAGIC,MAAAA;AAKVE,QAAAA,MAAAkN,kBAAe,KAAWD;AAAS/M,MAAAA;AAAAzG,YAAA2U,kBAAA3U,EAAA4U,EAAAA,MAAAA,gBAAA5U,EAAAkU,EAAAA,MAAAA,UAAAlU,EAAA,EAAA,MAAAgU,aAAAhU,UAAAqT,eAAArT,EAAA,EAAA,MAAAuG,OAFzCE,MAAA;AAAA,IAAA8M,UACKoB;AAAAA,IAAcnB,WACbjN;AAAAA,IAAmCmN,QACtCkB;AAAAA,IAAY3K,OACb+J;AAAAA,IAASE;AAAAA,IAAAb;AAAAA,EAGjBrT,GAAAA,QAAA2U,gBAAA3U,QAAA4U,cAAA5U,QAAAkU,QAAAlU,QAAAgU,WAAAhU,QAAAqT,aAAArT,QAAAuG,KAAAvG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAAAqG,KAPMI;AADT,QAAAoO,eAAqBxO;AAUpBwC,MAAAA;AAAA,OAAA;AAAA,QAGK4K,iBAAe;AACjB9J,YAAAA;AAAgBmL,YAAAA;AAAAA,IAAAA;AAAA,QAGdtB,WAAS;AAAEtC,YAAAA;AAA2B4D,YAAAA;AAAAA,IAAAA;AAAA,QAEtC/B,oBAAqB,GAAA;AACvBlK,YAAOgK,gBAAY1B;AAA0B2D,YAAAA;AAAAA,IAAAA;AAAA,QAG3CZ,QAAM;AACRrL,YAAOgK,gBAAY1B;AAA0B2D,YAAAA;AAAAA,IAAAA;AAG/CjM,UAAOkK,mBAAmBF,gBAAY1B;AAAAA,EAAAA;AAfxC,QAAAtH,WAAiBhB;AAgBsDM,MAAAA;AAAA,OAAA;AAAA,QAGjEqK,WAAS;AAAEtC,YAAAA;AAA2B6D,YAAAA;AAAAA,IAAAA;AAAA,QAEtCtB,mBAAmBS,QAAM;AAC3BvK,YAAAA;AAAgBoL,YAAAA;AAAAA,IAAAA;AAAA,QAGdb,QAAM;AAAA,UACJtB,cAAY;AACdzJ,cAAO6J,mBAAmBJ;AAAYmC,cAAAA;AAAAA,MAAAA;AAGxCpL,YAAAA;AAAgBoL,YAAAA;AAAAA,IAAAA;AAGlB5L,UAAO6J,mBAAmBJ;AAAAA,EAAAA;AAf5B,QAAAM,WAAiB/J,KAkBjB6L,SAAevB,mBAAe,CAAKS;AAAM,MAAA9K,KAAAC;AAAArJ,IAAAwT,EAAAA,MAAAA,aAAAxT,EAAA,EAAA,MAAAkU,UAAAlU,EAAAyT,EAAAA,MAAAA,mBAAAzT,EAAA,EAAA,MAAAoU,iBAAApU,UAAAqT,eAIrChK,MAAC6K,CAAAA,UACAT,CAAAA,mBACC,oBAAC,qBAA4B,EAAA,SAAA,eAC3B,UAAA,oBAAC,eAAsB,UAAAD,aAAaY,eAAwBf,SAAU,YACxE,CAAA,EAAA,CAAA,GACDrT,QAAAwT,WAAAxT,QAAAkU,QAAAlU,QAAAyT,iBAAAzT,QAAAoU,eAAApU,QAAAqT,aAAArT,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA,GAAAoJ,MALDC;AAFJ,QAAA4L,UAAgB7L;AASfE,MAAAA;AAMaU,QAAAA,MAAAkJ,aAAQgC,QAAavL,SAAeuJ;AAAQiC,MAAAA;AAAAnV,IAAAiT,EAAAA,MAAAA,QAAAjT,UAAA6J,YAAA7J,EAAA,EAAA,MAAAgK,OAHjDmL,MAAA;AAAA,IAAAlC;AAAAA,IAAApJ;AAAAA,IAAAqJ,UAGKlJ;AAAAA,EAAAA,GACXhK,QAAAiT,MAAAjT,QAAA6J,UAAA7J,QAAAgK,KAAAhK,QAAAmV,OAAAA,MAAAnV,EAAA,EAAA,GAAAsJ,MAJM6L;AADT,QAAAC,QAAc9L,KAoBQ+L,MAAA5B,kBAAe9J,SAAe,UAEnB2L,MAAA9B,YAAY,KAAE7J,QAEf4L,MAAApC,WAAW,KAAExJ;AAAY6L,MAAAA;AAAAxV,IAAA,EAAA,MAAAwT,aAAAxT,EAAA,EAAA,MAAAgT,mBAAAhT,EAAA,EAAA,MAAA+S,mBAAA/S,EAAAmU,EAAAA,MAAAA,YAAAnU,EAAAiT,EAAAA,MAAAA,QAAAjT,EAAAkT,EAAAA,MAAAA,YAAAlT,EAAA6J,EAAAA,MAAAA,YAAA7J,UAAAgU,aAI5CwB,MAAAvE,YAcAjR,QAAAwT,WAAAxT,QAAAgT,iBAAAhT,QAAA+S,iBAAA/S,QAAAmU,UAAAnU,QAAAiT,MAAAjT,QAAAkT,UAAAlT,QAAA6J,UAAA7J,QAAAgU,WAAAhU,QAAAwV,OAAAA,MAAAxV,EAAA,EAAA;AAAAyV,MAAAA;AAAAzV,IAAA2G,EAAAA,MAAAA,YAAA3G,UAAAgV,UAGES,OAACT,UACC,oBAAA,MAAA,EAAe,WAAA,UAAgB,QAAA,iBAEhC,CAAA,GACDhV,QAAA2G,UAAA3G,QAAAgV,QAAAhV,QAAAyV,OAAAA,MAAAzV,EAAA,EAAA;AAAA0V,MAAAA;AAAA1V,IAAAqT,EAAAA,MAAAA,eAAArT,UAAAyV,OALHC,MAAC,oBAAA,yBAAiCrC,EAAAA,SAAAA,aAC/BoC,UAAAA,KAKH,GAA0BzV,QAAAqT,aAAArT,QAAAyV,KAAAzV,QAAA0V,OAAAA,MAAA1V,EAAA,EAAA;AAAA2V,MAAAA;AAAA3V,IAAAgV,EAAAA,MAAAA,UAAAhV,UAAAsF,MAAAtF,EAAA,EAAA,MAAAgU,aAAAhU,UAAA8S,aAAA9S,EAAAoV,EAAAA,MAAAA,SAAApV,UAAAqV,OAAArV,EAAA,EAAA,MAAAsV,OAAAtV,EAAAuV,EAAAA,MAAAA,OAAAvV,EAAA,EAAA,MAAAwV,OAAAxV,UAAA0V,OApC5BC,MAAC,qBAAAvE,QAAA,EACa,eAAA,QACJ,WAAA,QACH,MAAA,WACG4D,QACJ1P,IACM,UAAA+P,KAAsC,GAC5CvC,WACiB,uBAAAwC,KACJtB,mBAAQ,WACL,sBAAAuB,KACfd,KAAK,QACHW,OAENI,UAAAA;AAAAA,IAAAA;AAAAA,IAgBDE;AAAAA,EAAAA,GAOF,GAAO1V,QAAAgV,QAAAhV,QAAAsF,IAAAtF,QAAAgU,WAAAhU,QAAA8S,WAAA9S,QAAAoV,OAAApV,QAAAqV,KAAArV,QAAAsV,KAAAtV,QAAAuV,KAAAvV,QAAAwV,KAAAxV,QAAA0V,KAAA1V,QAAA2V,OAAAA,MAAA3V,EAAA,EAAA;AAAA4V,MAAAA;AAAA5V,IAAAkU,EAAAA,MAAAA,UAAAlU,UAAA2V,OAtCTC,MAAC,oBAAA,oBAA+B1B,EAAAA,YAAAA,QAC9ByB,UAAAA,KAsCF,GAAqB3V,QAAAkU,QAAAlU,QAAA2V,KAAA3V,QAAA4V,OAAAA,MAAA5V,EAAA,EAAA;AAAA6V,MAAAA;AAAA7V,IAAA6U,EAAAA,MAAAA,gBAAA7U,UAAA4V,OAzCzBC,0BAAC,uBAA4B,SAAA,QAC3B,UAA6BhB,oBAAAA,YAAAA,UAAAA,EAAAA,OAAW,cACtCe,UAAAA,IAAAA,CAwCF,EACF,CAAA,GAAsB5V,QAAA6U,cAAA7U,QAAA4V,KAAA5V,QAAA6V,OAAAA,MAAA7V,EAAA,EAAA;AAAA8V,MAAAA;AAAA9V,SAAAA,EAAAiV,EAAAA,MAAAA,WAAAjV,UAAA6V,OA5CxBC,MACED,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA;IA6CQ,CAAA,GACP7V,QAAAiV,SAAAjV,QAAA6V,KAAA7V,QAAA8V,OAAAA,MAAA9V,EAAA,EAAA,GA/CH8V;AA+CG,CAEN,GC/OY1E,SAAO7P,OAAOgI,IAAI;AAAA;AAAA;AAAA;AAK/B6H,OAAK2E,cAAc;ACEZ,SAAAC,UAAA;AACLlR,QAAAA,QAAaN,WAAAyR,WAAsB;AAAC,MAAA,CAE/BnR;AAAIE,UAAAA,IAAAA,MACS,6BAA6B;AAGxCF,SAAAA;AAAI;ACAN,MAAMoR,cAAc9R,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA;AAAAkW,MAAAA,IAAAxP,UAAAyP,UAAAC,SAAAvD;AAAA9S,WAAAD,SAIpC;AAAA,IAAAoW;AAAAA,IAAAxP;AAAAA,IAAAyP;AAAAA,IAAAC;AAAAA,IAAA,GAAAvD;AAAAA,EAAAA,IAAwD/S,OAAKC,OAAAD,OAAAC,OAAAmW,IAAAnW,OAAA2G,UAAA3G,OAAAoW,UAAApW,OAAAqW,SAAArW,OAAA8S,cAAAqD,KAAAnW,EAAA,CAAA,GAAA2G,WAAA3G,EAAA,CAAA,GAAAoW,WAAApW,EAAA,CAAA,GAAAqW,UAAArW,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA;AAC7D,QAAA;AAAA,IAAAwT;AAAAA,EAAA,IAAoBwC,WACpB;AAAA,IAAAxC,WAAAC;AAAAA,EAAqC5O,IAAAA,cAAAA,GASvBvE,KAAAmT,kBAAe9J,SAAeyM;AAAQxV,MAAAA;AAAA,SAAAZ,EAAAmW,CAAAA,MAAAA,MAAAnW,EAAA2G,CAAAA,MAAAA,YAAA3G,EAAAwT,CAAAA,MAAAA,aAAAxT,SAAAqW,WAAArW,EAAA,EAAA,MAAAqE,OAAArE,EAAA,EAAA,MAAA8S,aAAA9S,EAAA,EAAA,MAAAM,MANlDM,KAAC,oBAAAwQ,QAAA,EACa,eAAA,gBACC+E,aAAAA,IACTrD,GAAAA,WACE,SACEU,QAAAA,WACE,UAAAlT,IACD+V,SACJhS,KACA,MAAA,WAEG,UACV,GAAOrE,OAAAmW,IAAAnW,OAAA2G,UAAA3G,OAAAwT,WAAAxT,OAAAqW,SAAArW,QAAAqE,KAAArE,QAAA8S,WAAA9S,QAAAM,IAAAN,QAAAY,MAAAA,KAAAZ,EAAA,EAAA,GAZPY;AAYO,CAEV;AClCM,SAAS0V,oBAAoBC,KAAiC;AACnE,SAAKA,MACEA,IAAIC,kBAAAA,EAAoBC,WAAW,KAAK,EAAE,IADhC;AAEnB;ACEA,MAAMC,2BAAyC;AAAA,EAC7CC,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV;AAEO,SAAAC,mBAAA/W,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAKL;AAAA,IAAAsR;AAAAA,IAAAwF;AAAAA,IAAAC;AAAAA,EAAAA,IAAuCjX,OACvCkX,cAAoBC,eAAe,UAAUF,OAAOA,OAAIrN,MAAY;AAEhEqN,MAAAA,KAAI/P,SAAU,WAAS;AAAA3G,QAAAA;AAAA,WAAAN,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAClBtC,MAAA,oBAAC,aAAc,CAAA,CAAA,GAAAN,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAAfM;AAAAA,EAAAA;AAAeA,MAAAA;AAAAN,IAAAiX,CAAAA,MAAAA,eAAAjX,SAAAgX,QAGR1W,KAAA2W,YAAYD,IAAI,GAAChX,OAAAiX,aAAAjX,OAAAgX,MAAAhX,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAjC,QAAA;AAAA,IAAAoB;AAAAA,EAAAA,IAAgBd;AAEZ0W,MAAAA,KAAI/P,SAAU,SAAO;AACnB+P,QAAAA,KAAIrQ,SAAAlE,WAAsB;AAAA,aAAA;AAAA,QAI1BuU,KAAI7C,UAAA;AAAAvT,UAAAA;AAAAZ,eAAA+W,gBAGDnW,MAAAmW,oCAAiB,aAAc,EAAA,GAAA/W,OAAA+W,cAAA/W,OAAAY,OAAAA,MAAAZ,EAAA,CAAA;AAAAgB,UAAAA;AAAAhB,QAAA,CAAA,MAAAuR,YAAAvR,EAAAgX,CAAAA,MAAAA,KAAArQ,YAAA3G,EAAAgX,CAAAA,MAAAA,KAAAzF,YAC/BvQ,MAAAgW,KAAIrQ,SAAA6C,IAAA2N,CAAAA,OAAAC,eACH,oBAAC,oBACW,EAAA,UAAA7F,YAAY3C,CAAAA,CAAQoI,KAAIzF,UACpB,cAAAyF,KAAIrQ,SAAUyQ,cAAc,GAAAnQ,SAAY,SAEhDkQ,MAAAA,MADDA,GAAAA,MAAKE,GACC,CAEd,GAACrX,OAAAuR,UAAAvR,EAAA,CAAA,IAAAgX,KAAArQ,UAAA3G,EAAA,CAAA,IAAAgX,KAAAzF,UAAAvR,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,UAAAA;AAAAjB,aAAAA,EAAAY,EAAAA,MAAAA,OAAAZ,UAAAgB,OATJC,MACGL,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,QAAAA;AAAAA,QACAI;AAAAA,MAAAA,EAOC,CAAA,GACDhB,QAAAY,KAAAZ,QAAAgB,KAAAhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GAVHiB;AAAAA,IAAAA;AAUGL,QAAAA;AAAAZ,cAAA+W,gBAMFnW,MAAAmW,oCAAiB,aAAc,EAAA,GAAA/W,QAAA+W,cAAA/W,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAGxB,UAAAgB,MAAAgW,KAAIhU;AAAK/B,QAAAA;AAAAjB,MAAA,EAAA,MAAAuR,YAAAvR,EAAAgX,EAAAA,MAAAA,KAAArQ,YAAA3G,EAAAgX,EAAAA,MAAAA,KAAAzF,YAIdtQ,MAAA+V,KAAIrQ,SAAA6C,IAAA8N,CAAAA,SAAAC,iBACH,oBAAC,oBACW,EAAA,UAAAhG,YAAY3C,CAAAA,CAAQoI,KAAIzF,UACpB,cAAAyF,KAAIrQ,SAAUyQ,gBAAc,GAAAnQ,SAAY,SAEhDkQ,MAAAA,QADDA,GAAAA,QAAKE,GACC,CAEd,GAACrX,QAAAuR,UAAAvR,EAAA,EAAA,IAAAgX,KAAArQ,UAAA3G,EAAA,EAAA,IAAAgX,KAAAzF,UAAAvR,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA;AAAA6C,QAAAA;AAAA7C,MAAAuR,EAAAA,MAAAA,YAAAvR,UAAAgX,KAAAhU,QAAAhD,EAAAiB,EAAAA,MAAAA,OAAAjB,UAAAoB,SAbJyB,KAAC,oBAAA,aACW0O,UACJ,MAAAvQ,KACG0V,SAAuBA,0BAC1BtV,MAAAA,OAELH,UAAAA,IAAAA,CAQH,GAAYjB,QAAAuR,UAAAvR,EAAA,EAAA,IAAAgX,KAAAhU,MAAAhD,QAAAiB,KAAAjB,QAAAoB,OAAApB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,QAAAA;AAAA9C,WAAAA,EAAAY,EAAAA,MAAAA,OAAAZ,UAAA6C,MAhBdC,KACGlC,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,MAAAA;AAAAA,MACDiC;AAAAA,IAAAA,EAcY,CAAA,GACX7C,QAAAY,KAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAjBH8C;AAAAA,EAAAA;AAiBGlC,MAAAA;AAAAZ,YAAA+W,gBAMFnW,KAAAmW,oCAAiB,aAAc,EAAA,GAAA/W,QAAA+W,cAAA/W,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,IAAAuR,EAAAA,MAAAA,YAAAvR,UAAAgX,QAChChW,KAAC,oBAAA,6BAAsCuQ,EAAAA,UAAgByF,KAAQ,CAAA,GAAAhX,QAAAuR,UAAAvR,QAAAgX,MAAAhX,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MAFjEC,KACGL,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IACDI;AAAAA,EAAAA,EAA+D,CAAA,GAC9DhB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAHHiB;AAGG;AAIP,SAAAuW,4BAAAzX,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACE;AAAA,IAAA+W;AAAAA,EAAAA,IAAejX;AAAK,MAEhBiX,KAAIS,QAAA;AAAAnX,QAAAA;AAAA,WAAAN,SAAAgX,KAAAS,UAAAzX,SAAAD,SACCO,MAAC,oBAAA,2BAAA,EAA8BP,GAAAA,OAAe,QAAAiX,KAAIS,OAAW,CAAA,GAAAzX,EAAA,CAAA,IAAAgX,KAAAS,QAAAzX,OAAAD,OAAAC,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAA7DM;AAAAA,EAAAA;AAA6DA,MAAAA;AAAAN,SAAAA,SAAAD,SAG/DO,KAAC,oBAAA,qBAAA,EAAwBP,GAAAA,OAAS,GAAAC,OAAAD,OAAAC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAlCM;AAAkC;AAG3C,SAAAoX,oBAAA3X,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAAsR;AAAAA,IAAAyF;AAAAA,EAAAA,IAAyBjX;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAAgX,KAAAzF,YACPjR,KAAA,OAAO0W,KAAIzF,YAAc,YAC7C,oBAAA,MAAA,EAAW,MAAC,GAAGyF,UAAIzF,KAAAA,SAAAxE,OAAiB,CAAA,GACtC/M,EAAA,CAAA,IAAAgX,KAAAzF,UAAAvR,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAA2X,iBAAuBrX,IAGvB;AAAA,IAAAc;AAAAA,EAAAA,IAAgBwW,YAAYZ,IAAI,GAKhBpW,KAAA2Q,YAAY3C,EAAQoI,KAAIzF;AAAUvQ,MAAAA;AAAAhB,IAAA,CAAA,MAAAgX,KAAAa,UACnC7W,KAAAgW,KAAIa,QAAAC,MAAe,GAAG,GAAC9X,EAAA,CAAA,IAAAgX,KAAAa,QAAA7X,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAErBiB,QAAAA,KAAA+V,KAAIe,aAAef,KAAI7D,YAAA6E,eAMrBnV,eAAUyT,oBAAoBU,KAAI5V,KAAM,CAAC;AAAE0B,MAAAA;AAAA9C,IAAAgX,CAAAA,MAAAA,KAAAhU,QAAAhD,EAAAgX,CAAAA,MAAAA,KAAAiB,YAAAjY,EAAAgX,CAAAA,MAAAA,KAAA7D,YAAAnT,EAAAgX,CAAAA,MAAAA,KAAAxG,QAAAxQ,EAAA,CAAA,MAAAY,MAAAZ,SAAAgB,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,EAAA,EAAA,MAAA6C,MAAA7C,UAAAoB,SAV1D0B,yBAAC,UACW,EAAA,UAAAlC,IACD,SAAAI,IACH,MAAAgW,KAAIhU,MACC,WAAA/B,IAEF,SAAA+V,KAAIiB,UACJ,SAAAjB,KAAI7D,UACP/R,MAAAA,OACA,MAAA4V,KAAIxG,MACG,eAAA3N,GACb,CAAA,GAAA7C,EAAA,CAAA,IAAAgX,KAAAhU,MAAAhD,EAAA,CAAA,IAAAgX,KAAAiB,UAAAjY,EAAA,CAAA,IAAAgX,KAAA7D,UAAAnT,EAAA,CAAA,IAAAgX,KAAAxG,MAAAxQ,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAAoB,OAAApB,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAA,SAAAlE,EAAA8C,EAAAA,MAAAA,MAAA9C,UAAA2X,kBAZJzT,KAAC,oBAAA,mBAAA,EAA2ByT,yBAA0B,WAAA,QACpD7U,UAAAA,GAAAA,CAYF,GAAoB9C,QAAA8C,IAAA9C,QAAA2X,gBAAA3X,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GAbpBkE;AAaoB;AAIxB,SAAAgU,0BAAAnY,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAKE;AAAA,IAAAsR;AAAAA,IAAAkG;AAAAA,IAAAT;AAAAA,EAAAA,IAAiCjX;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAAgX,KAAAzF,YACfjR,KAAA,OAAO0W,KAAIzF,YAAc,YAC7C,oBAAA,MAAA,EAAW,MAAC,GAAGyF,UAAIzF,KAAAA,SAAAxE,OAAiB,CAAA,GACtC/M,EAAA,CAAA,IAAAgX,KAAAzF,UAAAvR,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAA2X,iBAAuBrX;AAEtBM,MAAAA;AAAAZ,IAAAyX,CAAAA,MAAAA,OAAAlS,UAAAvF,EAAA,CAAA,MAAAyX,OAAAxQ,QACgCrG,KAAA;AAAA,IAAA6W,QAASA,OAAMxQ;AAAAA,IAAA1B,QAAekS,OAAMlS;AAAAA,EAAAA,GAAQvF,EAAA,CAAA,IAAAyX,OAAAlS,QAAAvF,EAAA,CAAA,IAAAyX,OAAAxQ,MAAAjH,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAA7EmY,QAAAA,aAAmBC,cAAcxX,EAA4C;AAACI,MAAAA;AAAAhB,IAAAmY,CAAAA,MAAAA,cAAAnY,SAAAgX,QAG5EhW,KAAA4Q,CAAA,UAAA;AACEuG,eAAU9Q,QAASuK,KAAK,GACxBoF,KAAIiB,SAAU;AAAA,EACfjY,GAAAA,OAAAmY,YAAAnY,OAAAgX,MAAAhX,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJH,QAAAqY,cAAoBrX,IAQpB;AAAA,IAAAI;AAAAA,EAAAA,IAAgBwW,YAAYZ,IAAI,GAMhB/V,KAAAsQ,YAAY3C,EAAQoI,KAAIzF;AAAU1O,MAAAA;AAAA7C,IAAA,CAAA,MAAAgX,KAAAa,UACnChV,KAAAmU,KAAIa,QAAAC,MAAe,GAAG,GAAC9X,EAAA,CAAA,IAAAgX,KAAAa,QAAA7X,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAGrB8C,QAAAA,KAAAkU,KAAI7D,WAAA6E,gBAAArO;AAAqCzF,MAAAA;AAAAlE,IAAAqY,EAAAA,MAAAA,eAAArY,EAAA,EAAA,MAAAmY,WAAAG,QAAAtY,EAAA,EAAA,MAAAgX,KAAAhU,QAAAhD,EAAA,EAAA,MAAAgX,KAAA7D,YAAAnT,UAAAgX,KAAAxG,QAAAxQ,UAAAiB,MAAAjB,EAAA6C,EAAAA,MAAAA,MAAA7C,EAAA,EAAA,MAAA8C,MAAA9C,UAAAoB,SANtD8C,KAAC,oBAAA,YACI,IAAA,KACO,UAAAjD,IACD,SAAA4B,IACH,MAAAsV,WAAUG,MACV,MAAAtB,KAAIhU,MACC,WAAAF,IACFuV,SAAU,aACV,SAAArB,KAAI7D,UACP/R,aACA,MAAA4V,KAAIxG,MACV,GAAAxQ,QAAAqY,aAAArY,EAAA,EAAA,IAAAmY,WAAAG,MAAAtY,EAAA,EAAA,IAAAgX,KAAAhU,MAAAhD,EAAA,EAAA,IAAAgX,KAAA7D,UAAAnT,EAAA,EAAA,IAAAgX,KAAAxG,MAAAxQ,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAoB,OAAApB,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAA,SAAAnG,EAAAkE,EAAAA,MAAAA,MAAAlE,UAAA2X,kBAZJxR,KAAC,oBAAA,mBAAA,EAA2BwR,yBAA0B,WAAA,QACpDzT,UAAAA,GAAAA,CAYF,GAAoBlE,QAAAkE,IAAAlE,QAAA2X,gBAAA3X,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAbpBmG;AAaoB;AC3IxB,MAAMoS,6BAA2C;AAAA,EAC/C5B,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV;AAEA,SAAS2B,aAAaC,OAAwBjI,MAAmD;AAC/F,SAAOiI,MAAMzL,KAAMgK,CAAAA,SAEdA,KAAK/P,SAAS,UAAU+P,KAAKxG,SAASA,QACtCwG,KAAK/P,SAAS,WAAWuR,aAAaxB,KAAKrQ,UAAU6J,IAAI,CAE7D;AACH;AAOO,SAAAkI,sBAAA3Y,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAwY;AAAAA,IAAAE;AAAAA,EAAAA,IAA8B5Y,OAC9BuF,KAAWyK,MAEX6I,GAAAA,cAAoBJ,aAAaC,OAAO,UAAU,GAClDI,aAAmBL,aAAaC,OAAO,SAAS,GAOlCnY,KAAAsY,cAAc,aAAaC,aAAa,YAASlP;AAAY/I,MAAAA;AAAAZ,WAAAM,MAFrEM,KAAC,oBAAA,mBAAA,EAEO,MAAAN,IACM,eAAA,4BACZ,GAAAN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAA2Y,gBAKC3X,KAAA2X,gBAEIA,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,wBACA;EAAc,EAAA,CAAA,GAElB3Y,OAAA2Y,cAAA3Y,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAyY,SACAxX,KAAAwX,MAAKjP,IAAAwN,CAAAA,MAAA8B,cAAA;AACJ,UAAA/B,eAAqB0B,MAAMK,YAAa,CAAA,GAAA7R,SAAY;AAAO,WACnD,oBAAA,oBAAA,EAAiC8P,cAAmCC,KAAAA,GAAhBA,KAAIK,GAAoB;AAAA,EACrF,CAAA,GAACrX,OAAAyY,OAAAzY,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAVJ4B,KAAA,qBAAC,MACE7B,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IAMAC;AAAAA,EAAAA,EAIH,CAAA,GAAOjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAsF,CAAAA,MAAAA,MAAAtF,UAAAY,MAAAZ,EAAA,EAAA,MAAA6C,MArBXC,KAAC,oBAAA,YAAA,EAEG,QAAAlC,IAME0E,IAEF,MAAAzC,IAaO0V,SAAyBA,4BAClC,GAAAvY,OAAAsF,IAAAtF,QAAAY,IAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAxBF8C;AAwBE;AC9DOsO,MAAAA,SAAO7P,OAAO8P,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAenB0H,WAAWxX,OAAOgI,IAAI;AAAA;AAAA,GCDtByP,aAAa5U,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,CAAA,GAInC;AAAA,IAAA0G;AAAAA,IAAA0P;AAAAA,MAA4BtW,OAC5B;AAAA,IAAAyT;AAAAA,MAAoBwC,QAAQ;AAAC1V,MAAAA;AAAAN,IAAA2G,CAAAA,MAAAA,YAAA3G,SAAAqW,WAKvB/V,KAAC,oBAAA,UAAA,EAAc,MAAA,WACb,8BAAC,KAAa+V,EAAAA,SAAiB,SAAE,CAAA,EACnC,CAAA,GAAWrW,OAAA2G,UAAA3G,OAAAqW,SAAArW,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,SAAAA,EAAAwT,CAAAA,MAAAA,aAAAxT,SAAAqE,OAAArE,EAAA,CAAA,MAAAM,MAJfM,yBAAC,qBAA4B,EAAA,SAAA,cAC3B,UAAC,oBAAAwQ,QAAA,EAAiB,eAAA,eAAsBoC,QAAQ,WAAQnP,KACtD/D,UAGF,GAAA,CAAA,GACF,GAAsBN,OAAAwT,WAAAxT,OAAAqE,KAAArE,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GANtBY;AAMsB,CAEzB,GC1BYwQ,SAAO7P,OAAO8P,KAAK,EAAa,CAAC;AAAA,EAAC4H;AAAO,MAC7CC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,iCAYwBD,UAAU,6BAA6B,aAAa;AAAA;AAAA;AAAA,GAIpF,GAEYE,SAAS5X,OAAOa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAQpBgX,YAAY7X,OAAOgI,IAAI,EAAE,CAAC;AAAA,EAACxH;AAAqB,MAAM;AAC3D,QAAA;AAAA,IAACsX;AAAAA,IAAIC;AAAAA,EAAMvX,IAAAA,MAAME,OAAOZ,MAAMkY,KAAKC;AAGlCN,SAAAA;AAAAA,wBACeI,EAAE;AAAA;AAAA;AAAA,eAGXD,EAAE;AAAA;AAAA;AAGjB,CAAC,GAEYI,oBAAoBlY,OAAOmY,YAAY;AAAA;AAAA;AAAA,GAKvCC,YAAYpY,OAAOqY,IAAI;AAAA;AAAA;AAAA,GAKvBC,UAAUtY,OAAOC,GAAG,EAAE,CAAC;AAAA,EAACO;AAAqB,MAAM;AACxD,QAAA;AAAA,IAACV;AAAAA,IAAOa;AAAAA,MAASH,MAAME;AAEtBiX,SAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,eAuBMhX,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAYuB4X,KAAKzY,MAAM0Y,KAAKT,IAAI,CAAC,CAAC;AAAA,eACrDpX,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAIvB,CAAC,GCzEY8X,eAAa5V,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA,GAInC;AAAA,IAAAga;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAApZ;AAAAA,MACErB,OACF;AAAA,IAAAwT;AAAAA,IAAAC;AAAAA,IAAAE;AAAAA,IAAAL,aAAAoH;AAAAA,MAAgEzE,QAAQ,GACxE0E,WAAiBC,eAAeF,mBAAmB;AAACna,MAAAA;AAIzC,QAAAM,KAAA4S,YAAYkH,UAAQE,UAAAxI,OAAAyI,cAA8BlR;AAAY3I,MAAAA;AAAAhB,WAAAY,MADhEI,KAAA;AAAA,IAAA8Z,OACEla;AAAAA,EACRZ,GAAAA,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAFMU;AADT,QAAA+Z,cAAoBza;AAKnBW,MAAAA;AAAAjB,IAAAuT,CAAAA,MAAAA,YAAAvT,SAAAwT,aAEoCvS,KAAAA,MAAA;AAC/BuS,iBACJD,SAAS;AAAA,EACVvT,GAAAA,OAAAuT,UAAAvT,OAAAwT,WAAAxT,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAHD,QAAAgb,mBAAyB/Z;AAGA4B,MAAAA;AAAA7C,IAAAwT,CAAAA,MAAAA,aAAAxT,SAAA0T,UAEa7Q,KAAAA,MAAA;AAC/B2Q,iBACLE,OAAO;AAAA,EACR1T,GAAAA,OAAAwT,WAAAxT,OAAA0T,QAAA1T,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAHDib,QAAAA,oBAA0BpY,IAK1BqY,uBAA6BtM,CAAAA,EAAQ,CAAC4E,cAAc+G,QAAQD,cAMtCxX,KAAA0Q,YAAY,KAAE7J,QAKNzF,KAAAsP,YAAY,KAAE7J,QAKjBxD,KAAAqN,aAAS,CAAK0H,uBAA4B,IAAA;AAAA9U,MAAAA;AAAApG,WAAAka,cAIxD9T,KAAA8T,cAAc,oBAAC,KAAS,EAAA,MAAA,QAAQA,UAAAA,WAAW,CAAA,GAAMla,OAAAka,YAAAla,OAAAoG,MAAAA,KAAApG,EAAA,CAAA;AAOnCqG,QAAAA,KAAA6T,aAAkB,IAAA;AAAA3T,MAAAA;AAAAvG,YAAAqa,WAI9B9T,MAAA8T,WAAY,oBAAA,mBAAA,EAAkB,UAAA,IAAiB,QAAA,GAAS,SAAK,GAAAra,QAAAqa,SAAAra,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,IAAAqa,EAAAA,MAAAA,WAAAra,UAAAoB,SAC7DqF,MAAA,CAAC4T,WACA,oBAAC,WAAgB,EAAA,MAAA,GAAgB,cAAA,YAAkB,QAAA,YAC5C,iBACP,GACDra,QAAAqa,SAAAra,QAAAoB,OAAApB,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,IAAAgb,EAAAA,MAAAA,oBAAAhb,EAAA,EAAA,MAAAuG,OAAAvG,EAAAyG,EAAAA,MAAAA,OAAAzG,EAAA,EAAA,MAAAqG,MAAArG,UAAAwa,YAdH3R,MAAA,qBAAC,WACC,EAAA,sBAAmB,IACb,SACM,aAAA,UACHmS,SAAAA,kBACI,aAAA3U,IACJ,SAAC,GACAmU,UAETjU,UAAAA;AAAAA,IAAAA;AAAAA,IACAE;AAAAA,EAKH,EAAA,CAAA,GAAYzG,QAAAgb,kBAAAhb,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAAqG,IAAArG,QAAAwa,UAAAxa,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,IAAAia,EAAAA,MAAAA,WAAAja,UAAAwT,aAEXrK,MAAA8Q,+BACE,MAAW,EAAA,OAAA,UAAiBzG,QAAQ,WACnC,UAAC,oBAAA,qBAAA,EAA4B,SAAA,cAAoB,mBAAE,EACrD,CAAA,GACDxT,QAAAia,SAAAja,QAAAwT,WAAAxT,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,YAAAib,qBAAAjb,EAAA+a,EAAAA,MAAAA,eAAA/a,EAAA6I,EAAAA,MAAAA,OAAA7I,EAAA,EAAA,MAAAmJ,OAAAnJ,UAAAmG,MAAAnG,EAAA,EAAA,MAAAoG,MA/BHgD,2BAAC,UACM,KAAA,GACI6R,4BACA,SAAA,GACM,eAAA9U,IACR,QAAA,UACA4U,OAAAA,aAEN3U,UAAAA;AAAAA,IAAAA;AAAAA,IAEDyC;AAAAA,IAiBCM;AAAAA,EAAAA,EAAAA,CAKH,GAASnJ,QAAAib,mBAAAjb,QAAA+a,aAAA/a,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,IAAA,EAAA,MAAAwT,aAAAxT,EAAAkb,EAAAA,MAAAA,wBAAAlb,EAAAsa,EAAAA,MAAAA,cAAAta,UAAAua,QAERlR,MAAA6R,wBACE,qBAAA,MAAA,EACO,OAAA,UACE1H,mBACC,UAAA,QACM,eAAA,GACL,UAAA,GAEV,UAAA;AAAA,IAAA,oBAAC,WAAc,MAAA,GAAgB,aAAA8G,aAAiB,IAAA,GAC1C,UACN,KAAA,CAAA;AAAA,IAECA,cAAcA;AAAAA,EAAAA,GACjB,GACDta,QAAAwT,WAAAxT,QAAAkb,sBAAAlb,QAAAsa,YAAAta,QAAAua,MAAAva,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAEAsJ,QAAAA,MAACkK,CAAAA,aAAa4G,gBAAgBA;AAAYpQ,MAAAA;AAAAhK,IAAA,EAAA,MAAAoJ,OAAApJ,EAAAqJ,EAAAA,MAAAA,OAAArJ,EAAAsJ,EAAAA,MAAAA,OAAAtJ,UAAAkE,MApD/C8F,MAAC,oBAAA,qBAA4B,EAAA,SAAA,cAC3B,UAAA,qBAAC,MAAqB,EAAA,kBAAA9F,IAAiC,MAAA,WACrDkF,UAAAA;AAAAA,IAAAA;AAAAA,IAkCCC;AAAAA,IAgBAC;AAAAA,EACH,EAAA,CAAA,EACF,CAAA,GAAsBtJ,QAAAoJ,KAAApJ,QAAAqJ,KAAArJ,QAAAsJ,KAAAtJ,QAAAkE,IAAAlE,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA;AAAAmV,MAAAA;AAAAnV,SAAAA,EAAA,EAAA,MAAAma,UAAAna,EAAAqE,EAAAA,MAAAA,OAAArE,EAAAgK,EAAAA,MAAAA,OAAAhK,UAAA8C,MA7D1BqS,0BAAC,eAAuB,EAAA,cACtB,UAAA,oBAAC/D,QACU+I,EAAAA,iBACO,kBAAArX,IACJ,eAAA,eACPuB,KAEL2F,UAAAA,IAAAA,CAuDF,EACF,CAAA,GAAgBhK,QAAAma,QAAAna,QAAAqE,KAAArE,QAAAgK,KAAAhK,QAAA8C,IAAA9C,QAAAmV,OAAAA,MAAAnV,EAAA,EAAA,GA/DhBmV;AA+DgB,CAEnB;AC9GD,SAASgG,oBAAkBnE,MAAqB;AAC9C,MAAI,CAACA,KAAKzF;AACD,WAAA;AAAA,MAAC6J,gBAAgBzR;AAAAA,MAAW0R,WAAW1R;AAAAA,MAAW2R,YAAY;AAAA,IAAK;AAQtEF,QAAAA,iBACJ,OAAOpE,KAAKzF,YAAa,WAAYyF,KAAKzF,SAASxE,SAAoBpD,QACnE0R,YACJ,OAAOrE,KAAKzF,YAAa,YAAY,OAAOyF,KAAKzF,UAAUxE,UAAW,WAClEiK,KAAKzF,SAASxE,SACd;AAEC,SAAA;AAAA,IAACqO;AAAAA,IAAgBC;AAAAA,IAAWC,YAAY1M,EAAQoI,KAAKzF;AAAAA,EAAS;AACvE;AAKO,SAAAgK,uBAAAxb,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAA+W;AAAAA,EAAAA,IAAejX;AAEXiX,MAAAA,KAAI/P,SAAU,QAAM;AAAA3G,QAAAA;AAAAN,WAAAA,SAAAgX,QACf1W,KAAC,oBAAA,gCAAA,EAAqC0W,MAAQ,GAAAhX,OAAAgX,MAAAhX,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAA9CM;AAAAA,EAAAA;AAGL0W,MAAAA,KAAI/P,SAAU,SAAO;AAAA3G,QAAAA;AAAAN,WAAAA,SAAAgX,QAChB1W,KAAC,oBAAA,iCAAA,EAAsC0W,MAAQ,GAAAhX,OAAAgX,MAAAhX,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAA/CM;AAAAA,EAAAA;AAGTkb,SAAAA,QAAAA,KAAa,0DAA0DxE,IAAI,GAAC;AAAA;AASvE,SAAAyE,+BAAA1b,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA+W;AAAAA,MAAejX,OACf;AAAA,IAAAqB;AAAAA,EAAAA,IAAgBwW,YAAYZ,IAAI,GAChC;AAAA,IAAAtW;AAAAA,MAAYC,eAAe;AAAC,MAExBqW,KAAIS,QAAA;AAAAnX,QAAAA;AAAA,WAAAN,SAAAgX,KAAAS,UAAAzX,SAAAD,SACCO,MAAC,oBAAA,8BAAA,EAAiCP,GAAAA,OAAe,QAAAiX,KAAIS,OAAW,CAAA,GAAAzX,EAAA,CAAA,IAAAgX,KAAAS,QAAAzX,OAAAD,OAAAC,OAAAM,OAAAA,MAAAN,EAAA,CAAA,GAAhEM;AAAAA,EAAAA;AAAgEA,MAAAA;AAAAN,WAAAgX,QAGzB1W,KAAA6a,oBAAkBnE,IAAI,GAAChX,OAAAgX,MAAAhX,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAvE,QAAA;AAAA,IAAAob;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAgDhb;AAAuBM,MAAAA;AAAAZ,IAAAqb,CAAAA,MAAAA,aAAArb,SAAAU,KAAAV,EAAA,CAAA,MAAAoB,SAUvDR,KAAAya,aAAaja,SAASV,EAAE,0BAA0B,GAACV,OAAAqb,WAAArb,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAsb,cAAAtb,EAAAgX,EAAAA,MAAAA,KAAAa,UAEpD7W,MAACsa,cAActE,KAAIa,SAAUb,KAAIa,OAAAC,MAAc,GAAG,IAACnO,QAAY3J,OAAAsb,YAAAtb,EAAA,EAAA,IAAAgX,KAAAa,QAAA7X,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAC/DiB,QAAAA,KAAAqa,aAAaF,iBAAiBha;AAAKyB,MAAAA;AAAA7C,IAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiB,MAFhC4B,KAAA;AAAA,IAAA6Y,SACH1a;AAAAA,IAA+DqJ,SAC/DpJ;AAAAA,EACVjB,GAAAA,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,SAAAA,EAAA,EAAA,MAAAsb,cAAAtb,EAAAgX,EAAAA,MAAAA,KAAAhU,QAAAhD,EAAA,EAAA,MAAAgX,KAAAiB,YAAAjY,EAAAgX,EAAAA,MAAAA,KAAA7D,YAAAnT,UAAAgX,KAAAxG,QAAAxQ,EAAAY,EAAAA,MAAAA,MAAAZ,UAAA6C,MAXHC,KAAA,oBAAC,gBACWwY,UAAS,YACb,MAAAtE,KAAIhU,MAED,SAAAgU,KAAIiB,UACH,UAAAjB,KAAI7D,UACR,MAAA6D,KAAIxG,MACE,cAAA5P,IACE,cAAAiC,IAId,GAAA7C,QAAAsb,YAAAtb,EAAA,EAAA,IAAAgX,KAAAhU,MAAAhD,EAAA,EAAA,IAAAgX,KAAAiB,UAAAjY,EAAA,EAAA,IAAAgX,KAAA7D,UAAAnT,EAAA,EAAA,IAAAgX,KAAAxG,MAAAxQ,QAAAY,IAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAZF8C;AAYE;AAIN,SAAA6Y,6BAAA5b,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAAwX;AAAAA,IAAAT;AAAAA,EAAAA,IAAuBjX;AAAKO,MAAAA;AAAAN,IAAAyX,CAAAA,MAAAA,OAAAlS,UAAAvF,EAAA,CAAA,MAAAyX,OAAAxQ,QACK3G,KAAA;AAAA,IAAAmX,QAASA,OAAMxQ;AAAAA,IAAA1B,QAAekS,OAAMlS;AAAAA,EAAAA,GAAQvF,EAAA,CAAA,IAAAyX,OAAAlS,QAAAvF,EAAA,CAAA,IAAAyX,OAAAxQ,MAAAjH,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAA7EmY,QAAAA,aAAmBC,cAAc9X,EAA4C,GAC7E;AAAA,IAAAI;AAAAA,MAAYC,eAAe;AAACC,MAAAA;AAAAZ,IAAAmY,CAAAA,MAAAA,cAAAnY,SAAAgX,QAG1BpW,KAAAgR,CAAA,UAAA;AACEuG,eAAU9Q,QAASuK,KAAK,GACxBoF,KAAIiB,SAAU;AAAA,EACfjY,GAAAA,OAAAmY,YAAAnY,OAAAgX,MAAAhX,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJH,QAAAqY,cAAoBzX;AAMnBI,MAAAA;AAAAhB,WAAAgX,QAE+ChW,KAAAma,oBAAkBnE,IAAI,GAAChX,OAAAgX,MAAAhX,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAvE,QAAA;AAAA,IAAAob;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAAgDta;AAAuBC,MAAAA;AAAAjB,IAAA,CAAA,MAAAqb,aAAArb,EAAA,CAAA,MAAAgX,KAAA5V,SAAApB,EAAA,EAAA,MAAAU,KAWvDO,KAAAoa,aAAarE,KAAI5V,SAAUV,EAAE,0BAA0B,GAACV,OAAAqb,WAAArb,EAAA,CAAA,IAAAgX,KAAA5V,OAAApB,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAsb,cAAAtb,EAAAgX,EAAAA,MAAAA,KAAAa,UAEzDhV,MAACyY,cAActE,KAAIa,SAAUb,KAAIa,OAAAC,MAAc,GAAG,IAACnO,QAAY3J,QAAAsb,YAAAtb,EAAA,EAAA,IAAAgX,KAAAa,QAAA7X,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAC/D8C,QAAAA,KAAAwY,aAAaF,iBAAiBpE,KAAI5V;AAAM8C,MAAAA;AAAAlE,IAAA6C,EAAAA,MAAAA,MAAA7C,UAAA8C,MAFrCoB,KAAA;AAAA,IAAAwX,SACH7Y;AAAAA,IAA+DwH,SAC/DvH;AAAAA,IAAwC8T,WACtC;AAAA,IAAQC,QAAA;AAAA,EAEpB7W,GAAAA,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,SAAAA,EAAAqY,EAAAA,MAAAA,eAAArY,UAAAmY,WAAAG,QAAAtY,EAAAsb,EAAAA,MAAAA,cAAAtb,EAAA,EAAA,MAAAgX,KAAAhU,QAAAhD,UAAAgX,KAAA7D,YAAAnT,EAAAgX,EAAAA,MAAAA,KAAAxG,QAAAxQ,EAAA,EAAA,MAAAiB,MAAAjB,UAAAkE,MAdHiC,KAAC,oBAAA,gBACa,aAAA,KACFmV,UAAAA,YACJ,MAAAnD,WAAUG,MACV,MAAAtB,KAAIhU,MACDqV,SAAU,aACT,UAAArB,KAAI7D,UACR,MAAA6D,KAAIxG,MACE,cAAAvP,IACE,cAAAiD,GAAAA,CAMd,GAAAlE,QAAAqY,aAAArY,EAAA,EAAA,IAAAmY,WAAAG,MAAAtY,QAAAsb,YAAAtb,EAAA,EAAA,IAAAgX,KAAAhU,MAAAhD,EAAA,EAAA,IAAAgX,KAAA7D,UAAAnT,EAAA,EAAA,IAAAgX,KAAAxG,MAAAxQ,QAAAiB,IAAAjB,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAfFmG;AAeE;AAQN,SAAAyV,gCAAA7b,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAA+W;AAAAA,MAAejX,OACf;AAAA,IAAAqB;AAAAA,EAAA,IAAgBwW,YAAYZ,IAAI,GAMd1W,KAAA,CAAA,CAAE0W,KAAIzF,UACV3Q,KAAAoW,KAAIhU,QAAAuF;AAAoBvH,MAAAA;AAAAhB,IAAA,CAAA,MAAAgX,KAAA5V,SAGhBJ,KAAA;AAAA,IAAAqJ,SAAU2M,KAAI5V;AAAAA,IAAAyV,QAAA;AAAA,EAAqB7W,GAAAA,EAAA,CAAA,IAAAgX,KAAA5V,OAAApB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAAM,MAAAN,EAAAY,CAAAA,MAAAA,MAAAZ,EAAAgB,CAAAA,MAAAA,MAAAhB,SAAAoB,SALnDH,KAAC,oBAAA,QAAA,EACW,UAAAX,IACJ,MAAAM,IACCQ,OAAAA,OACF,MAAA,SACS,cAAAJ,IACd,GAAAhB,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAoB,OAAApB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAEA,QAAA6C,KAAAkN,MAAM;AAACjN,MAAAA;AAAA9C,IAAAgX,CAAAA,MAAAA,KAAArQ,YAAA3G,EAAA,CAAA,MAAAgX,KAAAzF,YAGNzO,KAAAkU,KAAIrQ,SAAA6C,IAAA2N,CAAAA,OAAA0E,QAEA,oBAAA,oBAAA,EACW,UAAAjN,CAAQoI,CAAAA,KAAIzF,UACR,cAAAyF,KAAIrQ,SAAUkV,MAAG,CAAI,GAAA5U,SAAY,SAEzCkQ,MAAAA,MAAAA,GADDA,MAAKE,GACC,CAGhB,GAACrX,EAAA,CAAA,IAAAgX,KAAArQ,UAAA3G,EAAA,CAAA,IAAAgX,KAAAzF,UAAAvR,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAAkE,MAAAA;AAAAlE,YAAA8C,MAVJoB,KAAA,oBAAC,QACEpB,UAUH,GAAA,CAAA,GAAO9C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAA,SAAAnG,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAA6C,MAAA7C,EAAA,EAAA,MAAAkE,MAvBXiC,KAAA,oBAAC,cAEG,QAAAlF,IAQE,IAAA4B,IAEF,MAAAqB,GAaF,CAAA,GAAAlE,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAzBFmG;AAyBE;ACpJOiL,MAAAA,SAAO7P,OAAOgI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAxB,SAASuS,gBACdC,OACAC,MACAC,OACAhK,QACsE;AACtE,QAAMiK,MAAM;AAAA,IACVjJ,MAAM8I,MAAMC,KAAK/I,OAAO8I,MAAME,MAAMhJ;AAAAA,IACpC6H,OAAOiB,MAAMC,KAAKlB,QAAQiB,MAAME,MAAMnB;AAAAA,EACxC,GAEMqB,eAAeH,KAAKnS,YAAYsH,wBAChCiL,gBAAgBH,MAAMpS,YAAYsH,wBAElCkL,eAAeC,KAAKC,IAAIP,KAAK9I,YAAYgC,OAAUgH,IAAIpB,QAAQsB,aAAa,GAC5EI,gBAAgBF,KAAKC,IAAIN,MAAM/I,YAAYgC,OAAUgH,IAAIpB,QAAQqB,YAAY;AAG/EM,MAAAA,YAAYN,eAAeJ,MAAMC,KAAKlB;AACpC4B,QAAAA,iBAAiBX,MAAME,MAAMnB,QAAQ0B;AACvCC,cAAYC,mBACdD,YAAYC;AAIVC,MAAAA,YAAYZ,MAAME,MAAMnB,QAAQsB;AAC9BQ,QAAAA,gBAAgBP,eAAeN,MAAMC,KAAKlB;AAC5C6B,cAAYC,kBACdD,YAAYC;AAGd,QAAMC,UAAUP,KAAKC,IAAID,KAAKQ,IAAI7K,QAAQwK,SAAS,GAAGE,SAAS,GAEzDI,QAAQhB,MAAMC,KAAKlB,QAAQ+B,SAC3BG,SAASjB,MAAME,MAAMnB,QAAQ+B,SAE7BI,WAAYF,QAAQb,IAAIpB,QAASoB,IAAIjJ,MACrCiK,YAAaF,SAASd,IAAIpB,QAASoB,IAAIjJ;AAEtC,SAAA;AAAA,IAACgK;AAAAA,IAAUF;AAAAA,IAAOG;AAAAA,IAAWF;AAAAA,EAAM;AAC5C;ACxCgBG,SAAAA,YAAY9J,aAA0B+J,IAA2B;AAC/E,QAAMC,OAAiB,CAAE;AAEzB,MAAIvS,IAAIsS;AAER,SAAOtS,MAAMuI,eAAa;AACxB,UAAMiK,gBAAgBxS,EAAEwS;AAEpB,QAAA,CAACA,cAAsBD,QAAAA;AAG3B,UAAMpT,QADWwE,MAAMC,KAAK4O,cAAcC,UAAU,EAC7BxJ,QAAQjJ,CAAC;AAIhC,QAFAuS,KAAKG,QAAQvT,KAAK,GAEdqT,kBAAkBjK;AACbgK,aAAAA;AAGLC,QAAAA;AAAAA,EAAAA;AAGCD,SAAAA;AACT;ACxBA,MAAMI,aAAuB,CAAE;AAKfC,SAAAA,cAAcrK,aAA0BsK,UAA+B;AAG/EnU,QAAAA,2BAAUoU,QAA+B;AAE/C,aAAWpM,WAAWmM;AACpBnU,IAAAA,KAAIqU,IAAIrM,SAAS2L,YAAY9J,aAAa7B,OAAO,CAAC;AAG9CsM,QAAAA,qBAAqBA,CAACC,GAAgBC,MAAmB;AAC7D,UAAMC,KAAKzU,KAAIhJ,IAAIud,CAAC,KAAKN,YACnBS,KAAK1U,KAAIhJ,IAAIwd,CAAC,KAAKP,YAEnBU,MAAM7B,KAAKQ,IAAImB,GAAGxb,QAAQyb,GAAGzb,MAAM;AAGzC,aAAS2b,IAAI,GAAGA,IAAID,KAAKC,KAAK,GAAG;AACzBC,YAAAA,SAASJ,GAAGG,CAAC,KAAK,IAClBE,SAASJ,GAAGE,CAAC,KAAK;AAExB,UAAIC,WAAWC;AACb,eAAOD,SAASC;AAAAA,IAAAA;AAIb,WAAA;AAAA,EACT;AAEAX,WAAS9O,KAAKiP,kBAAkB;AAClC;ACTO,SAASS,6BAAmD;AACjE,QAAMC,YAAuC,CAAA,GACvCb,WAA0B,CAC1Bc,GAAAA,aAAiBb,oBAAAA,QAAAA,GACjBc,0BAA0B,oBAAI/P,IAAiB,GAC/CoN,QAAkC,CAAC;AAGrC1I,MAAAA,cAAkC,MAClCsL,YAAY,GACZhL,kBAAsC,MACtCiL,gBAAgB,oBAAIC,IAAiC,GACrDC,WAAW;AAEf,WAASvL,SAAS/B,SAAsB;AACtCkN,4BAAwBK,IAAIvN,OAAO,GAE/BmC,oBAAoBnC,YACtBmC,kBAAkB,OAGpBqL,iBAAiB;AAAA,EAAA;AAGnB,WAAStL,OAAOlC,SAAsB;AACpCkN,4BAAwBO,OAAOzN,OAAO,GAEtCmC,kBAAkBnC,SAElBwN,iBAAiB;AAAA,EAAA;AAGVpL,WAAAA,MAAMpC,SAAsB0N,SAAyB;AAC5DT,WAAAA,WAAWZ,IAAIrM,SAAS;AAAA,MAAC,GAAG0N;AAAAA,MAASC,UAAUD;AAAAA,IAAQ,CAAA,GAEvDvB,SAASjT,KAAK8G,OAAO,GAEjB6B,eACFqK,cAAcrK,aAAasK,QAAQ,GAGrCjK,OAAOlC,OAAO,GAEP,MAAM;AACLqK,YAAAA,MAAM8B,SAAS5J,QAAQvC,OAAO;AAEhCqK,YAAM,MACR8B,SAASyB,OAAOvD,KAAK,CAAC,GAGxB4C,WAAWQ,OAAOzN,OAAO,GAEzBwN,iBAAiB;AAAA,IACnB;AAAA,EAAA;AAIOvN,WAAAA,OAAOxK,MAAgCoY,aAA0BpN,QAAgB;AAClFqN,UAAAA,YAAY3B,SAAS5J,QAAQsL,WAAW,GACxCE,cAAcd,WAAWje,IAAI6e,WAAW;AAE9C,QAAI,CAACE,YAAa;AAEZC,UAAAA,eAAe7B,SAAS2B,YAAY,CAAC,GACrCG,eAAehB,WAAWje,IAAIgf,YAAY;AAEhD,QAAKC,cAoBL;AAAA,UAlBIxY,SAAS,YACX6X,WAAW,IAEX/C,MAAMC,OAAO;AAAA,QACXxK,SAAS6N;AAAAA,QACTpM,MAAMsM,YAAYtM,QAAQ;AAAA,QAC1B6H,OAAOuE,YAAYK;AAAAA,MAAAA,GAGrB3D,MAAME,QAAQ;AAAA,QACZzK,SAASgO;AAAAA,QACTvM,MAAMwM,aAAaxM,QAAQ;AAAA,QAC3B6H,OAAO0E,aAAaE;AAAAA,MAAAA,GAGtBV,qBAGE/X,SAAS,UAAU8U,MAAMC,QAAQD,MAAME,OAAO;AAChD2C,4CAAoBC,IAAiC;AAE/C,cAAA;AAAA,UAAC9B;AAAAA,UAAOC;AAAAA,UAAQC;AAAAA,UAAUC;AAAAA,QAAapB,IAAAA,gBAC3CC,OACAwD,aACAE,cACAxN,MACF;AAGA2M,sBAAcf,IAAIwB,aAAa;AAAA,UAACpM,MAAMgK;AAAAA,UAAUnC,OAAOiC;AAAAA,QAAAA,CAAM,GAC7D6B,cAAcf,IAAI2B,cAAc;AAAA,UAACvM,MAAMiK;AAAAA,UAAWpC,OAAOkC;AAAAA,QAAO,CAAA,GAEhEgC,iBAAiB;AAAA,MAAA;AAGnB,UAAI/X,SAAS,OAAO;AACP,mBAAA;AAEL0Y,cAAAA,iBAAiBf,cAAcpe,IAAI6e,WAAW,GAC9CO,kBAAkBhB,cAAcpe,IAAIgf,YAAY;AAGtDf,mBAAWZ,IAAIwB,aAAa;AAAA,UAC1B,GAAGE;AAAAA,UACHxM,iBAAiB;AAAA,UACjBC,iBAAiBuM,YAAYrM,YAAYgC;AAAAA,UACzCjC,MAAM0M,gBAAgB1M,QAAQsM,YAAYtM;AAAAA,QAAAA,CAC3C,GAGDwL,WAAWZ,IAAI2B,cAAc;AAAA,UAC3B,GAAGC;AAAAA,UACH1M,iBAAiB;AAAA,UACjBC,iBAAiBuM,YAAYrM,YAAYgC;AAAAA,UACzCjC,MAAM2M,iBAAiB3M,QAAQwM,aAAaxM;AAAAA,QAAAA,CAC7C,GAGD2L,gBAAgB,oBAAIC,OAGpB,OAAO9C,MAAMC,MACb,OAAOD,MAAME,OAEb+C,iBAAiB;AAAA,MAAA;AAAA,IACnB;AAAA,EAAA;AAGF,WAAS1L,eAAeuM,iBAAqC;AAC7CA,kBAAAA;AAAAA,EAAAA;AAGhB,WAASC,aAAaC,eAAuB;AAC3CpB,gBAAYoB,eACZf,iBAAiB;AAAA,EAAA;AAGnB,WAASgB,UAAUC,UAAmC;AAC1CvV,WAAAA,UAAAA,KAAKuV,QAAQ,GAEhB,MAAM;AACLpE,YAAAA,MAAM2C,UAAU9T,KAAKuV,QAAQ;AAE/BpE,YAAM,MACR2C,UAAUY,OAAOvD,KAAK,CAAC;AAAA,IAE3B;AAAA,EAAA;AAGK,SAAA;AAAA,IAACtI;AAAAA,IAAUG;AAAAA,IAAQE;AAAAA,IAAOnC;AAAAA,IAAQ6B;AAAAA,IAAgBwM;AAAAA,IAAcE;AAAAA,EAAS;AAGhF,WAAShB,mBAAmB;AAC1B,QAAI,CAACL,UAAW;AAIhB,UAAMuB,YAA2B,CAAE;AACnC,eAAW1O,WAAWmM;AAChBnM,kBAAYmC,mBACduM,UAAU1C,QAAQhM,OAAO;AAGzBmC,uBACFuM,UAAU1C,QAAQ7J,eAAe;AAGnC,UAAMwM,UAAU,oBAAIvC,QAA+B,GAC7CO,MAAM+B,UAAUzd,QAChB2d,cAAcF,UAAU,CAAC,GACzBG,kBAAkBlC,MAAM,KAAKjN;AAEnC,QAAIoP,eAAe3B,YAAY0B;AAE/B,eAAW7O,WAAW0O,WAAW;AACzBhB,YAAAA,UAAUT,WAAWje,IAAIgR,OAAO;AAEtC,UAAI,CAAC0N;AACH;AAGIrV,YAAAA,WAAWqV,QAAQnM,mBAAmBmM,QAAQrV,YAAYsH,wBAC1D+C,SAAS1C,YAAY4O,aAIrBG,gBAAgB7B,wBAAwB8B,IAAIhP,OAAO,GAEnDiP,gBAAgB5W,WAAWyW,cAE3B9M,YAAYU,SAAS,KAAQqM,iBAAiBE,eAE9CC,aAAa9B,cAAcpe,IAAIgR,OAAO;AAG5C2O,cAAQtC,IAAIrM,SAAS;AAAA,QACnBA;AAAAA,QACAgC;AAAAA,QACAT,iBAAiB2N,YAAY5F,SAASoE,QAAQnM;AAAAA,QAC9CC,iBAAiB0N,YAAY5F,SAASoE,QAAQlM;AAAAA,QAC9CC,MAAMyN,YAAYzN,QAAQiM,QAAQjM,QAAQ;AAAA,MAAA,CAC3C,GAGGO,YACF8M,gBAAgBpP,uBAEhBoP,gBAAgBzW,WAAWqH;AAAAA,IAAAA;AAI/B,UAAMvM,QAAoB,CAAE;AAE5B,eAAW6M,WAAWmM,UAAU;AACxBgD,YAAAA,OAAOR,QAAQ3f,IAAIgR,OAAO;AAE5BmP,cAAMhc,MAAM+F,KAAKiW,IAAI;AAAA,IAAA;AAG3B,eAAWV,YAAYzB;AACZ,eAAA;AAAA,QACP7K,iBAAiBA,mBAAmBgK,SAASA,SAASlb,SAAS,CAAC,KAAK;AAAA,QACrEkC;AAAAA,QACAma;AAAAA,MAAAA,CACD;AAAA,EAAA;AAGP;AC9OO,SAAA8B,WAAA7gB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAA0G,MAAAA,UAAAkD,UAAAgX,YAAAC,UAAAhO;AAAA9S,WAAAD,SAKL;AAAA,IAAA4G;AAAAA,IAAAkD;AAAAA,IAAAgX;AAAAA,IAAAC;AAAAA,IAAA,GAAAhO;AAAAA,EAAAA,IAAiE/S,OAAKC,OAAAD,OAAAC,OAAA2G,UAAA3G,OAAA6J,UAAA7J,OAAA6gB,YAAA7gB,OAAA8gB,UAAA9gB,OAAA8S,cAAAnM,WAAA3G,EAAA,CAAA,GAAA6J,WAAA7J,EAAA,CAAA,GAAA6gB,aAAA7gB,EAAA,CAAA,GAAA8gB,WAAA9gB,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA;AACtE,QAAA,CAAA+gB,UAAA,IAAqBzQ,SAAAvG,OAA2C,GAChE,CAAAsJ,aAAAC,cAAA,IAAsChD,aAAoC,GAE1EwK,QADiBH,eAAetH,WAAW,GACrByH,SAAY,GAClCtH,YAAkBsH,UAAKnR,UAAc,CAAKE,WAAQF,SAAemR,QAAQjR;AAAQvJ,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC7BtC,KAAA;AAAA,IAAAqT,iBAAA;AAAA,IAAAhP,OAAA,CAAA;AAAA,IAAAma,UAAA;AAAA,EAAA,GAInD9e,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA,CAAA4E,QAAAoc,QAAA,IAA0B1Q,SAA0BhQ,EAInD;AAAC,MAAAM,IAAAI;AAAAhB,IAAA+gB,CAAAA,MAAAA,cAAA/gB,SAAAqT,eAGQzS,KAAAA,MAAMmgB,WAAUzN,eAAgBD,WAAW,GAAGrS,KAAA,CAAC+f,YAAY1N,WAAW,GAACrT,OAAA+gB,YAAA/gB,OAAAqT,aAAArT,OAAAY,IAAAZ,QAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,EAAA,IAAjFgR,UAAUpQ,IAA8CI,EAAyB;AAAC,MAAAC,IAAA4B;AAAA7C,IAAA+gB,EAAAA,MAAAA,cAAA/gB,UAAA8a,SAGxE7Z,KAAAA,MAAM8f,WAAUjB,aAAchF,KAAK,GAAGjY,KAAA,CAACke,YAAYjG,KAAK,GAAC9a,QAAA+gB,YAAA/gB,QAAA8a,OAAA9a,QAAAiB,IAAAjB,QAAA6C,OAAA5B,KAAAjB,EAAA,EAAA,GAAA6C,KAAA7C,EAAA,EAAA,IAAnEgR,UAAU/P,IAAsC4B,EAAmB;AAAC,MAAAC,IAAAoB;AAAAlE,YAAA+gB,cAG1Dje,KAAAA,MAAMie,WAAUf,UAAWgB,QAAQ,GAAG9c,MAAC6c,UAAU,GAAC/gB,QAAA+gB,YAAA/gB,QAAA8C,IAAA9C,QAAAkE,OAAApB,KAAA9C,EAAA,EAAA,GAAAkE,KAAAlE,EAAA,EAAA,IAA5DgR,UAAUlO,IAAsCoB,EAAY;AAAC,MAAAiC,IAAAC;AAAApG,IAAAwT,EAAAA,MAAAA,aAAAxT,UAAA6gB,cAAA7gB,EAAA,EAAA,MAAA8gB,YAGnD3a,KAAAA,MAAA;AACJqN,kBAAS7J,WACT6J,aAAaqN,cAAYA,WACzB,GAAA,CAACrN,aAAasN,YAAUA;EAAS,GACpC1a,KAACoN,CAAAA,WAAWqN,YAAYC,QAAQ,GAAC9gB,QAAAwT,WAAAxT,QAAA6gB,YAAA7gB,QAAA8gB,UAAA9gB,QAAAmG,IAAAnG,QAAAoG,OAAAD,KAAAnG,EAAA,EAAA,GAAAoG,KAAApG,EAAA,EAAA,IAJpCgR,UAAU7K,IAIPC,EAAiC;AAAC,MAAAC,IAAAE;AAAAvG,YAAAwT,aAAAxT,EAAA+gB,EAAAA,MAAAA,WAAAxN,YAAAvT,EAAA+gB,EAAAA,MAAAA,WAAArN,UAAA1T,EAAA+gB,EAAAA,MAAAA,WAAAnN,SAAA5T,EAAA+gB,EAAAA,MAAAA,WAAAtP,UAAAzR,EAAA4E,EAAAA,MAAAA,OAAA+O,mBAAA3T,EAAA4E,EAAAA,MAAAA,OAAAD,SAAA3E,EAAA4E,EAAAA,MAAAA,OAAAka,YAI5BvY,MAAA;AAAA,IAAAgN,UACKwN,WAAUxN;AAAAA,IAAAC;AAAAA,IAAAE,QAEZqN,WAAUrN;AAAAA,IAAAC,iBACD/O,OAAK+O;AAAAA,IAAAC,OACfmN,WAAUnN;AAAAA,IAAAjP,OACVC,OAAKD;AAAAA,IAAA8M,QACJsP,WAAUtP;AAAAA,IAAAqN,UACRla,OAAKka;AAAAA,EAAAA,GAChB9e,QAAAwT,WAAAxT,EAAA,EAAA,IAAA+gB,WAAAxN,UAAAvT,EAAA,EAAA,IAAA+gB,WAAArN,QAAA1T,EAAA,EAAA,IAAA+gB,WAAAnN,OAAA5T,EAAA,EAAA,IAAA+gB,WAAAtP,QAAAzR,EAAA,EAAA,IAAA4E,OAAA+O,iBAAA3T,EAAA,EAAA,IAAA4E,OAAAD,OAAA3E,EAAA,EAAA,IAAA4E,OAAAka,UAAA9e,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAAAqG,KATME;AADT,QAAA0a,aAA2C5a,IAmBrBI,MAAA+M,YAAY,KAAE7J,QAEfd,MAAAjE,OAAKka,WAAY,KAAEnV,QAGpBR,MAAA2R,QAAQ,KAAEnR;AAAYP,MAAAA;AAAApJ,IAAA2G,EAAAA,MAAAA,YAAA3G,EAAA,EAAA,MAAA8S,aAAA9S,EAAAyG,EAAAA,MAAAA,OAAAzG,EAAA,EAAA,MAAA6I,OAAA7I,UAAAmJ,OARtCC,0BAACgI,QACS,EAAA,WAAA,cACJ0B,GAAAA,WACY,kBAAArM,KAED,iBAAAoC,KAGD,gBAAAM,KACTmK,KAAAA,gBAEJ3M,SACH,CAAA,GAAO3G,QAAA2G,UAAA3G,QAAA8S,WAAA9S,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAA,SAAArJ,EAAAihB,EAAAA,MAAAA,cAAAjhB,UAAAoJ,OAbTC,MAAA,oBAAA,kBAAA,UAAA,EAAmC4X,OAAAA,YACjC7X,UAAAA,IAaF,CAAA,GAA6BpJ,QAAAihB,YAAAjhB,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA,GAd7BqJ;AAc6B;AA/D1B,SAAAU,UAAA;AAAA,SAM+BwU,2BAA2B;AAAC;ACvB3D,SAAS2C,iBAAiBlK,MAA6D;AAC5F,UAAQA,KAAK/P,SAAS,UAAU+P,KAAK/P,SAAS,YAAY+P,KAAKmK;AACjE;AAEaC,MAAAA,sBAAsBC,OAAOH,gBAAgB;AAEnD,SAASI,iBAAiB/b,QAKb;AACZ,QAAA;AAAA,IAACgc,eAAe,CAAE;AAAA,IAAEC;AAAAA,IAAWC;AAAAA,EAAAA,IAAkBlc,QAEjDkT,QAAyB,CAAE;AAEjC,MAAIiJ,YAAY;AAEhB,WAAStD,IAAI,GAAGA,IAAImD,aAAa9e,QAAQ2b,KAAK,GAAG;AACzCL,UAAAA,IAAIwD,aAAanD,CAAC;AAElB1T,UAAAA,KAAKiX,6BAA6B5D,GAAG,GAAGK,CAAC,IAAIL,EAAE9W,IAAI,EAAE,CAAC;AAAA,EAAA;AAG9Dya,eAAajJ,MAAMhW;AAEnB,QAAMmf,SAA2B,CAAE;AAEnC,aAAWC,aAAaJ;AACRG,WAAO9N,KAAMgO,CAAMA,MAAAA,EAAEzK,QAAQwK,UAAUvc,EAAE,KAGrDsc,OAAOlX,KAAK;AAAA,MACVzD,MAAM;AAAA,MACNoQ,KAAKwK,UAAUvc;AAAAA,MAEfqB,UAAU,CAAE;AAAA,MACZwN,UAAU;AAAA,MACVgN,gBAAgB;AAAA,MAChB/f,OAAOygB,UAAUzgB;AAAAA,MACjB2gB,MAAMF,UAAUE;AAAAA,IAAAA,CACjB;AAIL,QAAMC,iBAAkC,CAAE;AAE1C,WAAS5D,IAAI,GAAGA,IAAIoD,UAAU/e,QAAQ2b,KAAK,GAAG;AACtC9V,UAAAA,OAAOkZ,UAAUpD,CAAC;AAEpB6D,QAAAA,QAAQ3Z,KAAK2Z,SAASL,OAAO9N,KAAMgO,CAAMA,MAAAA,EAAEzK,QAAQ/O,KAAK2Z,KAAK;AAE7D3Z,SAAK2Z,SAAS,CAACA,UACjBA,QAAQ;AAAA,MACNhb,MAAM;AAAA,MACNoQ,KAAK/O,KAAK2Z;AAAAA,MAEV9N,UAAU;AAAA,MACVnR,MAAMsF,KAAKtF;AAAAA,MACX5B,OAAOkH,KAAK2Z;AAAAA,MACZtb,UAAU,CAAE;AAAA,MACZwa,gBAAgB;AAAA,IAAA,GAElBS,OAAOlX,KAAKuX,KAAK,IAGfA,QACFA,MAAMtb,SAAS+D,KAAK;AAAA,MAClBzD,MAAM;AAAA,MACNoQ,KAAK,GAAGqK,YAAYtD,CAAC;AAAA,MAErBvG,QAAQvP,KAAK4Z;AAAAA,MACblf,MAAMsF,KAAKtF;AAAAA,MACXyU,QAAQnP,KAAKmP;AAAAA,MACbQ,UAAUA,MAAM1S,OAAO4c,cAAc7Z,IAAI;AAAA,MACzC6Y,gBAAgB7Y,KAAK8Z,gBAAgB;AAAA,MACrCjP,UAAU7K,KAAK6K;AAAAA,MACf/R,OAAOkH,KAAKlH;AAAAA,MACZ2gB,MAAMzZ,KAAKyZ;AAAAA,MACXvR,MAAMlI,KAAKkI;AAAAA,IAAAA,CACZ,IAEDwR,eAAetX,KAAK;AAAA,MAClBzD,MAAM;AAAA,MACNoQ,KAAK,GAAGqK,YAAYtD,CAAC;AAAA,MAErBvG,QAAQvP,KAAK4Z;AAAAA,MACblf,MAAMsF,KAAKtF;AAAAA,MACXyU,QAAQnP,KAAKmP;AAAAA,MACbQ,UAAUA,MAAM1S,OAAO4c,cAAc7Z,IAAI;AAAA,MACzC6Y,gBAAgB7Y,KAAK8Z,gBAAgB;AAAA,MACrCjP,UAAU7K,KAAK6K;AAAAA,MACf/R,OAAOkH,KAAKlH;AAAAA,MACZ2gB,MAAMzZ,KAAKyZ;AAAAA,MACXvR,MAAMlI,KAAKkI;AAAAA,IAAAA,CACZ;AAAA,EAAA;AAIL,SAAO,CAAC,GAAGwR,gBAAgB,GAAGJ,QAAQ,GAAGnJ,KAAK;AAChD;AAEA,SAASkJ,6BAA6B5D,GAAgC1G,KAA4B;AAC5F0G,SAAAA,EAAE9W,SAAS,YACN;AAAA,IACLA,MAAM;AAAA,IACNoQ;AAAAA,EAAAA,IAIA0G,EAAE9W,SAAS,UACN;AAAA,IACLA,MAAM;AAAA,IACNoQ;AAAAA,IAEA1Q,UAAUoX,EAAEpX,SAAS6C,IAAI,CAAC2N,OAAOkL,aAC/BV,6BAA6BxK,OAAO,GAAGE,GAAG,IAAIgL,QAAQ,IAAIlL,MAAMlQ,IAAI,EAAE,CACxE;AAAA,IACAsK,UAAUwM,EAAExM;AAAAA,IACZ4C,UAAU4J,EAAE5J,YAAY;AAAA,IACxBnR,MAAM+a,EAAE/a;AAAAA,IACR5B,OAAO2c,EAAE3c;AAAAA,IACT2gB,MAAMhE,EAAEgE;AAAAA,IACRZ,gBAAgBpD,EAAEoD,kBAAkB;AAAA,EAAA,IAIjC;AAAA,IACLla,MAAM;AAAA,IACNoQ;AAAAA,IACAI,QAAQsG,EAAEtG;AAAAA,IACVlG,UAAUwM,EAAExM;AAAAA,IACZvO,MAAM+a,EAAE/a;AAAAA,IACR+U,WAAWgG,EAAEhG;AAAAA,IACbE,UAAU8F,EAAE9F;AAAAA,IACZkJ,gBAAgBpD,EAAEoD,kBAAkB;AAAA,IACpChO,UAAU4K,EAAE5K;AAAAA,IACZ/R,OAAO2c,EAAE3c;AAAAA,IACT2gB,MAAMhE,EAAEgE;AAAAA,IACRvR,MAAMuN,EAAEvN;AAAAA,EACV;AACF;AC5IO,MAAM8R,eAAele,WAAW,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA;AAAA,MAAAwX,QAAA3E;AAAA9S,WAAAD,SAOrC;AAAA,IAAA0X;AAAAA,IAAA,GAAA3E;AAAAA,EAAAA,IAA+B/S,OAAKC,OAAAD,OAAAC,OAAAyX,QAAAzX,OAAA8S,cAAA2E,SAAAzX,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA;AAAA,MAAAM,IAAAM;AAAAZ,IAAAyX,CAAAA,MAAAA,OAAAlS,UAAAvF,EAAA,CAAA,MAAAyX,OAAAxQ,QAKhCrG,KAAAwD,WAAA,SAAAuD,WAAA4a,SAAA;AAKI,WAAA,oBAAC,YAAU,EAAA,GAAK5a,WAAmB,QAAA8P,OAAMxQ,MAAe,QAAAwQ,OAAMlS,QAAcgd,KAAM,QAAK,CAAA;AAAA,EAAA,CAE1F,GAACviB,EAAA,CAAA,IAAAyX,OAAAlS,QAAAvF,EAAA,CAAA,IAAAyX,OAAAxQ,MAAAjH,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAPFM;AAHJ,QAAA4hB,OAAaliB;AAYZU,MAAAA;AAAA,SAAAhB,EAAAwiB,CAAAA,MAAAA,QAAAxiB,SAAAD,MAAAwR,YAAAvR,EAAAqE,CAAAA,MAAAA,OAAArE,SAAA8S,aAEM9R,KAAAjB,MAAKwR,WACV,oBAAC,QAAWuB,EAAAA,GAAAA,WAAc,IAAA,KAAS,MAAA,QAAqB,iBAAA,QAAS,IAEjE,oBAAC,QAAM,EAAA,GAAKA,WAAe0P,IAAG,MAAW,WAAA,KAAS,IAAA,CACnD,GAAAxiB,OAAAwiB,MAAAxiB,EAAA,CAAA,IAAAD,MAAAwR,UAAAvR,OAAAqE,KAAArE,OAAA8S,WAAA9S,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAJMgB;AAIN,CACF;ACnBM,SAAAyhB,sCAAAniB,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA+C;AAAA,IAAAyiB;AAAAA,IAAAxZ;AAAAA,IAAAmR;AAAAA,IAAA1T;AAAAA,EAAAA,IAAArG,IAMpDqiB,cAAoBC,kBACpB;AAAA,IAAAliB;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAAC,MAAA,CAE/CkjB,QAAM;AAAA9hB,QAAAA;AAAA,WAAAZ,SAAA2G,YACF/F,MAAA,oBAAA,UAAA,YAAW,GAAIZ,OAAA2G,UAAA3G,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAfY;AAAAA,EAAAA;AAAeA,MAAAA;AAAAZ,IAAA,CAAA,MAAAkJ,WAAAlJ,EAAA2iB,CAAAA,MAAAA,eAAA3iB,EAAAqa,CAAAA,MAAAA,WAAAra,SAAAU,KAMlBE,KAAAyZ,UACE3Z,EAAE,uDAAuD,IAEzD,oBAAC,gCAAwCwI,EAAAA,SAAsByZ,aAChE,GAAA3iB,OAAAkJ,SAAAlJ,OAAA2iB,aAAA3iB,OAAAqa,SAAAra,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAA2G,YAMH3F,KAAqB,oBAAA,SAAR,UAAE,GAAMhB,OAAA2G,UAAA3G,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAY,CAAAA,MAAAA,MAAAZ,UAAAgB,MAZvBC,KAAC,oBAAA,SAAA,EAEG,SAAAL,IAMF,QAAA,IAIAI,UAAAA,GAAAA,CACF,GAAUhB,OAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAbViB;AAaU;ACrBd,MAAM4hB,gBAA8B;AAAA,EAClClM,eAAe;AAAA,EACfC,WAAW;AAAA,EACXC,QAAQ;AACV,GAEMiM,YAAYA,CAChB1iB,QACA2iB,WACAza,SACiC;AAC3B0a,QAAAA,WAAWD,UAAUjP,KAAMpT,CAAAA,MAAMA,EAAE4E,OAAOgD,KAAK2a,UAAU,GAAGxiB;AAC9D,MAAA,CAACuiB,SAAiB,QAAA;AAEtB,QAAME,aAAa;AAAA,IACjBnc,UAAUuB,KAAK2a;AAAAA,IACfhc,MAAM+b;AAAAA,IACN1d,IAAIgD,KAAK6a;AAAAA,EACX;AAEO,SAAA;AAAA,IACLlc,MAAM;AAAA,IACN1B,QAAQ+C,KAAK8a,aAAa,CAACF,YAAY5a,KAAK8a,UAAU,IAAIF;AAAAA,EAC5D;AACF;AAMO,SAAAG,uBAAA/iB,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAgC;AAAA,IAAAqjB;AAAAA,EAAAA,IAAAhjB,IACrCF,SAAeC,UACf0iB,GAAAA,YAAkBQ,gBAElB;AAAA,IAAA7iB;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAsjB,CAAAA,MAAAA,iBAAAtjB,SAAA+iB,aACjBniB,KAAA,CAAA,GAAI0iB,eAAa,GAAKP,SAAS,GAAC/iB,OAAAsjB,eAAAtjB,OAAA+iB,WAAA/iB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAnEiX,QAAAA,cAAoBC,eAAetW,EAAgC;AAACI,MAAAA;AAAAhB,WAAAsjB,iBAEetiB,KAAA;AAAA,IAAAsiB;AAAAA,EAAA,GAElFtjB,OAAAsjB,eAAAtjB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA,CAAAwjB,qBAAAC,4BAAA,IAA4DC,uBAAuB1iB,EAElF;AAACC,MAAAA;AAGAA,OACE,CAACwiB,gCACDD,qBAAmBG,MAAA5Z,OAAA;AAHvB,QAAA6Z,iBAAuB3iB;AAKgC4B,MAAAA;AAAA,OAAA;AAAA,QAAA,CAGhD2gB,qBAAmB;AAAA1gB,UAAAA;AAAA9C,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAASE,MAAA,CAAE9C,GAAAA,OAAA8C,OAAAA,MAAA9C,EAAA,CAAA,GAAT6C,KAAOC;AAAEgS,YAAAA;AAAAA,IAAAA;AAAAhS,QAAAA;AAAA9C,aAAAwjB,uBAC5B1gB,MAAA0gB,oBAAmBK,OAAA9U,WAM1B,CAAA,GAAC/O,OAAAwjB,qBAAAxjB,OAAA8C,OAAAA,MAAA9C,EAAA,CAAA,GAND6C,KAAOC;AAAAA,EAAAA;AAFT,QAAAghB,kBAAwBjhB;AASC,MAErB+gB,gBAAc;AAAA9gB,QAAAA;AAAA9C,aAAAU,KAQEoC,MAAApC,EAAE,gDAAgD,GAACV,OAAAU,GAAAV,OAAA8C,OAAAA,MAAA9C,EAAA,CAAA;AAAAkE,QAAAA;AAAAlE,cAAA8C,OADjEoB,MAAC,oBAAA,QACa,EAAA,cAAApB,KACNihB,MAAAA,SACM,eAAA,wBACZ,UAAA,IACK,MAAA,SAES,cAAA,KACd,CAAA,GAAA/jB,QAAA8C,KAAA9C,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA;AAAAmG,QAAAA;AAAA,WAAAnG,EAAAyjB,EAAAA,MAAAA,gCAAAzjB,UAAAkE,OAbJiC,0BAAC,uCACS,EAAA,SAAA,wBACR,QAAK,IACIsd,uCAETvf,UAAAA,IAAAA,CASF,GAAwClE,QAAAyjB,8BAAAzjB,QAAAkE,KAAAlE,QAAAmG,OAAAA,MAAAnG,EAAA,EAAA,GAdxCmG;AAAAA,EAAAA;AAkBAmd,MAAAA,cAAa7gB,WAAa,GAAA;AAC5BuhB,UAAAA,YAAkBV,cAAa,CAAA,GAE/B/R,WAAA,CADoBuS,gBAAgBE,UAAS1e,EAAA,GAChB2e;AAASnhB,QAAAA;AAAA9C,MAAAgkB,EAAAA,MAAAA,aAAAhkB,UAAAI,UAAAJ,EAAA,EAAA,MAAA+iB,aACvBjgB,MAAAggB,UAAU1iB,QAAQ2iB,WAAWiB,SAAS,GAAChkB,QAAAgkB,WAAAhkB,QAAAI,QAAAJ,QAAA+iB,WAAA/iB,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA;AAAtD,UAAAyX,SAAe3U;AAAuC,QAAA,CACjD2U;AAAM,aAAA;AAAAvT,QAAAA;AAAAlE,MAAAgkB,EAAAA,MAAAA,aAAAhkB,UAAAiX,eASO/S,MAAA+S,YAAY+M,SAAS,GAAChkB,QAAAgkB,WAAAhkB,QAAAiX,aAAAjX,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA;AAC5BmG,UAAAA,MAAA6d,UAAShhB,QAAA+gB;AAAgB3d,QAAAA;AAAApG,MAAAuR,EAAAA,MAAAA,YAAAvR,UAAAU,KAKjB0F,MAAAmL,WAAQ,OAAA;AAAA,MAAAlH,SAAoB3J,EAAE,uCAAuC;AAAA,IAAEV,GAAAA,QAAAuR,UAAAvR,QAAAU,GAAAV,QAAAoG,OAAAA,MAAApG,EAAA,EAAA;AAAAqG,QAAAA;AAAArG,cAAAuR,YAAAvR,EAAAyX,EAAAA,MAAAA,UAAAzX,EAAA,EAAA,MAAAkE,IAAA9C,SAAApB,EAAA,EAAA,MAAAmG,OAAAnG,UAAAoG,OAPvFC,0BAAC,cACa,EAAA,cAAAnC,IAAsB9C,OAC5B,MAAA+E,KACEsR,QACH,MAAA,SACKlG,UACE,eAAA,wBACE,cAAAnL,IACd,CAAA,GAAApG,QAAAuR,UAAAvR,QAAAyX,QAAAzX,EAAA,EAAA,IAAAkE,IAAA9C,OAAApB,QAAAmG,KAAAnG,QAAAoG,KAAApG,QAAAqG,OAAAA,MAAArG,EAAA,EAAA;AAAAuG,QAAAA;AAAA,WAAAvG,EAAAuR,EAAAA,MAAAA,YAAAvR,UAAAyjB,gCAAAzjB,EAAA,EAAA,MAAAqG,OAbJE,MAAC,oBAAA,uCAAA,EACSgL,QAAO,UACNkS,SAAAA,8BACD,SAAA,wBAERpd,UAAAA,IASF,CAAA,GAAwCrG,QAAAuR,UAAAvR,QAAAyjB,8BAAAzjB,QAAAqG,KAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAdxCuG;AAAAA,EAAAA;AAcwCzD,MAAAA;AAAA9C,YAAAU,KAWZoC,KAAApC,EAAE,uCAAuC,GAACV,QAAAU,GAAAV,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,YAAA8C,MAJpEoB,yBAAC,QACO6f,EAAAA,eACD,MAAA,SACO,eAAA,8BACE,cAAA;AAAA,IAAA1Z,SAAUvH;AAAAA,EACxB,EAAA,CAAA,GAAA9C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,MAAAA,EAAAiX,EAAAA,MAAAA,eAAAjX,EAAAyjB,EAAAA,MAAAA,gCAAAzjB,EAAA8jB,EAAAA,MAAAA,mBAAA9jB,UAAAI,UAAAJ,EAAA,EAAA,MAAAU,KAAAV,EAAA,EAAA,MAAAsjB,iBAAAtjB,EAAA,EAAA,MAAA+iB,WAAA;AAAA3c,QAAAA;AAAApG,cAAAiX,eAAAjX,EAAAyjB,EAAAA,MAAAA,gCAAAzjB,EAAA8jB,EAAAA,MAAAA,mBAAA9jB,EAAA,EAAA,MAAAI,UAAAJ,UAAAU,KAAAV,EAAA,EAAA,MAAA+iB,aAKmB3c,MAAAA,CAAAkC,MAAA4b,cAAA;AAEjBC,YAAAA,aAAA,CADoBL,gBAAgBxb,KAAIhD,EAAA,GACX2e,SAC7BG,WAAetB,UAAU1iB,QAAQ2iB,WAAWza,IAAI,GAChDvB,WAAiBgc,UAASjP,KAAAsK,OAAaA,EAAC9Y,OAAQgD,KAAI2a,UAAW;AAC3D,UAAA,CAAClc,YAAQ,CAAK0Q;AAAM,eAAA;AAExB,YAAA+K,OAAape,WAAAuD,CAAAA,WAAA4a,YACXhR,aACgE,oBAAA,UAAA,EAAjD,MAAA,UAAS,UAAA,IAAQ,GAAK5J,WAAgB4a,KAAM,aAEzD,oBAAC,YAAU,EAAA,GACL5a,WACI,QAAA8P,SAAMxQ,MACN,QAAAwQ,SAAMlS,QACTgd,KAAAA,QAAO,CAAA,CAGlB;AAEAC,WAAIzM,cAAe;AAEnB,YAAA;AAAA,QAAA3U;AAAAA,UAAgB6V,YAAW;AAAA,QAAA,GACtB3O;AAAAA,QAAIlH,OAEAkH,KAAIlH,SAAU6V,YAAYlQ,QAAQ,EAAC3F;AAAAA,MAAAA,CAC3C;AAAC,aAGC,oBAAA,uCAAA,EACS,SAAA,wBAEAmQ,QAAO,YACNkS,SAA2B,8BAEpC,UAAA,oBAAC,UACKjB,EAAAA,IAAG,MACE,WAAAjR,aAAW,WAAW,KACzBnQ,MAAI,OAER,cAAAmQ,aAAW7Q,EAAE,gDAAgD,IAAIU,OAEzDmQ,UAAAA,YACG,eAAA,wBAAwB2S,SAAS,GAElD,CAAA,EAAA,GAdO5b,KAAIhD,EAcX;AAAA,IAEHtF,GAAAA,QAAAiX,aAAAjX,QAAAyjB,8BAAAzjB,QAAA8jB,iBAAA9jB,QAAAI,QAAAJ,QAAAU,GAAAV,QAAA+iB,WAAA/iB,QAAAoG,OAAAA,MAAApG,EAAA,EAAA,GA/CAmG,KAAAmd,cAAa9Z,IAAKpD,GA+ClB,GAACpG,QAAAiX,aAAAjX,QAAAyjB,8BAAAzjB,QAAA8jB,iBAAA9jB,QAAAI,QAAAJ,QAAAU,GAAAV,QAAAsjB,eAAAtjB,QAAA+iB,WAAA/iB,QAAAmG;AAAAA,EAAA;AAAAA,SAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,YAAAmG,MAhDJC,KAAA,oBAAC,QACED,UAgDH,GAAA,CAAA,GAAOnG,QAAAmG,IAAAnG,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAA,SAAArG,EAAAkE,EAAAA,MAAAA,MAAAlE,UAAAoG,MA5DXC,yBAAC,YAEG,EAAA,QAAAnC,IAOC,IAAA,eAED,MAAAkC,IAmDOyc,SAAYA,cAAAA,CACrB,GAAA7iB,QAAAkE,IAAAlE,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA,GA/DFqG;AA+DE;AA3IC,SAAA0I,SAAAsV,KAAAC,cAAA;AAsBKC,SAAAA,IAAAA,aAAUjf,EAAA,IAAOif,cACdF;AAAG;AAvBX,SAAAta,QAAAwa,YAAA;AAAA,SAc2CA,CAAAA,WAAUN;AAAA;ACpD5D,SAASO,cAAiB3jB,OAAmC;AAC3D,SAAOA,SAAU;AACnB;AAKA,MAAM4jB,aAAc5jB,CAAmB,UAAA;AACrC,QAAM6jB,aAAcC,CAAAA,MACd,OAAOA,KAAM,YAAY,CAACA,IAAUA,IACpClW,MAAMmW,QAAQD,CAAC,IAAUA,EAAEnb,IAAIkb,UAAU,IACtCG,OAAOC,QAAQH,CAAC,EAAE9V,KAAK,CAAC,CAACkW,IAAI,GAAG,CAACC,IAAI,MAAMD,KAAKE,cAAcD,MAAM,IAAI,CAAC;AAKlF,SAAOE,KAAKC,UAAUT,YAFHC,CAAAA,MAAeO,KAAKE,MAAMF,KAAKC,UAAUR,CAAC,CAAC,GAEnB9jB,KAAK,CAAC,CAAC;AACpD,GASawkB,oBAAoBC,KAAK,SAA2BvlB,OAA+B;AACxF,QAAA;AAAA,IACJwlB,2BAA2BC,yCAAyCre;AAAAA,IACpEqa,YAAYra;AAAAA,IACZsa,iBAAiBta;AAAAA,IACjBse,iBAAiBC;AAAAA,EAAAA,IACf3lB,OAEEgjB,YAAYQ,gBAEZoC,eAAeC,YAClBtd,CAAuB,SAAA;AACtB,QAAI,OAAOA,KAAKN,UAAW,YAAY,EAAEM,KAAKN,UAAUyd;AACtDI,aAAAA,QAAQrK,KAAK,0BAA0BlT,KAAKN,MAAM,GAC3C;AAGH8d,UAAAA;AAAAA;AAAAA,MAEJ,OAAOxd,KAAKN,UAAW,aACnBM,KAAKN,SACL,OAAOM,KAAKN,UAAW,WACrByd,eAAend,KAAKN,MAAM,IAC1B;AAAA;AAER,WAAI8d,WACFA,QAAQxd,KAAK/C,MAAgC,GACtC,MAGF;AAAA,EAAA,GAET,CAACkgB,cAAc,CACjB,GAEMM,YAAYC,QAChB,MACE1E,iBAAiB;AAAA,IACfa,eAAewD;AAAAA,IACflE;AAAAA,IACAD,WAAWA,UAGR1X,OAAQxB,YAASA,OAAKmP,QAAQxQ,SAAS,QAAQ;AAAA,EACnD,CAAA,GACH,CAAC0e,cAAclE,gBAAgBD,SAAS,CAC1C,GAEMyE,cAAcD,QAAQ,MAAMD,UAAUjc,OAAOoX,gBAAgB,GAAG,CAAC6E,SAAS,CAAC,GAC3EG,mBAAmBF,QAAQ,MAAMD,UAAUjc,OAAOsX,mBAAmB,GAAG,CAAC2E,SAAS,CAAC,GAEnFI,wCAAwCH,QAAQ,MAC7CxE,UACJhY,IAAI,CAAClB,QAAM8d,kBAAkB;AAC5B,QAAI9d,OAAKmP,QAAQxQ,SAAS,SAAiB,QAAA;AAErC,UAAA;AAAA,MAAC1B;AAAAA,QAAU+C,OAAKmP;AAClB,QAAA,CAAClS,OAAe,QAAA;AAEd8gB,UAAAA,eAAe5X,MAAMmW,QAAQrf,MAAM,IAAIA,OAAO,CAAC,IAAIA,QACnD+gB,iBAAiB7X,MAAMmW,QAAQrf,MAAM,IAAIA,OAAO,CAAC,IAAIoE,QAKrDsZ,aAAaoD,aAAatf,YAAYsf,aAAapf;AACrD,QAAA,CAACgc,WAAmB,QAAA;AAGxB,UAAMlc,WAAWgc,UAAUjP,KAAMpT,CAAMA,MAAAA,EAAE4E,OAAO2d,UAAU;AAEtD,QAAA,CAAClc,SAAiB,QAAA;AAEtB,UAAMoc,oBAAoBkD,aAAa/gB;AAEhC,WAAA;AAAA,MACLgD,MAAAA;AAAAA,MACAvB;AAAAA,MACAuf;AAAAA,MACAF;AAAAA,MACAjD;AAAAA,IACF;AAAA,EACD,CAAA,EACArZ,OAAO0a,aAAa,EACpBhb,IAAI,CAAC;AAAA,IAAC2Z,mBAAAA;AAAAA,IAAmB7a,MAAAA;AAAAA,IAAMvB,UAAAA;AAAAA,IAAUqf,eAAAA;AAAAA,IAAeE,gBAAAA;AAAAA,EAAAA,OACI;AAAA,IACzDhhB,IAAI,WAAW8gB,eAAa;AAAA,IAC5BjD,mBAAAA;AAAAA,IACAF,YAAYlc,WAASzB;AAAAA,IACrB2B,MAAM;AAAA,IACN7F,OAAOkH,OAAKlH,SAAS2F,WAAS3F;AAAAA,IAC9B2gB,MAAMzZ,OAAKyZ,QAAQhb,WAASgb;AAAAA,IAC5B/e,MAAMsF,OAAKtF;AAAAA,IACXujB,aAAaxf,WAASwf;AAAAA,IACtBnD,YAAYkD;AAAAA,IACZ7lB,YAAYsG,WAAStG;AAAAA,EAIxB,EAAA,GACF,CAAC+gB,WAAWuB,SAAS,CAAC,GAEnByD,gCAAgCR,QAAQ,MAErCS,OACL,CAAC,GAAGN,uCAAuC,GAAGX,sCAAsC,GACnFld,CAAAA,WAASmc,WAAW,CAACnc,OAAK6a,mBAAmB7a,OAAK2a,YAAY3a,OAAK8a,UAAU,CAAC,CACjF,GACC,CAAC+C,uCAAuCX,sCAAsC,CAAC;AAGhF,SAAA,qBAAC,MAAK,EAAA,KAAK,GACRgB,UAAAA;AAAAA,IAAAA,8BAA8B/jB,SAAS,KACrC,oBAAA,wBAAA,EAAuB,eAAe+jB,+BACxC;AAAA,IAEAP,YAAYzc,IAAKwN,CAChB,SAAA,oBAAC,0BAAsC,KAAVA,GAAAA,KAAKK,GAAgB,CACnD;AAAA,IAEA6O,iBAAiBzjB,SAAS,KAAM,oBAAA,uBAAA,EAAsB,OAAOyjB,iBAAoB,CAAA;AAAA,EAAA,GACpF;AAEJ,CAAC;ACzJM,SAAAQ,kBAAA3mB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnD;AAAA,IAAAyD;AAAAA,IAAApC;AAAAA,EAAAA,IAAwBd;AAAKO,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KASPtC,KAAA;AAAA,IAAAqmB,MAAO;AAAA,EAAA,GAAO3mB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAA,CAAA,MAAAa,MAAAN,SAClBK,KAAA;AAAA,IAAAiG,cAAehG,MAAKN;AAAAA,EAAOP,GAAAA,EAAA,CAAA,IAAAa,MAAAN,OAAAP,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAU,CAAAA,MAAAA,KAAAV,SAAAY,MALvCI,KAAA,oBAAA,QACE,UAAC,oBAAA,WAAA,EACIN,GACK,SAAA,uCACI,YAAAJ,IACJ,QAAAM,GAAAA,CAEZ,EAAA,CAAA,GAAKZ,OAAAU,GAAAV,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAMS3B,KAAA;AAAA,IAAA0lB,MAAO;AAAA,EAAA,GAAO3mB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,IAAA,CAAA,MAAAa,MAAA2C,OAClBX,KAAA;AAAA,IAAA+D,YAAa/F,MAAK2C;AAAAA,EAAKxD,GAAAA,EAAA,CAAA,IAAAa,MAAA2C,KAAAxD,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,IAAAU,CAAAA,MAAAA,KAAAV,UAAA6C,MAJjCC,KAAC,oBAAA,WAAA,EACIpC,GACK,SAAA,0CACI,YAAAO,IACJ,QAAA4B,GAAAA,CACR,GAAA7C,OAAAU,GAAAV,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAA,SAAAlE,EAAAiD,EAAAA,MAAAA,UAAAjD,UAAAgB,MAAAhB,EAAA,EAAA,MAAA8C,MAjBNoB,KAAC,oBAAA,sBAAA,EAEG,OAAAlD,IAUA,UAAA8B,IAQK,OAAAiH,SACC9G,QACR,GAAAjD,QAAAiD,QAAAjD,QAAAgB,IAAAhB,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GAtBFkE;AAsBE;AA3BC,SAAA6F,UAAA;AAAA,6BAyBa,oBAAqB,EAAA;AAAA;ACezB6c,SAAAA,oBACd5jB,MACAvC,YACAomB,aAC4B;AAC5B,SAAI7jB,SAAS,KACJ,KAGFA,QAASvC,cAAcA,WAAWuC,QAAS6jB,eAAe;AACnE;AAEO,SAAAC,SAAA/mB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA+C;AAAAA,IAAAsC;AAAAA,IAAArC,QAAA3C;AAAAA,IAAAymB;AAAAA,IAAAtmB;AAAAA,IAAA0S;AAAAA,IAAA/R;AAAAA,IAAAP;AAAAA,IAAAmmB;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAYInnB,IAAAA,OATFkD,SAAA3C,OAAkBqJ,SAAT,YAATrJ,IAUFF,SAAeC,UAAU,GACzBkD,uBAA6BkE,wBAAAA,GAC7B;AAAA,IAAAxC,WAAAA;AAAAA,EAAAA,IAAoBiC,iBACpBK,mBAAyBC,oBAAoBlC,EAAE,GAC/C6hB,gBAAsBvY,CAAAA,EAAQnO,cAAcA,WAAUiH,QAAStH,OAAMI,IAAKC,WAAUiH,IAAK,IACzF,CAAA0f,SAAAC,UAAA,IAA8B/W,WAAuB;AAAC1P,MAAAA;AAAA,OAAA;AAGhDC,QAAAA,SAASymB,mBAAiBzmB,KAAK,GAAC;AAC9B,UAAA,CAACJ,cAAU,CAAK0mB,eAAa;AAAAnmB,YAAAA;AAAAhB,iBAAAa,SACxBG,MAAC,oBAAA,mBAAA,EAAyBH,MAAS,CAAA,GAAAb,OAAAa,OAAAb,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAA1CY,KAAOI;AAAmC8T,cAAAA;AAAAA,MAAAA;AAAA9T,UAAAA;AAAAhB,QAAAgD,CAAAA,MAAAA,QAAAhD,SAAAS,cAMlCO,MAAA4lB,oBAAoB5jB,MAAMvC,YAAU8mB,YAAc,GAACvnB,OAAAgD,MAAAhD,OAAAS,YAAAT,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,UAAAA;AAAAjB,eAAAuH,oBAAAvH,EAAAuD,CAAAA,MAAAA,wBAAAvD,EAAAiD,CAAAA,MAAAA,UAAAjD,EAAA,CAAA,MAAAS,cAAAT,SAAAgB,OAAAhB,EAAA,EAAA,MAAAa,SAF3DI,MAAC,oBAAA,iBAAA,EACuBsC,sBAChB,MAAAvC,KACEiC,QACIxC,YACLI,OACG0G,UAAAA,iBACV,CAAA,GAAAvH,OAAAuH,kBAAAvH,OAAAuD,sBAAAvD,OAAAiD,QAAAjD,OAAAS,YAAAT,OAAAgB,KAAAhB,QAAAa,OAAAb,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA,GARJY,KACEK;AAQD6T,YAAAA;AAAAA,IAAAA;AAAA9T,QAAAA;AAAAhB,MAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAOe5B,MAAA;AAAA,MAAAwmB,SAAA;AAAA,IAAA,GAAcxnB,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA;AAAAiB,QAAAA;AAAAjB,MAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAA1B3B,MAAC,oBAAA,KAAA,EAAW,OAAAD,KACV,UAAC,oBAAA,MAAA,EAAK,OAAI,IAAQ,MAAA,GAChB,UAAC,oBAAA,kBAAA,CAAA,CAAgB,EACnB,CAAA,EACF,CAAA,GAAMhB,QAAAiB,OAAAA,MAAAjB,EAAA,EAAA;AAAA6C,QAAAA;AAAA7C,MAAAgD,EAAAA,MAAAA,QAAAhD,UAAAS,cAEFoC,MAAA+jB,oBAAoB5jB,MAAMvC,YAAUgnB,UAAY,GAACznB,QAAAgD,MAAAhD,QAAAS,YAAAT,QAAA6C,OAAAA,MAAA7C,EAAA,EAAA;AAAA8C,QAAAA;AAAA9C,MAAA6C,EAAAA,MAAAA,OAAA7C,UAAAoB,SARzD0B,0BAAC,sBAEG,EAAA,QAAA7B,KAMI,MAAA4B,KACC,QAAA,WACAzB,MACP,CAAA,GAAApB,QAAA6C,KAAA7C,QAAAoB,OAAApB,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA,GAZJY,KACEkC;AAAAA,EAAAA;AApBJ,QAAA4kB,UAAgB9mB;AA0CdI,MAAAA;AAAAhB,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAE8B5B,KAAA8J,CAAA,MAAA;AAAA,QAC1BA,EAAC6c,SAAA;AACHN,mBAAgB;AAAC;AAAA,IAAA;AAInBA,iBAAe;AAAA,EAAA,GAChBrnB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAPD,QAAAqY,cAAoBrX;AAOdC,MAAAA;AAAAjB,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGI3B,KAAAA,MAAMomB,aAAgB,GAACrnB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAmT,YAAEtQ,MAACsQ,QAAQ,GAACnT,QAAAmT,UAAAnT,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAA7CgR,UAAU/P,IAAyB4B,EAAU;AAG7C,QAAA,CAAA+kB,YAAAC,UAAA,IAAiCvX,WAAc,GAC/CwX,aAAmBzT,OAAA,IAAiD;AAACvR,MAAAA;AAAA9C,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAChCE,KAAAA,MAAA;AACzBwR,eAAAA,UAAWxD,WAAiBiX,MAAAA,gBAAsBF,MAAAA,WAAe,EAAA,CAAC,GAAC,GAAK;AAAA,EAAA,GACnF7nB,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAFD,QAAAgoB,mBAAyBllB;AAEnBoB,MAAAA;AAAAlE,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC+BsB,KAAAA,MAAA;AAC/B4jB,eAAUxT,WAAUvD,aAAa+W,WAAUxT,OAAQ,GACvDyT,gBAAsBF,MAAAA,WAAgB,EAAA,CAAC;AAAA,EAAA,GACxC7nB,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAHDioB,QAAAA,mBAAyB/jB,IAORiC,KAAa/E,aAAAA,KAAK,IAE3BgF,KAAAnB,YAYMoB,KAAA8M,YAAYiU;AAAO7gB,MAAAA;AAAAvG,IAAA,EAAA,MAAAsF,MAAAtF,EAAA4nB,EAAAA,MAAAA,cAAA5nB,EAAAS,EAAAA,MAAAA,cAAAT,UAAAa,SAM5B0F,MAAAqhB,cAAcnnB,YAAUiH,QAAU7G,SAASymB,mBAAiBzmB,KAAK,KAChE,oBAAC,qBAAgCyE,EAAAA,YAAAA,IAAkB,cAAA7E,WAAUiH,KAC9D,CAAA,GAAA1H,QAAAsF,IAAAtF,QAAA4nB,YAAA5nB,QAAAS,YAAAT,QAAAa,OAAAb,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAA,SAAAzG,EAAAsF,EAAAA,MAAAA,MAAAtF,UAAAgnB,UAAAhnB,EAAA,EAAA,MAAAinB,gBAAAjnB,UAAAknB,aAAAlnB,EAAA+mB,EAAAA,MAAAA,WAAA/mB,UAAA0nB,WAAA1nB,EAAA,EAAA,MAAAuG,OAAAvG,EAAAmG,EAAAA,MAAAA,MAAAnG,EAAA,EAAA,MAAAoG,MAAApG,UAAAqG,MAvBHI,MAAA,qBAAC,eACc,eAAAN,IACb,sBAAmB,IACf,IAAAC,IAEKd,aACD,WAAA,KACA0hB,QACMC,cACHC,WACF7O,SAAAA,aACK2P,cAAe,kBACfC,gCACLlB,SACD,QAAC,GACC,UAAA1gB,IACH,QAAA,UACG,cACL,MAAA,WAEE,UAAA;AAAA,IAAA;AAAA,IACNE;AAAAA,EAAAA,GAGH,GAAcvG,QAAAsF,IAAAtF,QAAAgnB,QAAAhnB,QAAAinB,cAAAjnB,QAAAknB,WAAAlnB,QAAA+mB,SAAA/mB,QAAA0nB,SAAA1nB,QAAAuG,KAAAvG,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,IAAArG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAxBdyG;AAwBc;AAIlB,SAAAyhB,oBAAAnoB,OAAA;AACE,QAAA;AAAA,IAAA6G;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC9G;AAEtB6G,SAAAA,aAAAA,YAAYC,YAAY,GAAC;AAAA;AAIxCqhB,oBAAoBnS,cAAc;ACpKrBoS,MAAAA,8BAA8B7C,KAAKvlB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAC9C;AAAA,IAAAga;AAAAA,IAAAtT;AAAAA,IAAAyhB;AAAAA,IAAAC;AAAAA,IAAApG;AAAAA,EAAAA,IAAkEliB;AAAKO,MAAAA;AAAAN,SAAAA,EAAAooB,CAAAA,MAAAA,eAAApoB,EAAA,CAAA,MAAAia,WAAAja,EAAA2G,CAAAA,MAAAA,YAAA3G,EAAA,CAAA,MAAAiiB,SAAAjiB,SAAAqoB,oBAGrE/nB,KAAC,oBAAA,wBAAA,EACU+nB,SAAe,kBACjBpO,OAAAA,SACDmO,MAAU,aACTnG,OAEC,SACV,CAAA,GAAyBjiB,OAAAooB,aAAApoB,OAAAia,SAAAja,OAAA2G,UAAA3G,OAAAiiB,OAAAjiB,OAAAqoB,kBAAAroB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAPzBM;AAOyB,CAE5B;AACD6nB,4BAA4BpS,cAAc;AChB7BuS,MAAAA,6BAA6BhD,KAAKvlB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAC7C;AAAA,IAAAsoB;AAAAA,IAAA5hB;AAAAA,IAAA6hB;AAAAA,EAAAA,IAAuCzoB;AAAKO,MAAAA;AAAA,SAAAN,EAAAwoB,CAAAA,MAAAA,cAAAxoB,SAAAuoB,UAAAvoB,EAAA,CAAA,MAAA2G,YAG1CrG,yBAAC,0BACQioB,eACDC,2BAGR,CAAA,GAAyBxoB,OAAAwoB,YAAAxoB,OAAAuoB,QAAAvoB,OAAA2G,UAAA3G,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GALzBM;AAKyB,CAE5B;AACDgoB,2BAA2BvS,cAAc;AC1BlC,SAAA0S,UAAA1oB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GASL;AAAA,IAAA0G;AAAAA,IAAAoM;AAAAA,IAAAE;AAAAA,IAAApJ;AAAAA,IAAA6e;AAAAA,IAAAtnB,OAAAd;AAAAA,IAAAkQ,MAAA5P;AAAAA,EAAA,IAQIb,OAFFqB,QAAAd,OAAeqJ,SAAP,UAARrJ,IACAkQ,OAAA5P,OAAiB+I,SAAV,aAAP/I;AAAiBI,MAAAA;AAAAhB,WAAAoB,SAWfJ,yBAACgZ,gBAAkB5Y,OAAS,GAAApB,OAAAoB,OAAApB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAA2G,YAC5B1F,KAAA,oBAAC,aAAqB,EAAA,UAAA,QACpB,UAAA,oBAAC,KAAc,EAAA,aAAa,UAAA,GACzB0F,SACH,CAAA,EACF,CAAA,GAAc3G,OAAA2G,UAAA3G,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA,SAAA7C,EAAA+S,CAAAA,MAAAA,mBAAA/S,EAAAiT,CAAAA,MAAAA,QAAAjT,EAAA6J,CAAAA,MAAAA,YAAA7J,SAAA0oB,WAAA1oB,EAAA,CAAA,MAAAgB,MAAAhB,EAAA,CAAA,MAAAiB,MAAAjB,EAAA,EAAA,MAAAwQ,QAZhB3N,0BAAC,QACkBkQ,iBACXE,MACFyV,aACM7e,UACJ2G,MAENxP,UAAAA;AAAAA,IAAAA;AAAAA,IACAC;AAAAA,EAAAA,EAKF,CAAA,GAAOjB,OAAA+S,iBAAA/S,OAAAiT,MAAAjT,OAAA6J,UAAA7J,OAAA0oB,SAAA1oB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,QAAAwQ,MAAAxQ,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAbP6C;AAaO;AC5BJ,SAAS8lB,gBAAgBtL,MAAyC;AACvE,QAAMuL,aAA6C,CACjD;AAAA,IAAClY,IAAI;AAAA,IAAKmY,YAAY;AAAA,EAAA,GACtB;AAAA,IAACnY,IAAI;AAAA,IAAMmY,YAAY;AAAA,EAAA,CAAuC;AAGhE,MAAIC,OAAO;AACT,UAAM5nB,UAAU,CACd,6BACA,yCACAmc,KAAK5a,SAAS,IAAI,mBAAmB4a,KAAKpU,KAAK,UAAK,CAAC,KAAK,EAAE;AAG9D2f,eAAWle,KAAK;AAAA,MACdgG,IAAI;AAAA,MACJxP,SAASA,QAAQ+H,KAAK;AAAA,CAAI;AAAA,IAAA,CAC3B;AAAA,EAAA;AAGG8f,QAAAA,MAAM5b,GAAG,IAAI;AAEZ6b,SAAAA,MACL,GAAGJ,WAAWpf,IAAKyf,eACjBF,IAAI5d,KACF+d,MACE,gBAAgBD,YACZ;AAAA,IAACJ,YAAYI,UAAUJ;AAAAA,EAAAA,IACvB;AAAA,IAAC3nB,SAAS+nB,UAAU/nB;AAAAA,EAC1B,CAAA,GACAioB,MAAMF,UAAUvY,EAAE,CACpB,CACF,CACF;AACF;ACtBA,MACM0Y,sBAAsB,mCAEtBC,YAAU9nB,OAAOa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAYdknB,cAAchE,KAAKvlB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAC9B;AAAA,IAAAkpB,OAAA7oB;AAAAA,IAAA2S;AAAAA,IAAA/R,SAAAN;AAAAA,IAAAiJ;AAAAA,IAAA6e;AAAAA,IAAArL;AAAAA,IAAAlK;AAAAA,IAAA/R;AAAAA,IAAAoP;AAAAA,EAAA,IAUIzQ,OATFopB,SAAA7oB,OAAWqJ,eAAXrJ,IAESipB,cAAA3oB,OAA6B+I,SAAAgf,kBAA7B/nB,IASX;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAA,OAAA;AAG9C,QAAA,OAAOuoB,eAAgB,YAAU;AAAAtoB,UAAAA;AAAAjB,QAAAupB,CAAAA,MAAAA,eAAAvpB,SAAAqd,QAC5Bpc,MAAAsoB,YAAYlM,OAAOA,KAAIvF,MAAO,GAAG,IAAC,CAAA,CAAK,GAAC9X,OAAAupB,aAAAvpB,OAAAqd,MAAArd,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAA/CgB,KAAOC;AAAwC6T,YAAAA;AAAAA,IAAAA;AAG1CyU,SAAAA;AAAAA,EAAAA;AALT,QAAAC,kBAAwBxoB;AAMDC,MAAAA;AAAAjB,IAAAwpB,CAAAA,MAAAA,mBAAAxpB,SAAAU,KAE6CO,KAAAA,MAC9D,OAAOuoB,mBAAoB,WAAiBA,kBACzC9oB,EAAC0oB,mBAAoB,GAC7BppB,OAAAwpB,iBAAAxpB,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAHD,QAAA,CAAAypB,gBAAAC,iBAAA,IAA4CpZ,SAAwBrP,EAGnE;AAAC,MAAA4B,IAAAC;AAAA9C,IAAAwpB,CAAAA,MAAAA,mBAAAxpB,SAAAU,KAEQmC,KAAAA,MAAA;AAC+B,QAAnC,OAAO2mB,mBAAoB,YAC3B,OAAOA,gBAAexJ,aAAe;AAAU;AAEnD2J,UAAAA,MAAYH,gBAAexJ,UAAA9e,CAAA,YAAA;AACzBwoB,wBAAkB,gBAAgBxoB,UAAUR,EAAEQ,QAAO2nB,UAAW,IAAI3nB,QAAOA,OAAQ;AAAA,IAAA,CACpF;AAAC,WAAA,MAEWyoB,IAAGC,YAAa;AAAA,EAC5B9mB,GAAAA,KAAA,CAAC0mB,iBAAiB9oB,CAAC,GAACV,OAAAwpB,iBAAAxpB,OAAAU,GAAAV,OAAA6C,IAAA7C,OAAA8C,OAAAD,KAAA7C,EAAA,CAAA,GAAA8C,KAAA9C,EAAA,CAAA,IATvBgR,UAAUnO,IASPC,EAAoB;AAEvB,QAAA,CAAA+mB,gBAAAC,iBAAA,IAA4CxZ,aAAoC,GAChF,CAAAyZ,SAAAC,UAAA,IAA8B1Z,WAAc;AAAC,MAAApM,IAAAiC;AAAAnG,YAAA6pB,kBAEnC3lB,KAAAA,MAAA;AACH2lB,QAAAA;AAAc,aACZI,MAAA,MAAYD,WAAU,EAAK,CAAC;AAAA,EAAC,GACnC7jB,MAAC0jB,cAAc,GAAC7pB,QAAA6pB,gBAAA7pB,QAAAkE,IAAAlE,QAAAmG,OAAAjC,KAAAlE,EAAA,EAAA,GAAAmG,KAAAnG,EAAA,EAAA,IAHnBgR,UAAU9M,IAGPiC,EAAgB;AAKD,QAAAC,KAAA2jB,UAAU,KAAEpgB,QAMItD,KAAAjF,SAASqoB;AAAcljB,MAAAA;AAAAvG,YAAAqG,MAArDE,MAAC,oBAAA,cAAA,EAAa,UAAA,IAAgB,OAAAF,IAA2B,GAAArG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAoG,MAR3DK,MAAC,oBAAA4iB,aACO,OAAA,UACQ,gBAAAjjB,IACJ,WAAA,UACH,QAAA,QACC,SAAA,UACH0jB,KAAgB,mBAErBvjB,UAAAA,IACF,CAAA,GAAUvG,QAAAuG,KAAAvG,QAAAoG,IAAApG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAVZ,QAAAqK,UACE5D;AAUDoC,MAAAA;AAAA7I,IAAAqK,EAAAA,MAAAA,WAAArK,UAAAmpB,UAIGtgB,0BAAC,aAAaqhB,EAAAA,UAA8C7f,QAAQ,CAAA,GAAcrK,QAAAqK,SAAArK,QAAAmpB,QAAAnpB,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAA,SAAAnJ,UAAAiT,QAAAjT,EAAA6J,EAAAA,MAAAA,YAAA7J,EAAA0oB,EAAAA,MAAAA,WAAA1oB,EAAA,EAAA,MAAAmT,YAAAnT,UAAA6I,OAAA7I,EAAA,EAAA,MAAAwQ,QADpFrH,MAAC,oBAAA,MAAW8J,EAAAA,MAAUyV,IAAAA,SAAmB7e,UAAoBsJ,UAAgB3C,MAC3E3H,UACF,IAAA,CAAA,GAAO7I,QAAAiT,MAAAjT,QAAA6J,UAAA7J,QAAA0oB,SAAA1oB,QAAAmT,UAAAnT,QAAA6I,KAAA7I,QAAAwQ,MAAAxQ,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA,GAFPmJ;AAEO,CAEV;AAEDmgB,YAAYvT,cAAc;ACnGnB,SAAAoU,kBAAA;AACLC,QAAAA,eAAqB5lB,WAAA6lB,mBAA8B;AAAC,MAAA,CAE/CD;AAAYplB,UAAAA,IAAAA,MACC,qCAAqC;AAGhDolB,SAAAA;AAAY;ACSd,SAAAE,gBAAAvqB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAA0G;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAA6C9G;AAAKO,MAAAA;AAAAN,IAAA2G,CAAAA,MAAAA,YAAA3G,SAAA4G,cAAA5G,EAAA,CAAA,MAAA6G,gBAI9CvG,KAAC,oBAAA,yBAAA,EAAoCsG,YAA0BC,wBAE/D,GAA0B7G,OAAA2G,UAAA3G,OAAA4G,YAAA5G,OAAA6G,cAAA7G,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAA4G,CAAAA,MAAAA,cAAA5G,SAAA6G,gBAAA7G,EAAA,CAAA,MAAAM,MAH5BM,yBAAC,yBAAoCgG,EAAAA,YAA0BC,cAC7DvG,UAGF,GAAA,CAAA,GAA0BN,OAAA4G,YAAA5G,OAAA6G,cAAA7G,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJ1BY;AAI0B;AAI9B,SAAA2pB,wBAAAxqB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAA0G;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,MAA6C9G,OAE7C;AAAA,IAAAyZ;AAAAA,EAAA,IAAkBgR,sBAClB;AAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAA,IAAgET,mBAChE;AAAA,IAAA5kB;AAAAA,IAAAslB;AAAAA,IAAAC;AAAAA,EAAAA,IAAkD5jB,cAElD6jB,GAAAA,oBAA0BxlB,QAAMylB,SAChCC,YAAkB5W,OAAO9O,MAAM;AAAC,MAAAjF,IAAAM;AAAAZ,WAAAuF,UAEhBjF,KAAAA,MAAA;AACd2qB,cAAS3W,UAAW/O;AAAAA,EAAM,GACzB3E,MAAC2E,MAAM,GAACvF,OAAAuF,QAAAvF,OAAAM,IAAAN,OAAAY,OAAAN,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA,IAFX0U,gBAAgBpU,IAEbM,EAAQ;AAACI,MAAAA;AAAAhB,WAAA8qB,wBAGV9pB,KAAAkqB,CAAA,cAAA;AAKE,UAAA7N,OAAayN,qBAAoB;AAAA,MAAA,GAC5BG,UAAS3W;AAAAA,MAAA0W,SACHE;AAAAA,MAASC,SAAAC;AAAAA,IAAAA,CAEnB;AAAC,WACK,GAAAhZ,OAAAiZ,SAAAC,MAAA,GAA4BjO,IAAI;AAAA,EAAE,GAC1Crd,OAAA8qB,sBAAA9qB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAZH,QAAAurB,iBAAuBvqB;AActBC,MAAAA;AAAAjB,WAAA6qB,aAE8C5pB,KAAAA,MAAA;AACpC,cAAA;AAAA,MAAA,GAAKgqB,UAAS3W;AAAAA,MAAA0W,SAAArhB;AAAAA,IAAAA,CAA6B;AAAA,EAAC,GACtD3J,OAAA6qB,WAAA7qB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAAwrB,6BAAmCvqB;AAEpB4B,MAAAA;AAAA7C,WAAA2qB,WAAAjjB,QAAA1H,SAAA4qB,iBAEiC/nB,KAAAA,MAAA;AAC1C8nB,eAASjjB,SAAA0jB,2BAEbR,cAAaQ,uBAAwB;AAAA,EAAA,GACtCprB,EAAA,CAAA,IAAA2qB,WAAAjjB,MAAA1H,OAAA4qB,eAAA5qB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAJD,QAAAyrB,8BAAoC5oB;AAIA,MAAA,CAG/B2W,SAAO;AAAA1W,QAAAA;AAAA,WAAA9C,UAAA2G,YACH7D,MAAA,oBAAA,UAAA,YAAW,GAAI9C,QAAA2G,UAAA3G,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA,GAAf8C;AAAAA,EAAAA;AAQW,QAAAA,KAAA6nB,WAASjjB,SAAA0jB,yBACXlnB,KAAAumB,oBAAoB;AAAYtkB,MAAAA;AAAAnG,SAAAA,EAAA2G,EAAAA,MAAAA,YAAA3G,UAAA4G,cAAA5G,EAAA,EAAA,MAAA6G,gBAAA7G,UAAAurB,kBAAAvrB,EAAAwrB,EAAAA,MAAAA,8BAAAxrB,UAAAyrB,+BAAAzrB,EAAA,EAAA,MAAA0qB,cAAA1qB,EAAA+qB,EAAAA,MAAAA,qBAAA/qB,EAAA,EAAA,MAAA8C,MAAA9C,UAAAkE,MALhDiC,KAAC,oBAAA,kBAAA,EACaS,YACEC,cACE0kB,gBACA,gBAAAzoB,IACF,cAAAoB,IACUsnB,wBAAAA,4BACRC,gBAA0B,6BAC9Bf,YACOK,mBACT,WAAA,QACL,MAAA,SAEJpkB,SACH,CAAA,GAAmB3G,QAAA2G,UAAA3G,QAAA4G,YAAA5G,QAAA6G,cAAA7G,QAAAurB,gBAAAvrB,QAAAwrB,4BAAAxrB,QAAAyrB,6BAAAzrB,QAAA0qB,YAAA1qB,QAAA+qB,mBAAA/qB,QAAA8C,IAAA9C,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAdnBmG;AAcmB;AC3FVulB,MAAAA,SAAS,IAETC,iBAAe,IACfC,eAAejpB,OAAO,cAAc,GAEpCkpB,gCAAgC;ACFtC,SAAAC,mBAAA;AACLC,QAAAA,iBAAsBvnB,WAAAwnB,oBAA+B;AAAC,MAAA,CACjDD;AAAa/mB,UAAAA,IAAAA,MAAkB,sCAAsC;AAEnE+mB,SAAAA;AAAa;ACPf,MAAME,2BAA2B,KAC3BC,mCAAmC,KAEnCC,+BAA+B,KAC/BC,+BAA+B,KAE/BT,iBAA8D,CAAC,GAE/DU,wBAAwB,YAExBC,2BAAgD,CAAC;AAAA,EAAChnB,IAAI;AAAY,GAAG;AAAA,EAACA,IAAI;AAAO,CAAC,GAGlFinB,yBAAyB,4BACzBC,4BAA4B;ACDlC,SAASC,mCAAmC1sB,OAAgD;AAC3F,QAAA;AAAA,IAAC6G;AAAAA,IAAYC;AAAAA,IAAc6lB,YAAAA;AAAAA,IAAYC;AAAAA,EAAAA,IAAe5sB,OAEtDoe,MAAMuO,YAAWjqB,QACjB,CAAC+e,WAAWoL,YAAY,IAAItc,SAAsC,MACtE7B,MAAMC,KAAK,IAAID,MAAM0P,GAAG,CAAC,CAC3B;AAEAnN,YAAU,MAAM;AACVwQ,QAAAA,UAAU/e,WAAW0b,KAAK;AAC5B,YAAM0O,kBAAkBpe,MAAMC,KAAK,IAAID,MAAM0P,GAAG,CAAC;AAExCC,eAAAA,IAAI,GAAGA,IAAID,KAAKC;AACPA,wBAAAA,CAAC,IAAIoD,UAAUpD,CAAC;AAGlCwO,mBAAaC,eAAe;AAAA,IAAA;AAAA,EAC9B,GACC,CAAC1O,KAAKqD,SAAS,CAAC;AAEnB,QAAMsL,cAAclH,YAAY,CAAC3b,OAAe+M,SAAoC;AAClF4V,iBAAcG,CAAS,SAAA;AACfC,YAAAA,OAAO,CAAC,GAAGD,IAAI;AAChB9iB,aAAAA,KAAAA,KAAK,IAAI+M,MACPgW;AAAAA,IAAAA,CACR;AAAA,EACH,GAAG,EAAE;AAELhc,YAAU,MAAM;AACFwQ,gBAAAA,UAAU1X,OAAO8E,OAAO,CAAC;AAAA,EAAA,GACpC,CAAC4S,WAAWmL,WAAW,CAAC;AAErBM,QAAAA,qBAAqBjH,QAAQ,MAC1B0G,YAAWljB,IAAI,CAACmhB,WAAW1gB,YACzB0gB,UAAUuC,cACZ,CACCC,iCAAiC;AAAA,IAC/BvmB;AAAAA,IACAC;AAAAA,IACAoD,OAAAA;AAAAA,IACA6iB;AAAAA,IACAI,aAAavC,UAAUuC;AAAAA,EACxB,CAAA,GACDvC,UAAUjjB,IAAI,IAEf,CAAC,MAAM,MAAM,EAAE,CACrB,GACA,CAACd,YAAYC,cAAc6lB,aAAYI,WAAW,CAAC;AAEtD,SAEKG,oBAAAA,UAAAA,EAAAA,UAAAA,mBAAmBzjB,IAAI,CAAC,CAAC4jB,mBAAmB/V,GAAG,MAAMA,OAAO,oBAAC,mBAAuBA,CAAAA,GAAAA,GAAI,CAAG,GAC9F;AAEJ;AACAoV,mCAAmC1W,cAAc;AAEjD,SAASoX,iCAAiC;AAAA,EACxCvmB;AAAAA,EACAC;AAAAA,EACAoD;AAAAA,EACA6iB;AAAAA,EACAI,aAAAA;AAOF,GAAG;AACD,SAAO5H,KAAK,WAAA;AAAAtlB,UAAAA,IAAAC,EAAA,CAAA;AAAAK,QAAAA;AAAAN,MAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACmBtC,KAAA;AAAA,MAAAsG;AAAAA,MAAAC;AAAAA,IAAAA,GAG5B7G,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAHD,UAAAqtB,WAAiBH,aAAY5sB,EAG5B,GACD0W,OAAanR,UAAUwnB,QAAQ;AAAC,QAAAzsB,IAAAI;AAAA,WAAAhB,SAAAgX,QAEtBpW,KAAAA,MAAA;AACRksB,kBAAA7iB,OAAmB+M,IAAI;AAAA,IACtBhW,GAAAA,MAACgW,IAAI,GAAChX,OAAAgX,MAAAhX,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA,IAFTgR,UAAUpQ,IAEPI,EAAM,GAAC;AAAA,EAAA,CAGX;AACH;AC3EO,SAAAssB,mBAAA;AAAAttB,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAwqB;AAAAA,IAAAhqB;AAAAA,IAAAW;AAAAA,IAAAmsB;AAAAA,EAAAA,IAAwDpD,gBAAgB,GACxEhqB,gBAAsBotB,WAAS5pB,SAAW4pB,WAAS1pB,WACnD2pB,aAAmB5e,CAAAA,CAAQzO,eAC3B;AAAA,IAAAO;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAAAT,EAAA,CAAA,MAAAwtB,cAEbltB,KAAA;AAAA,IAAAkZ,SAC5BgU;AAAAA,IAAU/sB;AAAAA,IAAAI,OAEZV;AAAAA,EAAAA,GACRH,OAAAG,eAAAH,OAAAS,YAAAT,OAAAwtB,YAAAxtB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,yBAAgBT,EAItC;AAEGmqB,MAAAA,oBAAoB,gBAAY,CAAK+C,YAAU;AAAA5sB,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC1ChC,MAAA;AAAA,MAAAE,OAAA6I;AAAAA,MAAAvI,OAAAuI;AAAAA,IAAAA,GAAoC3J,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAApCY;AAAAA,EAAAA;AAAoC,MAGzCQ,OAAK;AAAAR,QAAAA;AAAA,WAAAZ,SAAAoB,SACAR,MAAA;AAAA,MAAAE,OAAA6I;AAAAA,MAAAvI;AAAAA,IAAyBpB,GAAAA,OAAAoB,OAAApB,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAzBY;AAAAA,EAAAA;AAAyB,MAAA,CAG7BT,eAAa;AAIAS,UAAAA,MAAAH,YAAUW,SAAWX,YAAUiH;AAAM1G,QAAAA;AAAAhB,MAAAU,CAAAA,MAAAA,KAAAV,SAAAY,OAD5CI,MAAAN,EAAE,wCAAsC;AAAA,MAAAD,YACjCG;AAAAA,IAAAA,CACb,GAACZ,OAAAU,GAAAV,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAA,WAAAjB,UAAAgB,OAJGC,KAAA;AAAA,MAAAH,OAAA6I;AAAAA,MAAAvI,OAEEJ;AAAAA,IAGRhB,GAAAA,QAAAgB,KAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GALMiB;AAAAA,EAAAA;AAKN,MAGCH,OAAK;AAAAF,QAAAA;AAAAZ,cAAAc,MAAAI,WAAAlB,UAAAU,KAEEE,MAAAF,EAAE,uCAAqC;AAAA,MAAAI,OAAUA,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAAAgB,QAAAA;AAAA,WAAAhB,UAAAY,OADlEI,MAAA;AAAA,MAAAF,OACEF;AAAAA,MAAgEQ,OAAAuI;AAAAA,IAExE3J,GAAAA,QAAAY,KAAAZ,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GAHMgB;AAAAA,EAAAA;AAMwB,QAAAJ,KAAAC,OAAKO;AAAOJ,MAAAA;AAAA,SAAAhB,UAAAY,MAAtCI,KAAA;AAAA,IAAAF,OAAA6I;AAAAA,IAAAvI,OAA0BR;AAAAA,EAAaZ,GAAAA,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAAvCgB;AAAuC;ACnDhD,MAAMysB,aAAa,CAAC,SAAS,QAAQ,GAExBC,2BAA2BpI,KAAK,WAAA;AAAAtlB,QAAAA,IAAAC,EAAA,EAAA,GAC3C;AAAA,IAAAyK,MAAAijB;AAAAA,EAAA,IAA0BtlB,YAC1B;AAAA,IAAAzB;AAAAA,IAAAC;AAAAA,IAAAhG,OAAA+sB;AAAAA,EAAAA,IAA6DzD,gBAC7D0D,GAAAA,oBAA0BP,iBAC1BQ,GAAAA,aAAmBD,kBAAiB/sB,OACpC8Q,QAAmBmc,0BAA0BnnB,YAAYC,YAAY,GACrEmnB,YAAkB3Z,OAAOzC,KAAK,GAC9Bqc,aAAmB/mB,iBACnB;AAAA,IAAAxG;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACc,MAAAA;AAAA,OAAA;AAAA,QAKhD,CAACutB,kBAAiBzsB,SAAA,CACjB0sB,cAAU,CACVL,WAAAS,SAAoBtc,OAAKuc,EAAI,KAC9B,OAAOP,kBAAiBxsB,SAAW,YACnCwQ,OAAK3K,SAAW,WAAS;AAEzB3G,WAAOstB,kBAAiBxsB;AAAM0T,YAAAA;AAAAA,IAAAA;AAEhCxU,SAAOutB,kBAAiBzsB;AAAAA,EAAAA;AAX1B,QAAAA,QAAcd;AAY2DM,MAAAA;AAAAZ,IAAAU,CAAAA,MAAAA,KAAAV,SAAAoB,SAE/CR,KAAAQ,SAASV,EAAE,4DAA4D,GAACV,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAlG,QAAAouB,oBAA0BxtB;AAAwEI,MAAAA;AAAAhB,WAAAouB,qBAEhGptB,KAAAotB,kBAAiB3rB,cAAe,GAAG2rB,kBAAiB1pB,MAAA,GAAA,EAAY,CAAC,QAAQ0pB,mBAAiBpuB,OAAAouB,mBAAApuB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAD5F,QAAA+H,gBACE/G;AAA0F,MAAAC,IAAA4B;AAAA7C,SAAAA,EAAA+H,CAAAA,MAAAA,iBAAA/H,EAAA,CAAA,MAAA4R,SAAA5R,EAAAiuB,CAAAA,MAAAA,cAAAjuB,EAAA,CAAA,MAAA2tB,aAAA3tB,SAAAU,KAElFO,KAAAA,MAAA;AACJ,QAAA,CAAC2Q,SAASA,UAAUoc,UAAS1Z;AAAQ;AAErC+Z,QAAAA;AAEAzc,WAAAA,MAAK3K,SAAU,WACjB0mB,UAAS;AAAA,MAAAW,UAAA;AAAA,MAAAC,UAAA;AAAA,MAAAxqB,QAGC;AAAA,MAAO3C,OACRV,EAAE,oDAAkD;AAAA,QAAAwI,SAAY0I,MAAKuc;AAAAA,MAAAA,CAAI;AAAA,MAAC5H,6CAG7E,EAAA,UAAA;AAAA,QAAA,oBAAA,WAAA,EAAU7lB,UAAE,EAAA,sDAAsD,EAAE,CAAA;AAAA,QACnEkR,MAAK9Q,MAAAI;AAAAA,MAAAA,EACR,CAAA;AAAA,IAAA,CAEH,GAGC0Q,MAAK3K,SAAU,aAAS,CAAKwmB,WAAAS,SAAoBtc,MAAKuc,EAAG,KAC3DR,UAAS;AAAA,MAAAW,UAAA;AAAA,MAAAvqB,QAEC;AAAA,MAAS3C,2BAEd,WACU,EAAA,SAAAwQ,MAAKuc,IACN,SAAA,sDACLztB,GACK,QAAA;AAAA,QAAAytB,IACFvc,MAAKuc;AAAAA,QAAA/sB,OACF2G;AAAAA,SAEG,YAAA;AAAA,QAAAymB,QACF;AAAA,MAAA,EACT,CAAA;AAAA,IAAA,CAGN,GAMC5c,MAAK3K,SAAU,aAAa2K,MAAKuc,OAAQ,aAE3CE,YAAYA,WAAAA,MAAiBJ,WAAUQ,yBAA0B,IAGnET,UAAS1Z,UAAW1C,OAGPb,MAAAA,aAAasd,SAAS;AAAA,EAAA,GAClCxrB,KAAA,CAAC+O,OAAOqc,YAAYN,WAAWjtB,GAAGqH,aAAa,GAAC/H,OAAA+H,eAAA/H,OAAA4R,OAAA5R,OAAAiuB,YAAAjuB,OAAA2tB,WAAA3tB,OAAAU,GAAAV,QAAAiB,IAAAjB,QAAA6C,OAAA5B,KAAAjB,EAAA,EAAA,GAAA6C,KAAA7C,EAAA,EAAA,IArDnDgR,UAAU/P,IAqDP4B,EAAgD,GAAC;AAAA,CAGrD,GCrFY6rB,oBAAqBjuB,CAA2BA,eAAAA,WAAWkuB,aAAa,ICO/Evd,SAAO7P,OAAOgI,IAAI,EAAE;AAAA,EACxBqlB,UAAU;AAAA,EACVC,QAAQ;AAAA,EACRC,YAAY;AACd,CAAC;AAGM,SAAAC,wBAAAhvB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAA,MAAA0G,UAAAqoB,kBAAAC,aAAAC,SAAApc,WAAA1R;AAAApB,WAAAD,SAGL;AAAA,IAAAoW,IAAA8Y;AAAAA,IAAAtoB;AAAAA,IAAAqoB;AAAAA,IAAAE;AAAAA,IAAA9tB;AAAAA,IAAA,GAAA0R;AAAAA,EAAA,IAAoF/S,OAAKC,OAAAD,OAAAC,OAAA2G,UAAA3G,OAAAgvB,kBAAAhvB,OAAAivB,aAAAjvB,OAAAkvB,SAAAlvB,OAAA8S,WAAA9S,OAAAoB,UAAAuF,WAAA3G,EAAA,CAAA,GAAAgvB,mBAAAhvB,EAAA,CAAA,GAAAivB,cAAAjvB,EAAA,CAAA,GAAAkvB,UAAAlvB,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA,GAAAoB,QAAApB,EAAA,CAAA;AACzF,QAAA;AAAA,IAAAU;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,WAAAoB,SAK9Cd,KAAC,oBAAA,KAAA,EAAU,MAAC,GAAW,SAAC,GACtB,UAAC,oBAAA,MAAA,EAAQ,IAAA,MAAW,MAAC,GAAS,QAAA,UAC3Bc,UAAAA,MAAAA,CACH,EACF,CAAA,GAAMpB,OAAAoB,OAAApB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAU,KAOsBE,KAAAF,EAAE,yCAAyC,GAACV,OAAAU,GAAAV,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,YAAAY,MAAtDI,KAAA;AAAA,IAAAqJ,SAAUzJ;AAAAA,EAA4C,GAACZ,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,IAAAgvB,EAAAA,MAAAA,oBAAAhvB,UAAAkvB,WAAAlvB,EAAA,EAAA,MAAAgB,MANzEC,yBAAC,KAAS,EAAA,MAAA,QAAgB,SAAC,GACzB,UAAC,oBAAA,QAAA,EACa+tB,cAAAA,kBACNG,MAAAA,WACD,MAAA,SACID,SAAAA,SACK,cAAAluB,GAElB,CAAA,EAAA,CAAA,GAAMhB,QAAAgvB,kBAAAhvB,QAAAkvB,SAAAlvB,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,IAAAM,EAAAA,MAAAA,MAAAN,UAAAiB,MAdR4B,KAAC,qBAAA,MAAc,EAAA,SAAC,GACdvC,UAAAA;AAAAA,IAAAA;AAAAA,IAKAW;AAAAA,EAAAA,EASF,CAAA,GAAOjB,QAAAM,IAAAN,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,SAAAA,EAAA,EAAA,MAAA2G,YAAA3G,EAAAivB,EAAAA,MAAAA,eAAAjvB,EAAA8S,EAAAA,MAAAA,aAAA9S,UAAA6C,MAhBTC,0BAACsO,QAAI,EAAA,GAAK0B,WAAemc,IAAAA,aACvBpsB,UAAAA;AAAAA,IAAAA;AAAAA;EAiBF,EAAA,CAAA,GAAO7C,QAAA2G,UAAA3G,QAAAivB,aAAAjvB,QAAA8S,WAAA9S,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAlBP8C;AAkBO;AC9CX,MAAMsO,SAAO7P,OAAO6tB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAwCb,SAAAC,QAAAtvB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAAqvB;AAAAA,IAAAC;AAAAA,EAAkCxvB,IAAAA,OAElCyvB,YAAkBnb,OAAA,CAAQ;AAAC/T,MAAAA;AAAAN,IAAAsvB,CAAAA,MAAAA,YAAAtvB,SAAAuvB,iBAGzBjvB,KAAAsR,CAAA,UAAA;AACEA,UAAKC,kBAEL2d,UAASlb,UAAW1C,MAAKG,OAEzBwd,cAAc;AAEd,UAAAvd,kBAAAlH,CAAA,MAAA;AACEA,QAAC+G,kBACDyd,SAASxkB,EAACiH,QAASyd,UAASlb,OAAQ;AAAA,IAAC,GAGvCpC,gBAAAA,MAAA;AACEE,aAAAC,oBAA2B,aAAaL,eAAe,GACvDI,OAAAC,oBAA2B,WAAWH,aAAa;AAAA,IAAC;AAGtDE,WAAAE,iBAAwB,aAAaN,eAAe,GACpDI,OAAAE,iBAAwB,WAAWJ,aAAa;AAAA,EACjDlS,GAAAA,OAAAsvB,UAAAtvB,OAAAuvB,eAAAvvB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AApBH,QAAAuS,kBAAwBjS;AAsBvB,MAAAM,IAAAI;AAAAhB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAKGhC,KAAQ,oBAAA,QAAA,CAAA,CAAA,GAGRI,KAAQ,oBAAA,QAAA,CAAA,CAAA,GAAAhB,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,SAAAuS,mBALVtR,KAAC,qBAAAmQ,QAAA,EAAkBmB,8BAEjB3R,UAAAA;AAAAA,IAAAA;AAAAA,IAGAI;AAAAA,EAAAA,EAAAA,CACF,GAAOhB,OAAAuS,iBAAAvS,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GANPiB;AAMO;ACpEX,MAAMmQ,SAAO7P,OAAOC,GAAG;AAAA;AAAA;AAAA;AAAA;AAMhB,SAAAiuB,UAAA1vB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAA0G,MAAAA,UAAAsoB,aAAA/b,UAAArJ,UAAAiJ;AAAA9S,WAAAD,SAGL;AAAA,IAAAoW,IAAA8Y;AAAAA,IAAAtoB;AAAAA,IAAAkD;AAAAA,IAAAqJ;AAAAA,IAAA,GAAAJ;AAAAA,EAAAA,IAAsE/S,OAAKC,OAAAD,OAAAC,OAAA2G,UAAA3G,OAAAivB,aAAAjvB,OAAAkT,UAAAlT,OAAA6J,UAAA7J,OAAA8S,cAAAnM,WAAA3G,EAAA,CAAA,GAAAivB,cAAAjvB,EAAA,CAAA,GAAAkT,WAAAlT,EAAA,CAAA,GAAA6J,WAAA7J,EAAA,CAAA,GAAA8S,YAAA9S,EAAA,CAAA;AAC3E,QAAA,CAAAwR,SAAAke,UAAA,IAA8Bpf,aAAoC,GAClEqf,kBAAwBtb,OAAA1K,MAAwB,GAChD,CAAAimB,aAAAC,cAAA,IAAsCvf,SAAiB;AAAChQ,MAAAA;AAAAN,IAAA,CAAA,MAAAwR,SAAAkO,eAElBpf,KAAAA,MAAA;AACpCqvB,oBAAerb,UAAW9C,SAAOkO;AAAAA,EAClC1f,GAAAA,EAAA,CAAA,IAAAwR,SAAAkO,aAAA1f,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAA8vB,oBAA0BxvB;AAEbM,MAAAA;AAAAZ,IAAAkT,CAAAA,MAAAA,YAAAlT,SAAA6J,YAGXjJ,KAAAqR,CAAA,WAAA;AACE,UAAA8d,IAAUJ,gBAAerb;AAEpByb,SAELF,eAAevT,KAAAC,IAASD,KAAAQ,IAASiT,IAAI9d,QAAQpI,QAAQ,GAAGqJ,QAAQ,CAAC;AAAA,EAClElT,GAAAA,OAAAkT,UAAAlT,OAAA6J,UAAA7J,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAPH,QAAAgwB,eAAqBpvB;AASpB,MAAAI,IAAAC;AAAAjB,IAAAkT,EAAAA,MAAAA,YAAAlT,UAAA6J,YAAA7J,EAAA,EAAA,MAAA4vB,eAGQ3uB,KAAA2uB,cAAW;AAAA,IAAA3c,MAAU;AAAA,IAAM6H,OAAS8U;AAAAA,EAAAA,IAAW;AAAA,IAAA/lB;AAAAA,IAAAqJ;AAAAA,EAAAA,GAAwBlT,QAAAkT,UAAAlT,QAAA6J,UAAA7J,QAAA4vB,aAAA5vB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAAAgB,KAAvEC;AADT,QAAAmU,QAAcpU;AAGb6B,MAAAA;AAAA7C,IAAAgwB,EAAAA,MAAAA,gBAAAhwB,UAAA8vB,qBAKGjtB,KAAC,oBAAA,SAAkBmtB,EAAAA,UAAAA,cAA6BF,eAAgB,mBAAK,GAAA9vB,QAAAgwB,cAAAhwB,QAAA8vB,mBAAA9vB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAA2G,EAAAA,MAAAA,YAAA3G,EAAA,EAAA,MAAAivB,eAAAjvB,EAAA8S,EAAAA,MAAAA,aAAA9S,EAAA,EAAA,MAAAoV,SAAApV,UAAA6C,MAFvEC,KAAA,qBAACsO,QAAS6d,EAAAA,IAAU,aAAOnc,GAAAA,WAAgB4c,KAAAA,YAAmBta,OAC3DzO,UAAAA;AAAAA,IAAAA;AAAAA,IACD9D;AAAAA,EAAAA,EAAAA,CACF,GAAO7C,QAAA2G,UAAA3G,QAAAivB,aAAAjvB,QAAA8S,WAAA9S,QAAAoV,OAAApV,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAHP8C;AAGO;AClCJ,SAAAmtB,uBAAAlwB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAGL;AAAA,IAAA2G;AAAAA,IAAAC;AAAAA,IAAAoM;AAAAA,MAAyClT,OACzC;AAAA,IAAAyT;AAAAA,EAAA,IAAoBwC,WACpB;AAAA,IAAAka;AAAAA,IAAAvF;AAAAA,EAAA,IAAoCR,mBACpC;AAAA,IAAAgG;AAAAA,MAAmBrE,iBAAiB;AAACxrB,MAAAA;AAAAN,IAAAkwB,CAAAA,MAAAA,kBAAAlwB,SAAA2qB,aAELrqB,KAAAA,MAAA;AAC1BqqB,iBAAWuF,eAAevF,UAASjjB,IAAK;AAAA,EAC7C1H,GAAAA,OAAAkwB,gBAAAlwB,OAAA2qB,WAAA3qB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAowB,cAAoB9vB;AAEW,MAE3BkT,cAAcmX;AAAS,WAAA;AAE3B,QAAA0F,YAAkB1F,UAAS2F;AAAU1vB,MAAAA;AAAAZ,IAAA,CAAA,MAAAqwB,aAAArwB,EAAA4G,CAAAA,MAAAA,cAAA5G,EAAA6G,CAAAA,MAAAA,gBAAA7G,SAAAowB,eAEnCxvB,KAAC,oBAAA,WAAA,EAAmBwvB,sBAAyBxpB,YAA0BC,aAAgB,CAAA,GAAA7G,OAAAqwB,WAAArwB,OAAA4G,YAAA5G,OAAA6G,cAAA7G,OAAAowB,aAAApwB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AADzF,QAAAwR,UACE5Q;AACD,MAEGuvB,SAAQI,gBAAA;AAAAvvB,QAAAA;AAAA,WAAAhB,EAAAwR,CAAAA,MAAAA,WAAAxR,SAAAiT,QAERjS,MAAC,oBAAA,aACI,IAAA,SACK,WAAA,0BACFiS,MACImZ,UAAAA,8BACAD,UAA2BA,8BAEpC3a,mBACH,GAAYxR,OAAAwR,SAAAxR,OAAAiT,MAAAjT,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GARZgB;AAAAA,EAAAA;AAQYA,MAAAA;AAAA,SAAAhB,EAAAwR,EAAAA,MAAAA,WAAAxR,UAAAiT,QAKdjS,KAAC,oBAAA,KAAA,EAAO,IAAA,SAAgB,WAAA,0BAA+BiS,gBAEvD,QAAA,CAAA,GAAMjT,QAAAwR,SAAAxR,QAAAiT,MAAAjT,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAFNgB;AAEM;AC9CV,MAAMwvB,2BAA2B;AAK1BC,SAAAA,wBAAA7wB,WAAAyX,KAAAqZ,cAAA;AAAA,QAAA1wB,IAAAC,EAAA,EAAA,GAKL0wB,gBAAsBC,iBAAiB;AAACtwB,MAAAA;AAAAN,IAAAqX,CAAAA,MAAAA,OAAArX,SAAAJ,aAEfU,KAAA,CAAAkwB,0BAA2B5wB,WAAWyX,GAAG,EAAAvN,OAAA8E,OAAgB,GAAC5O,OAAAqX,KAAArX,OAAAJ,WAAAI,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAnF6wB,QAAAA,mBAAyBvwB,GAA0D2I,KAAM,GAAG;AAAC,MAAArI,IAAAI;AAAAhB,MAAAA,EAAA0wB,CAAAA,MAAAA,gBAAA1wB,SAAA2wB,iBAAA3wB,EAAA,CAAA,MAAA6wB,kBAAA;AAAA5vB,QAAAA;AAAAjB,aAAA0wB,gBAK/EzvB,MAAAJ,CAAYA,UAAAA,iBAAiB6vB,eAAe7vB,OAAMb,OAAA0wB,cAAA1wB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAFvDgB,KAAA2vB,cAAaG,OACVD,gBAAgB,EAAC1lB,KACnB3B,IAAIvI,GAAkD,CAAC,GAACjB,OAAA0wB,cAAA1wB,OAAA2wB,eAAA3wB,OAAA6wB,kBAAA7wB,OAAAgB;AAAAA,EAAA;AAAAA,SAAAhB,EAAA,CAAA;AAFzDgB,OAAAA;AAKT+vB,QAAAA,UAAcjtB,cANClD,IAMqB8vB,YAAY;AAAczvB,MAAAA;AAAAjB,IAAA2wB,CAAAA,MAAAA,iBAAA3wB,UAAA6wB,oBAAA7wB,EAAA,EAAA,MAAA+wB,WAE5D9vB,KAAA+vB,CAAA,aAAA;AACMA,iBAAanwB,WACf8vB,cAAaM,OAAQJ,kBAAkBG,QAAkB;AAAA,EAAA,GAE5DhxB,OAAA2wB,eAAA3wB,QAAA6wB,kBAAA7wB,QAAA+wB,SAAA/wB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AALH,QAAA6d,MAAY5c;AAOX,MAAA4B,IAAAC;AAAA,SAAA9C,EAAA6d,EAAAA,MAAAA,OAAA7d,UAAA+wB,WAEoBjuB,KAAA,CAACjC,SAAOgd,GAAG,GAAC7d,QAAA6d,KAAA7d,QAAA+wB,SAAA/wB,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAAA6C,KAAZC,IAAdD;AAAyC;ACnC3C,MAAMquB,mBAAmB;AAAA,EAAC5rB,IAAI;AAAA,EAAUlE,OAAO;AAAqC,GAC9E+vB,gBAAgB;AAAA,EAAC7rB,IAAI;AAAA,EAAOlE,OAAO;AAAuC,GAC1EgwB,aAAa,CAACF,kBAAkBC,aAAa,GCEpDE,MAAM,IAAIC,SAAI;AAAA,EAACC,SAAS;AAAI,CAAC;AAEnBC,SAAAA,WAAWC,SAAc5wB,OAAiB;AAClD6wB,QAAAA,SAASL,IAAI7wB,IAAIixB,OAAO;AAE9B,SAAIC,WAAW/nB,UACb0nB,IAAIxT,IAAI4T,SAAShjB,MAAMmW,QAAQ/jB,KAAK,KAAKsC,SAAStC,KAAK,CAAC,GACjD2wB,WAAWC,SAAS5wB,KAAK,KAG3B6wB;AACT;AAEO,SAASC,eAAe/f,OAAkB;AACzC,QAAA;AAAA,IAACyL;AAAAA,EAAQzL,IAAAA,OACT0C,UAAU+c,IAAI7wB,IAAI6c,IAAI;AAExB/I,cAAY3K,UAKhB0nB,IAAIxT,IAAIR,MAAM,CAAC/I,OAAO;AACxB;AAEO,SAASsd,cAAcpgB,SAA4B;AAClDqgB,QAAAA,MAAMzf,OAAO0f,aAAa;AAEhC,MAAID,KAAK;AACDE,UAAAA,QAAQ7xB,SAAS8xB,YAAY;AAE/BC,QAAAA,mBACJF,MAAMG,mBAAmB1gB,OAAO,GAChCqgB,IAAIM,SAASJ,KAAK;AAAA,EAAA;AAEtB;AAEO,SAASK,OAAOxgB,OAAkB;AACvCggB,gBAAchgB,MAAMygB,aAAa;AACnC;AAEO,SAASC,eAAe1gB,OAAkB;AAC7BA,QAAM2gB,YAAY,OAAO3gB,MAAM+V,WAAW/V,MAAM4gB,aAMlE5gB,MAAMC,eAAe,GAErB+f,cAAchgB,MAAMygB,aAAa;AACnC;AAEO,SAASI,eAAe5xB,OAA6C;AACnEsC,SAAAA,SAAStC,KAAK,KAAKwC,WAASxC,MAAM2C,GAAG,KAAKH,WAASxC,MAAMN,KAAK;AACvE;ACxDamyB,MAAAA,uBAAuBnxB,OAAO6tB,IAAI,CAAC;AAAA,EAACrtB;AAAqB,MAAM;AACpE,QAAA;AAAA,IAACV;AAAAA,IAAOsxB;AAAAA,IAAOzwB;AAAAA,MAASH,MAAME;AAE7BiX,SAAAA;AAAAA;AAAAA;AAAAA,qBAGYyZ,MAAMC,KAAKC,MAAM;AAAA,mBACnBF,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,sBAK7B9sB,IAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,qBAIdF,IAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAmCJF,IAAIE,MAAM,CAAC,CAAC,CAAC;AAAA,mBACxBywB,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQhC6D,MAAMC,KAAKE,MAAM,CAAC,EAAEC,QAAQ;AAAA,qBAC1BJ,MAAMC,KAAKE,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAS9B9sB,IAAIE,MAAM,CAAC,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAavBb,MAAM2xB,OAAOC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,eAKrB5xB,MAAM2xB,OAAOE,QAAQ;AAAA;AAAA;AAAA;AAAA,qBAIflxB,IAAIE,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,eAInBb,MAAM2xB,OAAOG,MAAM;AAAA;AAAA;AAAA;AAAA,eAInB9xB,MAAM2xB,OAAOI,OAAO;AAAA;AAAA;AAAA;AAAA,eAIpB/xB,MAAM2xB,OAAOK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBlC,CAAC;AC3HM,SAAAC,OAAAvzB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAAszB;AAAAA,IAAAhnB;AAAAA,EAAAA,IAA0BxM;AAAKO,MAAAA;AAAAN,WAAAuzB,YAG7BjzB,KAAAsR,CAA0C2hB,UAAAA,SAAS3hB,MAAK4hB,OAAA3yB,KAAa,GAACb,OAAAuzB,UAAAvzB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AADxE,QAAAyzB,eAAqBnzB,IAIrB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,WAAAU,KAMnCE,KAAAF,EAAE,uCAAuC,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAEhD,QAAAgB,KAAAuL,SAAS;AAAEtL,MAAAA;AAAAjB,SAAAA,EAAAyzB,CAAAA,MAAAA,gBAAAzzB,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALpBC,yBAAC,WACOyyB,EAAAA,MAAAA,YACID,UAAW,cACR,aAAA7yB,IACL,QAAA,GACD,OAAAI,IACP,GAAAhB,OAAAyzB,cAAAzzB,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GANFiB;AAME;ACHC,SAAA0yB,cAAA5zB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAY;AAAAA,MAAgBd,OAChB;AAAA,IAAA6zB;AAAAA,IAAAlL;AAAAA,EAAkCyB,IAAAA,gBAAAA,GAClC0J,iBAAuB,GAAGnL,OAAO,aAKjCoL,CAAAA,YAAAC,gBAAA,IAAuCtD,wBACrC,qBAEA,MAAA,QACF;AAACnwB,MAAAA;AAAAN,WAAA8zB,cAGgBxzB,KAAA8wB,WAAAtd,KAAAkgB,CAA0BA,SAAAA,KAAI1uB,OAAQwuB,UAAU,GAAC9zB,OAAA8zB,YAAA9zB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAlE,QAAAi0B,WAAiB3zB;AAAiDM,MAAAA;AAAAZ,WAAA+zB,oBAE5BnzB,KAAAA,MAAA;AACpCmzB,qBAAgB7C,iBAAA5rB,EAAoB;AAAA,EAAC,GACtCtF,OAAA+zB,kBAAA/zB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAFD,QAAAk0B,oBAA0BtzB;AAEJI,MAAAA;AAAAhB,WAAA+zB,oBAEa/yB,KAAAA,MAAA;AACjC+yB,qBAAgB5C,cAAA7rB,EAAiB;AAAA,EAAC,GACnCtF,OAAA+zB,kBAAA/zB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAAm0B,iBAAuBnzB,IAIvB;AAAA,IAAAN;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GAK3CyB,KAAG4yB,GAAAA,cAAc;AAAQhxB,MAAAA;AAAA7C,IAAAU,CAAAA,MAAAA,KAAAV,SAAAa,SAE3BgC,KAAA4vB,eAAe5xB,KAAK,IAClB,oBAAC,aACIH,GACK,SAAA,mCACI,YAAA;AAAA,IAAA+H,eAAAA,MAER,oBAAA,MAAA,EACE,8BAAC,UAAmB5H,EAAAA,UAAAA,OAAK,EAC3B,CAAA;AAAA,EAAA,GAEH,IAGH,oBAAA,MAAA,EAAKH,YAAE,0CAA0C,EAAA,CAAE,GACpDV,OAAAU,GAAAV,OAAAa,OAAAb,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAYQE,KAAA;AAAA,IAAA8rB,UAAW;AAAA,IAAQwF,QAAA;AAAA,IAAAvF,QAAA;AAAA,EAAA,GAAuB7uB,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAI9BkE,QAAAA,KAAG2vB,GAAAA,cAAc,YAC5B1tB,KAAG0tB,GAAAA,cAAc,OAAA3C,iBAAA5rB,EAAA;AAA4Bc,MAAAA;AAAApG,YAAAU,KAC1C0F,KAAA1F,EAACwwB,iBAAA9vB,KAAuB,GAACpB,QAAAU,GAAAV,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAEtB,QAAAqG,KAAA4tB,aAAQ/C;AAAqB3qB,MAAAA;AAAAvG,IAAAk0B,EAAAA,MAAAA,qBAAAl0B,EAAA,EAAA,MAAAkE,MAAAlE,EAAAmG,EAAAA,MAAAA,MAAAnG,EAAA,EAAA,MAAAoG,MAAApG,UAAAqG,MALzCE,MAAC,oBAAA,KACgB,EAAA,iBAAArC,IACX,IAAAiC,IACG,OAAAC,IACE8tB,SAAAA,mBACC,UAAA7tB,GACV,CAAA,GAAArG,QAAAk0B,mBAAAl0B,QAAAkE,IAAAlE,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAEeyG,QAAAA,MAAGotB,GAAAA,cAAc,YAC5BhrB,MAAGgrB,GAAAA,cAAc,OAAA1C,cAAA7rB,EAAA;AAAyB6D,MAAAA;AAAAnJ,YAAAU,KACvCyI,MAAAzI,EAACywB,cAAA/vB,KAAoB,GAACpB,QAAAU,GAAAV,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAEnB,QAAAoJ,MAAA6qB,aAAQ9C;AAAkB9nB,MAAAA;AAAArJ,IAAAm0B,EAAAA,MAAAA,kBAAAn0B,EAAA,EAAA,MAAAyG,OAAAzG,EAAA6I,EAAAA,MAAAA,OAAA7I,EAAA,EAAA,MAAAmJ,OAAAnJ,UAAAoJ,OALtCC,MAAC,oBAAA,KACgB,EAAA,iBAAA5C,KACX,IAAAoC,KACG,OAAAM,KACEgrB,SAAAA,gBACC,UAAA/qB,IACV,CAAA,GAAApJ,QAAAm0B,gBAAAn0B,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAqJ,OApBNC,MAAC,oBAAA,MAAA,EACU,YACG,YAAA,GACJ,WACD,OAAAxG,IAEP,UAAA,qBAAC,SAAe,EAAA,OAAA,GACdyD,UAAAA;AAAAA,IAAAA;AAAAA,IAOA8C;AAAAA,EAAAA,EAOF,CAAA,EACF,CAAA,GAAOrJ,QAAAuG,KAAAvG,QAAAqJ,KAAArJ,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAGYgK,QAAAA,MAAA,GAAG6pB,cAAc,OAAOC,UAAU,IAE/C3e,MAAG0e,GAAAA,cAAc;AAAUxe,MAAAA;AAAArV,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGxByS,MAAA;AAAA,IAAAgf,SAAU;AAAA,EAAA,GAAOr0B,QAAAqV,OAAAA,MAAArV,EAAA,EAAA;AAAAsV,MAAAA;AAAAtV,IAAAa,EAAAA,MAAAA,SAAAb,UAAAi0B,YAEvB3e,MAAA2e,aAAQ/C,wCACN,sBACC,EAAA,UAAA,oBAAC,iBACOrwB,aACM2wB,YACHG,SAAaA,gBACd2B,QAAAA,QACO,eAAA;AAAA,IAAAgB,YAAA;AAAA,EAAA,EAAkB,CAAA,EAErC,CAAA,GACDt0B,QAAAa,OAAAb,QAAAi0B,UAAAj0B,QAAAsV,OAAAA,MAAAtV,EAAA,EAAA;AAAAuV,MAAAA;AAAAvV,IAAAa,EAAAA,MAAAA,SAAAb,UAAAi0B,YAEA1e,MAAA0e,aAAQ9C,iBACN,oBAAA,MAAA,EACU,UAAA,QACC,UAAC,GACAmB,WAAAA,gBACIF,eAAKA,QACXA,iBACH,MAAA,GAELlN,UAAAA,KAAAC,UAAetkB,OAAc,MAAA,CAAA,EAChC,CAAA,GACDb,QAAAa,OAAAb,QAAAi0B,UAAAj0B,QAAAuV,OAAAA,MAAAvV,EAAA,EAAA;AAAAwV,MAAAA;AAAAxV,IAAA,EAAA,MAAAgK,OAAAhK,EAAAmV,EAAAA,MAAAA,OAAAnV,EAAAsV,EAAAA,MAAAA,OAAAtV,UAAAuV,OA/BHC,MAAC,qBAAA,UAAA,EACkB,mBAAAxL,KACX,SACF,IAAAmL,KACK,UAAA,QACA,YACF,OAAAE,KAENC,UAAAA;AAAAA,IAAAA;AAAAA,IAYAC;AAAAA,EAAAA,GAYH,GAAWvV,QAAAgK,KAAAhK,QAAAmV,KAAAnV,QAAAsV,KAAAtV,QAAAuV,KAAAvV,QAAAwV,OAAAA,MAAAxV,EAAA,EAAA;AAAAyV,MAAAA;AAAAzV,IAAAsJ,EAAAA,MAAAA,OAAAtJ,UAAAwV,OAzDbC,MAAC,qBAAA,MAAA,EAAe,WAAA,UAAgB,QAAA,QAC9BnM,UAAAA;AAAAA,IAAAA;AAAAA,IAwBAkM;AAAAA,EAAAA,EAiCF,CAAA,GAAOxV,QAAAsJ,KAAAtJ,QAAAwV,KAAAxV,QAAAyV,OAAAA,MAAAzV,EAAA,EAAA;AAAA0V,MAAAA;AAAA1V,SAAAA,EAAA,EAAA,MAAA4zB,kBAAA5zB,EAAAyV,EAAAA,MAAAA,OAAAzV,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAA6C,MAnFT6S,MAAC,oBAAA,QAAA,EACY,YAAA,QACP,IAAAzU,IAEF,QAAA4B,IAgBO+wB,yBACOA,gBAAAA,gBACP,SAAI,IACN,UAEPne,UAAAA,IAAAA,CA2DF,GAASzV,QAAA4zB,gBAAA5zB,QAAAyV,KAAAzV,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA0V,OAAAA,MAAA1V,EAAA,EAAA,GApFT0V;AAoFS;AChHN,SAAA6e,OAAAx0B,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAAu0B,MAAAA,MAAAxsB,QAAAqC,SAAAhF,MAAA/E;AAAAN,WAAAD,SACL;AAAA,IAAAiI;AAAAA,IAAAqC;AAAAA,IAAArH,MAAAwxB;AAAAA,IAAAhkB,MAAAlQ;AAAAA,IAAA,GAAA+E;AAAAA,EAAAA,IAAqEtF,OAAKC,OAAAD,OAAAC,OAAAw0B,MAAAx0B,OAAAgI,QAAAhI,OAAAqK,SAAArK,OAAAqF,MAAArF,OAAAM,OAAAk0B,OAAAx0B,EAAA,CAAA,GAAAgI,SAAAhI,EAAA,CAAA,GAAAqK,UAAArK,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA;AAAtCwQ,QAAAA,OAAAlQ,OAAoBqJ,SAAb,gBAAPrJ;AAAoBM,MAAAA;AAAAZ,WAAAw0B,QAKjD5zB,KAAA4zB,QACE,oBAAA,MAAA,EAAW,MAAA,GACV,UAAC,oBAAA,MAAA,CACH,CAAA,GAAA,GACDx0B,OAAAw0B,MAAAx0B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAqK,WAEDrJ,KAAC,oBAAA,MAAA,EAAW,OAAA,UAAe,MAAC,GAAO,KAAA,GAAa,UAAA,GACvC,UACT,QAAA,CAAA,GAAOhB,OAAAqK,SAAArK,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,YAAAgI,UAEN/G,KAAA+G,UACE,oBAAA,QAAA,EAAWA,GAAAA,QAAc,MAAAA,OAAMgsB,QAAS,SAAe,MAAAhsB,OAAMwI,QAAS,UAAA,CACxE,GAAAxQ,QAAAgI,QAAAhI,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,IAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MAAAhB,EAAA,EAAA,MAAAiB,MAbH4B,KAAA,qBAAC,QAAW,OAAA,UAAc,KAAC,GACxBjC,UAAAA;AAAAA,IAAAA;AAAAA,IAMDI;AAAAA,IAICC;AAAAA,EAAAA,GAGH,GAAOjB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,SAAAA,EAAAqF,EAAAA,MAAAA,QAAArF,UAAA6C,MAAA7C,EAAA,EAAA,MAAAwQ,QAfT1N,yBAAC,MAAK,EAAA,cAAA,IAAuB,UAAC,GAAY,UAAC,GAAQ0N,MAAUnL,GAAAA,MAC3DxC,UAAAA,GAeF,CAAA,GAAO7C,QAAAqF,MAAArF,QAAA6C,IAAA7C,QAAAwQ,MAAAxQ,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAhBP8C;AAgBO;AC1BJ,SAAA2xB,sBAAAn0B,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA+B;AAAA,IAAAy0B;AAAAA,MAAAp0B,IACpC;AAAA,IAAAsG;AAAAA,IAAAC;AAAAA,EAAA,IAAmCsjB,mBACnC;AAAA,IAAAwK;AAAAA,EAAAA,IAAkBC,qBAAqBhuB,YAAYC,YAAY,GAC/D;AAAA,IAAAguB;AAAAA,MAAyBC,UAAU;AAACl0B,MAAAA;AAAAZ,IAAA4G,CAAAA,MAAAA,cAAA5G,EAAA,CAAA,MAAA6G,gBAAA7G,EAAA60B,CAAAA,MAAAA,kBAAA70B,EAAA,CAAA,MAAA20B,WAAA30B,SAAA00B,cACF9zB,KAAAA,MAAA;AAC5B8zB,mBACFC,QAAOI,QAASL,UAAU,GAC1BG,eAAe,QAAM;AAAA,MAAAvvB,IAAOsB;AAAAA,MAAUK,MAAQJ;AAAAA,IAAAA,CAAa;AAAA,EAAC,GAE/D7G,OAAA4G,YAAA5G,OAAA6G,cAAA7G,OAAA60B,gBAAA70B,OAAA20B,SAAA30B,OAAA00B,YAAA10B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AALD,QAAAg1B,gBAAsBp0B,IAMtB;AAAA,IAAAF;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAAg1B,CAAAA,MAAAA,iBAAAh1B,SAAA00B,cAAA10B,EAAA,CAAA,MAAAU,KAK9CM,KAAA0zB,aAAU;AAAA,IAAArtB,SAEK2tB;AAAAA,IAAa/kB,MAChBvP,EAAE,qDAAqD;AAAA,EAAA,IAACiJ,QAEvD3J,OAAAg1B,eAAAh1B,OAAA00B,YAAA10B,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,YAAAU,KAIVO,KAAAP,EAAE,sCAAsC,GAACV,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAiB,MAD5C4B,KAAC,oBAAA,MAAA,EAAW,SAAU,QAAA,UACnB5B,cACH,GAAOjB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAgB,EAAAA,MAAAA,MAAAhB,UAAA6C,MAZXC,yBAAC,QAEG,EAAA,QAAA9B,IAQA,SAAA6B,IAIU,eAAA,2BACNoyB,MAAWA,aAAAA,CACjB,GAAAj1B,QAAAgB,IAAAhB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAhBF8C;AAgBE;ACnCC,SAAAoyB,+BAAA;AAAAl1B,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAAQ;AAAAA,EAAA,IAAqB0pB,mBACrB;AAAA,IAAAzpB;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAE9C21B,MAAAA,CAAAA,uBAAuB10B,UAAU;AAAC,WAAA;AAAAH,MAAAA;AAAAN,WAAAU,KAQ/BJ,KAAC,oBAAA,WAAA,EAAaI,GAAW,SAAA,+CAAA,CAAiD,GAAAV,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAAS,CAAAA,MAAAA,WAAA20B,WAAAroB,UAAA/M,EAAA,CAAA,MAAAM,MAHhFM,yBAAC,UAEG,SAAA,qBAAC,QAAW,MAAA,GAAU,QAAA,UACpBN,UAAAA;AAAAA,IAAAA;AAAAA,IAA2E;AAAA,IAC1EG,WAAU20B,WAAAroB;AAAAA,EACb,EAAA,CAAA,GAEU,eAAA,mCACNsoB,MAAAA,kBACN,GAAAr1B,EAAAS,CAAAA,IAAAA,WAAA20B,WAAAroB,QAAA/M,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GATFY;AASE;ACvBC,MAAM00B,wBAAwBC,YAAY;AAAA,EAC/C7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC,GAGYkP,uBAAuBF,YAAY;AAAA,EAC9C7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC,GCDKmP,kBAAkB,KAGXrmB,aAAa9N,OAAOC,GAAG;AAAA;AAAA;AAKJD,OAAOa,IAAI,EAAEmN,MAAM;AAAA,EACjDC,OAAO;AAAA,EACPC,WAAW;AAAA,EACXC,SAAS;AACX,CAAC;AAAA;AAAA;AAiBM,SAAAimB,wBAAAr1B,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAiC;AAAA,IAAAivB;AAAAA,IAAA0G;AAAAA,MAAAt1B,IAItC;AAAA,IAAAI;AAAAA,EAAYC,IAAAA,eAAAnB,wBAAuC,GACnDq2B,WAAiBC,aAAAA,GACjBhmB,WAAiB,uBAAuBC,MAAO,CAAA,IAC/C7F,YAAkB6rB,aAAa;AAACn1B,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACPhC,KAAA;AAAA,IAAAo1B,YAAa;AAAA,EAAA,GAAah2B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAnD,QAAAi2B,SAAe7nB,UAAUxN,EAA0B,GACnDwH,QAAcC,YACd6tB,UAAgBC,aAEhB,CAAAC,cAAAC,eAAA,IAAwC/lB,WAAc,GAEtD,CAAAgmB,MAAAC,OAAA,IAAwBjmB,SAAS,EAAE,GAEnC,CAAAkmB,UAAAC,WAAA,IAAgCnmB,YAChC,CAAAomB,oBAAAC,qBAAA,IAAoDrmB,WAAuB,GAC3E,CAAAsmB,eAAAC,gBAAA,IAA0CvmB,WAAuB;AAACtP,MAAAA;AAAA,OAAA;AAGhE,UAAA81B,YAAkB;AACd,QAAA,CAAC5sB,aAAS,CAAK+rB,QAAM;AAAAh1B,UAAAA;AAAAjB,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAAS3B,MAAAkM,GAAG2pB,SAAS,GAAC92B,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAApBgB,KAAOC;AAAa6T,YAAAA;AAAAA,IAAAA;AAAA7T,QAAAA;AAAAjB,QAAAA,SAAAi2B,OAAAvpB,cAAA1M,SAAAkK,WAAA;AAAArH,UAAAA;AAAA7C,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAIvCC,MAAAk0B,CACgBA,UAAAA,MAAKjtB,OAAAC,OACiB,EAAC+J,KAAA/E,QACD,IACrB,WAAW+nB,WAC/B92B,OAAA6C,OAAAA,MAAA7C,EAAA,CAAA;AAAA8C,UAAAA;AAAA9C,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEUE,MAAAA,MAAMqK,GAAG2pB,SAAS,GAAC92B,OAAA8C,OAAAA,MAAA9C,EAAA,CAAA,GAV3BiB,MAAAg1B,OAAMvpB,WAAAC,QAAA;AAAA,QAAAY,KAC2C,aAAarD,SAAS;AAAA,MAAA,CAAS,EAACiB,KAEpF3B,MAAI3G,GAKH,GACDuI,YAAU0rB,SAAS,GACnBtpB,aAAW1K,GAAmB,CAChC,GAAC9C,EAAA,CAAA,IAAAi2B,OAAAvpB,YAAA1M,OAAAkK,WAAAlK,OAAAiB;AAAAA,IAAA;AAAAA,YAAAjB,EAAA,CAAA;AAXIiB,SAAAA;AAAAA,EAAAA;AAcT+1B,QAAAA,gBAAsBlzB,cAjByC9C,EAiBb;AAACC,MAAAA;AAAAjB,IAAAi2B,CAAAA,MAAAA,UAAAj2B,EAAAs2B,CAAAA,MAAAA,QAAAt2B,EAAA41B,CAAAA,MAAAA,sBAAA51B,UAAAkK,aAAAlK,EAAA,EAAA,MAAAg3B,iBAAAh3B,EAAA,EAAA,MAAA61B,YAAA71B,EAAA,EAAA,MAAAoI,SAElCnH,KAAAA,MAAA;sBACK,GACpBg1B,OAAMtpB,QAAA;AAAA,MAAAY,KAEG,mBAAmBrD,SAAS;AAAA,MAAW+sB,QACpC;AAAA,MAAMC,MAAA;AAAA,QAAAZ;AAAAA,QAAAa,YAAA/kB,QAAAiZ,SAAA/S;AAAAA,QAAA0e;AAAAA,QAAA/vB,MACuD;AAAA,MAAA;AAAA,IAAM,CAC5E,EAACwD,KAAAkC,CAAA,YAAA;AAEIA,kBACEipB,sBAAoBA,sBACxBC,SAAQuB,IAAA3B,oBAAyB,GACjCrtB,MAAKsC,KAAA;AAAA,QAAAtJ,OAAc;AAAA,MAAA,CAAwB;AAAA,IAAA,CAE9C,EAACuJ,MAAA0sB,CAAA,QAAA;AAEA,YAAA5pB,aAAmB4pB,KAAGC,UAAA7pB,YACtB8pB,aAAmBF,KAAGC,UAAAJ,MAAAh2B;AAClBuM,qBAAkB,QAEpBkpB,wBAA0B,GAC1BF,YAAYc,UAAU,IAEpB9pB,eAAkB,OAGpBopB,mBAAqB,GACrBJ,YAAYc,UAAU,KAEtBnvB,MAAKsC,KAAA;AAAA,QAAAtJ,OACI;AAAA,QAA8C2C,QAC7C;AAAA,MAAA,CACT;AAAA,IAAA,CAEJ,EAACyzB,QAAA,MAAA;AAEAnB,wBAAqB;AAAA,IAAA,CACtB;AAAA,EAAA,GACJr2B,OAAAi2B,QAAAj2B,OAAAs2B,MAAAt2B,OAAA41B,oBAAA51B,QAAAkK,WAAAlK,QAAAg3B,eAAAh3B,QAAA61B,UAAA71B,QAAAoI,OAAApI,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAtCDy3B,QAAAA,WAAiBx2B,IAyC6B4B,KAAAqzB,QAAOwB;AAAW50B,MAAAA;AAAA9C,YAAAU,KAIlDoC,KAAApC,EAAE,uCAAuC,GAACV,QAAAU,GAAAV,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,YAAAU,KAIxCwD,KAAAxD,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,IAAAkvB,EAAAA,MAAAA,WAAAlvB,UAAAkE,MAFzCiC,KAAA;AAAA,IAAAkB,SACH6nB;AAAAA,IAAOjf,MACV/L;AAAAA,EACPlE,GAAAA,QAAAkvB,SAAAlvB,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAIW,QAAAoG,KAAAswB,sBAAsBE;AAAavwB,MAAAA;AAAArG,YAAAU,KACvC2F,KAAA3F,EAAE,+CAA+C,GAACV,QAAAU,GAAAV,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,IAAA,EAAA,MAAAo2B,gBAAAp2B,EAAAy3B,EAAAA,MAAAA,YAAAz3B,EAAAoG,EAAAA,MAAAA,MAAApG,UAAAqG,MAJ3CE,MAAA;AAAA,IAAAc,SACJowB;AAAAA,IAAQpd,SACR+b;AAAAA,IAAY7kB,UACXnL;AAAAA,IAAmC6J,MACvC5J;AAAAA,IAAkDmK,MAClD;AAAA,IAASvJ,MACT;AAAA,EAAA,GACPjH,QAAAo2B,cAAAp2B,QAAAy3B,UAAAz3B,QAAAoG,IAAApG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAmG,MAZKM,MAAA;AAAA,IAAAyJ,cACQ/J;AAAAA,IAGbgK,eACc5J;AAAAA,EAQhBvG,GAAAA,QAAAuG,KAAAvG,QAAAmG,IAAAnG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,YAAAU,KAMUmI,MAAAnI,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,YAAA6I,OAAtDM,MAAA,oBAAC,QAAMN,UAAgD,IAAA,CAAA,GAAO7I,QAAA6I,KAAA7I,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,IAAA42B,EAAAA,MAAAA,iBAAA52B,EAAA02B,EAAAA,MAAAA,sBAAA12B,EAAAo2B,EAAAA,MAAAA,gBAAAp2B,UAAAw2B,YAAAx2B,EAAA,EAAA,MAAAs2B,QAAAt2B,EAAA,EAAA,MAAAy3B,YAAAz3B,EAAA,EAAA,MAAAU,KAC7D0I,MAAAstB,sBAAsBE,oCACpB,MAAW,EAAA,MAAA,WAAoB,SAAC,GAAU,QAAA,GAAW,WACpD,UAAC,qBAAA,MAAA,EAAW,MAAC,GACVF,UAAAA;AAAAA,IAAAA,sBACIF,oBAAAA,UAAAA,EAAAA,UAAAA,YAAY91B,EAAE,sDAAsD,GAAC;AAAA,IAEzEk2B,iBAAa,oBAAA,UAAA,EACTJ,UAAY91B,YAAAA,EAAE,+CAA+C,EAAC,CAAA;AAAA,EAAA,GAErE,GACF,IAEA,qBAAC,SAAa,UAAkB,eAAC,GAC/B,UAAA;AAAA,IAAC,oBAAA,WAAA,EACc,aAAAA,EAAE,uDAAuD,GAC5D01B,UAAW,cACV,WAAAtrB,CAAA,MAAA;AACLA,QAACuM,QAAS,WAASogB,SAAS;AAAA,IAAA,GAEvB/B,4BACJY,aACG,UAAAnkB,CAAA,QAAA;AACArH,cAAAA,IAACunB,cAAAxxB,KAAoB;AAAA,IAAA,GAC9B;AAAA,IAGF,oBAAA,MAAA,EAAW,OAAA,SAAQ,OAAA,IAAY,MAAA,GAAI,UAAGy1B,GAAAA,KAAI7zB,MAAA,IAAAizB,eAAA,GAA6B,CAAA;AAAA,EAAA,EAC1E,CAAA,GACD11B,QAAA42B,eAAA52B,QAAA02B,oBAAA12B,QAAAo2B,cAAAp2B,QAAAw2B,UAAAx2B,QAAAs2B,MAAAt2B,QAAAy3B,UAAAz3B,QAAAU,GAAAV,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,IAAAmJ,EAAAA,MAAAA,OAAAnJ,UAAAoJ,OA/BLC,MAAC,oBAAA,YAAA,EACC,UAAC,qBAAA,OAAA,EAAa,OAAC,GACbF,UAAAA;AAAAA,IAAAA;AAAAA,IACCC;AAAAA,EAAAA,EA6BH,CAAA,EACF,CAAA,GAAapJ,QAAAmJ,KAAAnJ,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAA8P,EAAAA,MAAAA,YAAA9P,EAAA,EAAA,MAAAkvB,WAAAlvB,EAAAyG,EAAAA,MAAAA,OAAAzG,EAAA,EAAA,MAAAqJ,OAAArJ,UAAA8C,MAtDfwG,0BAAC,QACQ,EAAA,UACHwG,IAAAA,UACI,QAAAhN,IACA,QAAA2D,KAcCyoB,SACOA,gBAAAA,SAEhB7lB,UAAAA,IAkCF,CAAA,GAASrJ,QAAA8P,UAAA9P,QAAAkvB,SAAAlvB,QAAAyG,KAAAzG,QAAAqJ,KAAArJ,QAAA8C,IAAA9C,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAAAgK,MAAAA;AAAA,SAAAhK,UAAAsJ,OAAAtJ,EAAAk2B,EAAAA,MAAAA,QAAAwB,cAxDX1tB,MAAC,oBAAA,gBAAA,EAAyB,UAAA,SAAkB,SAAAnH,IAC1CyG,UAAAA,IAAAA,CAwDF,GAAiBtJ,QAAAsJ,KAAAtJ,EAAA,EAAA,IAAAk2B,QAAAwB,YAAA13B,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA,GAzDjBgK;AAyDiB;AAzId,SAAA+E,SAAA4oB,QAAA;AAAA,SA6BqBC,OAAIlwB,SAAU;AAAQ;AA7B3C,SAAAqC,QAAA6tB,MAAA;AAAA,SA4BuBA,MAAIC;AAAA;AChDlC,MAAMC,gBAAgB;AAAA,EAACzd,SAAS;AAAA,EAAMvZ,OAAO;AAAA,EAAOiD,QAAQ4F;AAAS,GAC/DouB,cAAc;AAAA,EAAC1d,SAAS;AAAA,EAAOvZ,OAAO;AAAA,EAAOiD,QAAQ;AAAM,GAC3Di0B,iBAAiB;AAAA,EAAC3d,SAAS;AAAA,EAAOvZ,OAAO;AAAA,EAAOiD,QAAQ;AAAU,GAClEk0B,gBAAgB;AAAA,EAAC5d,SAAS;AAAA,EAAOvZ,OAAO;AAAA,EAAOiD,QAAQ;AAAS,GAChEm0B,gBAAgB;AAAA,EAAC7d,SAAS;AAAA,EAAOvZ,OAAO;AAAA,EAAOiD,QAAQ;AAAS,GAGzDo0B,wBAAwBA,MAAA;AAAAn4B,QAAAA,IAAAC,EAAA,CAAA;AAAAK,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACVtC,KAAA;AAAA,IAAA01B,YAAa;AAAA,EAAA,GAAah2B,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAnD,QAAAi2B,SAAe7nB,UAAU9N,EAA0B,GACnD4J,YAAkB6rB,aAAa;AAACn1B,MAAAA;AAAA,OAAA;AAG1B,QAAA,CAACq1B,UAAM,CAAK/rB,WAAS;AAAAlJ,UAAAA;AAAAhB,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAChB5B,MAAAmM,GAAA4qB,WAAc,GAAC/3B,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAtBY,KAAOI;AAAe8T,YAAAA;AAAAA,IAAAA;AAAA9T,QAAAA;AAAAhB,MAAAi2B,CAAAA,MAAAA,UAAAj2B,SAAAkK,aAGjBlJ,MAAAo3B,kBAAkBnC,QAAQ/rB,SAAS,GAAClK,OAAAi2B,QAAAj2B,OAAAkK,WAAAlK,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAA3CY,KAAOI;AAAAA,EAAAA;AALT,QAAAq3B,qBAA2Bz3B,IAQ3B;AAAA,IAAAyZ;AAAAA,IAAAvZ;AAAAA,IAAAiD;AAAAA,EAAAA,IAAiCD,cAAcu0B,oBAAkBP,aAAe;AAAC92B,MAAAA;AAAA,SAAAhB,EAAAc,CAAAA,MAAAA,SAAAd,SAAAqa,WAAAra,EAAA,CAAA,MAAA+D,UAC1E/C,KAAA;AAAA,IAAA2f,MAAO5c;AAAAA,IAAMsW;AAAAA,IAAAvZ;AAAAA,EAAAA,GAAiBd,OAAAc,OAAAd,OAAAqa,SAAAra,OAAA+D,QAAA/D,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAA9BgB;AAA8B;AAGvC,SAASo3B,kBAAkBnC,QAAsB/rB,WAAmB;AAC3D+rB,SAAAA,OAAOvpB,WACXC,QAAgC;AAAA,IAC/BY,KAAK;AAAA,IACLd,KAAK;AAAA,EACN,CAAA,EACAtB;AAAAA,IACC3B,IAAK8uB,CAAa,aAAA;AACZ,UAAA,CAACA,YAAYA,SAAS71B,WAAW;AAC5Bs1B,eAAAA;AAIT,YAAMQ,kBAAkBD,SAASxuB,OAC9B6C,CAAYA,YAAAA,QAAQ6rB,eAAetuB,aAAayC,QAAQ1F,SAAS,MACpE,GAEMwxB,kBAAkBF,gBAAgBzkB,KAAMnH,CAAYA,YAAAA,QAAQ5I,WAAW,UAAU;AAErF00B,aAAAA,mBACAC,QAAQC,SAAS,IAAIC,KAAKH,gBAAgBI,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAK,CAAC,IAE7DZ,iBAGcO,gBAAgBzkB,KACpCnH,CAAAA,YACCA,QAAQ5I,WAAW,aACnB20B,QAAQC,SAAS,IAAIC,KAAKjsB,QAAQksB,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAM,CAAA,CAChE,IAESX,gBAGiBM,gBAAgBzkB,KACvCnH,CAAAA,YACCA,QAAQ5I,WAAW,aACnB+0B,SAASH,SAAS,IAAIC,KAAKjsB,QAAQksB,SAAS,GAAG,CAAC,GAAG,oBAAID,KAAK,CAAC,CACjE,IAE2BV,gBAAgBH;AAAAA,IAAAA,CAC5C;AAAA,IACDvqB,WAAY6pB,CACVxR,SAAAA,QAAQ/kB,MAAM,mCAAmCu2B,GAAG,GAC7ClqB,GAAG;AAAA,MAACkN,SAAS;AAAA,MAAOvZ,OAAO;AAAA,MAAMiD,QAAQ4F;AAAAA,IAAU,CAAA,EAC3D;AAAA,IACDyB,UAAU0sB,aAAa;AAAA;AAAA,EACzB;AACJ;AC3EO,SAAAiB,6BAAAz4B,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAsC;AAAA,IAAA+4B;AAAAA,EAAAA,IAAA14B,IAG3CqiB,cAAoBC,kBAEpB;AAAA,IAAAjC,MAAAsY;AAAAA,IAAA5e,SAAA6e;AAAAA,IAAAp4B,OAAAq4B;AAAAA,EAAAA,IAIIhB,sBACJ,GAAA,CAAAiB,aAAAC,cAAA,IAAsC/oB,WAAc;AAAC1P,MAAAA;AAE7Cq4B,OAAAA,sBAAsB,aAAaA,sBAAsB,cAAcG;AAD/E,QAAAE,iBAAuB14B;AAGtBI,MAAAA;AAAAhB,IAAA,CAAA,MAAA2iB,aAAAoU,SACwB/1B,KAAA2hB,aAAWoU,SAAa,CAAA,GAAA/2B,EAAA,CAAA,IAAA2iB,aAAAoU,OAAA/2B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAjD,QAAAu5B,mBAAyBv4B,IACzBw4B,eAAqBD,iBAAgB92B,WAAa,KAAI82B,iBAAgB,CAAA,EAAA7xB,SAAa,UACnF,CAAA+xB,6BAAAC,8BAAA,IAAsEppB,WAAc;AAACrP,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEpD3B,KAAA;AAAA,IAAAmU,OAAQ;AAAA,EAAA,GAAQpV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAjD25B,QAAAA,aAAmBC,cAAc34B,EAAgB,GACjD;AAAA,IAAAP;AAAAA,EAAYC,IAAAA,eAAAnB,wBAAuC,GACnDq6B,YAAkB/D,aAAa;AAAC,MAAAgE,YAAAj3B;AAAA7C,IAAAu5B,CAAAA,MAAAA,oBAAAv5B,SAAA25B,cAEhCG,aAAmBP,iBAAgB/vB,IAAAO,OAAyB,GAC9ClH,KAAA82B,WAAUI,cACPD,UAAU,EAACtwB,IAAAuF,QAG1B,GAAC/O,OAAAu5B,kBAAAv5B,OAAA25B,YAAA35B,OAAA85B,YAAA95B,OAAA6C,OAAAi3B,aAAA95B,EAAA,CAAA,GAAA6C,KAAA7C,EAAA,CAAA;AAJH,QAAA+2B,QAAcl0B;AAIXC,MAAAA;AAAA9C,WAAA+2B,SAUqBj0B,KAAA;AAAA,IAAAk3B,OAAAA,MAAiBjD,oBAAAA,UAAAA,EAAAA,UAAK,MAAA,CAAA;AAAA,EAAA,GAAK/2B,OAAA+2B,OAAA/2B,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAAkE,MAAAA;AAAAlE,WAAA85B,cAAA95B,EAAA+2B,EAAAA,MAAAA,MAAAt0B,UAC/ByB,KAAA;AAAA,IAAAxB,OAAQq0B,MAAKt0B;AAAAA,IAAAs0B,OAAgB+C;AAAAA,EAAAA,GAAW95B,OAAA85B,YAAA95B,EAAA,EAAA,IAAA+2B,MAAAt0B,QAAAzC,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,IAAA,EAAA,MAAAg5B,sBAAAh5B,EAAAU,EAAAA,MAAAA,KAAAV,EAAA8C,EAAAA,MAAAA,MAAA9C,UAAAkE,MALpDiC,KAAC,oBAAA,MAAA,EAAW,MAAA,GAAU,QAAA,UACpB,UAAC,oBAAA,WAAA,EACIzF,GACK,SAAA,sDACI,YAAAoC,IACJ,QAAAoB,IACC80B,SAAAA,mBAAAA,CAEb,EAAA,CAAA,GAAOh5B,QAAAg5B,oBAAAh5B,QAAAU,GAAAV,QAAA8C,IAAA9C,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,IAAAw5B,EAAAA,MAAAA,gBAAAx5B,EAAAs5B,EAAAA,MAAAA,kBAAAt5B,EAAAm5B,EAAAA,MAAAA,sBAAAn5B,UAAAk5B,wBAAAl5B,EAAA,EAAA,MAAAi5B,qBAAAj5B,EAAA,EAAA,MAAAU,KAAAV,EAAA,EAAA,MAAA65B,aAGPzzB,KAAAozB,gBAAgBP,qBAAsBE,CAAAA,uBAAuBD,uBAAoB;AAAA,IAAA7xB,SAElEiyB,iBAAc3vB,SAAA,MAAA;AAGjB+vB,uCAAmC,GACnCG,UAASzC,IAAA9B,qBAA0B;AAAA,IAAC;AAAA,IACrCrlB,MAEDvP,EADE44B,iBACA,mEACA,gEADgE;AAAA,IACC9oB,MACjE8oB,iBAAiB,YAAY;AAAA,IAAS/nB,UAClC+nB;AAAAA,IAActF,MAClBsF,iBAAiB,UAAO3vB;AAAAA,EAAAA,IAAYA,QAEnC3J,QAAAw5B,cAAAx5B,QAAAs5B,gBAAAt5B,QAAAm5B,oBAAAn5B,QAAAk5B,sBAAAl5B,QAAAi5B,mBAAAj5B,QAAAU,GAAAV,QAAA65B,WAAA75B,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAAmG,EAAAA,MAAAA,MAAAnG,UAAAoG,MA5BjBC,yBAAC,QAEG,EAAA,SAAAF,IAWA,QAAAC,IAiBU,eAAA,2BACN6uB,MAAWA,aACjB,CAAA,GAAAj1B,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,YAAAy5B,+BACDlzB,MAAAkzB,+BACC,oBAAC,yBACU,EAAA,SAAA,MAAMC,+BAA8B,EAAM,GAC/B,oBAAA,MAAA;qBACC,GACnBA,iCAAoC;AAAA,EAGzC,EAAA,CAAA,GAAA15B,QAAAy5B,6BAAAz5B,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,SAAAA,EAAAuG,EAAAA,MAAAA,OAAAvG,UAAAqG,MA1CHI,MACEJ,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IAiCCE;AAAAA,EAAAA,EAQA,CAAA,GACAvG,QAAAuG,KAAAvG,QAAAqG,IAAArG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GA3CHyG;AA2CG;AA1EA,SAAAsI,SAAAkrB,MAAA;AA2BDA,SAAAA,KAAIhzB,SAAU,YAAY,oBAAA,QAAA,EAAwBgzB,eAAIp5B,MAAjBo5B,GAAAA,KAAIp5B,KAAoB,IAAUo5B,KAAIp5B;AAAM;AA3BhF,SAAAkJ,QAAA6tB,MAAA;AAAA,SAuB6CA,KAAIx2B;AAAA;ACb3C84B,MAAAA,yBAAyB5U,KAAK,MAAM;AACzC/hB,QAAAA,uBAAuBkE,2BACvB;AAAA,IAAClC;AAAAA,IAAQhB;AAAAA,IAAYD;AAAAA,IAAkB61B;AAAAA,IAAgBh2B,UAAAA;AAAAA,EAAAA,IAAY+C,cAAc,GACjFkzB,oBAAoB91B,iBAAiBC,UAAU,IAAI,CAAC,EAAEe,IAEtD+0B,gBADc/1B,iBAAiBC,aAAa,CAAC,IACf,CAAC,GAC/B+1B,WAAWD,eAAe/0B,IAC1Bi1B,iBAAiB3rB,EAAQyrB,eAAe90B,QAAQi1B,KAChD1zB,gBAAgBkf,QAAQ,MACpBzgB,QAAQuB,iBAAiB2zB,WAAel1B,OAAOuB,aAAa,KAAM,MACzE,CAACvB,QAAQuB,aAAa,CAAC,GACpB;AAAA,IAACpG;AAAAA,MAAKC,eAAenB,wBAAwB,GAa7Ck7B,0BAA0B1U,QAAQ,MAAuC;AACvE2U,UAAAA,uBAAuB7zB,gBAAgB,CAAC;AAG9C,QAAI,CAACwzB,YAAY,CAACK,wBAAwB,CAAC7zB;AACzC,aAAOqG,GAAG;AAAA,QAACkN,SAAS;AAAA,MAAA,CAAM;AAG5B,UAAMnO,cAAc5E,eAAegzB,QAAQ,GACrCjd,OAAOod,WAAeE,oBAAoB,GAG1CC,oBAAoBvd,KAAKwd,UAC5BhnB,CAAyB,MAAA,OAAOA,KAAK,YAAY,UAAUA,CAC9D;AAEOinB,WAAAA;AAAAA;AAAAA,MAEL3tB,GAAG;AAAA,QAACkN,SAAS;AAAA,MAAA,CAAK;AAAA;AAAA,MAElB9W,qBACGw3B,kCACC7uB,aACC0uB,sBAAsB,KAAKvd,OAAOA,KAAK3Y,MAAM,GAAGk2B,iBAAiB,CACpE,EACCzvB;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,QAKC6vB,aAAa,GAAG;AAAA,QAChBxxB,IACE,CAAC;AAAA,UAAC7F;AAAAA,UAAOE;AAAAA,QAAAA,OAAqC;AAAA,UAC5CwW,SAAS;AAAA,UACT4gB,QAAQ;AAAA,YACNC,cAAc;AAAA,cACZv3B,OAAOA,MAAMu3B;AAAAA,cACbr3B,WAAWA,UAAUq3B;AAAAA,YACvB;AAAA,YACA1mB,UAAU2mB,IAAmBx3B,MAAMy3B,YAAYv3B,UAAUu3B,UAAUt0B,aAAa,GAC5Eu0B;AAAAA,UAAAA;AAAAA,QACN,EAEJ;AAAA,MAAA;AAAA,IAEN;AAAA,EAAA,GACC,CAAC93B,sBAAsB+2B,UAAUxzB,aAAa,CAAC,GAC5Cw0B,gBAAgBx3B,cAAc42B,yBAAyB;AAAA,IAACrgB,SAAS;AAAA,EAAA,CAAK,GAEtEkhB,wBAAwB3V,YAAY,MAAM;AAC1C0V,kBAAcjhB,WAEdihB,cAAcL,QAAQzmB,YACxB2lB,eAAe;AAAA,MACb70B,IAAIg2B,cAAcL,OAAOzmB;AAAAA,MACzBjP;AAAAA,IAAAA,CACD;AAAA,EAAA,GAEF,CAAC+1B,cAAcjhB,SAASihB,cAAcL,QAAQd,gBAAgB50B,MAAM,CAAC;AAkBxE;AAAA;AAAA,IAdE,CAAC+0B,YACD,CAACxzB;AAAAA,IAEDyzB;AAAAA,IAEAe,cAAcjhB;AAAAA;AAAAA;AAAAA,IAIb,CAACihB,cAAcL,QAAQC,aAAav3B,MAAM63B,aACzC,CAACF,cAAcL,QAAQC,aAAar3B,UAAU23B;AAAAA,IAEhDF,cAAcL,QAAQzmB,aAAa4lB,oBAEd,2BAGpB,QACC,EAAA,QACEkB,cAAcL,QAAQzmB,WAClB;AAAA,MACEnN,SAASk0B;AAAAA,MACTv4B,MAAMy4B;AAAAA,MACNxrB,MAAMvP,EAAE,oEAAoE;AAAA,IAAA,IAE9E;AAAA,MACEyV,IAAIhS;AAAAA,MACJnB,MAAMmsB;AAAAA,MACNlf,MAAMvP,EAAE,mEAAmE;AAAA,IAC7E,GAEN,eAAY,4BACZ,6BACG,MAAK,EAAA,MAAM,GAAG,QAAO,UACnB46B,UAAAA,cAAcL,QAAQzmB,WACnB9T,EAAE,sDAAsD,IACxDA,EAAE,sDAAsD,EAC9D,CAAA,GAEF,MAAMg7B,oBACN,MAAK,UACL,CAAA;AAAA;AAEN,CAAC;AAEDxB,uBAAuBnkB,cAAc;ACrJ9B,MAAM4lB,mBAAmBpG,YAAsB;AAAA,EACpD7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC;ACUM,SAAAqV,oBAAAt7B,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA6B;AAAA,IAAA47B;AAAAA,IAAAj1B;AAAAA,IAAAnG;AAAAA,MAAAH,IAKlC;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnD,CAAAs8B,cAAAC,aAAA,IAAsCzrB,WAAc,GACpD,CAAA0rB,cAAAC,aAAA,IAAsC3rB,WAAc,GACpDupB,YAAkB/D,gBAElB;AAAA,IAAAoG;AAAAA,IAAAC;AAAAA,EAAkCvH,IAAAA,qBAAqBhuB,YAAYi1B,WAASt7B,SAAW,EAAE;AAACK,MAAAA;AAAAZ,IAAAk8B,CAAAA,MAAAA,WAAAl8B,SAAA65B,aAExDj5B,KAAAA,MAAA;AAChCs7B,YAAOnH,WACPgH,gBAAkB,GAClBlC,UAASzC,IAAAuE,kBAAA;AAAA,MAAAS,qBAA6C;AAAA,IAAA,CAAU;AAAA,EACjEp8B,GAAAA,OAAAk8B,SAAAl8B,OAAA65B,WAAA75B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAAq8B,gBAAsBz7B;AAIEI,MAAAA;AAAAhB,IAAAm8B,CAAAA,MAAAA,kBAAAn8B,SAAA65B,aAEU74B,KAAAA,MAAA;AAChCm7B,mBAAcpH,WACdkH,gBAAkB,GAClBpC,UAASzC,IAAAuE,kBAAA;AAAA,MAAAS,qBAA6C;AAAA,IAAA,CAAU;AAAA,EACjEp8B,GAAAA,OAAAm8B,gBAAAn8B,OAAA65B,WAAA75B,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAAs8B,gBAAsBt7B;AAISC,MAAAA;AAAAjB,MAAAA,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAErB3B,KAAAA,MAAA,MAAA;oBAEa,GACnBg7B,gBAAmB;AAAA,EAAA,GAEtBj8B,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GALDgR,UAAU/P,EAKT,GAEG46B,aAAaA,UAASr4B,OAAS+4B,CAAAA,UAAUV,UAASr4B,GAAI;AAAC,WAAA;AAAAX,MAAAA;AAAA7C,IAAA,CAAA,MAAAS,WAAAW,SAYvCyB,KAAA;AAAA,IAAApC,YAAaA,WAAUW;AAAAA,EAAOpB,GAAAA,EAAA,CAAA,IAAAS,WAAAW,OAAApB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,IAAAU,CAAAA,MAAAA,KAAAV,UAAA6C,MAJ1CC,KAAC,oBAAA,QAAW,MAAA,GAAU,QAAA,UACpB,UAAA,oBAAC,aACIpC,GACM,SAAA,uCACD,QAAAmC,IAEZ,EAAA,CAAA,GAAO7C,OAAAU,GAAAV,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,YAAAU,KAGCwD,KAAAxD,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,YAAAU,KACjByF,KAAAzF,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,YAAAmG,MAA7DC,KAAA;AAAA,IAAAiE,SAAUlE;AAAAA,EAAmD,GAACnG,QAAAmG,IAAAnG,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAA,EAAA,MAAAq8B,iBAAAr8B,EAAA87B,EAAAA,MAAAA,gBAAA97B,EAAAkE,EAAAA,MAAAA,MAAAlE,UAAAoG,MAH9EC,KAAA,oBAAC,UACUg2B,wBACH,MAAAn4B,IACQ,cAAAkC,IACL01B,SAAW,aACpB,CAAA,GAAA97B,QAAAq8B,eAAAr8B,QAAA87B,cAAA97B,QAAAkE,IAAAlE,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,YAAAU,KAIM6F,MAAA7F,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,YAAAU,KACjC+F,MAAA/F,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,YAAAyG,OAA7DoC,MAAA;AAAA,IAAAwB,SAAU5D;AAAAA,EAAmD,GAACzG,QAAAyG,KAAAzG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,IAAA,EAAA,MAAAs8B,iBAAAt8B,EAAAg8B,EAAAA,MAAAA,gBAAAh8B,EAAAuG,EAAAA,MAAAA,OAAAvG,UAAA6I,OAH9EM,MAAA,oBAAC,UACUmzB,wBACH,MAAA/1B,KACQ,cAAAsC,KACLmzB,SAAW,aACpB,CAAA,GAAAh8B,QAAAs8B,eAAAt8B,QAAAg8B,cAAAh8B,QAAAuG,KAAAvG,QAAA6I,KAAA7I,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,SAAAA,EAAAmJ,EAAAA,MAAAA,OAAAnJ,UAAA8C,MAAA9C,EAAA,EAAA,MAAAqG,MAtBR+C,0BAAC,QAEG,EAAA,SAAC,qBAAA,MAAA,EAAW,OAAA,UAAiB,SAAA,iBAAqB,QAChDtG,UAAAA;AAAAA,IAAAA;AAAAA,IAOAuD;AAAAA,IAOA8C;AAAAA,EAMF,EAAA,CAAA,GAEU,eAAA,yBACNksB,MAAAA,iBAAAA,CACN,GAAAr1B,QAAAmJ,KAAAnJ,QAAA8C,IAAA9C,QAAAqG,IAAArG,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA,GA3BFoJ;AA2BE;AChEOozB,MAAAA,iBAAiBj7B,OAAOk7B,KAAK;AAAA,IACtC,CAAC;AAAA,EAAC16B;AAAK,MACAmX;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,qBAQUnX,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEC,QAAQ;AAAA,uBAC1ChxB,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAO9C/sB,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEC,QAAQ;AAAA,yBAC1ChxB,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMhD/sB,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEC,QAAQ;AAAA,yBAC1ChxB,MAAME,OAAO0wB,MAAM+J,QAAQ5J,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAAA;AAAA,KAIpE;AAAA,GAQU6N,aAAar8B,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAA2G;AAAAA,IAAAnG;AAAAA,IAAAW;AAAAA,EAAAd,IAAAA,IACzBs8B,cAAoBh2B,eAAenG,WAAUiH,MAC7C;AAAA,IAAAhH;AAAAA,EAAAA,IAAYC,iBAAAnB,wBAAuC;AAAC,MAEhDiB,WAAUo8B,oCAA0C;AAAA,WAAA;AAAAj8B,MAAAA;AAAAZ,IAAA,CAAA,MAAA48B,eAAA58B,EAAAS,CAAAA,MAAAA,WAAAiH,QAAA1H,EAAAS,CAAAA,MAAAA,WAAAW,SAMnDR,KAAA,CAACg8B,mCACC,MAAK,EAAA,OAAA,IAAY,SACfn8B,UAAAA,WAAUW,SAAUX,WAAUiH,MACjC,GACD1H,OAAA48B,aAAA58B,EAAA,CAAA,IAAAS,WAAAiH,MAAA1H,EAAA,CAAA,IAAAS,WAAAW,OAAApB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAEoC,QAAAgB,MAACI;AAAKH,MAAAA;AAAAjB,IAAAU,CAAAA,MAAAA,KAAAV,SAAAoB,SACxCH,KAAAG,SAASV,EAAE,6CAA6C,GAACV,OAAAU,GAAAV,OAAAoB,OAAApB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAD5D4B,yBAAC,SAAW,EAAA,IAAA,MAAK,gBAAW,IAAS,OAAA7B,IAAoB,eAAA,iCACtDC,cACH,GAAUjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAY,EAAAA,MAAAA,MAAAZ,UAAA6C,MATZC,KAAC,qBAAA,gBAAA,EAA6B,cAAA,GAAU,UACrClC,UAAAA;AAAAA,IAAAA;AAAAA,IAMDiC;AAAAA,EAAAA,EAGF,CAAA,GAAiB7C,QAAAY,IAAAZ,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAVjB8C;AAUiB,GC5Efg6B,+BAA+B,MAAO,KAAK,KAAK,KAAK;AAKpD,SAAAC,oBAAAx3B,QAAA;AAAA,QAAAvF,IAAAC,EAAA,CAAA,GACLmI,QAAcC,SAAS;AAAC,MAAA/H,IAAAM;AAAAZ,IAAAuF,CAAAA,MAAAA,UAAAvF,SAAAoI,SAId9H,KAAAA,OACJiF,OAAMiU,WACRpR,MAAKsC,KAAA;AAAA,IAAA,GAAUnF;AAAAA,IAAMgpB,UAAAuO;AAAAA,EAAyC,CAAA,GAAC,MAAA;AAG3Dv3B,WAAMiU,WACRpR,MAAKsC,KAAA;AAAA,MAAA,GACAnF;AAAAA,MAAMgpB,UAAA;AAAA,IAAA,CAGV;AAAA,EAGJ3tB,IAAAA,KAAA,CAAC2E,QAAQ6C,KAAK,GAACpI,OAAAuF,QAAAvF,OAAAoI,OAAApI,OAAAM,IAAAN,OAAAY,OAAAN,KAAAN,EAAA,CAAA,GAAAY,KAAAZ,EAAA,CAAA,IAblBgR,UAAU1Q,IAaPM,EAAe;AAAC;ACIrB,MAAMiR,iBAAkBmrB,CAAkBA,OAAAA,GAAGnrB,eAAe,GAE/CorB,WAAW74B,WAA0C,SAAArE,OAAAsE,KAAA;AAAArE,QAAAA,IAAAC,EAAA,EAAA,GAChE;AAAA,IAAA+U;AAAAA,IAAAkoB;AAAAA,MAA0Bn9B,OAE1B;AAAA,IAAAo9B;AAAAA,IAAAC;AAAAA,IAAAvB,WAAAh7B;AAAAA,IAAA0sB;AAAAA,IAAA3mB;AAAAA,IAAAC;AAAAA,IAAA0a;AAAAA,IAAAgS;AAAAA,IAAA8J;AAAAA,IAAA1sB;AAAAA,IAAA2sB;AAAAA,IAAAC;AAAAA,IAAA9S;AAAAA,IAAA+S;AAAAA,IAAAC;AAAAA,IAAA/S;AAAAA,IAAAgT;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAoBIzT,gBACJvc,GAAAA,gBAAsBU,iBACtBpL,GAAAA,WAAiBsE,oBAAoBZ,UAAU,GAC/C;AAAA,IAAAxF;AAAAA,EAAgBksB,IAAAA,iBAKhB,GAAA,CAAAuQ,YAAA,IAAuBvtB,SAAAvG,OAAmC,GAE1D+zB,WAAiBvQ,WAASwQ,qBAAAvkB,SAC1B;AAAA,IAAA9Y;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAAC,MAAAc,IAAAM;AAAAZ,WAAAU,KAOzCE,KAAAF,EAAE,+CAA+C,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAC5CM,KAAAN,EAAE,qDAAqD,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA89B,CAAAA,MAAAA,YAAA99B,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALhEC,KAAA;AAAA,IAAAqE,IACD;AAAA,IAAWvB,QACP;AAAA,IAASyV,SACRskB;AAAAA,IAAQ18B,OACVR;AAAAA,IAAkD2lB,aAC5CvlB;AAAAA,IAAwDstB,UAAA;AAAA,EAAA,GAEtEtuB,OAAA89B,UAAA99B,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAM,KAPMW,IAWT87B,oBAZ+Bz8B,EAYW;AAACuC,MAAAA;AAAA7C,IAAA4G,CAAAA,MAAAA,cAAA5G,SAAA4N,cAAAowB,QAAAh+B,EAAA6G,EAAAA,MAAAA,gBAAA7G,UAAA69B,gBAEjCh7B,KAAAA,MAAA;AACR8mB,UAAAA,MAAY/b,cAAaowB,KAAAC,eACPr3B,YAAYC,YAAY,EAACsE,KAEvC+yB,IAAAtsB,CAAA,UAAA;AACMA,YAAK3K,SAAU,cACjB42B,aAAY3B,QAASiC,qBAAqBvsB,KAAK,CAAC,GAG9CA,MAAK3K,SAAU,YACjB42B,aAAY3B,QAASkC,mBAAmBxsB,KAAK,CAAC;AAAA,IAAA,CAEjD,CACH,EAACoO,UACU;AAAC,WAAA,MAAA;AAGZ2J,UAAGC,YAAa;AAAA,IAAC;AAAA,EAAA,GAEpB5pB,OAAA4G,YAAA5G,EAAA,CAAA,IAAA4N,cAAAowB,MAAAh+B,QAAA6G,cAAA7G,QAAA69B,cAAA79B,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,IAAA,EAAA,MAAA4G,cAAA5G,EAAA4N,EAAAA,MAAAA,iBAAA5N,EAAA6G,EAAAA,MAAAA,gBAAA7G,UAAA69B,gBAAE/6B,MAAC8D,YAAYgH,eAAe/G,cAAcg3B,YAAY,GAAC79B,QAAA4G,YAAA5G,QAAA4N,eAAA5N,QAAA6G,cAAA7G,QAAA69B,cAAA79B,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAnB1DgR,UAAUnO,IAmBPC,EAAuD;AAE1Du7B,QAAAA,SAAezvB,EAAQ/N,OAAKy9B;AAAOp6B,MAAAA;AAAAlE,IAAA69B,EAAAA,MAAAA,gBAAA79B,UAAAa,SACOqD,KAAAA,MAAA;AAKxC25B,iBAAY3B,QAAA;AAAA,MAAAj1B,MACJ;AAAA,MAAUs3B,SAAA,CAAA;AAAA,MAAAnD,UAENv6B;AAAAA,IAAAA,CACX;AAAA,EACFb,GAAAA,QAAA69B,cAAA79B,QAAAa,OAAAb,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAVDw+B,QAAAA,qBAA2BC,eAAev6B,EAUzC;AAAC,MAAAiC,IAAAC;AAAApG,IAAAw+B,EAAAA,MAAAA,sBAAAx+B,UAAAq+B,UACQl4B,KAAAA,MAAA;AACJk4B,cACFG,mBAAmB;AAAA,EAGpBp4B,GAAAA,KAAA,CAACo4B,oBAAoBH,MAAM,GAACr+B,QAAAw+B,oBAAAx+B,QAAAq+B,QAAAr+B,QAAAmG,IAAAnG,QAAAoG,OAAAD,KAAAnG,EAAA,EAAA,GAAAoG,KAAApG,EAAA,EAAA,IAL/BgR,UAAU7K,IAKPC,EAA4B;AAE/B,QAAA,CAAAs4B,SAAAC,UAAA,IAA8BruB,aAAoC,GAGlE,CAAAsuB,wBAAAC,yBAAA,IAA4DvuB,WAAc;AAACjK,MAAAA;AAAArG,IAAA4+B,EAAAA,MAAAA,0BAAA5+B,EAAA,EAAA,MAAA0+B,WAAA1+B,EAAAs9B,EAAAA,MAAAA,WAAAwB,UAAAr8B,UAAAzC,UAAA2Q,SACjEtK,KAAAA,MAAA;AAGJ,KAACu4B,0BAA0BjuB,SAAK,CAAK2sB,WAASwB,UAAAr8B,UAAsBi8B,YACtEG,4BAA8B,GAC9BE,qBAAqBL,OAAO;AAAA,EAAC,GAEhC1+B,QAAA4+B,wBAAA5+B,QAAA0+B,SAAA1+B,EAAAs9B,EAAAA,IAAAA,WAAAwB,UAAAr8B,QAAAzC,QAAA2Q,OAAA3Q,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAoCuG,QAAAA,MAAA+2B,WAASwB,UAAAr8B;AAAkBgE,MAAAA;AAAAzG,IAAA,EAAA,MAAA4+B,0BAAA5+B,EAAA0+B,EAAAA,MAAAA,WAAA1+B,EAAA2Q,EAAAA,MAAAA,SAAA3Q,UAAAuG,OAA7DE,OAACm4B,wBAAwBF,SAASn4B,KAA6BoK,KAAK,GAAC3Q,QAAA4+B,wBAAA5+B,QAAA0+B,SAAA1+B,QAAA2Q,OAAA3Q,QAAAuG,KAAAvG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAPxEgR,UAAU3K,IAOPI,GAAqE;AAACoC,MAAAA;AAAA7I,YAAAqE,OAGvEwE,MAAAmO,CAAA,SAAA;AACaA,eAAAA,IAAI,GACX,OAAO3S,OAAQ,aACjBA,IAAI2S,IAAI,IACC3S,QACTA,IAAGiQ,UAAW0C;AAAAA,EAAI,GAErBhX,QAAAqE,KAAArE,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AARH,QAAAyU,SAAe5L;AAUdM,MAAAA;AAAAnJ,YAAAm9B,sBAAAn9B,EAAAo9B,EAAAA,MAAAA,kBAAAp9B,EAAA,EAAA,MAAAyqB,mBAAAzqB,UAAA4G,cAAA5G,EAAAutB,EAAAA,MAAAA,WAAA5pB,SAAA3D,UAAAutB,WAAA1pB,aAAA7D,UAAAutB,WAAA5c,SAAA3Q,UAAAuhB,gBAAAvhB,EAAAs9B,EAAAA,MAAAA,aAAAt9B,EAAA,EAAA,MAAAgV,UAAAhV,EAAA,EAAA,MAAAw9B,UAAAx9B,UAAAuzB,YAAAvzB,EAAAu9B,EAAAA,MAAAA,WAAAv9B,EAAA,EAAA,MAAA0qB,cAAA1qB,UAAA29B,yBAAA39B,EAAA09B,EAAAA,MAAAA,0BAAA19B,EAAAy9B,EAAAA,MAAAA,sBAAAz9B,EAAA,EAAA,MAAA49B,YAAA59B,UAAA69B,gBAAA79B,EAAAkD,EAAAA,MAAAA,YAAAlD,EAAA,EAAA,MAAAU,KAAAV,UAAAoB,SAAApB,EAAA,EAAA,MAAAq9B,cAwBQl0B,MAAAshB,oBAAoB,iBAAiB8C,WAAS5pB,SAAO,CAAK4pB,WAAS1pB,YAClE,oBAAC,OAAU,EAAA,IAAE,KAEX,UAAA,qBAAC,MAAW,EAAA,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAAA;AAAA,IAAC,oBAAA,SAAA,EAAQ,OAAI,GACb,CAAA;AAAA,IAAC,oBAAA,KAAA,EAAe,WAAA,GACd,8BAAC,MAAW,EAAA,OAAA,UAAS,OAAA,IAAY,MAAA,GAC9BnD,UAAE,EAAA,iCAAiC,GACtC,EACF,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA,IACE48B,cAAkB,QAAItoB,6BACvB,KAAa,EAAA,SAAC,GACb,UAAA,oBAAC,QAAMtU,UAAE,EAAA,qCAAqC,EAAE,CAAA,EAClD,CAAA,IAGE,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAA,oBAAC,YAAuBkG,EAAAA,YAAwB,YAAA02B,UAAS78B,YAAoBW,OAC7E;AAAA,IAAA,oBAAC,aAC0BmgB,EAAAA,yBAAAA,cACAsc,yBAAW,cAC3B,SAAAP,UAAS0B,SACE7B,oBACJC,gBACP,SAAAE,UAAS2B,SACP,WAAA3B,UAASwB,WACZ,QAAAxB,UAAS1b,QACd,IAAA,QACM,SAAA0b,UAAS4B,SACR3L,UACUoK,oBAAAA,uBACRH,YAAAA,QACCD,sBACD7S,YACYgT,wBAAqB,wBACzBD,oBAAAA,oBACVG,UACA16B,UAER,UAAAunB,oBAAoB,kBAAkB6S,UAAS6B,YAAS,CAAK5R,WAAS5c,OAE5D,YAAA2sB,UAAS78B,YACT48B,YAIV,OAAAC,UAASz8B;KAEX,GAELb,QAAAm9B,oBAAAn9B,QAAAo9B,gBAAAp9B,QAAAyqB,iBAAAzqB,QAAA4G,YAAA5G,EAAA,EAAA,IAAAutB,WAAA5pB,OAAA3D,EAAA,EAAA,IAAAutB,WAAA1pB,WAAA7D,EAAA,EAAA,IAAAutB,WAAA5c,OAAA3Q,QAAAuhB,cAAAvhB,QAAAs9B,WAAAt9B,QAAAgV,QAAAhV,QAAAw9B,QAAAx9B,QAAAuzB,UAAAvzB,QAAAu9B,SAAAv9B,QAAA0qB,YAAA1qB,QAAA29B,uBAAA39B,QAAA09B,wBAAA19B,QAAAy9B,oBAAAz9B,QAAA49B,UAAA59B,QAAA69B,cAAA79B,QAAAkD,UAAAlD,QAAAU,GAAAV,QAAAoB,OAAApB,QAAAq9B,YAAAr9B,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,IAAAyU,EAAAA,MAAAA,UAAAzU,UAAAmJ,OApDHC,MAAC,oBAAA,KAAA,EAAO,IAAA,QAAiByI,UAAaA,gBAAQ4C,aAC3CtL,UAAAA,IAoDH,CAAA,GAAMnJ,QAAAyU,QAAAzU,QAAAmJ,KAAAnJ,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,IAAAk9B,EAAAA,MAAAA,WAAAl9B,UAAAoJ,OAtDRC,MAAC,oBAAA,iBAAyB6zB,EAAAA,SACxB9zB,UAsDF,IAAA,CAAA,GAAkBpJ,QAAAk9B,SAAAl9B,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAA,SAAAtJ,EAAAgV,EAAAA,MAAAA,UAAAhV,UAAAqJ,OA/DpBC,MAAC,oBAAA,aACS0L,QACE,UAAA,GACE,YAAC,GACE,eAAC,GACT,QAAA,UACA,OAAA,GAEP3L,UAwDF,IAAA,CAAA,GAAYrJ,QAAAgV,QAAAhV,QAAAqJ,KAAArJ,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA,GAhEZsJ;AAgEY,CAEf;AAED,SAAS60B,qBAAqBvsB,OAAwC;AAC9D2sB,QAAAA,UAAU3sB,MAAMwtB,UAAU51B,IAAK61B,SAAQA,IAAIC,KAAK,EAAEx1B,OAAO8E,OAAO;AAE/D,SAAA;AAAA,IACL3H,MAAM;AAAA,IACNm0B,UAAUxpB,MAAM1R;AAAAA,IAChBq+B,SAASgB,oBAAoB3tB,MAAM0Z,QAAQiT,OAAO;AAAA,EACpD;AACF;AAEA,SAASH,mBAAmBxsB,OAAsC;AAC1D4tB,QAAAA,gBAAgB5tB,MAAM6tB,gBAAgBj2B,IAAK61B,SAAQA,IAAIC,KAAK,EAAEx1B,OAAO8E,OAAO,GAC5E8wB,eAAe9tB,MAAM+tB,eAAen2B,IAAK61B,CAAAA,QAAQA,IAAIC,KAAK,EAAEx1B,OAAO8E,OAAO;AAEzE,SAAA;AAAA,IACL3H,MAAM;AAAA,IACNm0B,UAAUxpB,MAAM1R;AAAAA,IAChBq+B,SAASgB,oBAAoB,UAAUC,aAAa,EAAE1E,OACpDyE,oBAAoB,SAASG,YAAY,CAC3C;AAAA,EACF;AACF;AAxNkE,SAAA31B,UAAA;AAAA,SA+B1B61B,mBAAmB;AAAC;ACpC5D,MAAMC,cAAct+B,OAAOC,GAAG,EAAE;AAAA,EAC9BotB,UAAU;AACZ,CAAC,GAEKkR,aAAWv+B,OAAOw+B,eAAe,EAAwB,CAAC;AAAA,EAACC;AAAS,MACpEA,YACK;AAAA,EAACplB,QAAQ;AAAM,IAGjB1B;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAOR,GAEY+mB,gBAAgB,SAAAlgC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAC3B;AAAA,IAAAigC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA/sB;AAAAA,IAAAgtB;AAAAA,MACEtgC,OACF;AAAA,IAAAugC;AAAAA,IAAAzE;AAAAA,IAAAj1B;AAAAA,IAAA2mB;AAAAA,IAAA5C;AAAAA,IAAA9pB;AAAAA,IAAA0/B,OAAAA;AAAAA,IAAA5vB;AAAAA,IAAAlQ;AAAAA,IAAA+/B;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAA,IAeIzW,mBACJ;AAAA,IAAA3W,WAAAC;AAAAA,EAAA,IAAqC5O,iBACrC;AAAA,IAAA2O;AAAAA,EAAoBwC,IAAAA,QACpB6qB,GAAAA,eAAqBC,aACrB;AAAA,IAAA3Q;AAAAA,EAAAA,IAAmBrE,iBAAiB,GACpC,CAAAiV,gBAAAC,gBAAA,IAA2C1wB,aAAoC,GAC/E,CAAA2wB,uBAAAC,wBAAA,IAA0D5wB,aAAoC,GAC9F6wB,uBAA6B9sB,OAAA,IAAkC,GAE/D2kB,qBAA2Bn4B,MAAKugC,aAAc,WAAW;AAAQ,MAAA9gC,IAAAM;AAAAZ,IAAAsgC,CAAAA,MAAAA,gBAAAtgC,SAAAugC,UAGzD3/B,KAAA2/B,OAAKzsB,KAAAutB,UAAgBA,KAAI/7B,OAAQg7B,YAAY,KAAKC,OAAQ,CAAA,KAAA;AAAA,IAAAt5B,MAAW;AAAA,EAAA,GAAOjH,OAAAsgC,cAAAtgC,OAAAugC,QAAAvgC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAA5EM;AADR,QAAA0gC,aAAmBhhC,IAMnBihC,gBAA0CpR,SAAQqR,cAC9CT,kBAAkBF,aAAYrvB;AACVxQ,MAAAA;AAAA,OAAA;AAAA,QAIlByS,iBAAe;AACT,YAAAxS,MAAAk/B,gBAAiB,GAAKt9B,MAAAq9B,eAAeA,mBAAoB;AAAAp9B,UAAAA;AAAA9C,QAAAiB,CAAAA,MAAAA,OAAAjB,SAAA6C,OAA1DC,MAAA,CAAC7B,KAAiB,GAAK4B,KAAmC,CAAA,GAAI7C,OAAAiB,KAAAjB,OAAA6C,KAAA7C,OAAA8C,OAAAA,MAAA9C,EAAA,CAAA,GAArEgB,KAAO8B;AAA8DgS,YAAAA;AAAAA,IAAAA;AAAA7T,QAAAA;AAAAjB,MAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGhE3B,MAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAYjB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAAnBgB,KAAOC;AAAAA,EAAAA;AALT,QAAAi8B,UAAkDl8B,IAQlDygC,iBAAuBH,WAAUr6B,SAAU;AAAMhG,MAAAA;AAAAjB,WAAAshC,WAAAhR,aAAAtwB,SAAAshC,WAAApiB,WAAAlf,SAAAshC,WAAAr6B,QAAAjH,UAAA67B,aAAA77B,EAAA4G,EAAAA,MAAAA,cAAA5G,EAAA,EAAA,MAAAutB,WAAA5pB,SAAA3D,EAAA,EAAA,MAAAutB,WAAA1pB,aAAA7D,EAAA,EAAA,MAAAS,cAAAT,UAAAa,SAElBI,KAAAA,MAAA;AAAA,QACzBqgC,WAAUr6B,SAAU,eAAeq6B,WAAUhR,WAAU;AACzD,YAAAoR,sBAA4BJ,WAAUhR;AAEpC,aAAA,oBAAC,uBACW,UAAA;AAAA,QAAA3sB,OACD4pB,WAAS5pB,SAAe;AAAA,QAAAk4B,WACpBA,aAAah7B;AAAAA,QAAK8gC,YACjB9F;AAAAA,QAASh4B,WACV0pB,WAAS1pB,aAAA;AAAA,MAEV+C,GAAAA,YACH,SAAA06B,WAAUpiB,SACPze,WACZ,CAAA;AAAA,IAAA;AAAA,WAAA;AAAA,EAAA,GAIPT,EAAA,CAAA,IAAAshC,WAAAhR,WAAAtwB,EAAA,CAAA,IAAAshC,WAAApiB,SAAAlf,EAAA,CAAA,IAAAshC,WAAAr6B,MAAAjH,QAAA67B,WAAA77B,QAAA4G,YAAA5G,EAAA,EAAA,IAAAutB,WAAA5pB,OAAA3D,EAAA,EAAA,IAAAutB,WAAA1pB,WAAA7D,QAAAS,YAAAT,QAAAa,OAAAb,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAiE6C,MAAAA;AAAA7C,YAAAiB,MAlB3C4B,KAAQ5B,GAkBmEjB,GAAAA,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAlBlG,QAAA4hC,iBAAuB/+B,IAoBvBg/B,sBAA4BC,oBAC1BlB,eAAa72B,OAEf;AAACjH,MAAAA;AAAA9C,YAAAS,cAEkBqC,KAAA4rB,kBAAkBjuB,UAAU,GAACT,QAAAS,YAAAT,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAhD,QAAA+hC,aAAmBj/B;AAA6BoB,MAAAA;AAAAlE,YAAAihC,yBAGtC/8B,KAAAA,MAAA;AACH+8B,2BAAqBe,YAC1Bf,sBAAqBe,SAAA,GAAA,CAAc;AAAA,EAAC,GACrChiC,QAAAihC,uBAAAjhC,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,IAAA4G,EAAAA,MAAAA,cAAA5G,UAAAihC,yBAAE96B,KAAA,CAACS,YAAYq6B,qBAAqB,GAACjhC,QAAA4G,YAAA5G,QAAAihC,uBAAAjhC,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAHtCgR,UAAU9M,IAGPiC,EAAmC;AAAC,MAAAC,IAAAC;AAAArG,IAAAuhC,EAAAA,MAAAA,iBAAAvhC,UAAAqgC,iCAG7Bj6B,KAAAA,MAAA;AACJm7B,qBACFlB,8BAA8BkB,aAAa;AAAA,EAE5Cl7B,GAAAA,KAAA,CAACk7B,eAAelB,6BAA6B,GAACrgC,QAAAuhC,eAAAvhC,QAAAqgC,+BAAArgC,QAAAoG,IAAApG,QAAAqG,OAAAD,KAAApG,EAAA,EAAA,GAAAqG,KAAArG,EAAA,EAAA,IAJjDgR,UAAU5K,IAIPC,EAA8C;AAAC,MAAAE,KAAAE;AAAAzG,IAAA67B,EAAAA,MAAAA,aAAA77B,UAAAogC,iBAAApgC,EAAA,EAAA,MAAAa,SAGzC4F,MAAA25B,oCAAiB,eAAqB,EAAA,OAAAvE,aAAah7B,WAAgB,MAAAb,QAAA67B,WAAA77B,QAAAogC,eAAApgC,QAAAa,OAAAb,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAA1EuG,MAAOE;AADT,QAAAw7B,gBAAsB17B,KAItB27B,gBAAsBtzB,CAAAA,EAAQ,CAAC4E,aAAamX;AAAU9hB,MAAAA;AAAA7I,IAAAshC,EAAAA,MAAAA,WAAAr6B,QAAAjH,EAAA4hC,EAAAA,MAAAA,kBAAA5hC,EAAA,EAAA,MAAA67B,aAAA77B,UAAA4G,cAAA5G,EAAAihC,EAAAA,MAAAA,yBAAAjhC,UAAAmwB,SAAAI,kBAAAvwB,UAAAyhC,kBAAAzhC,EAAAiiC,EAAAA,MAAAA,iBAAAjiC,EAAA,EAAA,MAAA2gC,aAAA3gC,UAAA0gC,cAAA1gC,EAAA,EAAA,MAAA+hC,cAAA/hC,UAAAygC,wBAAAzgC,EAAA6hC,EAAAA,MAAAA,uBAAA7hC,EAAA,EAAA,MAAAyT,mBAAAzT,UAAAk9B,WAAAl9B,EAAAwgC,EAAAA,MAAAA,aAAAvc,WAAAjkB,EAAA,EAAA,MAAAuhC,iBAAAvhC,UAAA2Q,SAAA3Q,EAAAg5B,EAAAA,MAAAA,sBAAAh5B,EAAA,EAAA,MAAAS,cAAAT,UAAAkiC,iBAK/Cr5B,OAACsnB,SAAQI,kBAAA,CAAoB2R,kBAC5B,oBAAC,aAAkB,EAAA,MAAA,GAAY,UAAA,UAC7B,UAAC,oBAAA,gBAAA,EACUX,SAAY,eACA,qBAAA;AAAA,IAAAN;AAAAA,EAAAA,GAErB,UAAC,oBAAA,yBAAA,EAAiCA,SAAAA,uBAChC,+BAAC,mCACgBA,EAAAA,eAAAA,uBACGE,kBAAAA,sBAEjBG,UAAAA;AAAAA,IAAUr6B,WAAAA,SAAU,UAAU86B,cAAcpxB,6BAC1C,qBACYkrB,EAAAA,WACCj1B,YACAnG,WAAU,CAAA;AAAA,IAIzB6gC,WAAUr6B,SAAU,UAAWw5B,CAAAA,wBAAwB9vB,SAElD6vB,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,MAAAA,CAAAA,aAAWvc,WACV,oBAAA,8BAAA,EAAiD+U,mBAAkB,CAAA;AAAA,MAEpE0H,CAAAA,cAAcC,aACb,oBAAA,uBAAA,EAAkCkB,YAAkB;0BAEtD,wBAAsB,EAAA;AAAA,0BACtB,8BAA4B,CAAA,CAAA;AAAA,IAAA,GAAG;AAAA,IAIpC,qBAAC/B,cACY,WAAArsB,mBAAuB,IACtB,eAAA,2BACPytB,+BAEL,UAAA;AAAA,MAAA,oBAAC,UACSO,EAAAA,QAAAA,gBACCvE,SACJiE,KAAAA,sBAAoB;AAAA;OAG7B;AAAA,IAECc;AAAAA,IAEiE,oBAAA,OAAA,EAAjD,eAAA,yBAA6BjB,KAAe;KAC/D,EAAA,CACF,EACF,CAAA,GACF,GACDhhC,EAAA,EAAA,IAAAshC,WAAAr6B,MAAAjH,QAAA4hC,gBAAA5hC,QAAA67B,WAAA77B,QAAA4G,YAAA5G,QAAAihC,uBAAAjhC,EAAA,EAAA,IAAAmwB,SAAAI,gBAAAvwB,QAAAyhC,gBAAAzhC,QAAAiiC,eAAAjiC,QAAA2gC,WAAA3gC,QAAA0gC,YAAA1gC,QAAA+hC,YAAA/hC,QAAAygC,sBAAAzgC,QAAA6hC,qBAAA7hC,QAAAyT,iBAAAzT,QAAAk9B,SAAAl9B,EAAA,EAAA,IAAAwgC,aAAAvc,SAAAjkB,QAAAuhC,eAAAvhC,QAAA2Q,OAAA3Q,QAAAg5B,oBAAAh5B,QAAAS,YAAAT,QAAAkiC,eAAAliC,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,IAAA,EAAA,MAAA4G,cAAA5G,EAAAqT,EAAAA,MAAAA,eAAArT,EAAAS,EAAAA,MAAAA,cAAAT,UAAAkiC,iBAEA/4B,MAAA+4B,iBACC,oBAAC,yBAAiC7uB,EAAAA,SAAAA,aAChC,UAAA,oBAAC,wBACazM,EAAAA,YACE,cAAAnG,WAAUiH,MAClB,MAAA,EAEV,CAAA,EAAA,CAAA,GACD1H,QAAA4G,YAAA5G,QAAAqT,aAAArT,QAAAS,YAAAT,QAAAkiC,eAAAliC,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAA,SAAApJ,EAAA6I,EAAAA,MAAAA,OAAA7I,UAAAmJ,OAhELC,MAAC,oBAAA,aAAA,EACC,UAAC,qBAAA,MAAA,EAAY,QAAA,QACVP,UAAAA;AAAAA,IAAAA;AAAAA,IAsDAM;AAAAA,EAAAA,EASH,CAAA,EACF,CAAA,GAAcnJ,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA,GAlEdoJ;AAkEc;AAGlB62B,cAAclqB,cAAc;AAtKC,SAAAhM,QAAAnF,QAAA;AAAA,SAwEdA,OAAKi9B;AAAA;AClHb,MAAMM,8BAA2C,CAAC,QAAQ,QAAQ,GAE5DC,2BAAkE;AAAA,EAC7EC,OAAO;AAAA,EACPC,QAAQ;AAAA,EACRC,OAAO;AAAA,EACPC,MAAM;AACR;ACMO,SAAAC,cAAA1iC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAIL;AAAA,IAAAyiC;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC5iC;AAAKO,MAAAA;AAAAN,WAAA0iC,UAI3BpiC,yBAAC,wBAA6BoiC,QAAU,GAAA1iC,OAAA0iC,QAAA1iC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAA2iC,CAAAA,MAAAA,oBAAA3iC,SAAAM,MADnDM,KAAC,oBAAA,SAAA,EACU,SAAAN,IACW6hC,oBAA0BA,6BAC9C,MAAG,IACO,WAAA,OACV,YACA,qBACkBQ,iBAClB,CAAA,GAAA3iC,OAAA2iC,kBAAA3iC,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GARFY;AAQE;AAQN,SAAAgiC,qBAAA7iC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAAyiC;AAAAA,MAAiB3iC,OACjB;AAAA,IAAA8iC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA9hC;AAAAA,IAAA0O;AAAAA,IAAAC;AAAAA,IAAAW;AAAAA,MAUIkyB,QACJ;AAAA,IAAAhiC;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnD;AAAA,IAAAyjC;AAAAA,EAAqBC,IAAAA,SACrB7+B,GAAAA,MAAYgQ,OAAA,IAAkC;AAAC/T,MAAAA;AAAAN,IAAAijC,CAAAA,MAAAA,cAAAjjC,SAAA4P,YAG7CtP,KAAAsR,CAAA,UAAA;AACMA,UAAKyF,QAAS,YAAY4rB,cAAYrzB,SAAS;AAAA,EAAA,GACpD5P,OAAAijC,YAAAjjC,OAAA4P,UAAA5P,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAIHmjC,iBAP4B7iC,EAOQ;AAACM,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACQhC,KAAAA,MAAOyD,CAAAA,IAAGiQ,OAAA,GAAStU,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAhEojC,qBAAqBH,cAAcrzB,UAAUhP,EAAmB;AAACI,MAAAA;AAAAhB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGrB5B,KAAA;AAAA,IAAA6I,UAAA;AAAA,IAAAqJ,UAAA;AAAA,EAAA,GAAmClT,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAkB,WAC3ED,KAAA,oBAAC,KAAU,EAAA,SAAY,UAAA,QAAgB,SAAC,GACtC,UAAA,oBAAC,MAAMC,EAAAA,UAAAA,QAAQ,CAAA,EACjB,CAAA,GAAMlB,OAAAkB,SAAAlB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACgCC,KAAA;AAAA,IAAA6G,WAAY;AAAA,EAAA,GAAqC1J,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,IAAA8iC,CAAAA,MAAAA,oBAAA9iC,SAAAU,KAO3EoC,KAAAggC,oBAAoBpiC,EAAE,4CAA4C,GAACV,OAAA8iC,kBAAA9iC,OAAAU,GAAAV,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,IAAA6iC,EAAAA,MAAAA,oBAAA7iC,UAAA4P,YAAA5P,EAAA,EAAA,MAAA8C,MAL3EoB,yBAACm/B,UACa,EAAA,eAAA,gCACNR,MAAe,kBACZjzB,SAAO,UACX,MAAA,SACC,MAAA9M,GACN,CAAA,GAAA9C,QAAA6iC,kBAAA7iC,QAAA4P,UAAA5P,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,IAAAgjC,EAAAA,MAAAA,qBAAAhjC,UAAAU,KAKMyF,KAAA68B,qBAAqBtiC,EAAE,6CAA6C,GAACV,QAAAgjC,mBAAAhjC,QAAAU,GAAAV,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,IAAA,EAAA,MAAA+iC,qBAAA/iC,EAAA6P,EAAAA,MAAAA,aAAA7P,EAAAmG,EAAAA,MAAAA,MAAAnG,UAAAwQ,QAJ7EpK,KAAA,oBAACi9B,YACa,eAAA,iCACNN,MAAgB,mBACblzB,SAAAA,WACH,MAAA1J,IACAqK,KAAAA,CACN,GAAAxQ,QAAA+iC,mBAAA/iC,QAAA6P,WAAA7P,QAAAmG,IAAAnG,QAAAwQ,MAAAxQ,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAAkE,EAAAA,MAAAA,MAAAlE,UAAAoG,MAfNC,KAAC,oBAAA,KAAA,EAAc,aAAa,UAAA,GAAU,OAAAxD,IACpC,+BAACygC,QAAc,EAAA,SAAC,GAAO,KAAA,GACrBp/B,UAAAA;AAAAA,IAAAA;AAAAA,IAOAkC;AAAAA,EAAAA,EAOF,CAAA,EACF,CAAA,GAAMpG,QAAAkE,IAAAlE,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAA,SAAAvG,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAqG,MArBRE,2BAAC,MAAe,EAAA,WAAA,UAAclC,KAAY,OAAArD,IACxCC,UAAAA;AAAAA,IAAAA;AAAAA,IAGAoF;AAAAA,EAAAA,EAkBF,CAAA,GAAOrG,QAAAiB,IAAAjB,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAtBPuG;AAsBO;AC7EJ,SAAAg9B,YAAAxjC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAyiC;AAAAA,EAAAA,IAAiB3iC,OACjB+P,WAAiBC,MAAM;AAACzP,MAAAA;AAAAN,IAAA,CAAA,MAAA0iC,OAAAc,UAETljC,KAAAoiC,OAAMc,UAClB,oBAAA,KAAA,EAAc,UAAA,GAAa,UAAC,GAC1Bd,UAAMc,OAAAA,OACT,CAAA,GACDxjC,EAAA,CAAA,IAAA0iC,OAAAc,QAAAxjC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAAwjC,SAAeljC,IAUmBM,KAAA8hC,OAAMe,oBAA0B,IAQrDziC,KAAA0hC,OAAM5nB,UAAAnR,SAAoB,IAAAy4B,yBAAgCM,OAAM5nB,KAAA;AAAO7Z,MAAAA;AAAAjB,IAAA,CAAA,MAAA0iC,OAAAr4B,WAE9EpJ,KAAC,oBAAA,KAAA,EAAa,SAAC,GAAGyhC,UAAMr4B,OAAAA,QAAS,CAAA,GAAMrK,EAAA,CAAA,IAAA0iC,OAAAr4B,SAAArK,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,SAAAA,EAAA,CAAA,MAAA0iC,OAAAgB,UAAA1jC,EAAA,CAAA,MAAA0iC,OAAAxT,WAAAlvB,EAAA8P,CAAAA,MAAAA,YAAA9P,EAAAwjC,CAAAA,MAAAA,UAAAxjC,EAAAY,CAAAA,MAAAA,MAAAZ,EAAAgB,CAAAA,MAAAA,MAAAhB,UAAAiB,MAb3C4B,yBAAC,qBAA4B,EAAA,SAAA,cAC3B,UAAC,oBAAA8gC,UAAA,EACC,SAAA,IAC4B,4BAAA/iC,IACpB4iC,QACA,QAAAd,OAAMgB,QACV5zB,IAAO,UAEF,SAAA4yB,OAAMxT,SAEC,gBAAAwT,OAAMxT,SACf,OAAAluB,IAEPC,UAAAA,IACF,GACF,GAAsBjB,EAAA,CAAA,IAAA0iC,OAAAgB,QAAA1jC,EAAA,CAAA,IAAA0iC,OAAAxT,SAAAlvB,OAAA8P,UAAA9P,OAAAwjC,QAAAxjC,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAftB6C;AAesB;AC5BnB,SAAA+gC,cAAA7jC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAIL;AAAA,IAAAyiC;AAAAA,IAAAC;AAAAA,EAAAA,IAAmC5iC;AAAKO,MAAAA;AAAAN,WAAA0iC,UAI3BpiC,yBAAC,wBAA6BoiC,QAAU,GAAA1iC,OAAA0iC,QAAA1iC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,EAAA2iC,CAAAA,MAAAA,oBAAA3iC,SAAAM,MADnDM,KAAC,oBAAA,SAAA,EACU,SAAAN,IACW6hC,oBAA0BA,6BAC9C,MAAG,IACO,WAAA,OACV,YACA,qBACkBQ,iBAClB,CAAA,GAAA3iC,OAAA2iC,kBAAA3iC,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GARFY;AAQE;AAQN,SAAAijC,qBAAA9jC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACE;AAAA,IAAAyiC;AAAAA,MAAiB3iC,OACjB;AAAA,IAAAsK;AAAAA,IAAA6kB;AAAAA,MAA2BwT,QAC3B;AAAA,IAAAO;AAAAA,EAAqBC,IAAAA,SACrB7+B,GAAAA,MAAYgQ,OAAA,IAAkC;AAAC/T,MAAAA;AAAAN,IAAAijC,CAAAA,MAAAA,cAAAjjC,SAAAkvB,WAG7C5uB,KAAAsR,CAAA,UAAA;AACMA,UAAKyF,QAAS,YAAY4rB,cAAY/T,QAAQ;AAAA,EAAA,GACnDlvB,OAAAijC,YAAAjjC,OAAAkvB,SAAAlvB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAIHmjC,iBAP4B7iC,EAOQ;AAACM,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACOhC,KAAAA,MAAOyD,CAAAA,IAAGiQ,OAAA,GAAStU,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAA/DojC,qBAAqBH,cAAc/T,SAAStuB,EAAmB;AAACI,MAAAA;AAAAhB,SAAAA,SAAAqK,WAEzDrJ,KAAA,oBAAA,OAAA,EAAUqD,KAAMgG,UAAQ,QAAA,CAAA,GAAMrK,OAAAqK,SAAArK,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAA9BgB;AAA8B;ACjCvC,SAAA8iC,6BAAA/jC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACE;AAAA,IAAA0G;AAAAA,MAAmB5G,OACnB;AAAA,IAAAyR;AAAAA,IAAAmM;AAAAA,MAA4BmjB,UAAU,GACtCS,gBAAsB5jB,WAAQkO,6BAAA,KAAqCra;AAAOlR,MAAAA;AAAA,SAAAN,EAAA2G,CAAAA,MAAAA,YAAA3G,SAAAuhC,iBAEnEjhC,KAAC,oBAAA,gBAAwBihC,EAAAA,SAAAA,eAAuB,SAAE,CAAA,GAAiBvhC,OAAA2G,UAAA3G,OAAAuhC,eAAAvhC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAnEM;AAAmE;AAGrE,SAAAyjC,kBAAAhkC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAyiC;AAAAA,IAAAC,kBAAAriC;AAAAA,EAAAA,IAA0CP,OAA3B4iC,mBAAAriC,OAAuBqJ,gBAAvBrJ,IACf0jC,UAAgBj0B,MAAM;AAElB2yB,MAAAA,OAAMz7B,SAAU,WAAS;AAAArG,QAAAA;AAAA,WAAAZ,EAAA0iC,CAAAA,MAAAA,UAAA1iC,SAAA2iC,oBACpB/hC,MAAC,oBAAA,eAAsB8hC,EAAAA,QAA0BC,iBAAoB,CAAA,GAAA3iC,OAAA0iC,QAAA1iC,OAAA2iC,kBAAA3iC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAArEY;AAAAA,EAAAA;AAGL8hC,MAAAA,OAAMz7B,SAAU,WAAS;AAAArG,QAAAA;AAAA,WAAAZ,EAAA0iC,CAAAA,MAAAA,UAAA1iC,SAAA2iC,oBACpB/hC,MAAC,oBAAA,eAAsB8hC,EAAAA,QAA0BC,iBAAoB,CAAA,GAAA3iC,OAAA0iC,QAAA1iC,OAAA2iC,kBAAA3iC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAArEY;AAAAA,EAAAA;AAAqE,MAG1E8hC,OAAMz7B,SAAU,YAAay7B,CAAAA,OAAMz7B,MAAK;AAAArG,QAAAA;AAAAZ,WAAAA,SAAA0iC,UAExC9hC,MAAC,oBAAA,8BAAA,EACC,UAAC,oBAAA,aAAA,EAAoB8hC,OACvB,CAAA,EAAA,CAAA,GAA+B1iC,OAAA0iC,QAAA1iC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAF/BY;AAAAA,EAAAA;AAMA8hC,MAAAA,OAAMz7B,SAAU,UAAQ;AACY,UAAArG,MAAA8hC,QAAMpS;AAAWtvB,QAAAA;AAAAhB,WAAAA,SAAAY,OAAhDI,MAAC,oBAAA,8BAAA,EAA8BJ,UAAAA,KAAkB,GAA+BZ,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAhFgB;AAAAA,EAAAA;AAIT,QAAAijC,eAA0BvB;AAG1B7c,UAAArK,KAAa,0BAA0ByoB,aAAYh9B,IAAA,EAAO;AAACrG,MAAAA;AAAAZ,IAAAikC,EAAAA,MAAAA,aAAA55B,WAAArK,EAAA,EAAA,MAAAikC,aAAAh9B,QAWtDrG,KAAAqjC,aAAY55B,WAEV,qBAAA,MAAA,EAAW,MAAC,GAAE,UAAA;AAAA,IAAA;AAAA,IACU,oBAAgC,QAAzB45B,EAAAA,UAAAA,aAAYh9B,KAAM,CAAA;AAAA,IAAO;AAAA,EAAA,EACzD,CAAA,GACDjH,EAAA,EAAA,IAAAikC,aAAA55B,SAAArK,EAAA,EAAA,IAAAikC,aAAAh9B,MAAAjH,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAAhB,SAAAA,EAAA,EAAA,MAAAgkC,WAAAhkC,EAAA,EAAA,MAAAY,MAAAZ,EAAA,EAAA,MAAAikC,aAAA/U,WAbHluB,yBAAC,QACKgjC,EAAAA,IAAM,SAED,SAAAC,aAAY/U,SAEL,gBAAA+U,aAAY/U,SACrB,OAAA,GAENtuB,UAAAA,GAMH,CAAA,GAASZ,QAAAgkC,SAAAhkC,QAAAY,IAAAZ,EAAA,EAAA,IAAAikC,aAAA/U,SAAAlvB,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GAdTgB;AAcS;ACjDAkjC,MAAAA,sBAAsB5e,KAAK,SAAAhlB,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAA6B;AAAA,IAAAkkC;AAAAA,IAAAx9B;AAAAA,IAAAg8B;AAAAA,EAAAA,IAAAriC,IASnE,CAAA8jC,aAAAC,cAAA,IAAsC/zB,WAAW;AAAC1P,MAAAA;AAAAA,OACdujC,aAAaC,WAAW;AAA5D,QAAAE,gBAAsB1jC;AAAqEI,MAAAA;AAAAhB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAE1D5B,KAAA6a,CAAA,QAAA;AAC/BwoB,mBAAexoB,GAAG;AAAA,EAAA,GACnB7b,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA2lB,eAAqB3kB;AAEf,MAAAC,IAAA4B;AAAA7C,WAAA2G,YAEuB9D,KAAA8D,SAAQ;AAAA,IAAAgf;AAAAA,EAAe,CAAA,GAAC3lB,OAAA2G,UAAA3G,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAAAiB,KAAxB4B;AAA7B,QAAAo4B,SAAeh6B;AAAiE6B,MAAAA;AAAA9C,IAAAskC,CAAAA,MAAAA,iBAAAtkC,SAAA2iC,oBAI3E7/B,KAAAwhC,iBAAiBA,cAAa5B,UAC7B,oBAAC,uBAA4B,SAAA,cAC3B,8BAAC,mBAA0B,EAAA,QAAA4B,cAAa5B,QAA2BC,kBACrE,EAAA,CAAA,GACD3iC,OAAAskC,eAAAtkC,OAAA2iC,kBAAA3iC,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAAkE,MAAAA;AAAAlE,SAAAA,EAAAi7B,CAAAA,MAAAA,UAAAj7B,SAAA8C,MALHoB,KACGpB,qBAAAA,UAAAA,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA;IAKM,CAAA,GACN9C,OAAAi7B,QAAAj7B,OAAA8C,IAAA9C,OAAAkE,MAAAA,KAAAlE,EAAA,CAAA,GAPHkE;AAOG,CAEN;AAKM,SAAAqgC,iBAAAxkC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAkkC;AAAAA,IAAA5yB;AAAAA,EAAAA,IAAiCxR,OACjCykC,WAAiBz0B,MAAM,GAEvB,CAAA4yB,kBAAA8B,mBAAA,IAAgDn0B,aAAuC;AAAC,MAAAhQ,IAAAM;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAG/EhC,KAAA;AAAA,IAAAgW,WACM;AAAA,IAASC,QAAA;AAAA,IAAA6tB,iBAAA;AAAA,EAAA,GAGrB1kC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAJMM;AADT,QAAA+jC,eAAmCrkC,IASnC;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAA,CAAA,MAAAmkC,gBAAAnkC,EAAAuR,CAAAA,MAAAA,YAAAvR,EAAAwkC,CAAAA,MAAAA,YAAAxkC,SAAAU,KAIlDM,KAAAC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA0kB;AAAAA,IAAAA,IAAA1kB;AAAc,+BACZ,YACK,EAAA,OAAGujC,QAAQ,gBAEb,QAAC,oBAAA,mBAAA,EACa,cAAA9jC,EAAE,uCAAuC,GAC3C6Q,UACE,eAAA,sBACP,MAAA,SACS,cAAA;AAAA,MAAAlH,SAAU3J,EAAE,oCAAoC;AAAA,IAAC,EAAA,CAChE,GAGD,MAAC,oBAAA,MAAA,EAAc,SAAC,GACbyjC,UAAY36B,aAAAA,IAAA,CAAAo7B,aAAA/oB,QACX,oBAAC,oBACc+oB,EAAAA,aACHrzB,UACHsK,OAAE,KAGC8J,uBADL9J,GAAAA,GACiB,CAEzB,EAAA,CACH,GAEO8oB,SAAW,cACfF,KAAAA,oBACL,CAAA;AAAA,EAAA,GACHzkC,OAAAmkC,cAAAnkC,OAAAuR,UAAAvR,OAAAwkC,UAAAxkC,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAhCH,QAAA6kC,qBAA2B7jC;AAkC1BC,MAAAA;AAAA,SAAAjB,EAAAmkC,CAAAA,MAAAA,gBAAAnkC,SAAA2iC,oBAAA3iC,EAAA,CAAA,MAAA6kC,sBAGC5jC,yBAAC,qBAAkCkjC,EAAAA,cAAgCxB,4BAEnE,mBAAA,CAAA,GAAsB3iC,OAAAmkC,cAAAnkC,OAAA2iC,kBAAA3iC,OAAA6kC,oBAAA7kC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAFtBiB;AAEsB;AAWnB,SAAA6jC,mBAAA/kC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA2kC;AAAAA,IAAArzB;AAAAA,IAAAtH;AAAAA,IAAAgO;AAAAA,MAAiDlY,OACjD;AAAA,IAAAglC;AAAAA,EAAAA,IAAmBH;AAAWtkC,MAAAA;AAAAN,IAAAiK,CAAAA,MAAAA,SAAAjK,SAAAiY,YAAAjY,EAAA,CAAA,MAAA+kC,YAEEzkC,KAAAA,MAAA;AACrB2J,aAAAA,KAAK,GACV86B,YAAUA,SAAS;AAAA,EAAA,GACxB/kC,OAAAiK,OAAAjK,OAAAiY,UAAAjY,OAAA+kC,UAAA/kC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAHD,QAAAqY,cAAoB/X;AAGW,MAAAM,IAAAI;AAAAhB,IAAA,CAAA,MAAA4kC,YAAA1iB,YAGtBlhB,KAAA4jC,YAAW1iB,WACd8iB,OAAOJ,YAAW1iB,QAAS,EAACpK,MACnB,GAAG,EAACtO,IAAAO,OACyC,IAACJ,QAC9C3J,EAAA,CAAA,IAAA4kC,YAAA1iB,UAAAliB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAJbY,KAAOI;AADT,QAAA0a,UAAgB9a,IAUCK,KAAA,UAAU2jC,YAAWK,MAAAC,QAAe,KAAK,EAAE,CAAC,IAC/CriC,KAAA0O,YAAY3C,EAAQg2B,YAAWrzB;AAAUzO,MAAAA;AAAA9C,IAAA4kC,CAAAA,MAAAA,YAAArzB,YAAAvR,EAAA,CAAA,MAAA4kC,YAAAxjC,SAM9C0B,KAAA8hC,YAAWrzB,YAAA;AAAA,IAAA4zB,cAAA;AAAA,MAAA96B,SAAsCu6B,YAAWxjC;AAAAA,IAAAA;AAAAA,EAAA,GAAQpB,EAAA,CAAA,IAAA4kC,YAAArzB,UAAAvR,EAAA,CAAA,IAAA4kC,YAAAxjC,OAAApB,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAAkE,MAAAA;AAAAlE,SAAAA,EAAA4kC,CAAAA,MAAAA,YAAA5hC,QAAAhD,EAAA,EAAA,MAAA4kC,YAAAK,SAAAjlC,EAAA4kC,EAAAA,MAAAA,YAAAp0B,QAAAxQ,EAAA,EAAA,MAAAqY,eAAArY,EAAA0b,EAAAA,MAAAA,WAAA1b,EAAA,EAAA,MAAAiB,MAAAjB,EAAA6C,EAAAA,MAAAA,MAAA7C,UAAA8C,MAR3EoB,yBAAC,UACc,EAAA,eAAAjD,IACH,UAAA4B,IACD6Y,SACH,MAAAkpB,YAAW5hC,MACRqV,SAAAA,aACH,MAAAusB,YAAWK,OACX,MAAAL,YAAWp0B,MACZ1N,GAAAA,IACL,GAAA9C,EAAA,CAAA,IAAA4kC,YAAA5hC,MAAAhD,EAAA,EAAA,IAAA4kC,YAAAK,OAAAjlC,EAAA,EAAA,IAAA4kC,YAAAp0B,MAAAxQ,QAAAqY,aAAArY,QAAA0b,SAAA1b,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GATFkE;AASE;AA3BC,SAAA6F,QAAAq7B,GAAA;AAaeA,SAAAA,EAAC1gC,MAAA,GAAA,CAAW,EAAC2gC,gBAAiBD,EAAC1gC,OAAQ;AAAC;ACpH9D,MAAM4gC,8BAA4B;AAAA,EAChCC,mBAAmB;AAAA,EACnBC,WAAW;AACb,GAGaC,eAAwCnlC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAAtD;AAAAA,IAAA+hC;AAAAA,MAAAplC,IACpD;AAAA,IAAAqlC,eAAAC;AAAAA,EAAA,IAA2Czb,mBAC3C;AAAA,IAAAlL,QAAA4mB;AAAAA,EAAAA,IAA2BjR,qBAAqBtvB,IAAI2B,IAAI,GACxD,CAAAy5B,YAAAiF,aAAA,IAAoCr1B,WAAc,GAClD,CAAAw1B,qBAAAC,oBAAA,IAAoDz1B,WAAc,GAElE;AAAA,IAAA5P;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,WAAA0lC,cAEnB9kC,KAAAA,MAAA;2BACL,GAC1B8kC,WAAW;AAAA,EAAC,GACb1lC,OAAA0lC,YAAA1lC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAAgmC,eAAqBplC;AAGLI,MAAAA;AAAAhB,IAAA6lC,CAAAA,MAAAA,YAAA7lC,SAAA0lC,cAAA1lC,EAAA,CAAA,MAAA4lC,qBAEkB5kC,KAAAA,MAAA;oBACd,GAClB+kC,uBAA0B,GAC1BH,oBAAsB,GACtBC,SAAQ9Q,QAAS,GACjB2Q,WAAW;AAAA,EAAA,GACZ1lC,OAAA6lC,UAAA7lC,OAAA0lC,YAAA1lC,OAAA4lC,mBAAA5lC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAND,QAAAimC,gBAAsBjlC;AAMuBC,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAElB3B,KAAAA,MAAA;AACzB8kC,2BAAyB;AAAA,EAAA,GAC1B/lC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAAkmC,SAAejlC;AAET4B,MAAAA;AAAA7C,IAAAsF,CAAAA,MAAAA,MAAAtF,SAAAiH,QAEiEpE,KAAA;AAAA,IAAAyC;AAAAA,IAAA2B;AAAAA,IAAAsd,YAGzD;AAAA,EACbvkB,GAAAA,OAAAsF,IAAAtF,OAAAiH,MAAAjH,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAJD,QAAA,CAAAwgC,aAAAC,oBAAA,IAA4C0F,2BAA2BtjC,EAItE,GAED8f,cAAoBC,eAAe;AAgDtB9f,MAAAA;AAAA,OAAA;AAAA,QA7CP,CAAC29B,wBAAyBD,CAAAA,aAAWvc,SAAS;AAAA/f,UAAAA;AAAAlE,gBAAAU,KAKvCwD,MAAAxD,EAAE,qBAAqB,GAACV,QAAAU,GAAAV,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA;AAAAmG,UAAAA;AAAAnG,gBAAA2iB,eAE7Bxc,MAAC,oBAAA,gCAAA,EAAuC,SAAA,mBAA+Bwc,YAAAA,CAAe,GAAA3iB,QAAA2iB,aAAA3iB,QAAAmG,OAAAA,MAAAnG,EAAA,EAAA;AAAAoG,UAAAA;AAAApG,QAAAkE,EAAAA,MAAAA,OAAAlE,UAAAmG,OANnFC,MAAA;AAAA,QAAAoK,MACC;AAAA,QAAUxN,MAAAojC;AAAAA,QAAA70B,UAAA;AAAA,QAAA0zB,OAGT/gC;AAAAA,QAAwB9C,OAE7B+E;AAAAA,MAAAA,GAEHnG,QAAAkE,KAAAlE,QAAAmG,KAAAnG,QAAAoG,OAAAA,MAAApG,EAAA,EAAA,GARD8C,KAAOsD;AAQN0O,YAAAA;AAAAA,IAAAA;AAMS,UAAA5Q,KAAAw8B,cAAc9xB,CAAQi3B,CAAAA,SAAQt0B,YAAckvB;AAAoBt6B,QAAAA;AAAAnG,cAAA6lC,SAAAt0B,YAAAvR,UAAAU,KACnEyF,KAAC0/B,SAAQt0B,YAAa7Q,EAAC4kC,4BAA2BO,SAAQt0B,QAAA,CAAU,KAAM,IAAEvR,EAAA,EAAA,IAAA6lC,SAAAt0B,UAAAvR,QAAAU,GAAAV,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,QAAAA;AAAApG,MAAA0gC,EAAAA,MAAAA,cAAA1gC,UAAAU,KAC5E0F,KAAa1F,EAAbggC,aAAe,gCAAmC,qBAAN,GAA4B1gC,QAAA0gC,YAAA1gC,QAAAU,GAAAV,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,QAAAA;AAAArG,MAAA2D,EAAAA,MAAAA,OAAAH,OAAAxD,EAAA,EAAA,MAAAgmC,gBAAAhmC,EAAA,EAAA,MAAAimC,iBAAAjmC,EAAAsF,EAAAA,MAAAA,MAAAtF,UAAA8lC,uBAAA9lC,EAAA,EAAA,MAAAiH,QAGvEZ,KAAAy/B,uBAAmB;AAAA,MAAA7+B,MACnB;AAAA,MAAQqpB,WAEZ,oBAAC3gB,8BAEQ,EAAA,QAAA,UACH,IAAAhM,OAAKH,OAAS8B,IACZ2B,MACI++B,UAAAA,cACCC,yBAAa,CAAA;AAAA,IAG7BjmC,GAAAA,EAAA,EAAA,IAAA2D,OAAAH,KAAAxD,QAAAgmC,cAAAhmC,QAAAimC,eAAAjmC,QAAAsF,IAAAtF,QAAA8lC,qBAAA9lC,QAAAiH,MAAAjH,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,QAAAA;AAAAvG,MAAA,EAAA,MAAAkE,MAAAlE,EAAAmG,EAAAA,MAAAA,MAAAnG,EAAAoG,EAAAA,MAAAA,MAAApG,UAAAqG,MApBIE,MAAA;AAAA,MAAAiK,MACC;AAAA,MAAUxN,MAAAojC;AAAAA,MAAA70B,UAENrN;AAAAA,MAAgE9C,OACnE+E;AAAAA,MAA4E8+B,OAC5E7+B;AAAAA,MAAwE8b,UACrE;AAAA,MAAY6iB,UACZmB;AAAAA,MAAMxD,QACRr8B;AAAAA,IAYP,GACFrG,QAAAkE,IAAAlE,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GArBD8C,KAAOyD;AAAAA,EAAAA;AAbFzD,SAAAA;AAiDL;AAGJ2iC,aAAaz9B,SAAS;AACtBy9B,aAAa1vB,cAAc;AC7F3B,MAAMswB,wBAAsB;AAAA,EAC1BC,YAAY;AAAA,EACZC,eAAe;AAAA,EACff,WAAW;AACb,GAGagB,uBAAgDlmC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAApD;AAAAA,IAAA8qB;AAAAA,IAAA+W;AAAAA,MAAAplC,IAO5D;AAAA,IAAA67B;AAAAA,EAAAA,IAAyBvH,qBAAqBtvB,IAAI2B,IAAI,GACtD,CAAA6+B,qBAAAC,oBAAA,IAAoDz1B,WAAc;AAAC1P,MAAAA;AAAAZ,IAAAsF,CAAAA,MAAAA,MAAAtF,SAAAiH,QACIrG,KAAA;AAAA,IAAA0E;AAAAA,IAAA2B;AAAAA,IAAAsd,YAGzD;AAAA,EACbvkB,GAAAA,OAAAsF,IAAAtF,OAAAiH,MAAAjH,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAA,CAAAwgC,aAAAC,oBAAA,IAA4C0F,2BAA2BvlC,EAItE,GACD+hB,cAAoBC,kBAEpB;AAAA,IAAAliB;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACwB,MAAAA;AAAAhB,IAAAm8B,CAAAA,MAAAA,kBAAAn8B,SAAA0lC,cAElB1kC,KAAAA,MAAA;AAClB+zB,mBAAAA,WACd2Q,WAAW;AAAA,EACZ1lC,GAAAA,OAAAm8B,gBAAAn8B,OAAA0lC,YAAA1lC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHD,QAAAimC,gBAAsBjlC;AAGUC,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEL3B,KAAAA,MAAA;AACzB8kC,2BAAyB;AAAA,EAAA,GAC1B/lC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD,QAAAkmC,SAAejlC;AAET,MAAA4B,IAAAC;AAAA9C,IAAA,CAAA,MAAAimC,iBAAAjmC,EAAA8lC,CAAAA,MAAAA,uBAAA9lC,EAAA0lC,CAAAA,MAAAA,cAAA1lC,UAAAU,KAIFoC,KAAAgjC,uBAAmB;AAAA,IAAA7+B,MACX;AAAA,IAASuJ,MACT;AAAA,IAAUZ,UACN81B;AAAAA,IAAU71B,WACTo2B;AAAAA,IAAa/kC,SACfR,EAAE,+DAA+D;AAAA,EAAC,GAC5EV,OAAAimC,eAAAjmC,OAAA8lC,qBAAA9lC,OAAA0lC,YAAA1lC,QAAAU,GAAAV,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAAA6C,KANDC;AAFJ,QAAA4/B,SAAkD7/B;AAUjDqB,MAAAA;AAAAlE,IAAA,EAAA,MAAA2iB,eAAA3iB,EAAA0iC,EAAAA,MAAAA,UAAA1iC,UAAAm8B,eAAA5qB,YAAAvR,EAAAygC,EAAAA,MAAAA,wBAAAzgC,EAAA2uB,EAAAA,MAAAA,YAAA3uB,UAAAwgC,aAAAvc,WAAAjkB,EAAA6D,EAAAA,MAAAA,aAAA7D,UAAAU,KAEcwD,KAAAA,MACT,CAACL,aAAa8qB,WAAQ,OAItB,CAAC8R,wBAAyBD,CAAAA,aAAWvc,UAAS;AAAA,IAAAzT,MAExC;AAAA,IAAUxN,MAAAyjC;AAAAA,IAAAl1B,UAAA;AAAA,IAAA0zB,OAGTvkC,EAAE,8BAA8B;AAAA,IAACU,OAEtC,oBAAC,gCAAuC,EAAA,SAAA,mBAA+BuhB,YAAW,CAAA;AAAA,EAAA,IAAI;AAAA,IAAAnS,MAMpF;AAAA,IAAUxN,MAAAyjC;AAAAA,IAAAl1B,UAEN3C,CAAQutB,CAAAA,eAAc5qB,YAAckvB;AAAAA,IAAoBr/B,OAC1D+6B,eAAc5qB,YAAA80B,sBAAiClK,eAAc5qB,QAAA,KAAe;AAAA,IAAE0zB,OAC/EvkC,EAAE,8BAA8B;AAAA,IAACqkC,UAC9BmB;AAAAA,IAAMxD;AAAAA,EAAAA,GAGnB1iC,QAAA2iB,aAAA3iB,QAAA0iC,QAAA1iC,EAAA,EAAA,IAAAm8B,eAAA5qB,UAAAvR,QAAAygC,sBAAAzgC,QAAA2uB,UAAA3uB,EAAA,EAAA,IAAAwgC,aAAAvc,SAAAjkB,QAAA6D,WAAA7D,QAAAU,GAAAV,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAOYmG,MAAAA;AAAA,SAAAnG,UAAAkE,MAjCNiC,KAAQjC,GAAAA,GAoCblE,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GApCKmG;AAoCL;AAGJqgC,qBAAqBx+B,SAAS;AAC9Bw+B,qBAAqBzwB,cAAc;ACrFnC,MAAMswB,wBAAsB;AAAA,EAC1BK,sBAAsB;AAAA,EACtBlB,WAAW;AACb,GAGamB,kBAA2CrmC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAAy+B;AAAAA,EAAAA,IAAAplC,IACvDsN,gBAAsBU,oBACtB;AAAA,IAAAs4B;AAAAA,EAAAA,IAAoBhS,qBAAqBtvB,IAAI2B,IAAI,GACjD;AAAA,IAAA4tB;AAAAA,EAAAA,IAAyBC,UACzB,GAAA,CAAA+R,eAAAC,cAAA,IAAwCx2B,WAAc;AAAC1P,MAAAA;AAAAZ,IAAAsF,CAAAA,MAAAA,MAAAtF,SAAAiH,QACgBrG,KAAA;AAAA,IAAA0E;AAAAA,IAAA2B;AAAAA,IAAAsd,YAGzD;AAAA,EACbvkB,GAAAA,OAAAsF,IAAAtF,OAAAiH,MAAAjH,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAJD,QAAA,CAAAwgC,aAAAC,oBAAA,IAA4C0F,2BAA2BvlC,EAItE,GAED;AAAA,IAAAF;AAAAA,EAAYC,IAAAA,eAAAnB,wBAAuC,GAEnDmjB,cAAoBC,eAAe;AAAC5hB,MAAAA;AAAAhB,IAAA4N,CAAAA,MAAAA,cAAAowB,QAAAh+B,EAAA,CAAA,MAAA4mC,aAAA5mC,EAAA,CAAA,MAAAsF,MAAAtF,EAAA60B,CAAAA,MAAAA,kBAAA70B,SAAA0lC,cAAA1lC,EAAA,CAAA,MAAAiH,QAETjG,iBAAA;AACzB,UAAA+lC,SAAeC,KAAK;AAEpBF,qBAAmB;AAGnB,UAAAG,mBAAyBC,eACvBt5B,cAAaowB,KAAAmJ,gBACM7hC,IAAI2B,IAAI,EAACkE,KACpBrB,OAAAC,OAA0D,CAAC,CACrE;AACA68B,cAAS7R,QAASgS,MAAM,GAAC,MAGnBE,kBACNpS,eAAe,QAAM;AAAA,MAAAvvB,IAAOyhC;AAAAA,MAAM9/B;AAAAA,IAAO,CAAA,GAEzCy+B,WAAW;AAAA,EACZ1lC,GAAAA,EAAA,CAAA,IAAA4N,cAAAowB,MAAAh+B,OAAA4mC,WAAA5mC,OAAAsF,IAAAtF,OAAA60B,gBAAA70B,OAAA0lC,YAAA1lC,OAAAiH,MAAAjH,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAlBD,QAAAkmC,SAAellC;AA6CFC,MAAAA;AAAA,OAAA;AAAA,QAxBP,CAACw/B,wBAAyBD,CAAAA,aAAWvc,SAAS;AAAAphB,UAAAA;AAAA7C,gBAAAU,KAIvCmC,MAAAnC,EAAE,wBAAwB,GAACV,QAAAU,GAAAV,QAAA6C,OAAAA,MAAA7C,EAAA,EAAA;AAAA8C,UAAAA;AAAA9C,gBAAA2iB,eAEhC7f,MAAC,oBAAA,gCAAA,EAAuC,SAAA,sBAAkC6f,YAAAA,CAAe,GAAA3iB,QAAA2iB,aAAA3iB,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA;AAAAkE,UAAAA;AAAAlE,QAAA6C,EAAAA,MAAAA,OAAA7C,UAAA8C,OALtFoB,MAAA;AAAA,QAAAlB,MAAAoH;AAAAA,QAAAmH,UAAA;AAAA,QAAA0zB,OAGEpiC;AAAAA,QAA2BzB,OAEhC0B;AAAAA,MAAAA,GAEH9C,QAAA6C,KAAA7C,QAAA8C,KAAA9C,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA,GAPDiB,KAAOiD;AAON4Q,YAAAA;AAAAA,IAAAA;AAKS,UAAAjS,KAAAgkC,iBAAiBj4B,CAAQg4B,CAAAA,UAASr1B,YAAckvB;AAAoB39B,QAAAA;AAAA9C,MAAA6mC,EAAAA,MAAAA,iBAAA7mC,UAAAU,KACvEoC,KAAgBpC,EAAhBmmC,gBAAkB,mCAAsC,wBAAN,GAA+B7mC,QAAA6mC,eAAA7mC,QAAAU,GAAAV,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,QAAAA;AAAAlE,cAAA4mC,UAAAr1B,YAAAvR,UAAAU,KACjFwD,KAAA0iC,UAASr1B,WAAY7Q,EAAC2lC,sBAAqBO,UAASr1B,QAAA,CAAU,IAAI,IAAEvR,EAAA,EAAA,IAAA4mC,UAAAr1B,UAAAvR,QAAAU,GAAAV,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,QAAAA;AAAAnG,MAAA,EAAA,MAAAkmC,UAAAlmC,EAAA6C,EAAAA,MAAAA,MAAA7C,EAAA8C,EAAAA,MAAAA,MAAA9C,UAAAkE,MAJtEiC,KAAA;AAAA,MAAAnD,MAAAoH;AAAAA,MAAAmH,UAEK1O;AAAAA,MAAoEoiC,OACvEniC;AAAAA,MAAiF1B,OACjF8C;AAAAA,MAAoE6gC,UACjEmB;AAAAA,IAAM,GACjBlmC,QAAAkmC,QAAAlmC,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GANDiB,KAAOkF;AAAAA,EAAAA;AAZFlF,SAAAA;AA2BL;AAGJ0lC,gBAAgB3+B,SAAS;AACzB2+B,gBAAgB5wB,cAAc;AAlE0B,SAAAhM,QAAAe,GAAA;AAAA,SAwB5BA,EAACqjB,OAAQ,eAAerjB,EAAC7D,SAAU;AAAS;ACjCjE,MAAMmgC,uBAAgD9mC,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAAogC;AAAAA,IAAA3B;AAAAA,MAAAplC,IAC5D;AAAA,IAAAq0B;AAAAA,EAAAA,IAAkBC,qBAAqBtvB,IAAI2B,IAAI,GAC/C2K,QAAcmc,0BAA0BzoB,IAAI2B,IAAI,GAChD;AAAA,IAAA4tB;AAAAA,EAAyBC,IAAAA,UACzB9G,GAAAA,YAAkB3Z,OAAOzC,KAAK,GAC9B,CAAAk0B,qBAAAC,oBAAA,IAAoDz1B,WAAc,GAClE;AAAA,IAAA5P;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAA0lC,CAAAA,MAAAA,cAAA1lC,SAAA20B,WAAA30B,EAAA,CAAA,MAAAqnC,YAElBzmC,KAAAA,MAAA;AACzBm0B,YAAAA,QAASsS,QAAS,GACzB3B,WAAW;AAAA,EAAA,GACZ1lC,OAAA0lC,YAAA1lC,OAAA20B,SAAA30B,OAAAqnC,UAAArnC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAAimC,gBAAsBrlC;AAGa,MAAAI,IAAAC;AAAAjB,IAAA,CAAA,MAAA4R,SAAA5R,EAAAsF,CAAAA,MAAAA,MAAAtF,EAAA60B,CAAAA,MAAAA,kBAAA70B,SAAAiH,QAKzBjG,KAAAA,MAAA;AACJ,KAAC4Q,SAASA,UAAUoc,UAAS1Z,YAE7B1C,MAAK3K,SAAU,aAAa2K,MAAKuc,OAAQ,aAC3C0G,eAAe,QAAM;AAAA,MAAAvvB;AAAAA,MAAA2B;AAAAA,IAAAA,CAAY,GAGnC+mB,UAAS1Z,UAAW1C;AAAAA,EAAAA,GACnB3Q,MAAC2Q,OAAOtM,IAAIuvB,gBAAgB5tB,IAAI,GAACjH,OAAA4R,OAAA5R,OAAAsF,IAAAtF,OAAA60B,gBAAA70B,OAAAiH,MAAAjH,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IARpCgR,UAAUhQ,IAQPC,EAAiC;AAAC4B,MAAAA;AAAA7C,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEVC,KAAAA,MAAA;AACzBkjC,2BAAyB;AAAA,EAAA,GAC1B/lC,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAFD,QAAAkmC,SAAerjC;AAETC,MAAAA;AAAA,OAAA;AAAA,QAGAgjC,qBAAmB;AAAA5hC,UAAAA;AAAAlE,gBAAAU,KAMVwD,MAAAxD,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA;AAAAmG,UAAAA;AAAAnG,QAAAimC,EAAAA,MAAAA,iBAAAjmC,UAAA0lC,cAAA1lC,EAAA,EAAA,MAAAkE,OALvCiC,KAAA;AAAA,QAAAc,MACC;AAAA,QAASuJ,MACT;AAAA,QAAUZ,UACN81B;AAAAA,QAAU71B,WACTo2B;AAAAA,QAAa/kC,SACfgD;AAAAA,MAAAA,GACVlE,QAAAimC,eAAAjmC,QAAA0lC,YAAA1lC,QAAAkE,KAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAND8C,KAAOqD;AAMN2O,YAAAA;AAAAA,IAAAA;AAGH,SAAA;AAAA,EAAA;AAXF,QAAA4tB,SAAiD5/B,IAcjDwkC,oBAA0BD,aAAa,YACvCE,mBAAyBF,aAAQ19B;AAAczF,MAAAA;AAAA,OAAA;AAAA,QAGzCqjC,kBAAgB;AAClB,WAAA;AAAWxyB,YAAAA;AAAAA,IAAAA;AAAA5O,QAAAA;AAAAnG,cAAAU,KAIJyF,KAAAzF,EAAE,sBAAsB,GAACV,QAAAU,GAAAV,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAI9BoG,UAAAA,KAAAkhC,oBACI,mDACA;AAAwBjhC,QAAAA;AAAArG,MAAAU,EAAAA,MAAAA,KAAAV,UAAAoG,MAHvBC,KAAA3F,EACL0F,EAGF,GAACpG,QAAAU,GAAAV,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,QAAAA;AAAAvG,MAAA,EAAA,MAAA0iC,UAAA1iC,EAAAsnC,EAAAA,MAAAA,qBAAAtnC,EAAAmG,EAAAA,MAAAA,MAAAnG,UAAAqG,MARIE,MAAA;AAAA,MAAA0+B,OACE9+B;AAAAA,MAAyBqK,MAC1B;AAAA,MAASu0B,UACLmB;AAAAA,MAAM9kC,OACTiF;AAAAA,MAINrD,MAAAwkC;AAAAA,MAAA9E;AAAAA,MAAAnxB,UAGS+1B;AAAAA,IAAiB,GAC5BtnC,QAAA0iC,QAAA1iC,QAAAsnC,mBAAAtnC,QAAAmG,IAAAnG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAZDkE,KAAOqC;AAAAA,EAAAA;AALFrC,SAAAA;AAkBqD;AAG9DkjC,qBAAqBp/B,SAAS;AAC9Bo/B,qBAAqBrxB,cAAc;ACtE5B,MAAM0xB,oBAAoBlS,YAAmC;AAAA,EAClE7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC,GCKK+e,4BAAyE;AAAA,EAC7EoC,mBAAmB;AAAA,EACnBC,mBAAmB;AAAA,EACnBrB,YAAY;AAAA,EACZd,WAAW;AACb;AAEA,SAASrqB,kBACPpO,QACA66B,aACAlnC,GACA;AACIqM,SAAAA,WAAW,uBAAuB66B,cAC5B,oBAAA,kBAAA,EAAiB,aAA4B,IAEhDlnC,EAAE4kC,0BAA0Bv4B,MAAM,CAAC;AAC5C;AAEA,SAAA86B,iBAAAvnC,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAA0B;AAAA,IAAA2nC;AAAAA,MAAAtnC,IACxB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACIhC,KAAA;AAAA,IAAAknC,mBAAA;AAAA,EAAA,GAAyB9nC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAjF+nC,QAAAA,qBAA2BC,gBAAgBJ,aAAahnC,EAAyB;AAACI,MAAAA;AAAAhB,IAAAU,CAAAA,MAAAA,KAAAV,SAAA+nC,sBACpE/mC,KAAAN,EAAE,4CAA0C;AAAA,IAAAqnC;AAAAA,EAAAA,CAAsB,GAAC/nC,OAAAU,GAAAV,OAAA+nC,oBAAA/nC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,SAAAgB,MAA1EC,mCAAOD,cAAoE,GAAOhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAlFiB;AAAkF;AAKpF,MAAMgnC,gBAAyCloC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACpD;AAAA,IAAAqF;AAAAA,IAAA2B;AAAAA,IAAA0nB;AAAAA,IAAAhrB;AAAAA,IAAAE;AAAAA,EAAAA,IAA+C9D,OAC/C,CAAAmoC,cAAAC,eAAA,IAAwC73B,aAAgD,GACxF;AAAA,IAAA4rB;AAAAA,EAAkBtH,IAAAA,qBAAqBtvB,IAAI2B,IAAI,GAC/CmhC,mBAAyBC,oBAAoB/iC,IAAI2B,IAAI,GACrDqhC,YAAkBC,aAAajjC,IAAI2B,IAAI,GACvC;AAAA,IAAAuhC;AAAAA,IAAA5hC;AAAAA,IAAAC;AAAAA,EAAAA,IAA+DsjB,gBAAgB,GAC/EoD,YAAkBkb,aAAa7hC,YAAYC,YAAY,GACvD;AAAA,IAAAnG;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAAutB,CAAAA,MAAAA,WAAA5pB,SAAA3D,EAAA,CAAA,MAAAutB,WAAA1pB,aAElCvD,KAAAitB,WAAS5pB,SAAW4pB,WAAS1pB,aAAiB,CAAA7D,GAAAA,EAAA,CAAA,IAAAutB,WAAA5pB,OAAA3D,EAAA,CAAA,IAAAutB,WAAA1pB,WAAA7D,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAhE,QAAAqnC,WAAkB/mC,GAA8Cg+B;AAAM19B,MAAAA;AAAAZ,IAAA,CAAA,MAAAooC,iBAAA/K,cAE1Cz8B,KAAAwnC,iBAAgB/K,WAAArwB,KAAA07B,uBAAwC,GAAC1oC,EAAA,CAAA,IAAAooC,iBAAA/K,YAAAr9B,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAArF,QAAA2oC,sBAA4B/nC,IAE5B,CAAAgoC,kBAAAC,mBAAA,IAAgDv4B,WAAuB,GACvEw4B,YAAkBR,UAASQ,WAC3BC,eAAqBX,iBAAgBW;AAAa/nC,MAAAA;AAAAhB,IAAAsF,CAAAA,MAAAA,MAAAtF,SAAAiH,QACqBjG,KAAA;AAAA,IAAAsE;AAAAA,IAAA2B;AAAAA,IAAAsd,YAGzD;AAAA,EACbvkB,GAAAA,OAAAsF,IAAAtF,OAAAiH,MAAAjH,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAJD,QAAA,CAAAwgC,aAAAC,oBAAA,IAA4C0F,2BAA2BnlC,EAItE,GAED2hB,cAAoBC,eAAe;AAAC3hB,MAAAA;AAAAjB,IAAA2oC,CAAAA,MAAAA,uBAAA3oC,SAAAk8B,QAAA3qB,YAAAvR,EAAA6D,EAAAA,MAAAA,aAAA7D,UAAAU,KAGtBO,KAAAi7B,QAAO3qB,WACjB4J,kBAAkB+gB,QAAO3qB,WAAY1N,aAAe,IAAAmlC,YAActoC,CAAC,KAAK,KACxEioC,sBACEjoC,EAAE,0CAA0C,IAC5C,IAAEV,OAAA2oC,qBAAA3oC,EAAA,CAAA,IAAAk8B,QAAA3qB,UAAAvR,QAAA6D,WAAA7D,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAJRoB,QAAAA,QAAcH,IAMdgoC,WAAiBr6B,CAAQjL,CAAAA;AAAMd,MAAAA;AAAA7C,YAAAk8B,WAEDr5B,KAAAA,MAAA;AACrBkyB,YAAAA,QAAAA,GACPoT,gBAAgB,YAAY;AAAA,EAAC,GAC9BnoC,QAAAk8B,SAAAl8B,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAHD,QAAAkpC,YAAkBrmC;AAGLC,MAAAA;AAAA9C,IAAA,EAAA,MAAAkpC,aAAAlpC,EAAA,EAAA,MAAA2oC,uBAAA3oC,EAAA,EAAA,MAAA8oC,aAAA9oC,EAAA4oC,EAAAA,MAAAA,oBAAA5oC,EAAAqnC,EAAAA,MAAAA,YAAArnC,EAAAooC,EAAAA,MAAAA,iBAAAW,gBAAA/oC,EAAAooC,EAAAA,MAAAA,iBAAAf,YAEHvkC,KAAAA,MAAA;AAER,UAAAqmC,qBACEf,iBAAgBW,iBAAuB,MAAIX,iBAAgBf,aAAcA;AAEvE,KAACuB,oBAAoBE,cAAcK,uBAIlCR,uBACHO,UAEFL,GAAAA,sBAAyB;AAAA,EAAA,GAC1B7oC,QAAAkpC,WAAAlpC,QAAA2oC,qBAAA3oC,QAAA8oC,WAAA9oC,QAAA4oC,kBAAA5oC,QAAAqnC,UAAArnC,EAAA,EAAA,IAAAooC,iBAAAW,cAAA/oC,EAAA,EAAA,IAAAooC,iBAAAf,UAAArnC,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,IAAA,EAAA,MAAAkpC,aAAAlpC,EAAA2oC,EAAAA,MAAAA,uBAAA3oC,UAAA8oC,aAAA9oC,EAAA,EAAA,MAAA+oC,gBAAA/oC,EAAA4oC,EAAAA,MAAAA,oBAAA5oC,EAAAqnC,EAAAA,MAAAA,YAAArnC,EAAA,EAAA,MAAAooC,iBAAAW,gBAAA/oC,EAAAooC,EAAAA,MAAAA,iBAAAf,YAAEnjC,MACD4kC,WACAI,WACAP,qBACAC,kBACAR,iBAAgBf,UAChBA,UACA0B,cACAX,iBAAgBW,YAAA,GACjB/oC,QAAAkpC,WAAAlpC,QAAA2oC,qBAAA3oC,QAAA8oC,WAAA9oC,QAAA+oC,cAAA/oC,QAAA4oC,kBAAA5oC,QAAAqnC,UAAArnC,EAAA,EAAA,IAAAooC,iBAAAW,cAAA/oC,EAAA,EAAA,IAAAooC,iBAAAf,UAAArnC,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GAtBDgR,UAAUlO,IAaPoB,EASF;AAACiC,MAAAA;AAAAnG,IAAAipC,EAAAA,MAAAA,YAAAjpC,UAAAkoC,gBAEQ/hC,KAAAA,MAAA;AACRijC,UAAAA,aAAmBlB,iBAAiB,iBAAiBe,UAErDziC,YAAkB4iC,aAAa,cAAkB,MAEjD39B,SAAcqF,WAAA,MAAA;AACZq3B,sBAAgB3hC,SAAS;AAAA,IAAA,GAFb4iC,aAAuB,MAAA,GAG7B;AACKr4B,WAAAA,MAAAA,aAAatF,MAAK;AAAA,EAChCzL,GAAAA,QAAAipC,UAAAjpC,QAAAkoC,cAAAloC,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,IAAAwoC,EAAAA,MAAAA,eAAAxoC,UAAAipC,YAAAjpC,EAAA,EAAA,MAAAkoC,gBAAE9hC,KAACoiC,CAAAA,aAAaN,cAAce,QAAQ,GAACjpC,QAAAwoC,aAAAxoC,QAAAipC,UAAAjpC,QAAAkoC,cAAAloC,QAAAoG,MAAAA,KAAApG,EAAA,EAAA,GATxCgR,UAAU7K,IASPC,EAAqC;AAExC,QAAAyzB,YAAkB/D,aAAa;AAACzvB,MAAAA;AAAArG,IAAAkpC,EAAAA,MAAAA,aAAAlpC,UAAA2D,OAAAy9B,cAAAphC,EAAA6D,EAAAA,MAAAA,aAAA7D,EAAA,EAAA,MAAAqnC,YAAArnC,EAAAsoC,EAAAA,MAAAA,UAAAQ,aAAA9oC,EAAA,EAAA,MAAA65B,aAAA75B,EAAAooC,EAAAA,MAAAA,iBAAAW,gBAAA/oC,EAAAooC,EAAAA,MAAAA,iBAAAf,YAELhhC,KAAAA,MAAA;AACzBwzB,cAASzC,IAAAqQ,mBAAA;AAAA,MAAA4B,sBAAA,CACgB1lC,OAAKy9B;AAAAA,MAAAkI,qBACP16B,CAAQ/K,CAAAA;AAAAA,IAC9B,CAAA,GAECykC,UAASQ,aACTV,iBAAgBW,gBAChBX,iBAAgBf,aAAcA,WAE9BwB,sBAAwB,IAExBK,UAAU;AAAA,EAAA,GAEblpC,QAAAkpC,WAAAlpC,EAAA,EAAA,IAAA2D,OAAAy9B,YAAAphC,QAAA6D,WAAA7D,QAAAqnC,UAAArnC,EAAA,EAAA,IAAAsoC,UAAAQ,WAAA9oC,QAAA65B,WAAA75B,EAAA,EAAA,IAAAooC,iBAAAW,cAAA/oC,EAAA,EAAA,IAAAooC,iBAAAf,UAAArnC,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAdD,QAAAkmC,SAAe7/B;AAsFFE,MAAAA;AAAA,OAAA;AAAA,QA5DPooB,UAAQ;AAAAloB,UAAAA;AAAAzG,gBAAAU,KAID+F,OAAA/F,EAAE,gCAAgC,GAACV,QAAAU,GAAAV,QAAAyG,QAAAA,OAAAzG,EAAA,EAAA;AAAA6I,UAAAA;AAAA7I,gBAAAU,KACnCmI,OAAAnI,EAAE,kCAAkC,GAACV,QAAAU,GAAAV,QAAA6I,QAAAA,OAAA7I,EAAA,EAAA;AAAAmJ,UAAAA;AAAAnJ,QAAAyG,EAAAA,MAAAA,QAAAzG,UAAA6I,QAJvCM,OAAA;AAAA,QAAAqH,MACC;AAAA,QAASxN,MAAAumC;AAAAA,QAAAtE,OAERx+B;AAAAA,QAAmCrF,OACnCyH;AAAAA,QAAqC0I,UAAA;AAAA,MAAA,GAE7CvR,QAAAyG,MAAAzG,QAAA6I,MAAA7I,QAAAmJ,QAAAA,OAAAnJ,EAAA,EAAA,GANDuG,MAAO4C;AAMN2L,YAAAA;AAAAA,IAAAA;AAAA,QAGC,CAAC2rB,wBAAyBD,CAAAA,aAAWvc,SAAS;AAAAxd,UAAAA;AAAAzG,gBAAA2iB,eACzClc,OAAA;AAAA,QAAA+J,MACC;AAAA,QAASxN,MAAAumC;AAAAA,QAAAtE,OAER;AAAA,QAAS7jC,OAEd,oBAAC,gCAAuC,EAAA,SAAA,oBAAgCuhB,aAAe;AAAA,QAAApR,UAAA;AAAA,MAG1FvR,GAAAA,QAAA2iB,aAAA3iB,QAAAyG,QAAAA,OAAAzG,EAAA,EAAA,GARDuG,MAAOE;AAQNqO,YAAAA;AAAAA,IAAAA;AAGH,UAAAvD,WAAiB3C,CAAAA,EACfg6B,oBACErb,WAASwQ,qBAAAvkB,WACT0uB,iBAAiB,gBACjBA,iBAAiB,eACjBS,uBACAzM,QAAO3qB,WAIC9K,MAAA8K,YAAYkvB;AAAoB53B,QAAAA;AAAA7I,MAAA4oC,EAAAA,MAAAA,oBAAA5oC,UAAAkoC,gBAAAloC,EAAA,EAAA,MAAAU,KAIxCmI,MACInI,EADJwnC,iBAAiB,cACX,mCACFU,oBAAoBV,iBAAiB,eACjC,iCACA,4BAH8B,GAGDloC,QAAA4oC,kBAAA5oC,QAAAkoC,cAAAloC,QAAAU,GAAAV,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,QAAAA;AAAAnJ,MAAA,EAAA,MAAA4oC,oBAAA5oC,EAAAkoC,EAAAA,MAAAA,gBAAAloC,EAAAU,EAAAA,MAAAA,KAAAV,UAAAoB,SAKhC+H,MAAAy/B,mBACHloC,EAAE,wBAAwB,IAC1BwnC,iBAAiB,eAAeA,iBAAiB,sBAE/C9mC,OAAKpB,QAAA4oC,kBAAA5oC,QAAAkoC,cAAAloC,QAAAU,GAAAV,QAAAoB,OAAApB,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AACDoJ,UAAAA,MAAAmI,YAAYq3B,0BAA0B;AAAYv/B,QAAAA;AAAArJ,MAAAkmC,EAAAA,MAAAA,UAAAlmC,EAAA,EAAA,MAAAyG,OAAAzG,EAAA6I,EAAAA,MAAAA,OAAA7I,EAAA,EAAA,MAAAmJ,OAAAnJ,UAAAoJ,OAnBvDC,MAAA;AAAA,MAAAkI,UACK9K;AAAAA,MAAgC+J,MACpC;AAAA,MAASy0B,OAGbp8B;AAAAA,MAIqC7F,MAAAumC;AAAAA,MAAAnoC,OAKhC+H;AAAAA,MAII+Y,UACD9Y;AAAAA,MAAkD27B,UAClDmB;AAAAA,IACXlmC,GAAAA,QAAAkmC,QAAAlmC,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA,GArBDuG,MAAO8C;AAAAA,EAAAA;AAhCF9C,SAAAA;AAmEL;AAGJ0hC,cAAcjgC,SAAS;AACvBigC,cAAclyB,cAAc;AC7M5B,MAAMswB,sBAAsB;AAAA,EAC1BE,eAAe;AAAA,EACff,WAAW;AAAA,EACXkC,mBAAmB;AACrB,GAGa8B,kBAA2CA,CAAC;AAAA,EACvDlkC;AAAAA,EACA2B;AAAAA,EACAtD;AAAAA,EACA+hC;AAAAA,EACA/W;AACF,MAAM;AACE,QAAA;AAAA,IAAC8a;AAAAA,MAAa7U,qBAAqBtvB,IAAI2B,IAAI,GAC3C,CAAC6+B,qBAAqBC,oBAAoB,IAAIz1B,SAAS,EAAK,GAC5D,CAACkwB,aAAaC,oBAAoB,IAAI0F,2BAA2B;AAAA,IACrE7gC;AAAAA,IACA2B;AAAAA,IACAsd,YAAY;AAAA,EAAA,CACb,GACK5B,cAAcC,kBACd;AAAA,IAACliB;AAAAA,MAAKC,eAAenB,wBAAwB,GAE7CwmC,eAAepgB,YAAY,MAAM;AAChB,yBAAA,EAAK,GAC1B8f,WAAW;AAAA,KACV,CAACA,UAAU,CAAC,GAETO,gBAAgBrgB,YAAY,MAAM;AACtCmgB,yBAAqB,EAAK,GAC1B0D,UAAU1U,QAAAA,GACV2Q,WAAW;AAAA,EAAA,GACV,CAACA,YAAY+D,SAAS,CAAC,GAEpB/G,SAAgD1c,QAAQ,MACxD8f,sBACK;AAAA,IACL7+B,MAAM;AAAA,IACNioB,SAASwW;AAAAA,IACTr7B,SACE;AAAA,MAACsF;AAAAA,MAAA;AAAA,QACC,IAAIhM,OAAOH,OAAO8B;AAAAA,QAClB;AAAA,QAEA,QAAO;AAAA,QACP,UAAU0gC;AAAAA,QACV,WAAWC;AAAAA,MAAAA;AAAAA,IAAAA;AAAAA,EAAc,IAM1B,MACN,CAACtiC,OAAO2B,IAAI0gC,cAAcC,eAAeH,qBAAqBJ,YAAYz+B,IAAI,CAAC;AAE3E+e,SAAAA,QAAQ,MACT2I,WACK,OAGL,CAAC8R,wBAAwB,CAACD,aAAavc,UAClC;AAAA,IACLzT,MAAM;AAAA,IACNxN,MAAM0mC;AAAAA,IACNzE,OAAO;AAAA,IACP7jC,OACE,oBAAC,gCAA+B,EAAA,SAAQ,sBAAqB,aAC9D;AAAA,IACDmQ,UAAU;AAAA,EAAA,IAIP;AAAA,IACLf,MAAM;AAAA,IACNxN,MAAM0mC;AAAAA,IACNn4B,UAAU3C,CAAQ66B,CAAAA,UAAUl4B,YAAakvB;AAAAA,IACzCwE,OAAOvkC,EAAE,wBAAwB;AAAA,IACjCU,OAAOqoC,UAAUl4B,WAAW7Q,EAAE2lC,oBAAoBoD,UAAUl4B,QAAQ,CAAC,IAAI;AAAA,IACzEwzB,UAAUA,MAAMgB,qBAAqB,EAAI;AAAA,IACzCrD;AAAAA,EACF,GACC,CACD/f,aACA+f,QACAjC,sBACA9R,UACA6R,aAAavc,SACbvjB,GACA+oC,UAAUl4B,QAAQ,CACnB;AACH;AAEAi4B,gBAAgBxhC,SAAS;AACzBwhC,gBAAgBzzB,cAAc;ACrF9B,MAAM4zB,gCAAgCrkB,KAAK,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAGzC;AAAA,IAAAsR;AAAAA,IAAAq4B;AAAAA,IAAAC;AAAAA,MAAqC9pC,OACrC;AAAA,IAAA+pC;AAAAA,MAA2B3f,gBAAgB;AAAC,MAAA4f,kBAAAC;AAAAhqC,WAAA6pC,UAC5C,CAAAE,kBAAA,GAAAC,gBAAA,IAAgDH,QAAM7pC,OAAA6pC,QAAA7pC,OAAA+pC,kBAAA/pC,OAAAgqC,qBAAAD,mBAAA/pC,EAAA,CAAA,GAAAgqC,mBAAAhqC,EAAA,CAAA;AACtD,QAAA,CAAAiqC,eAAAC,gBAAA,IAA0C55B,aAAuC;AAAChQ,MAAAA;AAAA,OAAA;AAAA,QAI5E,CAACypC,oBAAqB,CAACA,iBAAgB3oC,SAAA,CAAW2oC,iBAAgB7nB,UAAU;AAAE,WAAA;AAAWpN,YAAAA;AAAAA,IAAAA;AAAAlU,QAAAA;AAAAZ,MAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAG9EhC,MAAA;AAAA,MAAAsS,UAAA;AAAA,IAAA,GAAelT,OAAAY,OAAAA,MAAAZ,EAAA,CAAA;AAAAgB,QAAAA;AAAAhB,MAAA,CAAA,MAAA+pC,iBAAA3oC,SACzBJ,MAAA+oC,iBAAgB3oC,SAAU,oBAAC,MAAW,EAAA,MAAC,GAAG2oC,UAAAA,iBAAgB3oC,MAAO,CAAA,GAAOpB,EAAA,CAAA,IAAA+pC,iBAAA3oC,OAAApB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,MAAA,CAAA,MAAA+pC,iBAAA7nB,YACxEjhB,MAAA8oC,iBAAgB7nB,YACf,oBAAC,SACa,EAAA,eAAA,+BACF,UAAC,GACJ,OAAA;AAAA,MAAAgF,WAAA;AAAA,MAAAD,cAAA;AAAA,IAAA,GACD,MAAA+d,OAAO+E,iBAAgB7nB,QAAS,EAACpK,MAC9B,GAAG,EAACtO,IAAAO,OACuD,EAEvE,CAAA,GAAA/J,EAAA,CAAA,IAAA+pC,iBAAA7nB,UAAAliB,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA;AAAA6C,QAAAA;AAAA7C,MAAAgB,CAAAA,MAAAA,OAAAhB,SAAAiB,OAXH4B,MAAA,qBAAC,QAAY,OAAAjC,KAAuB,OAAA,UAAc,KAAC,GAChDI,UAAAA;AAAAA,MAAAA;AAAAA,MACAC;AAAAA,IAAAA,EAUH,CAAA,GAAOjB,OAAAgB,KAAAhB,OAAAiB,KAAAjB,QAAA6C,OAAAA,MAAA7C,EAAA,EAAA,GAbTM,KACEuC;AAAAA,EAAAA;AAJJ,QAAA8U,iBAAuBrX,IAsBlBM,KAAAkpC,oBAAoBA,iBAAgBK;AAAanpC,MAAAA;AAAAhB,IAAAuR,EAAAA,MAAAA,YAAAvR,UAAA+pC,oBAAA/pC,EAAA,EAAA,MAAA2X,kBACjD3W,KAAA+oC,oBACE,oBAAA,eAAA,EAAuB,SAAE,KACxB,UAAA,oBAAC,SAAkB,EAAA,UAAA,CAACpyB,gBAAyBA,SAAa,gBAAa,WAAA,OACrE,8BAAC,OACC,EAAA,UAAA,oBAAC,QACc,EAAA,eAAA,UAAUrB,oBAAoByzB,iBAAgB9E,KAAM,CAAC,IACxD,UAAA1zB,YAAY3C,CAAAA,CAAQm7B,iBAAgBx4B,UACxC,MAAAw4B,iBAAgB/mC,MAEb,SAAA+mC,iBAAgBhF,UACpBmF,KAAe,kBACf,MAAA,SACC,MAAAH,iBAAgB9E,OAChB,MAAA8E,iBAAgBv5B,QAAS,WAAS,EAE5C,CAAA,EACF,CAAA,EACF,CAAA,GACDxQ,QAAAuR,UAAAvR,QAAA+pC,kBAAA/pC,QAAA2X,gBAAA3X,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAAjB,IAAAuR,EAAAA,MAAAA,YAAAvR,UAAAgqC,oBAAAhqC,EAAA,EAAA,MAAA4pC,YACA3oC,KAAA2oC,YAAYI,iBAAgBvnC,SAAA,yBAC1B,kBAA+BunC,EAAAA,gCAA4Bz4B,SAC7D,CAAA,GAAAvR,QAAAuR,UAAAvR,QAAAgqC,kBAAAhqC,QAAA4pC,UAAA5pC,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,IAAAiqC,EAAAA,MAAAA,iBAAAjqC,UAAA+pC,oBACAlnC,KAAAknC,oBAAoBA,iBAAgBrH,UAClC,oBAAA,mBAAA,EAA0B,QAAAqH,iBAAgBrH,QAA2BuH,kBAAY,cACnF,CAAA,GAAAjqC,QAAAiqC,eAAAjqC,QAAA+pC,kBAAA/pC,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,SAAAA,EAAA,EAAA,MAAAY,MAAAZ,EAAAgB,EAAAA,MAAAA,MAAAhB,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAA6C,MA1BHC,0BAAC,MAAW,EAAA,OAAA,UAAc,KAAA,GACvBlC,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,IAmBAC;AAAAA,IAGA4B;AAAAA,EAGH,EAAA,CAAA,GAAO7C,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GA3BP8C;AA2BO,CAEV,GAEYsnC,2BAA2B9kB,KAAK,WAAA;AAAAtlB,QAAAA,IAAAC,EAAA,EAAA,GAC3C;AAAA,IAAAga,SAAAowB;AAAAA,IAAA5f;AAAAA,IAAA7jB;AAAAA,IAAA2mB;AAAAA,MAAsEpD,gBAAgB;AAAC,MAAA7pB,IAAAM;AAAAZ,WAAAqqC,cAS9EzpC,KAAAypC,cAAgB,CAAArqC,GAAAA,OAAAqqC,YAAArqC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MAAjBI,KAACJ,GAAgBkJ,OAAAiF,QAA6C,GAAC/O,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAA/DU;AADR,QAAAiZ,UAAgB3Z;AAGfW,MAAAA;AAAAjB,IAAA,CAAA,MAAAia,QAAAxX,UAAAzC,EAAA,CAAA,MAAAyqB,mBAAAzqB,EAAA,CAAA,MAAA4G,cAKC3F,KAAA4B,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAAgnC;AAAAA,IAAAA,IAAAhnC;AACC,WAAA,oBAAC,+BACW,EAAA,UAAA4nB,oBAAoB,aAIpB,UAAAxQ,QAAOxX,SAAA,GACTonC,OAAAA,GAEHjjC,UACL;AAAA,EAAA,GACH5G,EAAA,CAAA,IAAAia,QAAAxX,QAAAzC,OAAAyqB,iBAAAzqB,OAAA4G,YAAA5G,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAdH,QAAAsqC,iCAAuCrpC;AAkBnCgZ,MAAAA,QAAOxX,WAAA,MAAkB8qB;AAAS,WAAA;AAAA1qB,MAAAA;AAAA,SAAA7C,EAAAia,CAAAA,MAAAA,WAAAja,SAAAutB,aAAAvtB,EAAA,EAAA,MAAAsqC,kCAKpCznC,KAAA,oBAAC,+BAGUoX,SACIsT,wBACP,OAAA,WAEwB,UAChC,gCAAA,GAA8BvtB,OAAAia,SAAAja,OAAAutB,WAAAvtB,QAAAsqC,gCAAAtqC,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAR9B6C;AAQ8B,CAEjC,GAEY0nC,0BAA0BjlB,KAAK,WAAA;AAAAtlB,QAAAA,IAAAC,EAAA,EAAA,GAC1C;AAAA,IAAAga;AAAAA,IAAAwQ;AAAAA,IAAA8C;AAAAA,IAAAqT;AAAAA,EAAAA,IAA6DzW,gBAAgB,GAK7Ekd,WAFgBvF,oBAAoBlB,eAAa5xB,QAA0B,GAEnD1J,MAAQ,IAChCiM,YAAkBgc,WAAS5pB,SAAW4pB,WAAS1pB,aAAW,CAAA,GAAMy6B,SAAW+I;AAAQ,MAAA/mC,IAAAM;AAAAZ,WAAAutB,aAC3C3sB,KAAA2sB,aAAe,CAAAvtB,GAAAA,OAAAutB,WAAAvtB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAqnC,CAAAA,MAAAA,YAAArnC,SAAAY,MAApBI,KAAA;AAAA,IAAA,GAAKJ;AAAAA,IAAeymC;AAAAA,EAAAA,GAAYrnC,OAAAqnC,UAAArnC,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAM,KAAhCU;AAAnC,QAAAonB,cAAoB9nB;AAAwE,MAAAW,IAAA4B;AAAA7C,WAAAia,WAGtDpX,KAAAoX,WAAa,CAAAja,GAAAA,OAAAia,SAAAja,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,WAAA6C,MAAdC,KAACD,GAAaiH,OAAA0gC,eAAwB,EAAC9lC,MAAA,EAAS,GAAC1E,OAAA6C,IAAA7C,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA,GAAAiB,KAAjD6B;AAArC,QAAA2nC,iBAAuBxpC;AAA2EiD,MAAAA;AAAAlE,IAAAyqB,CAAAA,MAAAA,mBAAAzqB,UAAAuR,YAKhGrN,KAAAiC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA0jC;AAAAA,IAAAA,IAAA1jC;AACC,WAAA,oBAAC,iCACW,UAAAskB,oBAAoB,eAAe7b,CAAQ2C,CAAAA,UAC3C,UAAI,IACNs4B,OACR,CAAA;AAAA,EACH7pC,GAAAA,OAAAyqB,iBAAAzqB,QAAAuR,UAAAvR,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AATHsqC,QAAAA,iCAAuCpmC,IAgBtBiC,KAAAiiB;AAAkBhiB,MAAAA;AAAA,SAAApG,EAAAyqC,EAAAA,MAAAA,kBAAAzqC,UAAAsqC,kCAAAtqC,EAAA,EAAA,MAAAmG,MAFjCC,KAAC,oBAAA,6BAAA,EACUqkC,SAAa,gBACT,aAAAtkC,IACP,OAAA,WAEwB,UAChC,+BAAA,CAAA,GAA8BnG,QAAAyqC,gBAAAzqC,QAAAsqC,gCAAAtqC,QAAAmG,IAAAnG,QAAAoG,MAAAA,KAAApG,EAAA,EAAA,GAN9BoG;AAM8B,CAEjC;AAEM,SAASokC,gBACdxiC,QACyD;AAClDA,SAAAA,OAAOA,WAAWo/B,qBAAqBp/B;AAChD;AAvJ2C,SAAA+B,QAAAq7B,GAAA;AAsBjBA,SAAAA,EAAC1gC,UAAW,EAAC2gC,YAAa,IAAID,EAAC1gC,MAAA,CAAQ,EAACgmC,YAAa;AAAC;AAuCnC,SAAA37B,SAAA/G,QAAA;AAUIwiC,SAAAA,CAAAA,gBAAgBxiC,MAAM;AAAC;AAuC5B,SAAAgH,SAAApK,QAAA;AAAA,SAIoBA,OAAK+lC;AAAA;ACnI9D,SAAAC,qBAAA;AAAA5qC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAqgC;AAAAA,IAAA5X;AAAAA,IAAA6X,OAAAA;AAAAA,EAAuCpW,IAAAA,gBAAAA,GACvC0gB,aAAmB,GAAGniB,OAAO;AAAUpoB,MAAAA;AAAA,MAAAN,EAAA,CAAA,MAAAsgC,gBAAAtgC,EAAA0oB,CAAAA,MAAAA,WAAA1oB,EAAA6qC,CAAAA,MAAAA,cAAA7qC,SAAAugC,QAAA;AAAA3/B,QAAAA;AAAAZ,MAAAsgC,CAAAA,MAAAA,gBAAAtgC,SAAA0oB,WAAA1oB,EAAA,CAAA,MAAA6qC,cAIxBjqC,MAAAA,CAAAygC,MAAAp3B,UACR,oBAAA,mBAAA,EACO,MAAAo3B,KAAIr+B,MACN,IAAA,GAAG0lB,OAAO,OAAO2Y,KAAI/7B,EAAA,IACf,UAAAg7B,iBAAiBe,KAAI/7B,IAExB,OAAA+7B,KAAIjgC,OACCypC,YACJ,QAAA5gC,UAAK,WAAiBo3B,KAAI/7B,MAAA,KAH7B+7B,GAAAA,KAAI/7B,EAIT,GACHtF,OAAAsgC,cAAAtgC,OAAA0oB,SAAA1oB,OAAA6qC,YAAA7qC,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAVAM,KAAAigC,OAAK/2B,IAAK5I,GAUV,GAACZ,OAAAsgC,cAAAtgC,OAAA0oB,SAAA1oB,OAAA6qC,YAAA7qC,OAAAugC,QAAAvgC,OAAAM;AAAAA,EAAA;AAAAA,SAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,SAAAA,SAAAM,MAXJM,KAAC,oBAAA,SAAA,EAAe,OAAA,GACbN,UAWH,GAAA,CAAA,GAAUN,OAAAM,IAAAN,QAAAY,MAAAA,KAAAZ,EAAA,EAAA,GAZVY;AAYU;AAId,SAAAkqC,kBAAA/qC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAA,MAAA+C,MAAAsC,IAAAylC,UAAA9F,OAAA5/B,MAAAwlC,YAAAG;AAAAhrC,WAAAD,SAQE;AAAA,IAAAiD;AAAAA,IAAAsC;AAAAA,IAAAylC;AAAAA,IAAA9F;AAAAA,IAAA4F;AAAAA,IAAAG;AAAAA,IAAA,GAAA3lC;AAAAA,EAAiEtF,IAAAA,OAAKC,OAAAD,OAAAC,OAAAgD,MAAAhD,OAAAsF,IAAAtF,OAAA+qC,UAAA/qC,OAAAilC,OAAAjlC,OAAAqF,MAAArF,OAAA6qC,YAAA7qC,OAAAgrC,WAAAhoC,OAAAhD,EAAA,CAAA,GAAAsF,KAAAtF,EAAA,CAAA,GAAA+qC,WAAA/qC,EAAA,CAAA,GAAAilC,QAAAjlC,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA,GAAA6qC,aAAA7qC,EAAA,CAAA,GAAAgrC,SAAAhrC,EAAA,CAAA;AACtE,QAAA;AAAA,IAAA2Q;AAAAA,IAAA4c;AAAAA,EAAA,IAA2BpD,mBAC3B;AAAA,IAAA8gB;AAAAA,MAAkB/jC,cAAc;AAAC5G,MAAAA;AAAAN,IAAAirC,CAAAA,MAAAA,WAAAjrC,SAAAgrC,UACD1qC,KAAAA,MAAM2qC,QAAQD,MAAM,GAAChrC,OAAAirC,SAAAjrC,OAAAgrC,QAAAhrC,QAAAM,MAAAA,KAAAN,EAAA,EAAA;AAArDqY,QAAAA,cAAoB/X,IAMNM,KAAC+P,CAAAA,SAAU4c,CAAAA,WAAS5pB,SAAO,CAAK4pB,WAAS1pB;AAAW7C,MAAAA;AAAA,SAAAhB,EAAA,EAAA,MAAAqY,eAAArY,EAAA,EAAA,MAAAgD,QAAAhD,EAAA,EAAA,MAAAsF,MAAAtF,EAAA+qC,EAAAA,MAAAA,YAAA/qC,EAAAilC,EAAAA,MAAAA,SAAAjlC,EAAAqF,EAAAA,MAAAA,QAAArF,EAAAY,EAAAA,MAAAA,MAAAZ,UAAA6qC,cAHhE7pC,KAAC,oBAAA,KAAA,EAAG,GACEqE,MACWwlC,iBAAS,YACd,UAAAjqC,IACJoC,MACFsC,IACG2/B,OACE5sB,sBACC0yB,UAAAA,SACV,CAAA,GAAA/qC,QAAAqY,aAAArY,QAAAgD,MAAAhD,QAAAsF,IAAAtF,QAAA+qC,UAAA/qC,QAAAilC,OAAAjlC,QAAAqF,MAAArF,QAAAY,IAAAZ,QAAA6qC,YAAA7qC,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GATFgB;AASE;AC9CC,SAAAkqC,sBAAA;AAAAlrC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAwqB;AAAAA,IAAAhqB;AAAAA,IAAAW;AAAAA,IAAAmsB;AAAAA,EAAAA,IAAwDpD,mBACxDhqB,gBAAsBotB,WAAS5pB,SAAW4pB,WAAS1pB,WACnD2pB,aAAmB5e,CAAQzO,CAAAA;AAAcG,MAAAA;AAAAN,IAAAG,CAAAA,MAAAA,iBAAAH,SAAAS,cAAAT,EAAA,CAAA,MAAAwtB,cAEFltB,KAAA;AAAA,IAAAkZ,SAC5BgU;AAAAA,IAAU/sB;AAAAA,IAAAI,OAEZV;AAAAA,EAAAA,GACRH,OAAAG,eAAAH,OAAAS,YAAAT,OAAAwtB,YAAAxtB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAA;AAAA,IAAAc;AAAAA,IAAAD;AAAAA,EAAAA,IAAuBE,yBAAgBT,EAItC,GACD;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAE/CirB,MAAAA,oBAAoB,gBAAY,CAAK+C,YAAU;AAAA5sB,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAC1ChC,MAAA,oBAAA,UAAA,CAAA,CAAA,GAAKZ,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAALY;AAAAA,EAAAA;AAAK,MAGVQ,OAAK;AAAAR,QAAAA;AAAA,WAAAZ,SAAAoB,SACAR,MAAA,oBAAA,UAAA,mBAAQ,GAAIZ,OAAAoB,OAAApB,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAZY;AAAAA,EAAAA;AAAY,MAAA,CAGhBT,eAAa;AAIES,UAAAA,MAAAH,YAAUW,SAAWX,YAAUiH;AAAM1G,QAAAA;AAAAhB,MAAAU,CAAAA,MAAAA,KAAAV,SAAAY,OADlDI,MAAAN,EAAE,wCAAsC;AAAA,MAAAD,YAC3BG;AAAAA,IAAAA,CACb,GAACZ,OAAAU,GAAAV,OAAAY,KAAAZ,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA;AAAAiB,QAAAA;AAAAjB,WAAAA,UAAAgB,OAHJC,KACGD,oBAAAA,UAAAA,EAAAA,UAAAA,KAEC,GACDhB,QAAAgB,KAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAJHiB;AAAAA,EAAAA;AAIG,MAIHH,OAAK;AAAAF,QAAAA;AAAAZ,cAAAc,MAAAI,WAAAlB,UAAAU,KACGE,MAAAF,EAAE,0CAAwC;AAAA,MAAAI,OAAUA,MAAKI;AAAAA,IAAAA,CAAS,GAAClB,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAU,GAAAV,QAAAY,OAAAA,MAAAZ,EAAA,EAAA;AAAAgB,QAAAA;AAAAhB,WAAAA,UAAAY,OAAtEI,MAAGJ,oBAAAA,UAAAA,EAAAA,UAAAA,KAAmE,GAAIZ,QAAAY,KAAAZ,QAAAgB,OAAAA,MAAAhB,EAAA,EAAA,GAA1EgB;AAAAA,EAAAA;AAA0EJ,MAAAA;AAAAZ,YAAAU,KAAAV,EAAAa,EAAAA,MAAAA,OAAAO,SAK9ER,KAAAC,OAAKO,SACJ,oBAEO,UAFM,OAAA;AAAA,IAAAC,OAAQ;AAAA,EAAA,GAClBX,YAAE,2CAA2C,EAAA,CAChD,GACDV,QAAAU,GAAAV,EAAA,EAAA,IAAAa,OAAAO,OAAApB,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAAAgB,MAAAA;AAAA,SAAAhB,UAAAY,MALHI,KAAA,oBAAA,UAAA,EACGJ,cAIA,GACAZ,QAAAY,IAAAZ,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA,GANHgB;AAMG;ACRA,MAAMmqC,sBAAsB7lB,KACjClhB,WAAW,SACTgnC,QACA/mC,KACA;AACM,QAAA;AAAA,IAACmd;AAAAA,MAAa4pB,QACd;AAAA,IACJnxB,SAASowB;AAAAA,IACT9c;AAAAA,IACA8d;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACA9pB;AAAAA,IACAhhB;AAAAA,IACAgqB;AAAAA,IACA8V,OAAAA;AAAAA,IACAiL;AAAAA,EACF,IAAIrhB,mBACE;AAAA,IAACgG;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAAC7hB;AAAAA,IAAO9F,UAAAA;AAAAA,IAAUsnC;AAAAA,EAAgB,IAAIvkC,iBACtC;AAAA,IAAC+S,SAASsH;AAAAA,EAAgBmqB,IAAAA,gBAC1B,GAAA,CAAC/I,kBAAkB8B,mBAAmB,IAAIn0B,SAA6B,IAAI,GAI3E2J,UAAU+L,QACd,OAAOqkB,cAAc,CAAA,GAAIvgC,OAAQ9B,CAAW,WAAA,CAACwiC,gBAAgBxiC,MAAM,CAAC,GACpE,CAACqiC,UAAU,CACb,GAEMtkB,YAAYC,QAChB,MACE1E,iBAAiB;AAAA,IAACa,eAAekpB;AAAAA,IAAc9pB;AAAAA,IAAcC;AAAAA,IAAWC;AAAAA,EAAe,CAAA,GACzF,CAAC4pB,cAAc9pB,cAAcE,gBAAgBD,SAAS,CACxD,GAEMmqB,kBAAkB3lB,QAAQ,MAAMD,UAAUjc,OAAOoX,gBAAgB,GAAG,CAAC6E,SAAS,CAAC,GAC/EG,mBAAmBF,QAAQ,MAAMD,UAAUjc,OAAOsX,mBAAmB,GAAG,CAAC2E,SAAS,CAAC,GACnF6lB,WAAWrL,OAAM99B,SAAS,GAE1B;AAAA,IAAC+Q;AAAAA,IAAWU;AAAAA,EAAU8B,IAAAA,QAAAA,GAEtBwE,WAAWtG,UAAU,CAACV,YAAY,KAAK,GAUvCq4B,sBAAsB1b,SAAS2b,cAAcP,eAAehL,OAAM99B,SAAS,GAI3EspC,2BAA2BF,uBAAuBJ,kBAIlDO,iBAAiB7b,SAASjW,cAAcjQ,QAAQ,GAOhDgiC,2BAA2B,CAACF,4BAA4B,CAACC,kBAAkB,CAAC,CAAC7nC,WAE7E;AAAA,IAACzD;AAAAA,MAAKC,eAAenB,wBAAwB,GAE7C0sC,oBAAoBtmB,YAGxB,CAAC;AAAA,IAACikB;AAAAA,EAAAA,0BACC,yCACC,EAAA,kBACA,qBACA,kBACA,OAAA,CAAe,GAGnB,CAAC3jB,kBAAkByc,gBAAgB,CACrC,GAEMvhC,QAAQ4kB,QAAQ,0BAAO,qBAAmB,CAAA,CAAA,GAAK,CAAE,CAAA,GACjDzL,OAAOyL,QAAQ,MAAM4lB,gCAAa,oBAAqB,CAAA,CAAA,GAAE,CAACA,QAAQ,CAAC,GACnE1xB,aAAa8L,QACjB,MACEgmB,kBACG,oBAAA,QAAA,EACC,IAAI7nC,WACJ,WAAQ,KACR,MAAMgoC,eACN,MAAK,SACL,cAAc;AAAA,IAAC9hC,SAAS3J,EAAE,8BAA8B;AAAA,EAAA,EAE3D,CAAA,GACH,CAACyD,WAAU6nC,gBAAgBtrC,CAAC,CAC9B,GACM0rC,kBAAkBpmB,QACtB,MACG,qBAAA,MAAA,EAAK,OAAM,UAAS,KAAK,GACvBwlB,UAAAA;AAAAA,IAAAA,wBAAwB/oC,SAAS,KAChC,oBAAA,UAAA,EACG+oC,kCAAwBhiC,IAAI,CAAC6iC,yBAAyBxwB,QAEnD;AAAA,MAAC;AAAA,MAAA;AAAA,QAGC;AAAA,MAAA;AAAA,MADK,mBAAmBA,GAAG;AAAA,IAIhC,CAAA,GACH;AAAA,IAGD8vB,gBAAgBniC,IAAKlB,CACpB,SAAA,oBAAC,0BAAsC,MAAMA,KAAAA,GAAhBA,KAAK+O,GAAgB,CACnD;AAAA,IACAkW,iCACE,6BACC,EAAA,SACA,aAAaA,WACb,OAAM,eAEL2e,UACH,kBAAA,CAAA;AAAA,IAGDL,uBACC,oBAAC,QACC,EAAA,cAAYnrC,EAAE,sCAAsC,GACpD,MAAM4rC,mBAEN,MAAK,SACL,SAASf,aACT,cAAc;AAAA,MAAClhC,SAAS3J,EAAE,mCAAmC;AAAA,SAHzD,mBAKP;AAAA,IAEAqrC,gDACE,QACC,EAAA,MAAM5c,WAEN,MAAK,SACL,SAASmc,aACT,cAAc;AAAA,MAACjhC,SAAS3J,EAAE,uCAAuC;AAAA,SAH7D,mBAKP;AAAA,IAEAurC,4BACE,oBAAA,QAAA,EACC,MAAM9c,WAEN,MAAK,SACL,cAAc;AAAA,MAAC9kB,SAAS3J,EAAE,6CAA6C;AAAA,IAAA,GACvE,IAAIyD,UAAAA,GAHA,mBAKP;AAAA,EAAA,EACH,CAAA,GAEF,CACEA,WACA8V,SACAsT,WACAoe,iBACAL,aACAC,aACAW,mBACAzrC,YACAwrC,0BACAJ,qBACAE,0BACArrC,GACA8qC,uBAAuB,CAE3B;AAGE,SAAA,oBAAC,6BACC,UAAC,oBAAAxxB,cAAA,EACC,QAAM,IACN,KACA,SAASyQ,oBAAoB,gBAAgB,CAAC8C,WAAW5pB,SAAS,CAAC4pB,WAAW1pB,WAC9E,OACA,MACA,UACA,YACA,SAASuoC,gBAAAA,CAAgB,EAE7B,CAAA;AAEJ,CAAC,CACH,GAEMG,0CAA0CjnB,KAC9C,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAME;AAAA,IAAAwkC;AAAAA,IAAA9B;AAAAA,IAAAzc;AAAAA,EAAkEnmB,IAAAA,OAKlE8pC,SAAe2C,iBAAiBzsC,MAAK8pC,MAAO;AAACvpC,MAAAA;AAAAN,SAAAA,EAAA,CAAA,MAAAkmB,oBAAAlmB,EAAA2iC,CAAAA,MAAAA,oBAAA3iC,EAAAykC,CAAAA,MAAAA,uBAAAzkC,SAAA6pC,UAG3CvpC,KAAC,oBAAA,iCAAA,EACsBmkC,qBACH9B,kBACAzc,kBACV2jB,OAAAA,CACR,GAAA7pC,OAAAkmB,kBAAAlmB,OAAA2iC,kBAAA3iC,OAAAykC,qBAAAzkC,OAAA6pC,QAAA7pC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GALFM;AAKE,CAGR,GAEMmsC,kCAAkCnnB,KAAK,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAM3C;AAAA,IAAA4pC;AAAAA,IAAApF;AAAAA,IAAAve;AAAAA,IAAAyc;AAAAA,EAAAA,IAA0E5iC;AAAKO,MAAAA;AAAAN,IAAAkmB,CAAAA,MAAAA,oBAAAlmB,SAAAykC,uBAAAzkC,EAAA,CAAA,MAAA6pC,UAK7EvpC,KAAAM,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA+kB;AAAAA,IAAAA,IAAA/kB;AAAc,wCACH6jC,KAAAA,qBACR,8BAAC,uBACQve,EAAAA,OAAAA,kBAGL,cAAA2jB,OAAMpnC,aACFonC,OAAMrgC,KAAAo7B,aAAAR,gBACH,oBAAA,oBAAA,EAEcQ,aACH,UAAAh2B,CAAQg2B,CAAAA,YAAWrzB,UACtB6yB,OAAU,aACPze,UAAW,aAAA,GAJhBif,YAAWK,MAMnB,IAACt7B,OAAAA,GAXJ,cAYW,GAGnB;AAAA,EAAA,GACD3J,OAAAkmB,kBAAAlmB,OAAAykC,qBAAAzkC,OAAA6pC,QAAA7pC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAvBH,QAAA6kC,qBAA2BvkC;AAyB1BM,MAAAA;AAAA,SAAAZ,EAAA2iC,CAAAA,MAAAA,oBAAA3iC,SAAA6kC,sBAAA7kC,EAAA,CAAA,MAAA6pC,UAGCjpC,yBAAC,qBAAkCipC,EAAAA,sBAA0BlH,+CAE7D,CAAA,GAAsB3iC,OAAA2iC,kBAAA3iC,OAAA6kC,oBAAA7kC,OAAA6pC,QAAA7pC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAFtBY;AAEsB,CAEzB;AC1RM,SAAA8rC,aAAApsC,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAsB;AAAA,IAAA0sC;AAAAA,EAAAA,IAAArsC;AAAyBM,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAMzChC,KAAA;AAAA,IAAAgsC,eACU;AAAA,IAAMC,YACT;AAAA,IAAQ/xB,OAAA;AAAA,EAAA,GAErB9a,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,SAAA2sC,QARH3rC,KAAA,oBAAC,QACC,EAAA,eAAU,IACV,UAAA,IACM2rC,MACC,OAAA/rC,IAKF,MAAA,IAAA,CACL,GAAAZ,OAAA2sC,MAAA3sC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAVFgB;AAUE;ACjBN,MAAM8rC,cAAqD;AAAA,EACzDC,SAAS;AAAA,EACTC,SAAS;AAAA,EACTC,SAAS;AAAA,EACTC,QAAQ;AACV,GAEMC,sBAAsB7nB,KAAK,SAAAhlB,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAA6B;AAAA,IAAA4pC;AAAAA,EAAAA,IAAAvpC;AAAkC,MAC1FupC,OAAMpnC,WAAa;AAAA,WAAA;AAAA7B,MAAAA;AAAAZ,WAAA6pC,UAKlBjpC,KAAAipC,OAAMrgC,IAAAO,OAoBN,GAAC/J,OAAA6pC,QAAA7pC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,SAAAA,SAAAY,MArBJI,KAAC,oBAAA,QAAA,EAAc,OAAA,GACZJ,UAqBH,GAAA,CAAA,GAASZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAtBTgB;AAsBS,CAEZ,GAEKosC,yBAAyB9nB,KAAK,SAAAvlB,OAAA;AAAA,QAAAC,IAAAC,EAAA,CAAA,GAOlC4pC,SAAe2C,iBAAiBzsC,MAAK8pC,MAAO;AAACvpC,MAAAA;AAAAN,SAAAA,SAAA6pC,UACtCvpC,KAAC,oBAAA,qBAAA,EAA4BupC,QAAU,GAAA7pC,OAAA6pC,QAAA7pC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAAvCM;AAAuC,CAC/C;AAEM,SAAA+sC,iBAAA;AAAArtC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAAsoB;AAAAA,IAAAgF;AAAAA,EAAAA,IAA4BpD,gBAAgB,GAE5CmjB,uBAAAv+B;AAII,MAAA,CAACwe,aAAS,CAAKhF;AAAM,WAAA;AAAAjoB,MAAAA;AAAA,SAAAN,EAAAuoB,CAAAA,MAAAA,UAAAvoB,SAAAutB,aAGvBjtB,yBAAC,4BAAmCioB,EAAAA,QAAoBgF,sDAExD,CAAA,GAA6BvtB,OAAAuoB,QAAAvoB,OAAAutB,WAAAvtB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAF7BM;AAE6B;AAZ1B,SAAAyO,SAAAzO,IAAA;AAKF,QAAA;AAAA,IAAAupC;AAAAA,EAAAA,IAAAvpC;AAAa,SAAA,oBAAC,0BAA+BupC,QAAU;AAAA;AA/C3B,SAAA9/B,QAAAwjC,OAAAtjC,OAAA;AAAA,SAOxB,oBAAA,SAAA,EACU,SAAAsjC,MAAKnsC,OACJ,UAACmsC,CAAAA,MAAKnsC,OAEN,WAAA,OACV,YAEA,8BAAC,OACW,EAAA,UAAC,GACN,MAAA,WACK,UAAC,GACD,UAAA,GACF,QAAC,GACH,MAAAmsC,MAAKlsC,QAAAyrC,YAAqBS,MAAKlsC,KAAA,IAAAsI,QAC9B,OAAA;AAAA,IAAA6jC,YAAa;AAAA,EAAQ,GAE3BD,gBAAKtI,MACR,CAAA,EAAA,GAdQsI,GAAAA,MAAKtI,KAAA,IAAUh7B,KAAK,EAe9B;AAAU;ACxClB,MAAMwjC,mBAAmBlsC,OAAOmsC,OAAOrwB,IAAI;AAAA;AAAA,GAOrCswB,SAAU5tC,CACd,UAAA,oBAAC,OAAO,QAAP,EAAc,MAAK,QAAO,GAAE,KAAI,IAAG,QAAO,IAAG,QAAO,aAAY,OAAUA,GAAAA,OAC5E,GACK6tC,SAAU7tC,CACd,UAAA,oBAAC,oBACC,MAAK,QACL,GAAE,2EACEA,GAAAA,OAEP,GACK8tC,YAAa9tC,WAChB,oBAAA,OAAO,MAAP,EAAY,GAAE,mCAAsCA,GAAAA,MAAAA,CACtD,GAEK+tC,kBAAkBC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAQlBC,cAAczsC,OAAOugB;AAAAA;AAAAA;AAAAA;AAAAA,iBAIVgsB,eAAe;AAAA;AAAA,GAI1BG,OAAO;AAAA,EACXC,SAAS;AAAA,IACPC,OAAO;AAAA,IACPC,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA8f,OAAO;AAAA,IACLF,OAAO,CAAC,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,CAAC;AAAA,IAClDC,YAAY;AAAA,MACV7f,UAAU;AAAA,MACVpF,OAAO;AAAA,IAAA;AAAA,EAEX;AAAA,EACAmlB,SAAS;AAAA,IAACF,YAAY;AAAA,MAAC7f,UAAU;AAAA,IAAA;AAAA,EAAC;AACpC,GAEMggB,SAAS;AAAA,EACbL,SAAS;AAAA,IACPM,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjnB,SAAS;AAAA,IACT4mB,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA8f,OAAO;AAAA,IACLG,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjnB,SAAS;AAAA,IACT4mB,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA+f,SAAS;AAAA,IACPE,iBAAiB;AAAA,IACjBC,kBAAkB;AAAA,IAClBjnB,SAAS;AAAA,IACT4mB,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EACZ;AAEJ,GAEMmgB,SAAS;AAAA,EACbR,SAAS;AAAA,IACP1mB,SAAS;AAAA,IACT4mB,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA8f,OAAO;AAAA,IACL7mB,SAAS;AAAA,IACT4mB,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA+f,SAAS;AAAA,IACP9mB,SAAS;AAAA,EAAA;AAEb,GAEMmnB,YAAY;AAAA,EAChBT,SAAS;AAAA,IACPU,YAAY;AAAA,IACZR,YAAY;AAAA,MAAC7f,UAAU;AAAA,IAAA;AAAA,EACzB;AAAA,EACA8f,OAAO;AAAA,IACLO,YAAY;AAAA,IACZR,YAAY;AAAA,MACVjlB,OAAO;AAAA,MACPoF,UAAU;AAAA,IAAA;AAAA,EAEd;AAAA,EACA+f,SAAS;AAAA,IACPM,YAAY;AAAA,IACZR,YAAY;AAAA,MACV7f,UAAU;AAAA,IAAA;AAAA,EACZ;AAEJ;AAMO,SAAAsgB,mBAAA9uC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA8D;AAAAA,EAAAA,IAAiBhE;AAAK,MAAA,CAEjBgE;AAAM,WAAA;AAeqBzD,QAAAA,KAAAyD,WAAW,YAAS4F,SAAe;AAAE,MAAA/I,IAAAI;AAAAhB,WAAA+D,UAC7DnD,yBAAC,UAAiB8tC,kBAAiB3qC,iBAAiBA,SAAAA,OAAU,CAAA,GAC9D/C,yBAAC,QAAiButC,EAAAA,kBAAiBxqC,iBAAiBA,SAAAA,QAAU,GAAA/D,OAAA+D,QAAA/D,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAAM,CAAAA,MAAAA,MAAAN,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MAFhEC,KAAC,qBAAA,aAAA,EAAyB,eAAAX,IACxBM,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,EAAAA,GACF,GAAchB,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAA+D,UACdlB,yBAAC,WAAoB8rC,EAAAA,qBAAoB5qC,iBAAiBA,SAAAA,QAAU,GAAA/D,OAAA+D,QAAA/D,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAA+D,CAAAA,MAAAA,UAAA/D,UAAAiB,MAAAjB,EAAA,EAAA,MAAA6C,MAdxEC,yBAAA,OACQ,EAAA,OAAA,OACC,QAAA,OACC,SAAA,aACH,MAAA,QACE,QAAA,gBACK,aAAA,OACK,oBAAA,wBAEjB,UAAoBmrC,qBAAAA,OAAAA,GAAAA,EAAAA,UAAAA,MAAelqC,SAAAA,QAAiBA,SAAAA,QAClD9C,UAAAA;AAAAA,IAAAA;AAAAA,IAIA4B;AAAAA,EAAAA,GACF,EAAA,CACF,GAAM7C,OAAA+D,QAAA/D,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAhBN8C;AAgBM;AC5IV,MAAMgsC,oBAA6E;AAAA,EACjFT,OAAO;AAAA,IACLU,SAAS;AAAA,IACTv+B,MAAM;AAAA,EACR;AAAA,EACA09B,SAAS;AAAA,IACPa,SAAS;AAAA,IACTv+B,MAAM;AAAA,EAAA;AAEV,GAEaw+B,sBAAsBjvC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACjC;AAAA,IAAA8D;AAAAA,MAAiBhE,OACjB;AAAA,IAAAW;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAE/CuE,MAAAA,WAAW,WAAWA,WAAW;AAAS,WAAA;AAI9CkrC,QAAAA,gBAAAH,kBAAwC/qC,MAAM;AAACzD,MAAAA;AAAAN,WAAA+D,UAKzCzD,yBAAC,sBAA2ByD,QAAU,GAAA/D,OAAA+D,QAAA/D,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAivC,cAAAz+B,QAAAxQ,SAAAM,MADxCM,KAAC,oBAAA,cAAA,EAAmB,MAAC,GAAQ,MAAAquC,cAAaz+B,MACxClQ,UACF,GAAA,CAAA,GAAeN,EAAA,CAAA,IAAAivC,cAAAz+B,MAAAxQ,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAivC,cAAAF,WAAA/uC,SAAAU,KAGZM,KAAAN,EAAEuuC,cAAaF,OAAQ,GAAC/uC,EAAA,CAAA,IAAAivC,cAAAF,SAAA/uC,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAgB,MAD3BC,KAAC,oBAAA,MAAA,EAAK,WAAY,SACfD,cACH,GAAOhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA,SAAA7C,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAiB,MAPT4B,KAAA,qBAAC,QAAW,OAAA,UAAc,KAAC,GAAc,eAAA,qCACvCjC,UAAAA;AAAAA,IAAAA;AAAAA,IAIAK;AAAAA,EAAAA,EAGF,CAAA,GAAOjB,QAAAY,IAAAZ,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GARP6C;AAQO,GCjCLqsC,kBAAkB,KAClBC,gBAAgB;AAMf,SAAAC,mBAAA9uC,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA4B;AAAA,IAAAovC;AAAAA,MAAA/uC,IACjC;AAAA,IAAAsG;AAAAA,IAAAC;AAAAA,IAAA0mB;AAAAA,IAAA1sB;AAAAA,EAAAA,IAAqDspB,gBAAgB,GAErE,CAAApmB,QAAAurC,SAAA,IAA4Bh/B,aAAyC,GAErEg4B,YAAkBC,aAAa3hC,YAAYC,YAAY,GAEvD0oC,cAAoB1uC,OAAKmoC;AAAYpoC,MAAAA;AAAAZ,WAAA+D,UAAA/D,EAAAsoC,CAAAA,MAAAA,UAAAQ,aAG3BloC,KAAAA,MAAA;AAAA,QAGJmD,WAAW,aAAcukC,CAAAA,UAASQ,WAAU;AAC9C,YAAA0G,UAAgB1+B,WAAiBw+B,MAAAA,UAAU,OAAO,GAACJ,eAAiB;AACvDn+B,aAAAA,MAAAA,aAAay+B,OAAO;AAAA,IAAA;AAAC,QAGhCzrC,WAAW,SAAO;AACpB,YAAA0rC,YAAgB3+B,WAAA,MAAiBw+B,UAAc,IAAA,GAACH,aAAe;AAClDp+B,aAAAA,MAAAA,aAAay+B,SAAO;AAAA,IAAA;AAAA,EAAC,GAErCxvC,OAAA+D,QAAA/D,EAAA,CAAA,IAAAsoC,UAAAQ,WAAA9oC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAA,CAAA,MAAAuvC,eAAAvvC,EAAA,CAAA,MAAA+D,UAAA/D,EAAA,CAAA,MAAAsoC,UAAAQ,aAAE9nC,MAAC+C,QAAQwrC,aAAajH,UAASQ,SAAA,GAAW9oC,OAAAuvC,aAAAvvC,OAAA+D,QAAA/D,EAAA,CAAA,IAAAsoC,UAAAQ,WAAA9oC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAZ7CgR,UAAUpQ,IAYPI,EAA0C;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAG9B3B,KAAAA,MAAA;AACdquC,kBAAc;AAAA,EAAA,GACftvC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAA4G,cAAE/D,MAAC+D,UAAU,GAAC5G,OAAA4G,YAAA5G,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAFf0U,gBAAgBzT,IAEb4B,EAAY;AAACC,MAAAA;AAAA9C,IAAA,EAAA,MAAAsoC,UAAAQ,aAGAhmC,KAAAA,MAAA;AACVwlC,cAASQ,aACXwG,UAAU,SAAS;AAAA,EAEtBtvC,GAAAA,EAAA,EAAA,IAAAsoC,UAAAQ,WAAA9oC,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAqC,MAArClE,UAAAuvC,eAAAvvC,EAAAsoC,EAAAA,MAAAA,UAAAQ,aAAE5kC,KAACokC,CAAAA,UAASQ,WAAYyG,WAAW,GAACvvC,QAAAuvC,aAAAvvC,EAAA,EAAA,IAAAsoC,UAAAQ,WAAA9oC,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GAJrC0U,gBAAgB5R,IAIboB,EAAkC,GAEjCH,QAAM;AAC4B,UAAAoC,MAAApC,UAAM4F;AAAavD,QAAAA;AAAApG,WAAAA,UAAAmG,OAAhDC,MAAC,oBAAA,qBAAA,EAA4B,QAAAD,KAAuB,GAAAnG,QAAAmG,KAAAnG,QAAAoG,OAAAA,MAAApG,EAAA,EAAA,GAApDoG;AAAAA,EAAAA;AAMiC,QAAAD,KAAAonB,WAAS5pB,OAAoByC,KAAAmnB,WAAS1pB;AAAWwC,MAAAA;AAAArG,IAAAmG,EAAAA,MAAAA,MAAAnG,UAAAoG,MAArFC,KAAC,oBAAA,gBAAA,EAAe,cAAA,IAAoB,OAAAF,IAA6B,WAAAC,GAAwB,CAAA,GAAApG,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAKzD,QAAAuG,MAAAgnB,WAAS5pB,OAAoB8C,MAAA8mB,WAAS1pB;AAAWgF,MAAAA;AAAA7I,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAyG,OAAjFoC,MAAC,oBAAA,yBAA+B,EAAA,OAAAtC,KAA6B,WAAAE,KAAwB,GAAAzG,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAE5E,QAAAmJ,MAAAokB,WAAS5pB,OACLyF,MAAAmkB,WAAS1pB;AAAWwF,MAAAA;AAAArJ,IAAAqvC,EAAAA,MAAAA,cAAArvC,UAAAmJ,OAAAnJ,EAAA,EAAA,MAAAoJ,OAFjCC,0BAAC,gBACQ,EAAA,OAAAF,KACI,WAAAC,KACCimC,WACZ,CAAA,GAAArvC,QAAAqvC,YAAArvC,QAAAmJ,KAAAnJ,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAA6I,EAAAA,MAAAA,OAAA7I,UAAAqJ,OANJC,MAAC,qBAAA,MAAA,EAAW,OAAA,UAAc,QACxBT,UAAAA;AAAAA,IAAAA;AAAAA,IACAQ;AAAAA,EAAAA,EAKF,CAAA,GAAOrJ,QAAA6I,KAAA7I,QAAAqJ,KAAArJ,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAAAgK,MAAAA;AAAA,SAAAhK,EAAAsJ,EAAAA,MAAAA,OAAAtJ,UAAAqG,MAbT2D,MAAC,oBAAA,SAAA,EAEG,SAAA3D,IAEQ,WAAA,OAEViD,UAAAA,IAAAA,CAQF,GAAUtJ,QAAAsJ,KAAAtJ,QAAAqG,IAAArG,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA,GAdVgK;AAcU;AC9DD0lC,MAAAA,aAAanuC,OAAOqY,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU9B,SAAA+1B,qBAAA;AAAA3vC,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAA47B;AAAAA,EAAA,IAAoB1R,mBACpB;AAAA,IAAAzpB;AAAAA,EAAAA,IAAYC,eAAe,GAC3BivC,OAAa/T,WAASmN,cAAgBnN,WAASuF;AAAY9gC,MAAAA;AAAAN,IAAA4vC,CAAAA,MAAAA,QAAA5vC,SAAAU,KAInDJ,KAAAsvC,OACH,oBAAA,WAAA,EACIlvC,GACK,SAAA,iCACA,QAAA;AAAA,IAAAkvC,MACAC,OAAA,IAAAjX,KAAgBgX,IAAI,GAAG,oBAAoB;AAAA,EAAA,OAG/C,MAAA5vC,OAAA4vC,MAAA5vC,OAAAU,GAAAV,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAM,MAVMM,KAAA;AAAA,IAAA8G,MACR;AAAA,IAAUuI,MACV3P;AAAAA,IAQEkQ,MACF;AAAA,EAAS,GAChBxQ,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAZD,QAAAkB,UAAgBN;AAYfI,MAAAA;AAAAhB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAKK5B,KAAA,oBAAC,KAAS,EAAA,MAAA,QACR,UAAA,oBAAC,MAAW,EAAA,MAAC,GACX,UAAA,oBAAC,aAAW,CAAA,CAAA,EAAA,CACd,EACF,CAAA,GAAMhB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAA,CAAA,MAAAkB,QAAA+O,QANVhP,KAAA,oBAAA,UAAA,EACE,UAAC,qBAAA,MAAA,EAAW,MAAA,GAAQ,KAAA,GAAY,SAAC,GAC/BD,UAAAA;AAAAA,IAAAA;AAAAA,IAKC,oBAAA,KAAA,EAAU,MAAA,GACT,UAAC,oBAAA,YAAA,EAAiB,SAAgB,cAAA,YAC/BE,UAAO+O,QAAAA,KAAAA,CACV,EACF,CAAA;AAAA,EAAA,EACF,CAAA,EAAO,CAAA,GACNjQ,EAAA,CAAA,IAAAkB,QAAA+O,MAAAjQ,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAbHiB;AAaG;AChDA,SAAA6uC,kBAAAxvC,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAA2B;AAAA,IAAAuR;AAAAA,IAAA8d;AAAAA,EAAAA,IAAAhvB;AAMjC,MAAAM,IAAAI;AAAAhB,IAAAwR,CAAAA,MAAAA,WAAAxR,SAAAsvB,YACiB1uB,KAAAA,OACV4Q,WACFu+B,eAAAC,QAAuBx+B,SAAS8d,QAAQ,GAAC,MAAA;AAIrC9d,eACFu+B,eAAAE,UAAyBz+B,OAAO;AAAA,EAGnCxQ,IAAAA,KAAA,CAACwQ,SAAS8d,QAAQ,GAACtvB,OAAAwR,SAAAxR,OAAAsvB,UAAAtvB,OAAAY,IAAAZ,OAAAgB,OAAAJ,KAAAZ,EAAA,CAAA,GAAAgB,KAAAhB,EAAA,CAAA,IAVtB0U,gBAAgB9T,IAUbI,EAAmB;AAAC;ACIzB,MAAMkvC,uBAAuB;AAEtB,SAAAC,kBAAApwC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAmwC;AAAAA,IAAAC;AAAAA,MAA4CtwC,OAC5C;AAAA,IAAAwtB;AAAAA,IAAAqT;AAAAA,IAAArN,UAAA+c;AAAAA,EAAA,IAA+DnmB,mBAC/D;AAAA,IAAA/oB;AAAAA,EAAAA,IAAgBksB,iBAAiB,GAEjCijB,sBAA4BC,wBAAuBC,YAAAC,uBAGnDC,kBAAwB7O,oBAAoBlB,eAAa72B,OAAkC,GAE3F,CAAAyJ,WAAAo9B,YAAA,IAAkCtgC,aAA6B,GAC/D,CAAA+C,aAAAC,cAAA,IAAsChD,aAAoC;AAAChQ,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAE1CtC,KAAAsR,CAAA,UAAA;AAClBA,iBAAAA,MAAKi/B,YAAA/1B,QAAAo1B,oBAAyC;AAAA,EAAA,GAC5DlwC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAFD,QAAAgwB,eAAqB1vB;AAEfM,MAAAA;AAAAZ,WAAAqT,eAEYzS,KAAA;AAAA,IAAA4Q,SAAU6B;AAAAA,IAAWic,UAAYU;AAAAA,EAAahwB,GAAAA,OAAAqT,aAAArT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAhE8vC,kBAAkBlvC,EAA8C;AAEhE,QAAAkwC,eAAqBvjB,WAAS5c,SAAW,OAAO6C,aAAc;AAE9DyG,MAAAA;AAA4C,MACxCo2B,sBAAsBU,qBAAqBV,kBAAkB,KAAKE,qBAAmB;AAAAvvC,QAAAA;AAAAhB,MAAA,CAAA,MAAAuwC,uBAAAvwC,EAAAqwC,CAAAA,MAAAA,sBAAArwC,EAAAswC,CAAAA,MAAAA,oBAAAtwC,SAAAoB,SAErFJ,MAAA,oBAAC,uBACWqvC,UAAiB,oBACLxkB,sBAAAA,+BACJykB,kBACHlvC,eAAI,MACnB,CAAA,GAAApB,OAAAuwC,qBAAAvwC,OAAAqwC,oBAAArwC,OAAAswC,kBAAAtwC,OAAAoB,OAAApB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GANJia,UACEA;AAAAA,aAOO02B,iBAAe;AAAA3vC,QAAAA;AAAAhB,MAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACd5B,MAAA,oBAAC,0BAA0B,CAAA,GAAAhB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAArCia,UAAUA;AAAAA,EAAAA,OAAH;AAAAjZ,QAAAA;AAAAhB,MAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEG5B,MAAA,oBAAC,2BAA2B,CAAA,GAAAhB,OAAAgB,OAAAA,MAAAhB,EAAA,CAAA,GAAtCia,UAAUA;AAAAA,EAAAA;AAIEjZ,QAAAA,KAAA2vC,kBAAkB,YAAShnC;AAAY1I,MAAAA;AAAAjB,IAAAia,EAAAA,MAAAA,WAAAja,EAAA,EAAA,MAAAowC,iBAAApwC,EAAAwT,EAAAA,MAAAA,aAAAxT,EAAA,EAAA,MAAA8wC,gBAAA9wC,UAAA2wC,mBAE9C1vC,KAAA6vC,gBACE,qBAAA,MAAA,EACO,OAAA,WACD,KAAA,GACG,SAAA,iBACE,UAAC,GACE,aAAAH,kBAAsB,IAAA,GACrB,cAAAA,kBAAsB,IAAA,GAEpC,UAAA;AAAA,IAAA,qBAAC,MAAW,EAAA,OAAA,UAAe,MAAC,GAAO,KAAAn9B,YAAgB,IAAA,GAAQ,MAAA,QAAqB,cAAC,GAC/E,UAAA;AAAA,MAAC,qBAAA,MAAA,EAAW,OAAA,UACTm9B,UAAAA;AAAAA,QAAAA,sCACE,oBAAqB,EAAA,wBAErB,oBAA+B,EAAA,YAAA,CAACn9B,WACnC;AAAA,QACA,oBAAC,cAAkB,EAAA,MAAA,QAAO,CAAA;AAAA,MAAA,GAC5B;AAAA,0BACC,gBAAc,CAAA,CAAA;AAAA,IAAA,GACjB;AAAA,IAEA,qBAAC,QACO,OAAA,cACE,SAAA,YACH48B,KAAY,eACV,OAAA;AAAA,MAAAY,YAAA;AAAA,MAAAC,YAA4B;AAAA,IAEnC,GAAA,UAAA;AAAA,MAAC,oBAAA,cAAA,EAAkB,MAAA,QAClBh3B,CAAAA;AAAAA,MAAAA;AAAAA,IAAAA,EACH,CAAA;AAAA,EACF,EAAA,CAAA,GACDja,QAAAia,SAAAja,QAAAowC,eAAApwC,QAAAwT,WAAAxT,QAAA8wC,cAAA9wC,QAAA2wC,iBAAA3wC,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAiB,MAhCH4B,yBAAC,MAAe,EAAA,WAAA,UAAcyQ,KAAAA,gBAAuB,QAAA,UAClDrS,UAgCH,GAAA,CAAA,GAAOjB,QAAAiB,IAAAjB,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAgB,EAAAA,MAAAA,MAAAhB,UAAA6C,MAlCTC,KAAC,oBAAA,MAAW,EAAA,MAAA9B,IACV6B,UAkCF,GAAA,CAAA,GAAO7C,QAAAgB,IAAAhB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAnCP8C;AAmCO;AAzEJ,SAAAiH,QAAAnF,QAAA;AAAA,SAQiEA,OAAKssC;AAAA;ACL7E,MAAMC,4BAA4B7rB,KAAK,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAAmxC,MAAAA,mBAAAC,aAAA1qC,UAAArB,IAAAgsC,eAAAC,WAAAlsC,MAAAmsC,SAAA3H,QAAAvpC;AAAAN,WAAAD,SAGrC;AAAA,IAAAqxC;AAAAA,IAAAC;AAAAA,IAAAl7B,IAAA7V;AAAAA,IAAAqG;AAAAA,IAAArB;AAAAA,IAAAgsC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA3H;AAAAA,IAAA,GAAAxkC;AAAAA,EAAAA,IAWItF,OAAKC,OAAAD,OAAAC,OAAAoxC,mBAAApxC,OAAAqxC,aAAArxC,OAAA2G,UAAA3G,OAAAsF,IAAAtF,OAAAsxC,eAAAtxC,OAAAuxC,WAAAvxC,OAAAqF,MAAArF,OAAAwxC,SAAAxxC,OAAA6pC,QAAA7pC,QAAAM,OAAA8wC,oBAAApxC,EAAA,CAAA,GAAAqxC,cAAArxC,EAAA,CAAA,GAAA2G,WAAA3G,EAAA,CAAA,GAAAsF,KAAAtF,EAAA,CAAA,GAAAsxC,gBAAAtxC,EAAA,CAAA,GAAAuxC,YAAAvxC,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA,GAAAwxC,UAAAxxC,EAAA,CAAA,GAAA6pC,SAAA7pC,EAAA,CAAA,GAAAM,KAAAN,EAAA,EAAA;AARH,QAAAyxC,KAAAnxC,OAAUqJ,SAAL,QAALrJ,IAUNoxC,eAAqB7H,OAAOwH,WAAW;AAACzwC,MAAAA;AAAAZ,IAAAsxC,EAAAA,MAAAA,iBAAAtxC,UAAAuxC,aAAAvxC,EAAA,EAAA,MAAA6pC,UAGtCjpC,KAAAgR,CAAA,UAAA;AACE,UAAA+/B,iBAAuB9H,OAAM//B,OAAAlF,CAAAA,WAChBA,OAAKsd,YAAa0vB,SAAShtC,OAAKsd,UAAWtQ,KAAK,CAC7D,GAEAigC,gBAAsBF,eAAc,CAAA;AAMjC,QAJCA,eAAclvC,SAAW,KAE3BojB,QAAArK,KACE,mFAAmFq2B,cAAa3vB,QAAA,GAClG,GAGE2vB,kBAAkBA,cAAatgC,YAAasgC,cAAa9M,UAAS;AAC/DlzB,YAAAA,kBACLggC,cAAa9M,SAAAA,GACbuM,cAAczH,OAAM91B,QAAS89B,aAAa,CAAC;AAAC;AAAA,IAAA;AAI1CN,iBACFA,UAAU3/B,KAAK;AAAA,EAAA,GAElB5R,QAAAsxC,eAAAtxC,QAAAuxC,WAAAvxC,QAAA6pC,QAAA7pC,QAAAY,MAAAA,KAAAZ,EAAA,EAAA;AAzBH,QAAA8xC,gBAAsBlxC;AA2BrBI,MAAAA;AAAAhB,IAAAoxC,EAAAA,MAAAA,qBAAApxC,UAAA0xC,gBAKI1wC,KAAA0wC,gBAAgBA,aAAYhP,UAC3B,oBAAC,uBAA4B,SAAA,cAC3B,8BAAC,mBAA0B,EAAA,QAAAgP,aAAYhP,QAA2B0O,kBAAgB,kBACpF,CAAA,EAAA,CAAA,GACDpxC,QAAAoxC,mBAAApxC,QAAA0xC,cAAA1xC,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAyxC,EAAAA,MAAAA,MAAAzxC,EAAA2G,EAAAA,MAAAA,YAAA3G,EAAA8xC,EAAAA,MAAAA,iBAAA9xC,UAAAsF,MAAAtF,EAAA,EAAA,MAAAqF,QAAArF,EAAA,EAAA,MAAAwxC,WAAAxxC,EAAA,EAAA,MAAAgB,MANHC,KAAC,qBAAA,IAAOqE,EAAAA,IAAewsC,WAAAA,eAAyB,UAAA,IAAE,GAAMzsC,MAAWmsC,cACzD,UAAA;AAAA,IAAA;AAAA,IACPxwC;AAAAA,EAAAA,EAKH,CAAA,GAAKhB,QAAAyxC,IAAAzxC,QAAA2G,UAAA3G,QAAA8xC,eAAA9xC,QAAAsF,IAAAtF,QAAAqF,MAAArF,QAAAwxC,SAAAxxC,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GAPLiB;AAOK,CAER,GAaY8wC,0BAA0BzsB,KACrCvlB,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA;AAAAmxC,MAAAA,mBAAAzqC,UAAAtB,MAAA/E;AAAAN,WAAAD,SACE;AAAA,IAAAqxC;AAAAA,IAAAj7B,IAAA7V;AAAAA,IAAAqG;AAAAA,IAAA,GAAAtB;AAAAA,EAAAA,IAA2DtF,OAAKC,OAAAD,OAAAC,OAAAoxC,mBAAApxC,OAAA2G,UAAA3G,OAAAqF,MAAArF,OAAAM,OAAA8wC,oBAAApxC,EAAA,CAAA,GAAA2G,WAAA3G,EAAA,CAAA,GAAAqF,OAAArF,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA;AAAtC,QAAAmW,KAAA7V,OAAUqJ,SAAL,QAALrJ,IAC1B;AAAA,IAAA2Z;AAAAA,IAAAsT;AAAAA,EAAAA,IAA6BpD,gBAC7B,GAAA,CAAAknB,aAAAW,cAAA,IAAsC1hC,WAAW;AAAC1P,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEhBhC,KAAAib,CAAA,QAAA;AAChCm2B,mBAAen2B,GAAG;AAAA,EAAA,GACnB7b,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAFD,QAAAsxC,gBAAsB1wC;AAEhB,MAAAI,IAAAC;AAAAjB,WAAAutB,aAIFtsB,KAAAssB,aAAS;AAAA,IAAA,GACJA;AAAAA,IAASmY,YAAA37B;AAAAA,IAAAs9B,UAAA19B;AAAAA,EAOb3J,GAAAA,OAAAutB,WAAAvtB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAAAgB,KARDC;AAFJ,QAAAmnB,cAAgDpnB;AAY/C6B,MAAAA;AAAA7C,IAAAoxC,CAAAA,MAAAA,qBAAApxC,EAAA,CAAA,MAAAqxC,eAAArxC,EAAAmW,EAAAA,MAAAA,MAAAnW,EAAA,EAAA,MAAA2G,YAAA3G,UAAAqF,QAKCxC,KAAAC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAA+mC;AAAAA,IAAAA,IAAA/mC;AACC,WAAA,oBAAC,6BACKuC,GAAAA,MACSgsC,aACMD,mBACfj7B,IACWm7B,eACPzH,QAEPljC,SACH,CAAA;AAAA,EAA4B,GAC7B3G,OAAAoxC,mBAAApxC,OAAAqxC,aAAArxC,QAAAmW,IAAAnW,QAAA2G,UAAA3G,QAAAqF,MAAArF,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAdH,QAAAiyC,gCAAsCpvC;AAkBlC,MAAA,CAACulB,eAAW,CAAKnO;AAAO,WAAA;AAAAnX,MAAAA;AAAA,SAAA9C,EAAAooB,EAAAA,MAAAA,eAAApoB,UAAAia,WAAAja,EAAA,EAAA,MAAAiyC,iCAG1BnvC,yBAAC,6BAAyCslB,EAAAA,aAAsBnO,mBAEhE,8BAAA,CAAA,GAA8Bja,QAAAooB,aAAApoB,QAAAia,SAAAja,QAAAiyC,+BAAAjyC,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAF9B8C;AAE8B,CAGpC;AAEAivC,wBAAwBh8B,cAAc;AAnDpC,SAAAhM,UAAA;AAAA;ACpFF,SAASmoC,kBAAkB;AAAA,EACzBC;AAAAA,EACAC;AAAAA,EACA1lB,YAAAA;AAAAA,EACA2lB;AACkB,GAAmB;AACrC,SAAO3lB,YACJljB,IAAI,CAACmhB,WAAW1gB,UAAU;AACnBojB,UAAAA,WAAWglB,mBAAmBpoC,KAAK;AAEzC,WAAI,CAACojB,YAAYA,SAASrY,SAAe,OAElC;AAAA,MACLhN,QAAQ,GAAGqkB,qBAAqB,GAAG1B,UAAUjjB,IAAI;AAAA,MACjDua,OAAOoL,SAASjL,eAAezY,SAAY;AAAA,MAC3C3G,MAAMqqB,SAASrqB;AAAAA,MACfsY,YAAY,CAAC82B;AAAAA,MACbj/B,UAAUg/B,kBAAkBzqC,SAASijB,UAAUjjB;AAAAA,MAC/Cwa,UAAUmL,SAAS3R,SAASzS,KAAK,GAAG;AAAA,MACpCmZ,cAAciL,SAASjL;AAAAA,MACvBhhB,OAAOisB,SAASjsB;AAAAA,MAChBoP,MAAM6c,SAAS7c;AAAAA,IACjB;AAAA,EAAA,CACD,EACA1G,OAAO8E,OAAO;AACnB;AAEA,SAAS0jC,eAAe;AAAA,EAACF;AAAAA,EAAU1xC;AAAqB,GAAiB;AAChE,SAAA;AAAA,IACLsH,QAAQ;AAAA,IACRia,OAAO;AAAA,IACP7gB,OAAOV,EAAE,oCAAoC;AAAA,IAC7CsC,MAAMuvC;AAAAA,IACNj3B,YAAY,CAAC82B;AAAAA,IACblwB,UAAU;AAAA,EACZ;AACF;AAEO,SAASswB,yBAAyB;AAAA,EAACC;AAAAA,EAAY/xC;AAAqB,GAAwB;AACjG,SAAK+xC,aAEE;AAAA,IACLzqC,QAAQ;AAAA,IACRia,OAAO;AAAA,IACP7gB,OAAOV,EAAE,oCAAoC;AAAA,IAC7CsC,MAAM0vC;AAAAA,IACNxwB,UAAU;AAAA,EAAA,IAPY;AAS1B;AAEO,SAASywB,aAAaptC,QAA4C;AACvE,QAAMqtC,iBAAiBV,kBAAkB3sC,MAAM,GACzCstC,QAAQ;AAAA;AAAA,IAEZL,yBAAyBjtC,MAAM;AAAA,EAAA,EAC/BuE,OAAO8E,OAAO;AAET,SAAA;AAAA;AAAA,IAEL;AAAA,MACE5G,QAAQ;AAAA,MACRoa,cAAc;AAAA,MACdhhB,OAAOmE,OAAO7E,EAAE,gCAAgC;AAAA,MAChDsC,MAAM8vC;AAAAA,IACR;AAAA,IACA,GAAGF;AAAAA;AAAAA,IAGHN,eAAe/sC,MAAM;AAAA,IAErB,GAAGstC;AAAAA,EAAK;AAEZ;ACjFA,MAAMvrB,mBAAoBzmB,CACxBsC,UAAAA,SAAStC,KAAK,KAAK,OAAOA,MAAM2C,OAAQ,YAAY,OAAO3C,MAAMN,SAAU;AAEtE,SAAAwyC,cAAAlyC,OAAA;AAAAb,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAA+yC;AAAAA,EAAAA,IAA+BC,UAAW/yC,EAAAA;AAAS,MAAAI,IAAAM;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAE3ChC,KAAA,IAAAsyC,gBAAAvpC,MAAA,GAAmE3J,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAAAM,KAAnEM;AADR,QAAAuyC,UAAgB7yC;AAGf,MAAAU,IAAAC;AAAAjB,WAAAa,SAESG,KAAAA,MAAA;AACRmyC,YAAOnmB,KAAMnsB,KAAK;AAAA,EACjBI,GAAAA,KAAA,CAACkyC,SAAStyC,KAAK,GAACb,OAAAa,OAAAb,OAAAgB,IAAAhB,OAAAiB,OAAAD,KAAAhB,EAAA,CAAA,GAAAiB,KAAAjB,EAAA,CAAA,IAFnBgR,UAAUhQ,IAEPC,EAAgB;AAAC,MAAA4B,IAAAC;AAAA9C,SAAAA,SAAAgzC,wBAGXlwC,KAAAqwC,QAAOC,eAAejoC,KAE3BG,qBAAAA,GACA0vB,aAAgB,GAAA,GAChBzvB,UAAArL,CAAAA,cACEonB,iBAAiBpnB,SAAQ,IAAIwO,KAAKskC,qBAAoB;AAAA,IAAA9yC,UAAAA;AAAAA,EAAW,CAAA,CAAC,IAAIiN,GAAAxD,MAAY,CACpF,GACA2B,wBACAkC,WAAAzD,OAIC,CACH,GAAC/J,OAAAgzC,sBAAAhzC,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA,GAbD6C,KAAOC,IAgBFgB,cAjBuBjB,EAiBY;AAAC;AA5BtC,SAAAkH,QAAAstB,KAAA;AAqBCn2B,QAAAA,UACEiC,SAASk0B,GAAG,KAAK,OAAOA,IAAGn2B,WAAa,WAAWm2B,IAAGn2B,UAAW;AAAe,QAAA,IAAA8D,MAClE,6DAA6D9D,OAAO,EAAE;AAAA;ACpBvF,SAAAmyC,oBAAAtzC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAA4G;AAAAA,IAAAhG;AAAAA,IAAAkS;AAAAA,IAAA2V;AAAAA,IAAA7e;AAAAA,MAAkE9J,OAClE;AAAA,IAAAW;AAAAA,MAAYC,eAAe;AAACL,MAAAA;AAAAN,WAAA6G,gBAYZvG,KAAA;AAAA,IAAAuG;AAAAA,EAAA,GAAc7G,OAAA6G,cAAA7G,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,IAAAU,CAAAA,MAAAA,KAAAV,SAAAM,MAHxBM,yBAAC,WACIF,EAAAA,GACK,SAAA,mDACA,QAAAJ,GACR,CAAA,GAAAN,OAAAU,GAAAV,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAA6G,CAAAA,MAAAA,gBAAA7G,SAAAU,KAKDM,KAAA6F,gBACE,oBAAA,MAAA,EAAQ,IAAA,KACP,UAAA,oBAAC,aACInG,GACK,SAAA,kDACA,QAAA;AAAA,IAAAmG;AAAAA,EAAAA,EAAc,CAAA,EAE1B,CAAA,GACD7G,OAAA6G,cAAA7G,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAA6G,CAAAA,MAAAA,gBAAA7G,SAAAU,KAEAO,MAAC4F,gBACC,oBAAA,MAAA,EAAQ,IAAA,KAAKnG,UAAAA,EAAE,+DAA+D,EAAA,CAAE,GAClFV,OAAA6G,cAAA7G,OAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAa,SAEAgC,KAAAimB,SAASjoB,SAGN,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAC,oBAAA,MAAA,EAAQ,IAAA,KAAI,UAAgD,oDAAA;AAAA,IAE5D,oBAAA,MAAA,EAAc,SAAC,GAAW,UAAA,QAAe,WAAW,QAAA,GAAQ,MAAA,WAC3D,UAAC,oBAAA,MAAA,EAAc,UAAA,QAAa,MAAA,CAAA,GAAA,GAAA,CAAA,GACzBqkB,UAAAC,KAAAA,UAAetkB,OAAK,MAAA,CAAS,EAChC,CAAA,EACF,CAAA;AAAA,EAAO,EAAA,CAAA,GAGVb,QAAAa,OAAAb,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,IAAAgB,EAAAA,MAAAA,MAAAhB,UAAAiB,MAAAjB,EAAA,EAAA,MAAA6C,MA3BHC,KAAC,qBAAA,OAAA,EAAa,OAAA,GACX9B,UAAAA;AAAAA,IAAAA;AAAAA,IAUAC;AAAAA,IAIA4B;AAAAA,EAAAA,GAaH,GAAQ7C,QAAAgB,IAAAhB,QAAAiB,IAAAjB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAA,SAAAlE,EAAA+S,EAAAA,MAAAA,mBAAA/S,EAAA,EAAA,MAAA6J,YAAA7J,EAAA0oB,EAAAA,MAAAA,WAAA1oB,EAAA,EAAA,MAAAY,MAAAZ,UAAA8C,MA1CVoB,yBAAC,WACkB6O,EAAAA,iBACX,WACIlJ,UACD6e,SAEP,OAAA9nB,IAMG,MAAA,WAELkC,UA6BF,GAAA,CAAA,GAAY9C,QAAA+S,iBAAA/S,QAAA6J,UAAA7J,QAAA0oB,SAAA1oB,QAAAY,IAAAZ,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA,GA3CZkE;AA2CY;ACbhB,MAAMiD,cAAkB,CAAE,GAEpBmsC,2BAA4D;AAAA;AAAA,EAEhE;AAAA,EACA;AAAA;AAAA,EAEA;AAAU,GAGNC,4BAA4BhyC,OAAOiyC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrD,SAASC,iBAAiB;AACzB,QAAA;AAAA,IACJjL;AAAAA,IACA5hC;AAAAA,IACAC;AAAAA,IACA0a;AAAAA,IACAud;AAAAA,IACA4U;AAAAA,IACA/oB;AAAAA,IACA+B,YAAAA;AAAAA,IACA6Q;AAAAA,IACAoW;AAAAA,IACAtI;AAAAA,IACA3gB;AAAAA,IACAhC;AAAAA,IACAjoB;AAAAA,IACAI;AAAAA,IACA+yC;AAAAA,IACAjjC;AAAAA,EACF,IAAIwZ,mBACE;AAAA,IAAC5kB,QAAQsuC;AAAAA,EAAU,IAAI3sC,iBACvB;AAAA,IAACipB;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAACprB;AAAAA,EAAAA,IAAKC,iBAAenB,wBAAwB,GAC7C;AAAA,IAACgU,WAAWC;AAAAA,EAAmB5O,IAAAA,cAE/BivC,GAAAA,WAAW3d,UAAU,GACrBsc,aAAaM,cAAclyC,KAAK,GAEhCwvC,qBAAqB0D,4BAA4BlzC,KAAK,GACtD;AAAA,IACJmzC,6BAA6BC;AAAAA,IAC7BC,qBAAqBC;AAAAA,EAAAA,IACnB3D,sBAAsB,EAAEC,cAAc,IAEpC,CAACp9B,aAAaC,cAAc,IAAIhD,SAAgC,IAAI,GACpE,CAAC8jC,eAAeC,gBAAgB,IAAI/jC,SAAgC,IAAI,GACxE,CAACgkC,eAAeC,gBAAgB,IAAIjkC,SAAgC,IAAI,GAExE,CAAC8gC,mBAAmBoD,oBAAoB,IAAIlkC,SAAgC,IAAI,GAChF,CAACmkC,4BAA4BpU,6BAA6B,IAAI/vB,SAClE,IACF;AAEiC,mCAAA;AAAA,IAC/BkB,SAAS6B;AAAAA,IACTyrB;AAAAA,IACAj+B;AAAAA,EAAAA,CACD;AAED,QAAM,CAACwxC,oBAAoBqC,qBAAqB,IAAIpkC,SAAsC,CAAA,CAAE,GACtF,CAACqkC,sBAAsBC,uBAAuB,IAAItkC,SAAoC,CAAA,CAAE,GAExFukC,aAAal6B,eAAey5B,aAAa,GACzCU,aAAan6B,eAAe25B,aAAa,GACzCpU,eAAe2U,YAAYj6B,QAC3BulB,eAAe2U,YAAYl6B,QAC3B7H,kBACJmZ,oCAAoCvB,YAAYwB,+BAA+B,IAC3EtiB,WAAWoiB,4BAA4BtB,YAAYwB,+BAA+B,IAElFgmB,mBAAmBnsB,QACvB,MAAM0G,aAAY5Y,KAAMsK,OAAMA,EAAE1W,SAASijB,WAAWjjB,IAAI,GACxD,CAACglB,aAAY/B,WAAWjjB,IAAI,CAC9B,GAEM0qC,WAAWxjC,CAAQ/N,CAAAA,OAEnB2gB,YAAYwE,QAChB,MACE2sB,aAAa;AAAA,IACXR;AAAAA,IACAhiB;AAAAA,IACAiiB;AAAAA,IACAC;AAAAA,IACA3lB,YAAAA;AAAAA,IACA+lB;AAAAA,IACA/xC;AAAAA,EACD,CAAA,GACH,CAACyxC,kBAAkBhiB,UAAUiiB,UAAUC,oBAAoB3lB,aAAY+lB,YAAY/xC,CAAC,CACtF,GAEMq0C,cAAcnvB,YACjBhU,CAA+C,UAAA;AAC9C,eAAWtJ,QAAQkZ;AACjB,UAAIlZ,KAAK4Z,YACH0vB,SAAStpC,KAAK4Z,UAAUtQ,KAAK,GAAG;AAClCA,cAAMC,kBACND,MAAMojC,gBAAgB,GACtB3J,aAAa/iC,IAAI;AACjB;AAAA,MAAA;AAAA,EACF,GAIN,CAAC+iC,cAAc7pB,SAAS,CAC1B,GAEMyzB,sBAAsBrvB,YACzBvI,CAAe,SAAA;AACHA,eAAAA,IAAI,GACfkgB,QAAQlgB,IAAI;AAAA,EAAA,GAEd,CAACqN,YAAY6S,OAAO,CACtB,GAEM2X,iBAAiBlvB,QACrB,OAAO;AAAA,IAAC,CAAC6F,6BAA6B,GAAG4oB;AAAAA,EAAAA,IACzC,CAACA,0BAA0B,CAC7B;AAEKh0C,SAAAA,aAaF,qBAAA,sBAAA,EAAqB,OACnBisB,UAAAA;AAAAA,IAAWjqB,YAAAA,SAAS,KAClB,oBAAA,oCAAA,EACC,YACA,cACA,YAAAiqB,aACA,aAAagoB,sBAEhB,CAAA;AAAA,IAEAnzB,aAAa9e,SAAS,KAAKhC,kCACzB,sBACC,EAAA,SAAS8gB,cACT,YACA,cACA,WAAWqzB,yBACX,MAAMztC,aACN,YAEH;AAAA,IAED,oBAAC,wBAAqB,SAASwtC,sBAAsB,MAAMxtC,aACzD,UAAA,qBAAC,yBACC,EAAA,mBACA,IAAIqL,MACJ,iBACA,eAAY,iBACZ,MAAM,KACN,IAAIkW,SACJ,UACA,SAASqsB,aACT,SAASzhC,gBAET,UAAA;AAAA,MAAC,oBAAA,qBAAA,EAAoB,KAAKihC,kBAAkB,UAAqB,CAAA;AAAA,MAEhElE,sBACCU,qBAAqBV,kBAAkB,KACvC4D,6BACE,oBAAC,oBACC,UAAC,oBAAA,QAAA,EACC,MAAK,eACL,gBAAa,kCACb,SAAS,oBAAC,6BAA0B,UAAU5D,mBAAAA,CAAmB,EAAI,CAAA,GAEzE;AAAA,MAGJ,oBAAC,kBAAe,UAAUiD,0BAA0B,SAASQ,SAASqB,YACpE,8BAAC,MAAK,EAAA,WAAU,UAAS,MAAM,GAAG,QAAQ1hC,kBAAkB9J,SAAY,QACtE,UAAC,oBAAA,2BAAA,EACC,eAAY,yBACZ,qBAAqB6+B,eAAeqL,YAAYuB,wBAAwB,UACxE,qBAAqBzB,eACrB,YAAYsB,qBAEZ,UAAA,oBAAC,iBACC,cAAc/U,gBAAgB,MAC9B,cAAcC,gBAAgB,MAC9B,eAAeuT,aACf,aACA,8BAA6D,CAAA,GAEjE,GACF,EACF,CAAA;AAAA,MAIA,oBAAC,gBAAe,EAAA,qBAAqBwB,gBACnC,UAAA,qBAAC,kBAAe,UAAU5B,0BAA0B,SAASQ,SAASj9B,QACnEs9B,UAAAA;AAAAA,QAAAA,2CACE,kBACC,EAAA,UAAA,oBAAC,qBACC,EAAA,UAAUtzC,OACV,YACA,cAAcJ,YACd,eAAekQ,OACf,uBAAuB,CAAC,CAACijC,uBACzB,sBAAsB/nB,8BAA8B,CAAA,GAExD;AAAA,QAED,oBAAA,YAAA,EAAW,KAAKwoB,kBACf,UAAC,oBAAA,2BAAA,EACC,UAAC,oBAAA,mBAAA,EACC,eAAeG,sBACf,mBAAuC,CAAA,EAAA,CAE3C,EACF,CAAA;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,0BACC,0BAAwB,CAAA,CAAA;AAAA,IAAA,EAAA,CAC3B,EACF,CAAA;AAAA,EAAA,GACF,IA1GG,oBAAA,qBAAA,EACC,iBACA,cACA,UACA,SACA,OACA;AAsGR;AAMA,SAAAa,iBAAAt1C,OAAA;AACE,QAAA;AAAA,IAAAyT;AAAAA,MAAoBwC,QAAQ;AACrBxC,SAAAA,YAAS,OAAUzT,MAAK4G;AAAS;ACjS1C,SAAS2uC,KAAKC,QAAuB;AAC5BA,SAAAA,OAAOr1C,UAAUuwC,YAAY+E;AAGtC;AAMO,SAAAC,6BAAA;AAAAz1C,QAAAA,IAAAC,EAAA,CAAA;AAAAK,MAAAA;AAAA,SAAAN,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAG0BtC,KAAA;AAAA,IAAAg1C;AAAAA,IAAAI,kBAAAjC;AAAAA,EAAAA,GAG9BzzC,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAHM21C,wBAAwBr1C,EAG9B;AAAC;AChBG,MAAMs1C,oBAAoBrgB,YAAY;AAAA,EAC3C7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC,GAMYsvB,eAAetgB,YAAY;AAAA,EACtC7tB,MAAM;AAAA,EACN8tB,SAAS;AAAA,EACTjP,aAAa;AACf,CAAC;ACNeuvB,SAAAA,4BACd/yB,WACAgzB,MACiE;AACjE,QAAMvwC,UAAUuwC,KAAKC,eAAe,CAAA,GAC9BC,wBAAwBF,KAAKG;AAE/BH,OAAKI,eAAeF,yBAAyBA,0BAA0BF,KAAKI,eAE9EtwB,QAAQrK,KACN,oCAAoCu6B,KAAKI,WAAW,2BAA2BF,qBAAqB,aAAaA,qBAAqB,IACxI;AAGF,QAAMlvC,WAAWkvC,yBAAyBF,KAAKI,aACzCC,gBAAgBrzB,UAAUjZ,OAAQpJ,CAAAA,MAAMA,EAAED,eAAes1C,KAAKlvC,YAAY,GAE1Eyf,iBAAiB;AAAA,IACrB,GAAGyvB,KAAKzvB;AAAAA,IACR,GAAI,OAAO9gB,WAAY,WAAWA,WAAW,CAAA,IAAK,CAAA;AAAA,EACpD;AAEA,MAAI0wC,eAAenvC;AAIf,SAAA,CAACA,YAAYqvC,cAAc3zC,WAAW,MACxCyzC,eAAeE,cAAc,CAAC,EAAE9wC,KAG3B;AAAA,IAAC4wC;AAAAA,IAA6B5vB;AAAAA,EAAc;AACrD;ACuBa+vB,MAAAA,uBAAuB/wB,KAAMvlB,CAAqC,UAAA;AACvE,QAAA;AAAA,IAAC4G;AAAAA,IAAUsD;AAAAA,IAAOnF,MAAAA;AAAAA,IAAM4jB;AAAAA,IAAS4tB;AAAAA,EAAAA,IAAev2C,OAChDK,SAASC,UACT0iB,GAAAA,YAAYQ,gBACZ;AAAA,IAACgzB;AAAAA,EAAe,IAAIC,gBACpB;AAAA,IACJ1M;AAAAA,IACA5pC,UAAU;AAAA,MACR+Z,SAASw8B;AAAAA,MACTluB,QAAQmuB;AAAAA,MACRC,uBAAuBC;AAAAA,MACvBpL,yBAAyBqL;AAAAA,MACzBnqB,YAAYoqB;AAAAA,IAAAA;AAAAA,EAEZ7D,IAAAA,UAAAA,GACEpZ,YAAY/D,gBACZihB,gBAAgBC,oBAChB/oB,aAAa/mB,cACb+vC,GAAAA,gBAAgBhpB,WAAWpD,WAC3B;AAAA,IAACsF;AAAAA,EAAQ,IAAIrE,oBACb;AAAA,IAACphB,MAAMijB;AAAAA,EAAS,IAAItlB,YACpB;AAAA,IACJ6W;AAAAA,IACAuC,iBAAiB6K;AAAAA,IACjBlrB,QAAQ;AAAA,IACRm/B,OAAO2W,YAAY,CAAA;AAAA,EACrB,IAAIpyC,OACEqyC,cAActxC,UAAUqZ,OAAO,GAC/Bk4B,gBAAgBD,YAAY7xC,IAC5BsB,aAAaU,eAAe8vC,aAAa,GACzCvwC,eAAeqY,QAAQjY,MACvB1B,SAASM,UAAUooB,WAAW1oB,MAAM,KAAKomB,gBACzCqqB,cAAcnwC,UAAUooB,WAAWzoB,OAAO,GAC1C;AAAA,IAAC0wC;AAAAA,IAAc5vB;AAAAA,EAAAA,IAAkBN,QACrC,MACE8vB,4BAA4B/yB,WAAW;AAAA,IACrClc;AAAAA,IACAqvC,cAAciB,YAAYpwC;AAAAA,IAC1Buf,gBAAgB6wB,YAAYE;AAAAA,IAC5BrB;AAAAA,IACAG,aAAa5wC,OAAOwB;AAAAA,EAAAA,CACrB,GACH,CAACF,cAAcswC,aAAa5xC,QAAQywC,aAAajzB,SAAS,CAC5D,GACMu0B,kBAAkBC,gBAAgB;AAAA,IACtC3wC;AAAAA,IACAC;AAAAA,IACAqvC;AAAAA,IACA5vB;AAAAA,EAAAA,CACD,GACKkxB,eAAe3xC,UAAUyxC,eAAe,GACxC1D,wBAAwB4D,aAAan9B,SAErC;AAAA,IAACilB;AAAAA,EAAAA,IAAS1K,qBAAqBhuB,YAAYC,YAAY,GACvD0mB,YAAYkb,aAAa7hC,YAAYC,YAAY,GACjD;AAAA,IAACw2B,YAAYoa;AAAAA,EAAiBpP,IAAAA,oBAAoBzhC,YAAYC,YAAY,GAC1E4jB,kBAAkBitB,mBAAmB9wC,YAAYC,YAAY,GAC7DpG,aAAaL,OAAOI,IAAIqG,YAAY,GACpChG,QAA4B0sB,WAAW5pB,SAAS4pB,WAAW1pB,aAAa2zC,aAAa32C,OACrF,CAAC6/B,YAAYiF,aAAa,IAAIr1B,SAAS,EAAK,GAG5C2J,UAAU+L,QACd,MAAMywB,iBAAgB;AAAA,IAACh2C,YAAYoG;AAAAA,IAAcD;AAAAA,EAAAA,CAAW,GAC5D,CAAC6vC,kBAAiB7vC,YAAYC,YAAY,CAC5C,GAGM0hB,SAASvC,QACb,MAAM0wB,gBAAe;AAAA,IAACj2C,YAAYoG;AAAAA,IAAcD;AAAAA,EAAAA,CAAW,GAC3D,CAAC8vC,iBAAgB9vC,YAAYC,YAAY,CAC3C,GAGM8wC,iBAAiB3xB,QACrB,MAAM6wB,uBAAuB;AAAA,IAACp2C,YAAYoG;AAAAA,IAAcD;AAAAA,EAAW,CAAA,GACnE,CAACA,YAAYC,cAAcgwC,sBAAsB,CACnD,GAEMxZ,aAAax3B,UAAU4xC,aAAa,GACpClX,SAAQ16B,UAAUqxC,SAAS,GAE3B,CAACpY,WAAW8Y,YAAY,IAAItnC,SAAe,MAC/C/K,OAAO8X,OAAOod,WAAel1B,OAAO8X,IAAI,IAAIlW,aAC9C,GACM0wC,eAAexjC,OAAa,CAAA,CAAE,GAC9BisB,eAAe/6B,OAAO87B,QAASd,OAAM,CAAC,KAAKA,OAAM,CAAC,EAAEj7B,MAAO,MAC3D,CAACwyC,cAAcC,eAAe,IAAIznC,SAAqC,QAAQ,GAE/E,CAAC0nC,eAAeC,gBAAgB,IAAI3nC,SAAuB,IAAI,GAO/DswB,gBAAgBsX,iBAAiB;AAAA,IACrCtxC;AAAAA,IACAC;AAAAA,IACAsxC,SAASF;AAAAA,IACTzd,KAAKj1B,OAAOi1B;AAAAA,IACZ4d,OAAO7yC,OAAO6yC;AAAAA,EAAAA,CACf,GAGKlH,kBAAkBpP,oBAAoBlB,eAAgBh8B,YAAUA,OAAMssC,eAAe,GACrFvG,UAAU7I,oBAAoBlB,eAAgBh8B,CAAAA,YAAUA,QAAM+lC,OAAO,GACrE0N,kBAAkBvW,oBAAoBlB,eAAgBh8B,CAAAA,YAAUA,QAAMyzC,eAAe,GACrFC,oBAAoBxW,oBAAoBlB,eAAgBh8B,CAAUA,YAAAA,QAAM0zC,iBAAiB,GACzFC,gBAAgBzW,oBAAoBlB,eAAgBh8B,CAAUA,YAAAA,QAAM2zC,aAAa,GACjFC,aAAa1W,oBAAoBlB,eAAgBh8B,aAAUA,QAAM4zC,UAAU,GAc3E7X,YAAY3a,QAAQ,MACnBuyB,gBAGU,CAAChrB,WAAW5pB,SAAS,CAAC4pB,WAAW1pB,aAAc,CAAC20C,aAFtD,IAGR,CAACjrB,WAAW5pB,OAAO4pB,WAAW1pB,WAAW20C,YAAYD,aAAa,CAAC,GAIhE9F,aAAaM,cAAclyC,KAAK,GAEhC,CAACqC,UAAUu1C,WAAW,IAAInoC,SAA6B,EAAE;AAC/DU,YAAU,MAAM;AACd,UAAM0nC,eAAe3B,cAAcxvC,iBAAiBX,UAAU,EAAEoZ,UAAW24B,CAAiB,iBAAA;AAC1FF,kBAAYE,YAAY;AAAA,IAAA,CACzB;AACD,WAAO,MAAM;AACXD,mBAAa9uB,YAAY;AAAA,IAC3B;AAAA,EAAA,GACC,CAAChjB,YAAYmwC,aAAa,CAAC;AAExBrqB,QAAAA,cAAkC1G,QACtC,MAAM8wB,mBAAmB;AAAA,IAAClwC;AAAAA,IAAYC;AAAAA,EAAAA,CAAa,GACnD,CAACD,YAAYC,cAAciwC,kBAAkB,CAC/C,GAEM,CAAC8B,eAAeC,gBAAgB,IAAIvoC,SAAwB,MAAM/K,OAAO4lB,WAAW,IAAI,GAGxF2tB,kBAAkBzkC,OAA2B9O,OAAO4lB,OAAO;AACjEna,YAAU,MAAM;AACV8nC,oBAAgBxkC,YAAY/O,OAAO4lB,YACrC2tB,gBAAgBxkC,UAAU/O,OAAO4lB,SACjC0tB,iBAAiBtzC,OAAO4lB,WAAW,IAAI;AAAA,EAAA,GAExC,CAAC5lB,OAAO4lB,OAAO,CAAC;AAEnB,QAAMgnB,mBAAmBzlB,aAAY5Y,KAAMsK,OAAMA,EAAE1W,SAASkxC,aAAa,GACnEG,2BAA2BrsB,YAAW5Y,KAAMsK,CAAAA,QAAMA,IAAE1W,SAAS6kB,sBAAsB,GAEnFic,cAAc2J,kBAAkBzqC,SAAS6kB,wBAEzC;AAAA,IAAC7rB;AAAAA,EAAAA,IAAKC,eAAenB,wBAAwB,GAE7Ck0C,cAAcnuC,OAAO4lB,YAAY,MACjC6tB,eAA+CxQ,cACjD6P,kBACA9qB,WAAW1pB,aAAa,MAEtB0d,eAAsCyE,QAC1C,MAAOvlB,aAAam2C,qBAAqB;AAAA,IAAChwC;AAAAA,IAAYC;AAAAA,IAAcpG;AAAAA,EAAW,CAAA,IAAI,CACnF,GAAA,CAACmG,YAAYC,cAAc+vC,sBAAsBn2C,UAAU,CAC7D,GAcMkQ,QACJ8Z,oBAAoB,eACpB8C,UAAU5c,UACT,CAACpL,OAAOi1B,OAAO+d,iBAAiB,CAAC,CAACP,gBAE/Bnc,YAAiD7V,QACrD,MAAOkrB,kBAAkBoH,qBAAqB;AAAA,IAAC90C,KAAK3C,MAAM2C;AAAAA,IAAKjD,OAAOM,MAAMN;AAAAA,EAASM,IAAAA,OACrF,CAACqwC,iBAAiBoH,mBAAmBz3C,KAAK,CAC5C,GAEMo4C,mBAAmBrzB,YACvB,CAACszB,UAAkBC,WAA0B;AAC7B,kBAAA;AAAA,MACZ,GAAG5zC;AAAAA,MACH6yC,OAAOc;AAAAA,MACP1e,KAAK2e,UAAUxvC;AAAAA,IAAAA,CAChB;AAAA,EAAA,GAEH,CAACpE,QAAQ0xC,aAAa,CACxB,GAEMmC,aAAaxzB,YAChByzB,CAAsB,gBAAA;AACjBC,mBAAehlC,YAInBsjC,aAAazwC,aAAW,GAEpB0wC,aAAavjC,YAAYnN,kBAC3B0wC,aAAavjC,UAAUnN,eACvBmvC,cAAcnvC,aAAW;AAAA,EAAA,GAM7B,CAACmvC,aAAasB,YAAY,CAC5B,GAEM2B,WAAWllC,OAAoC,MAAM;AACnD,UAAA,IAAIrP,MACR,gLACF;AAAA,EAAA,CACD;AACDw0C,qBAAmB,MAAM;AAIvBD,aAASjlC,UAAW1C,CAAsB,UAAA;AAEpC,OAAC2b,UAAU5pB,SAAS,CAAC4pB,UAAU1pB,aACjCg2B,UAAUzC,IAAIye,YAAY,GAE5BvW,MAAMvK,QAAQ0kB,kBAAkB7nC,MAAM2sB,OAAO,GAAGiZ,aAAa32C,KAAK;AAAA,IACpE;AAAA,EAAA,GACC,CAAC0sB,UAAU5pB,OAAO4pB,UAAU1pB,WAAW2zC,aAAa32C,OAAOy+B,OAAOzF,SAAS,CAAC;AAE/E,QAAMpG,eAAe7N,YAAahU,CAAsB2nC,YAAAA,SAASjlC,QAAQ1C,OAAK,GAAG,CAAE,CAAA,GAE7Ese,iBAAiBtK,YACpB8zB,CAAgC,uBAAA;AAE/B,UAAM/uB,YAAY+uB,sBAAsBhtB,YAAW5Y,KAAMsK,CAAMA,QAAAA,IAAE1W,SAASgyC,kBAAkB;AAExFA,QAAAA,sBAAsB,CAAC/uB,WAAW;AAC5BnP,cAAAA,KAAK,uBAAuBk+B,kBAAkB,GAAG;AACzD;AAAA,IAAA;AAGF,QAAKvH,kBAIL;AAAA,UAAIxnB,WAAW;AACPsQ,cAAAA,SAAStQ,UAAUuE,UAAU;AAAA,UAAC3pB;AAAAA,QAAAA,CAAO,KAAK;AAAA,UAACA;AAAAA,QAAM;AAEvDszC,yBAAiB,IAAI,GACrBC,gBAAgBxkC,UAAU3K,QAE1BstC,cAAc;AAAA,UAAC,GAAGhc,OAAO11B;AAAAA,UAAQ4lB,SAASxhB;AAAAA,QAAAA,CAAU;AAEpD;AAAA,MAAA;AAGF,UAAIwoC,kBAAkB;AACdlX,cAAAA,WAASkX,iBAAiBjjB,UAAU;AAAA,UAAC3pB;AAAAA,QAAAA,CAAO,KAAK;AAAA,UAACA;AAAAA,QAAM;AAE9DszC,yBAAiB,IAAI,GACrBC,gBAAgBxkC,UAAU3K,QAE1BstC,cAAc;AAAA,UAAC,GAAGhc,SAAO11B;AAAAA,UAAQ4lB,SAASxhB;AAAAA,QAAAA,CAAU;AAAA,MAAA;AAAA,IACtD;AAAA,EAEF,GAAA,CAACwoC,kBAAkBzlB,aAAYnnB,QAAQ0xC,aAAa,CACtD,GAEMrsB,gBAAgBhF,YACpB,CAAC+zB,mBAA2B9F,eAAwC;AAClE,UAAM+F,gBAAgBltB,YAAW5Y,KAAMsK,CAAMA,QAAAA,IAAE1W,SAASiyC,iBAAiB;AAEzE,QAAI,CAACC,eAAe;AACVp+B,cAAAA,KAAK,uBAAuBm+B,iBAAiB,GAAG;AACxD;AAAA,IAAA;AAIExH,QAAAA,kBAAkBzqC,SAASkyC,cAAclyC,MAAM;AACnC,oBAAA;AAAA,QAAC,GAAGnC;AAAAA,QAAQ,GAAGsuC;AAAAA,QAAY1oB,SAASyuB,cAAclyC;AAAAA,MAAAA,CAAK;AACrE;AAAA,IAAA;AAGF,QAAImyC,gBAAgBt0C;AAEhB4sC,yBAKF0H,iBAJoBD,cAAc1qB,UAAU;AAAA,MAAC3pB,QAAQs0C;AAAAA,IAAAA,CAAc,KAAK;AAAA,MACtEt0C,QAAQs0C;AAAAA,IAGkBt0C,GAAAA;AAGxB01B,UAAAA,WAAS2e,cAAcE,SAAS;AAAA,MAACv0C,QAAQs0C;AAAAA,IAAAA,CAAc,KAAK;AAAA,MAACt0C,QAAQs0C;AAAAA,IAAa;AAExFhB,qBAAiBe,cAAclyC,IAAI,GACnCoxC,gBAAgBxkC,UAAUslC,cAAclyC,MAExCuvC,cAAc;AAAA,MAAC,GAAGhc,SAAO11B;AAAAA,MAAQ,GAAGsuC;AAAAA,MAAY1oB,SAASyuB,cAAclyC;AAAAA,IAAAA,CAAK;AAAA,EAAA,GAE9E,CAACyqC,kBAAkBzlB,aAAYnnB,QAAQ0xC,aAAa,CACtD,GAEM8C,qBAAqBn0B,YAAY,MAAM;AACvCmzB,gCACF7oB,eAAe6oB,yBAAyBrxC,IAAI;AAAA,EAAA,GAE7C,CAACwoB,gBAAgB6oB,wBAAwB,CAAC,GAEvCiB,oBAAoBp0B,YAAY,MAAM;AACrCuK,aAAS8pB,iBAIVlB,4BACFnuB,cAAcmuB,yBAAyBrxC,MAAM;AAAA,MAAC0tC,qBAAqB;AAAA,IAAA,CAAS;AAAA,EAE7E,GAAA,CAACjlB,SAAS8pB,eAAervB,eAAemuB,wBAAwB,CAAC,GAE9DmB,kBAAkBt0B,YAAY,MAAMqI,WAAWksB,aAAAA,GAAgB,CAAClsB,UAAU,CAAC,GAE3EmsB,kBAAkBx0B,YAAY,MAAMqI,WAAWosB,iBAAoB,GAAA,CAACpsB,UAAU,CAAC,GAE/EqsB,sBAAsB10B,YAC1B,CAAC20B,SAAS,CAAC7G,gBAAgB;AAEvBuD,kBADEsD,SACY;AAAA,MAAC,GAAGh1C;AAAAA,MAAQ4lB,SAAS;AAAA,IAAA,IAErBqvB,KAAKj1C,QAAQ,SAAS,CAFI;AAAA,EAAA,GAK5C,CAACmuC,aAAanuC,QAAQ0xC,aAAa,CACrC,GAEMwD,mBAAmB70B,YACtBtd,CAAuB,SAAA;AAClBA,QAAAA,KAAKN,WAAW,wBAAwByqC;AACnCiI,aAAAA,OAAAA,KAAKjI,UAAU,GACf;AAGLnqC,QAAAA,KAAKN,WAAW,uBAAuBsC;AAC/B8sB,aAAAA,UAAAA,IAAIwe,iBAAiB,GAK/BtrC,UAAUC,UAAUC,UAAU4H,OAAOiZ,SAASsvB,SAAU,CAAA,GACxDhtB,UAAU;AAAA,QACRroB,IAAI;AAAA,QACJvB,QAAQ;AAAA,QACR3C,OAAOV,EAAE,6DAA6D;AAAA,MACvE,CAAA,GACM;AAGT,QAAI4H,KAAKN,WAAW;AAClBsyC,aAAAA,oBAAoB,EAAI,GACjB;AAGT,QAAIhyC,KAAKN,WAAW;AAClBgyC,aAAAA,kBACO,GAAA;AAGL,QAAA,OAAO1xC,KAAKN,UAAW,YAAYM,KAAKN,OAAO4yC,WAAWvuB,qBAAqB,GAAG;AACpF,YAAMstB,sBAAoBrxC,KAAKN,OAAOtD,MAAM2nB,sBAAsB5pB,MAAM,GAClEm3C,kBAAgBltB,YAAW5Y,KAAMsK,CAAMA,QAAAA,IAAE1W,SAASiyC,mBAAiB;AAErEC,UAAAA;AACEA,eAAAA,gBAAclyC,SAASkxC,gBACzB1oB,eAAe0pB,gBAAclyC,IAAI,IAEjCkjB,cAAcgvB,gBAAclyC,IAAI,GAE3B;AAAA,IAAA;AAIJ,WAAA;AAAA,EAAA,GAET,CACEhH,GACAwvB,gBACA8pB,mBACApB,eACAlsB,aACA9B,eACA6nB,YACA6H,qBACA3sB,WACAkM,SAAS,CAEb,GAEMghB,2BAA2Bj1B,YAC/B,MAAM00B,oBAAoB,EAAK,GAC/B,CAACA,mBAAmB,CACtB,GAEM,CAAC1c,UAAUkd,aAAa,IAAIxqC,SAAe,EAAE,GAC7C,CAACyqC,iBAAiBC,oBAAoB,IAAI1qC,SAAAA,GAC1C,CAAC8sB,gBAAgBK,kBAAkB,IAAIntB,YACvC,CAAC6sB,oBAAoB8d,uBAAuB,IAAI3qC,YAEhD4qC,2BAA2Bt1B,YAAY,CAACvI,MAAY7J,cAAuB;AAC/EiqB,uBAAoB0d,CAAcC,cAAAA,UAAUD,WAAW99B,MAAM7J,SAAS,CAAC;AAAA,EAAA,GACtE,CAAA,CAAE,GAEC6nC,+BAA+Bz1B,YAAY,CAACvI,QAAY7J,gBAAuB;AACnFynC,4BAAyBE,CAAcC,gBAAAA,UAAUD,aAAW99B,QAAM7J,WAAS,CAAC;AAAA,EAAA,GAC3E,CAAA,CAAE,GAEC8nC,4BAA4B11B,YAChC,CAACvI,QAAYk+B,cACXP,qBAAsBG,iBAAcC,UAAUD,aAAW99B,QAAMk+B,SAAS,CAAC,GAC3E,CAAA,CACF,GAEMviB,qBAAqBn4B,MAAMugC,aAAa,WAAW,UACnDzS,WAAW/f,CAAQnO,CAAAA,YAAYkuB,UAC/B6sB,QAAQ36C,MAAM2C,MAAM3C,MAAM2C,MAAM,YAChCi4C,sBAAsBz1B,QAAQ,OAC3B;AAAA,IACL,GAAGnlB;AAAAA,IACH2C,KAAKmrB,WAAWrnB,eAAek0C,KAAK,IAAIvvC,WAAWuvC,KAAK;AAAA,EAAA,IAEzD,CAAC7sB,UAAU9tB,OAAO26C,KAAK,CAAC,GAErB,CAAChb,aAAaC,oBAAoB,IAAIib,4BAA4B;AAAA,IACtEx7C,UAAUu7C;AAAAA,IACVl3B,YAAYyU;AAAAA,EACb,CAAA,GAEK2iB,iBAAiBC,6BAA6B/6C,KAAK,GACnDg7C,gBAAgB,CAACh7C,OAAO2C,KAExB27B,WAAWnZ,QAAQ,MAAM;AAC7B,UAAM81B,kBAAkB,CAACrb,wBAAwB,CAACD,aAAavc,SACzD83B,uBAAuB,CAACC,gBAAgBv7C,YAAa,QAAQ,GAC7Dw7C,uBAAuBJ,iBAAiB,CAACG,gBAAgBv7C,YAAa,QAAQ,GAC9Ey7C,eAAezxB,oBAAoB,gBACnCqT,WAAWvQ,UAAUwQ,qBAAqBvkB,SAG1C2iC,qBAAqBvtC,CAAAA,EAAQ+f,YAAYpB,UAAU5pB;AAGvD,WAAA,CAACgN,SACDg6B,YAAY,QACZmR,mBACAC,wBACAE,wBACAC,gBACApe,YACA4C,cACAC,aACAwb,sBACAR;AAAAA,EAAAA,GAED,CACDlb,sBACAD,aAAavc,SACbxjB,YACAo7C,eACApxB,iBACA8C,UAAUwQ,qBAAqBvkB,SAC/B+T,UAAU5pB,OACVgrB,UACAhe,OACAg6B,SACAjK,YACAC,WACAgb,cAAc,CACf,GAEKre,YAAY8e,aAAa;AAAA,IAC7B37C;AAAAA,IACAN,eAAe07B;AAAAA,IACfsD;AAAAA,IACAkd,iBAAiBrD;AAAAA,IACjBla;AAAAA,IACAlB;AAAAA,IACAR;AAAAA,IACAl6B;AAAAA,IACAm6B;AAAAA,IACAF;AAAAA,IACA4d;AAAAA,IACAvS;AAAAA,EAAAA,CACD;AAEDx3B,YAAU,MAAM;AACE,oBAAA;AAAA,MACdpK;AAAAA,MACAC;AAAAA,MACApG;AAAAA,MACA8yB,UAAUE;AAAAA,IAAAA,CACX;AAAA,EAAA,GACA,CAAC7sB,YAAYC,cAAcpG,YAAYgzB,cAAc8iB,eAAe,CAAC;AAElE+F,QAAAA,eAAejoC,OAAOipB,SAAS;AACrCtsB,YAAU,MAAM;AACdsrC,iBAAahoC,UAAUgpB;AAAAA,EAAAA,GACtB,CAACA,SAAS,CAAC;AAERif,QAAAA,cAAc32B,YACjBvI,CAAe,WAAA;AACFm/B,wBAAoBF,aAAahoC,SAAU+I,MAAI,EACvDo/B,QAAStuB,CAAO,OAAA;AACdA,SAAGlnB,SAAS,gBACdw2B,mBAAoB0d,iBAAcC,UAAUD,aAAWhtB,GAAG9Q,MAAM,EAAK,CAAC,GAEpE8Q,GAAGlnB,SAAS,oBACdg0C,wBAAyBE,CAAAA,gBAAcC,UAAUD,aAAWhtB,GAAG9Q,MAAM,EAAK,CAAC,GAEzE8Q,GAAGlnB,SAAS,sBACd+zC,qBAAsBG,CAAAA,gBAAcC,UAAUD,aAAWhtB,GAAG9Q,MAAM8Q,GAAGotB,SAAS,CAAC;AAAA,IAAA,CAElF,GACDT,cAAcz9B,MAAI;AAAA,EAAA,GAEpB,CAACi/B,YAAY,CACf,GAEMI,iBAAiB92B,YACrB,CAAC+2B,eAAqBn3C,YAAiC;AACrDuxC,kBAAc6F,YAAY,CACxB;AAAA,MACE31C,MAAM;AAAA,MACNL;AAAAA,MACAyW,MAAMs/B;AAAAA,MACNE,eAAc,oBAAIjkB,KAAK,GAAEkkB,YAAY;AAAA,MACrCC,WAAWv3C,SAASu3C;AAAAA,IAAAA,CACrB,CACF;AAAA,EAAA,GAEH,CAACn2C,YAAYmwC,aAAa,CAC5B,GAEMiG,0BAA0Bh3B,QAC9B,MAAMi3B,SAASP,gBAAgB,KAAM;AAAA,IAACQ,SAAS;AAAA,IAAMC,UAAU;AAAA,EAAA,CAAK,GACpE,CAACT,cAAc,CACjB,GAEMU,cAAcx3B,YAClB,CAACy3B,gBAAsB73C,cAAiC;AAChDm3C,UAAAA,kBAAgBW,QAAQD,cAAc;AACxCV,wBAAkB9E,aAAavjC,YACjCsjC,aAAa0F,QAAQX,eAAa,CAAC,GACnCJ,YAAYe,QAAQX,gBAAcj4C,MAAM,GAAG,EAAE,CAAC,CAAC,GAC/CmzC,aAAavjC,UAAUqoC,iBACvBrG,cAAcqG,eAAa,IAE7BK,wBAAwBL,iBAAen3C,SAAO;AAAA,EAAA,GAEhD,CAAC8wC,aAAaiG,aAAaS,uBAAuB,CACpD,GAEM5yB,eAAyCpE,QAC7C,OAAO;AAAA,IACL/L;AAAAA,IACAqmB;AAAAA,IACA/X;AAAAA,IACAigB;AAAAA,IACAtY;AAAAA,IACAiN;AAAAA,IACAC;AAAAA,IACA4b;AAAAA,IACAvuB;AAAAA,IACAoR;AAAAA,IACAj1B;AAAAA,IACAwwC;AAAAA,IACAvwC;AAAAA,IACA0mB;AAAAA,IACAhM;AAAAA,IACAud;AAAAA,IACAnU,WAAWwnB,oBAAoB;AAAA,IAC/BzlB,YAAAA;AAAAA,IACAod;AAAAA,IACAtM,QAAQ4b;AAAAA,IACR7lB,UAAUE;AAAAA,IACV8J,SAAS6f;AAAAA,IACT1yB,YAAY6xB;AAAAA,IACZgB,gBAAgBxD;AAAAA,IAChBpG,eAAeqG;AAAAA,IACfpmB,gBAAgBinB;AAAAA,IAChBxP,cAAcoP;AAAAA,IACdnP,aAAa4O;AAAAA,IACb3O,aAAa6O;AAAAA,IACbzc,uBAAuB2d;AAAAA,IACvB7d,oBAAoByd;AAAAA,IACpBxd,wBAAwB2d;AAAAA,IACxBzwB;AAAAA,IACAgT;AAAAA,IACA3zB;AAAAA,IACAypC;AAAAA,IACArW;AAAAA,IACA5b,gBAAgBA,kBAAkB,CAAE;AAAA,IACpCiH;AAAAA,IACA+pB;AAAAA,IACA9hC;AAAAA,IACAlQ;AAAAA,IACAggC;AAAAA,IACAmT;AAAAA,IACApT;AAAAA,IACAuX;AAAAA,IACAkB;AAAAA,IACAtT;AAAAA,IACAjF;AAAAA,IACAC;AAAAA,IACAqX;AAAAA,IACAF;AAAAA,IACAlX;AAAAA,IACAx/B;AAAAA,IACAP;AAAAA,IACA0/B,OAAAA;AAAAA,IACAjD;AAAAA,IACAkO,yBAAyBmM;AAAAA,EAC3B,IACA,CACE7N,kBACA7vB,SACAqmB,cACA/X,QACAigB,aACAtY,gBACAiN,oBACAC,gBACA4b,cACAvuB,iBACA0nB,kBACAtW,WACAj1B,YACAwwC,eACAvwC,cACA0mB,WACAhM,cACAud,WACAxB,WACA8b,YACA3lB,cACA2pB,aACArD,oBACAC,mBACAa,0BACAJ,kBACAY,8BACAH,0BACAhB,iBACAE,iBACAkB,2BACArxC,OACAypC,aACAhnB,aACAiU,WACAD,YACAD,sBACAmT,uBACA+D,gBACAl2B,gBACAmJ,eACAgT,UACAlV,SACA8X,aACAiS,YACA9hC,OACAlQ,YACA87C,aACAtD,kBACAjB,eACAF,cACAlX,eACAx/B,OACAi8B,YACAx8B,OACA0/B,MAAK,CAET;AAEAvvB,YAAU,MAAM;AACVwsC,QAAAA;AACJ,WAAI/yB,oBAAoB,mBACtB+yB,UAAU1sC,WAAW,MAAM;AACf,gBAAA;AAAA,QACRxL,IAAI;AAAA,QACJvB,QAAQ;AAAA,QACR3C,OAAOV,EAAE,iDAAiD;AAAA,MAAA,CAC3D;AAAA,IAAA,GACA,GAAI,IAEF,MAAM;AACP88C,iBAASzsC,aAAaysC,OAAO;AAAA,IACnC;AAAA,EACC,GAAA,CAAC/yB,iBAAiBkD,WAAWjtB,CAAC,CAAC;AAE5B44C,QAAAA,iBAAiBjlC,OAAO,EAAK;AAGnCrD,SAAAA,UAAU,MAAM;AACVL,QAAAA,SAASpL,OAAO8X,MAAM;AAClB,YAAA;AAAA,QAACA,MAAAA;AAAAA,QAAM,GAAGogC;AAAAA,MAAAA,IAAcl4C,QACxBm4C,cAAcC,iBAAiBrB,aAAahoC,SAASzT,OAAO45B,WAAepd,MAAI,CAAC;AAEtFi8B,qBAAehlC,UAAU,IAGpBspC,YAAW/F,aAAavjC,SAASopC,WAAW,MAC/C9F,aAAa8F,WAAW,GACxBnB,YAAYmB,WAAW,GACvB7F,aAAavjC,UAAUopC,aACvBpH,cAAcoH,WAAW;AAGrBF,YAAAA,YAAU1sC,WAAW,MAAM;AAC/BwoC,uBAAehlC,UAAU;AAAA,SACxB,CAAC;AAGJ2Z,aAAAA,WAAWpD,UAAU4yB,UAAU,GAExB,MAAM1sC,aAAaysC,SAAO;AAAA,IAAA;AAAA,EACnC,GAGC,CAACj4C,QAAQqB,YAAY0vC,aAAaiG,aAAa5rC,OAAOsd,UAAU,CAAC,uBAGjE,oBAAoB,UAApB,EAA6B,OAAO7D,cAAezjB,UAAS;AAEjE,CAAC;AAED0vC,qBAAqBtgC,cAAc;ACnxBtB8nC,MAAAA,eAAev4B,KAAK,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAC/B;AAAA,IAAAyH,MAAAo2C;AAAAA,EAAAA,IAAiC7K,UAAU,GAGnB3yC,KAAAP,MAAK+E,KAAAi5C,UAAgBD;AAAgBl9C,MAAAA;AAAAZ,WAAAD,SACzDa,KAAC,oBAAA,mBAAA,EACC,UAAC,oBAAA,mBAAA,KAAsBb,OAAK,GAC9B,GAAoBC,OAAAD,OAAAC,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,EAAAM,CAAAA,MAAAA,MAAAN,SAAAY,MAHtBI,KAAC,oBAAA,gBAAqB,EAAA,MAAAV,IACpBM,UAGF,GAAA,CAAA,GAAiBZ,OAAAM,IAAAN,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAJjBgB;AAIiB,CAEpB;AAED,SAAAg9C,kBAAAj+C,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACE;AAAA,IAAA6E,MAAAA;AAAAA,IAAA4jB;AAAAA,MAAwB3oB,OACxB;AAAA,IAAAk+C;AAAAA,EAAoChL,IAAAA,UAAW/yC,EAAAA,UAC/C+tB,aAAmB/mB,cACnBgY,GAAAA,UAAgBg/B,eAAep5C,MAAIoa,SAAU+O,WAAU1oB,MAAO,GAC9D;AAAA,IAAAsB;AAAAA,IAAAs3C,UAAAC;AAAAA,EAAAA,IAAmDC,gBAAgBn/B,QAAO5Z,IAAK4Z,QAAOjY,IAAK,GAE3FwsC,kBAAuBgC,2BAA2B;AAAC,MAAAn1C,IAAAM;AAAAZ,IAAA,CAAA,MAAAkf,QAAA5Z,MAAAtF,EAAAkf,CAAAA,MAAAA,QAAAjY,QAAAjH,SAAAi+C,6BAK1Cr9C,KAAAq9C,0BAAyB;AAAA,IAAAh3C,MACxB;AAAA,IAAUL,YACJsY,QAAO5Z;AAAAA,IAAA7E,YACPye,QAAOjY;AAAAA,EAAAA,CACpB,GAACjH,EAAA,CAAA,IAAAkf,QAAA5Z,IAAAtF,EAAA,CAAA,IAAAkf,QAAAjY,MAAAjH,OAAAi+C,2BAAAj+C,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJFM,KAAOM;AADT,QAAA0iB,gBAAsBhjB;AAMmCU,MAAAA;AAAAhB,WAAAsjB,iBAE0BtiB,KAAA;AAAA,IAAAsiB;AAAAA,EAAA,GAElFtjB,OAAAsjB,eAAAtjB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAFD,QAAA,CAAAwjB,qBAAAC,4BAAA,IAA4DC,uBAAuB1iB,EAElF,GACDm9C,WAAiBC,oBAAgB,CAAK36B;AAA4B,MAAAxiB,IAAA4B;AAAA7C,IAAA,CAAA,MAAA6G,gBAAA7G,EAAAm+C,CAAAA,MAAAA,YAAAn+C,EAAAkf,CAAAA,MAAAA,WAAAlf,SAAAD,SAGzD8C,KAAAs7C,YAAYt3C,gBAAgBqY,QAAOjY,SAAUJ,eAChDy3C,kBAAkBv+C,OAAOmf,SAASrY,YAAY,IAC9C9G,OAAKC,OAAA6G,cAAA7G,OAAAm+C,UAAAn+C,OAAAkf,SAAAlf,OAAAD,OAAAC,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAFTiB,KAAO4B;AADT,QAAA07C,gBAAsBt9C,IAMtB;AAAA,IAAAyF,oBAAAA;AAAAA,IAAA83C;AAAAA,IAAAj6C;AAAAA,IAAAD;AAAAA,EAAAA,IAAgF2pB;AAAUnrB,MAAAA;AAAA9C,IAAAuE,EAAAA,MAAAA,cAAAvE,UAAAsE,oBACtExB,KAAAwB,iBAAiBC,aAAc,CAAA,IAAA,CAAA,EAAAgB,UAAmB,IAAAvF,QAAAuE,YAAAvE,QAAAsE,kBAAAtE,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAtE,QAAAy+C,cAAoB37C,IACpB47C,yBAA+Bp6C,iBAAgB7B,QAC/C;AAAA,IAAAqE;AAAAA,EAAAA,IAAwB23C;AAAW,MAAAv6C,IAAAiC;AAAAnG,IAAAuE,EAAAA,MAAAA,cAAAvE,UAAA8G,iBAAA9G,EAAA,EAAA,MAAA0+C,0BAG1Bv4C,KAAAW,gBAAa;AAAA,IAAAuW,MAERod,WAAe3zB,aAAa;AAAA,IAAClC,OAGjCL,cAAcm6C,6BACV,SACAn6C,cAAcm6C,yBAA0B,IACtC,aACA;AAAA,EAAA,IAAS;AAAA,IAAArhC,MAAA,CAAA;AAAA,IAAAzY,OAED;AAAA,EAAA,GAAO5E,QAAAuE,YAAAvE,QAAA8G,eAAA9G,QAAA0+C,wBAAA1+C,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAX7BkE,KAAOiC;AADT,QAAAw4C,aAAyEz6C,IAezE;AAAA,IAAAxD;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAAC,MAEhD0f,QAAOjY,SAAU,QAAQk3C,UAAQ;AAAA/3C,QAAAA;AAAApG,cAAAU,KAMxB0F,MAAA1F,EAAE,gDAAgD,GAACV,QAAAU,GAAAV,QAAAoG,OAAAA,MAAApG,EAAA,EAAA;AAAAqG,QAAAA;AAAA,WAAArG,EAAA0oB,EAAAA,MAAAA,WAAA1oB,UAAAoG,OAJ5DC,0BAAC,aACO,EAAA,MAAE,KACE,UAAA,KACDqiB,SACF,OAAAtiB,IACP,CAAA,GAAApG,QAAA0oB,SAAA1oB,QAAAoG,KAAApG,QAAAqG,OAAAA,MAAArG,EAAA,EAAA,GALFqG;AAAAA,EAAAA;AAKE,MAAA,CAIDQ,cAAY;AAAAT,QAAAA;AAAApG,cAAAU,KAMJ0F,MAAA1F,EAAE,8CAA8C,GAACV,QAAAU,GAAAV,QAAAoG,OAAAA,MAAApG,EAAA,EAAA;AAAAqG,QAAAA;AAAArG,MAAA,EAAA,MAAAkf,QAAA5Z,MAO1Ce,MAAA;AAAA,MAAAf,IAAK4Z,QAAO5Z;AAAAA,IAAItF,GAAAA,EAAA,EAAA,IAAAkf,QAAA5Z,IAAAtF,QAAAqG,OAAAA,MAAArG,EAAA,EAAA;AAAAuG,QAAAA;AAAAvG,MAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACZ2D,OAAA;AAAA,MAAAogB,MAAA5c;AAAAA,IAAAA,GAA+C/J,QAAAuG,QAAAA,OAAAvG,EAAA,EAAA;AAAAyG,QAAAA;AAAAzG,MAAAU,EAAAA,MAAAA,KAAAV,UAAAqG,OANjEI,2BAAC,OAAa,EAAA,OAAA,GACZ,UAAC,oBAAA,MAAA,EAAQ,IAAA,KACP,UAAA,oBAAC,aACI/F,GACK,SAAA,+CACA,QAAA2F,KACI,YAAAE,KAEhB,CAAA,GAAA,GACF,GAAQvG,QAAAU,GAAAV,QAAAqG,KAAArG,QAAAyG,QAAAA,OAAAzG,EAAA,EAAA;AAAA6I,QAAAA;AAAA7I,WAAAA,EAAA0oB,EAAAA,MAAAA,WAAA1oB,UAAAyG,QAAAzG,EAAA,EAAA,MAAAoG,OAfVyC,2BAAC,WACO,EAAA,MAAA,KACI,UAAE,KACH6f,SACF,OAAAtiB,KAEPK,UAAAA,KAUF,CAAA,GAAYzG,QAAA0oB,SAAA1oB,QAAAyG,MAAAzG,QAAAoG,KAAApG,QAAA6I,QAAAA,OAAA7I,EAAA,EAAA,GAhBZ6I;AAAAA,EAAAA;AAwBK,QAAAzC,KAAGS,GAAAA,YAAY,IAAIqY,QAAO5Z,EAAA;AAAKe,MAAAA;AAAArG,IAAA,EAAA,MAAAyzC,mBAAAzzC,EAAAkf,EAAAA,MAAAA,QAAA5Z,MAAAtF,EAAAkf,EAAAA,MAAAA,QAAAjY,QAahCZ,yBAACotC,mBAA2B,YAAAv0B,QAAO5Z,IAAmB,cAAA4Z,QAAOjY,MAAS,GAAAjH,QAAAyzC,iBAAAzzC,EAAA,EAAA,IAAAkf,QAAA5Z,IAAAtF,EAAA,EAAA,IAAAkf,QAAAjY,MAAAjH,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,IAAA,EAAA,MAAAkf,QAAA5Z,MAAAtF,EAAAkf,EAAAA,MAAAA,QAAAjY,QAAAjH,UAAAqG,MADxEE,MAAA,oBAAC,mBAA4B,YAAA2Y,QAAO5Z,IAAmB,cAAA4Z,QAAOjY,MAC5DZ,UACF,GAAA,CAAA,GAAkBrG,EAAA,EAAA,IAAAkf,QAAA5Z,IAAAtF,EAAA,EAAA,IAAAkf,QAAAjY,MAAAjH,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,IAAA0G,EAAAA,MAAAA,uBAAA1G,EAAA,EAAA,MAAA2+C,cAAA3+C,EAAAw+C,EAAAA,MAAAA,uBAAAx+C,EAAA,EAAA,MAAAuG,OAAAvG,UAAAwjB,uBARpB/c,MAAC,oBAAA,+BAAA,EAC6BC,4BAAAA,qBACX83C,iBAAkB,qBACRh7B,2BAAAA,qBACfm7B,YAEZp4C,UAGF,IAAA,CAAA,GAAgCvG,QAAA0G,qBAAA1G,QAAA2+C,YAAA3+C,QAAAw+C,qBAAAx+C,QAAAuG,KAAAvG,QAAAwjB,qBAAAxjB,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA,SAAA7I,EAAAu+C,EAAAA,MAAAA,iBAAAv+C,UAAAyG,OAAAzG,EAAA,EAAA,MAAAoG,MAlBlCyC,0BAAC,sBAIK01C,EAAAA,GAAAA,eAKJ93C,UANKL,IAAAA,GAAAA,EAgBP,GAAuBpG,QAAAu+C,eAAAv+C,QAAAyG,KAAAzG,QAAAoG,IAAApG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA,GAnBvB6I;AAmBuB;AAzG3B,SAAAkB,QAAAzJ,IAAA;AA6EkC,QAAA;AAAA,IAAAqG;AAAAA,EAAAA,IAAArG;AAAe,SAAA,oBAAuB,UAAT,UAAE;AAAO;AAgCxE,SAAA49C,eAAAh/B,SAAA5e,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA;AAAAW,MAAAA;AAAAZ,WAAAM,MAEEM,KAAAN,OAA+CqJ,UAA/CrJ,IAAAA,IAA+CN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAA/CuF,QAAAA,SAAA3E,IAEAmiB,YAAkBQ,aAAa;AAACviB,MAAAA;AAAA,OAAA;AAAA,QAI1Bke,QAAOjY,QAASiY,QAAOjY,SAAU,KAAG;AAC/BiY,WAAAA;AAAOpK,YAAAA;AAAAA,IAAAA;AAIhBohC,UAAAA,eAAqBh3B,QAAOnY,YAAaxB,OAAMwB;AAAS9F,QAAAA;AAAAjB,MAAAk2C,CAAAA,MAAAA,gBAAAl2C,SAAA+iB,aACvC9hB,KAAAi1C,eAAenzB,UAASjP,KAAApT,CAAAA,MAAaA,EAAC4E,OAAQ4wC,YAAY,IAACvsC,QAAY3J,OAAAk2C,cAAAl2C,OAAA+iB,WAAA/iB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AACxF,UAAA6G,eADiB5F,IACYR;AAAY,QAAA,CAGpCoG,cAAY;AACRqY,WAAAA;AAAOpK,YAAAA;AAAAA,IAAAA;AAAAjS,QAAAA;AAAA7C,MAAA6G,CAAAA,MAAAA,gBAAA7G,SAAAkf,WAITrc,KAAA;AAAA,MAAA,GAAIqc;AAAAA,MAAOjY,MAAQJ;AAAAA,IAAAA,GAAa7G,OAAA6G,cAAA7G,OAAAkf,SAAAlf,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GAAvCgB,KAAO6B;AAAAA,EAAAA;AAjBF7B,SAAAA;AAkBkC;AAG3C,SAASs9C,kBACPv+C,OACAmf,SACArY,cAC2B;AACpB,SAAA;AAAA,IACL,GAAG9G;AAAAA,IACH+E,MAAM;AAAA,MACJ,GAAG/E,MAAM+E;AAAAA,MACToa,SAAS;AAAA,QAAC,GAAGA;AAAAA,QAASjY,MAAMJ;AAAAA,MAAAA;AAAAA,IAAY;AAAA,EAE5C;AACF;AC7LO,MAAM+3C,qBAAqB,KACrBC,kBAAkB,KAClBC,mBAA8B;AAAA,EAACC,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAcvvC,WAAW;AAAA,EAAO,CAAA;AAAC,GAC7EwvC,eAAwC,CAAC,GCiBhDC,UAAU39C,OAAOC,GAAG;AAAA;AAAA,aAEZzB,CAAAA,UAAUA,MAAMo/C,YAAY,CAAC;AAAA;AAAA,GAIrCC,iBAAiB79C,OAAOC,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA2B3B69C,iBAAiB,CAAC,GAAG5wC,MAAM,EAAE,EAAE6wC,MAAM;AAE3C,SAAAC,YAAAx/C,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GACE;AAAA,IAAAgD;AAAAA,EAAAA,IAAiBlD;AAAKO,MAAAA;AAAAN,WAAAiD,UAIjB3C,KAAA++C,eAAA71C,IAAAg2C,CACC,QAAA,oBAAC,sBAAqB,EAAA,mBAAsBv8C,OAAAA,GAAau8C,GAAG,CAC7D,GAACx/C,OAAAiD,QAAAjD,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAA,SAAAZ,SAAAM,MAHJM,KAAA,oBAAC,OAAgB,EAAA,aAAa,UAAA,GAAe,YAAC,GAAS,OAAC,GACrDN,UAAAA,GAGH,CAAA,GAAQN,OAAAM,IAAAN,OAAAY,MAAAA,KAAAZ,EAAA,CAAA,GAJRY;AAIQ;AAIL,SAAA6+C,wBAAA1/C,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAy/C;AAAAA,IAAA5+C;AAAAA,IAAA6+C;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAA9U;AAAAA,IAAA+U;AAAAA,IAAAl8C;AAAAA,IAAAivC;AAAAA,IAAA5vC;AAAAA,IAAA88C;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAiBIrgD,OAEJK,SAAeC,aAEf;AAAA,IAAAmT,WAAAC;AAAAA,EAAA,IAAqC5O,iBACrC;AAAA,IAAA2O;AAAAA,IAAAvJ;AAAAA,EAAAA,IAA2B+L,QAAQ,GACnC,CAAA86B,cAAAuP,eAAA,IAAwC/vC,SAAA,CAAUkD,SAAS,GAC3D;AAAA,IAAA9S;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACc,MAAAA;AAAAN,IAAAggD,CAAAA,MAAAA,gBAAAhgD,SAAA8wC,gBAEfxwC,KAAAA,MAAA;AAC/BwwC,oBACFkP,aAAa;AAAA,EAEhBhgD,GAAAA,OAAAggD,cAAAhgD,OAAA8wC,cAAA9wC,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJD,QAAAsgD,mBAAyBhgD;AAIOM,MAAAA;AAAAZ,WAAAwT,aAEtB5S,KAAAA,MAAA;AACJ4S,QAAAA;AAAS;AAEb/H,UAAAA,SAAcqF,WAAA,MAAA;AACZuvC,wBAAoB;AAAA,OAAC,CACnB;AAAC,WAAA,MAAA;AAGHtvC,mBAAatF,MAAK;AAAA,IAAC;AAAA,EAAA,GAEtBzL,OAAAwT,WAAAxT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAwT,CAAAA,MAAAA,aAAAxT,SAAA6yC,SAAE7xC,KAAA,CAACwS,WAAWq/B,KAAK,GAAC7yC,OAAAwT,WAAAxT,OAAA6yC,OAAA7yC,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAVrBgR,UAAUpQ,IAUPI,EAAkB;AAACC,MAAAA;AAAAjB,IAAA0/C,CAAAA,MAAAA,eAAA1/C,SAAA4/C,eAAA5/C,EAAA,EAAA,MAAA+qC,YAAA/qC,EAAA8/C,EAAAA,MAAAA,iBAAA9/C,EAAA,EAAA,MAAA6yC,MAAApwC,UAAAzC,EAAAiD,EAAAA,MAAAA,UAAAjD,EAAA,EAAA,MAAAI,UAAAJ,EAAAogD,EAAAA,MAAAA,aAAApgD,UAAAU,KAGpBO,KAAAA,CAAAqH,MAAAzF,QAAA;AAAO,UAAA;AAAA,MAAAwuC;AAAAA,IAAA,IAAAxuC,KACLqJ,cAAoB5E,eAAegB,KAAI9E,GAAI,GAC3C+8C,aAAmBb,gBAAgBxzC,aACnC6a,UAAgB,CAACgkB,YAAYwV,YAC7BptC,WAAiB43B,YAAYwV,YAC7BC,aAAmBnP,gBAAgBwB,MAAKpwC,SAAW,GACnDg+C,cAAoBD,cAAcV,eAClCY,sBAA4BF,cAAcZ;AAAW,WAIjD,qBAAA,UAAA,EAAA,UAAA;AAAA,MAAC,oBAAA,UAAA,EACO,MAAAQ,mBAAmBz2C,KAAAA,QACrBuC,IAAU,aACNjJ,QACM,cAAC,GACN8jB,SACG,YAAA3mB,OAAMI,IAAK8H,KAAI/H,KAAM,GACvB4S,UACH7K,OAAAA,MAGR;AAAA,MAAAm4C,mCAAgB,cAAc,EAAA;AAAA,MAE9BC,uBACE,oBAAA,KAAA,EAAa,SAAA,GAAa,UAAA,GAAa,aACtC,UAAC,oBAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IAAQ,SAC9BhgD,YAAE,2CAAyC;AAAA,QAAAigD,OAAA9B;AAAAA,MAA0B,CAAA,EACxE,CAAA,EACF,CAAA;AAAA,IAAA,GACD;AAAA,EAAA,GAGN7+C,OAAA0/C,aAAA1/C,OAAA4/C,aAAA5/C,QAAA+qC,UAAA/qC,QAAA8/C,eAAA9/C,EAAA,EAAA,IAAA6yC,MAAApwC,QAAAzC,QAAAiD,QAAAjD,QAAAI,QAAAJ,QAAAogD,WAAApgD,QAAAU,GAAAV,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAlCH,QAAA4gD,aAAmB3/C;AAoClB4B,MAAAA;AAAA,OAAA;AAAA,QAGKg9C,gBAAc;AAAA/8C,UAAAA;AAAA9C,gBAAAU,KAMLoC,MAAApC,EAAE,4CAA4C,GAACV,QAAAU,GAAAV,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA;AAAAkE,UAAAA;AAAAlE,gBAAA8C,OAJxDoB,MAAC,oBAAA,MAAA,EAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAAC,oBAAA,WAAA,EAAiB,OAAC,GACjB,UAAA,oBAAC,KAAc,EAAA,UAAC,GAAY,UAAC,GAC3B,UAAC,oBAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IACtBpB,UAAAA,IACH,CAAA,EACF,CAAA,EACF,CAAA,GACF,GAAO9C,QAAA8C,KAAA9C,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA,GATT6C,KACEqB;AASD4Q,YAAAA;AAAAA,IAAAA;AAAAhS,QAAAA;AAAA9C,MAAA2/C,EAAAA,MAAAA,gCAAA3/C,UAAAU,KAQQoC,MACGpC,EADHi/C,+BACK,uDACA,qDADoD,GACE3/C,QAAA2/C,8BAAA3/C,QAAAU,GAAAV,QAAA8C,OAAAA,MAAA9C,EAAA,EAAA;AAAAkE,QAAAA;AAAAlE,cAAA8C,OANpEoB,MAAC,oBAAA,MAAA,EAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,UAAC,oBAAA,WAAA,EAAiB,OAAC,GACjB,UAAA,oBAAC,KAAc,EAAA,UAAC,GAAY,UAAC,GAC3B,UAAC,oBAAA,MAAA,EAAW,OAAA,UAAS,OAAI,IACtBpB,UAAAA,IAGH,CAAA,EACF,CAAA,EACF,CAAA,GACF,GAAO9C,QAAA8C,KAAA9C,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA,GAXT6C,KACEqB;AAAAA,EAAAA;AAhBJ,QAAA28C,qBAA2Bh+C;AA4B0BC,MAAAA;AAAA,OAAA;AAAA,QAAA,CAG9CguC,cAAY;AACf,WAAA;AAAW/7B,YAAAA;AAAAA,IAAAA;AAAA,QAGTjU,OAAK;AAAAoD,UAAAA;AAAAlE,gBAAAU,KAKmBwD,MAAAxD,EAAE,sCAAsC,GAACV,QAAAU,GAAAV,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA;AAAAmG,UAAAA;AAAAnG,gBAAAkE,OAA3DiC,MAAC,oBAAA,SAAA,EAAW,IAAA,MAAMjC,UAAAA,KAA0C,GAAUlE,QAAAkE,KAAAlE,QAAAmG,OAAAA,MAAAnG,EAAA,EAAA;AAAAoG,UAAAA;AAAApG,QAAA,EAAA,MAAAc,MAAAI,WAK1DkF,MAAA;AAAA,QAAAtF,OAAQA,MAAKI;AAAAA,MAASlB,GAAAA,EAAA,EAAA,IAAAc,MAAAI,SAAAlB,QAAAoG,OAAAA,MAAApG,EAAA,EAAA;AAAAqG,UAAAA;AAAArG,QAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAClByD,KAAA;AAAA,QAAAsgB,MAAA5c;AAAAA,MAAAA,GAA+C/J,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,UAAAA;AAAAvG,QAAAU,EAAAA,MAAAA,KAAAV,UAAAoG,OAL/DG,MAAC,oBAAA,QAAQ,IAAA,KACP,8BAAC,WACI7F,EAAAA,GACK,SAAA,uCACA,QAAA0F,KACI,YAAAC,IAEhB,EAAA,CAAA,GAAOrG,QAAAU,GAAAV,QAAAoG,KAAApG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,UAAAA;AAAAzG,QAAAc,EAAAA,MAAAA,SAAAd,UAAAigD,WACPx5C,0BAAC,cAAoB3F,EAAAA,OAAgB,eAAem/C,SAAW,GAAAjgD,QAAAc,OAAAd,QAAAigD,SAAAjgD,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,UAAAA;AAAA7I,QAAAuG,EAAAA,MAAAA,OAAAvG,UAAAyG,OAAAzG,EAAA,EAAA,MAAAmG,OAZrE0C,MAAA,oBAAC,QAAW,OAAA,UAAmB,WAAA,UAAgB,QAAA,QAAe,SAAA,UAC5D,8BAAC,WAAiB,EAAA,OAAA,GAChB,UAAA,qBAAC,SAAgB,UAAA,GAAa,UAAA,GAAU,OAAA,GACtC1C,UAAAA;AAAAA,QAAAA;AAAAA,QACAI;AAAAA,QAQAE;AAAAA,MACF,EAAA,CAAA,EACF,CAAA,GACF,GAAOzG,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAAmG,KAAAnG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA,GAhBT8C,KACE+F;AAgBDkM,YAAAA;AAAAA,IAAAA;AAAA,QAGC,CAACnR,aAAaivC,MAAKpwC,WAAa,GAAA;AAC3Bo+C,WAAAA;AAAkB9rC,YAAAA;AAAAA,IAAAA;AAGvBgrC,QAAAA,mBAAmB,aAAan8C,WAAS;AAAAM,UAAAA;AAAAlE,gBAAAiD,UAEzCiB,MAAC,oBAAA,OAAA,EAAU,IAAA,KACT,UAAC,oBAAA,aAAA,EAAoBjB,OACvB,CAAA,EAAA,CAAA,GAAQjD,QAAAiD,QAAAjD,QAAAkE,OAAAA,MAAAlE,EAAA,EAAA,GAHV8C,KACEoB;AAGD6Q,YAAAA;AAAAA,IAAAA;AAGCgrC,QAAAA,mBAAmB,aAAan8C,WAAS;AAC3C,WAAA;AAAWmR,YAAAA;AAAAA,IAAAA;AAIbsC,UAAAA,MAAY,GAAGpN,KAAK,IAAIuJ,SAAS,IAGoBtP,MAAA67C,mBAAmB,WAAkB,MAAA;AAAA55C,QAAAA;AAAAnG,cAAAsgD,oBAAAtgD,EAAA6yC,EAAAA,MAAAA,SAAA7yC,EAAAqX,EAAAA,MAAAA,OAAArX,EAAA,EAAA,MAAAkgD,aAAAlgD,UAAA4gD,cAAA5gD,EAAA,EAAA,MAAAmgD,sBACtFh6C,0BAAC,gBACC,EAAA,UAAA,oBAAC,eACoB,oBAAA,gBACR+5C,WAAQ,WACnB,iBAAc,IACAC,cAAiB,oBACnB,YAAC,IACNtN,OAEOyN,cAAe,kBAC7B,6BAA0B,IAChB,UAAC,IACI,eAAC,GACN,UAAA,GACEM,YACA,YAAI,GAPT,GAAA,GASX,EAAA,CAAA,GAAiB5gD,QAAAsgD,kBAAAtgD,QAAA6yC,OAAA7yC,QAAAqX,KAAArX,QAAAkgD,WAAAlgD,QAAA4gD,YAAA5gD,QAAAmgD,oBAAAngD,QAAAmG,OAAAA,MAAAnG,EAAA,EAAA;AAAAoG,QAAAA;AAAApG,MAAAkE,EAAAA,MAAAA,OAAAlE,UAAAmG,OAlBnBC,KAAA,oBAAC,WAAiB,UAAA,UAAgB,QAAA,QAAiB,UAAAlC,KACjDiC,UAAAA,IAkBF,CAAA,GAAUnG,QAAAkE,KAAAlE,QAAAmG,KAAAnG,QAAAoG,MAAAA,KAAApG,EAAA,EAAA,GApBZ8C,KACEsD;AAAAA,EAAAA;AA9CJ,QAAA06C,cAAoBh+C,IAwFNoB,KAAAuP,mBAAmBssC,mBAAmB,YAAY,WAAW;AAAM55C,MAAAA;AAAA,SAAAnG,EAAA8gD,EAAAA,MAAAA,eAAA9gD,UAAAkE,MAF/EiC,KAAC,oBAAA,aAAA,EACa,eAAA,sBACF,UAAAjC,2BAGZ,GAAclE,QAAA8gD,aAAA9gD,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GALdmG;AAKc;AA5MX,SAAA4D,QAAAzJ,IAAA;AAiI+B,QAAA;AAAA,IAAAqG;AAAAA,EAAAA,IAAArG;AAAe,SAAA,oBAAuB,UAAT,UAAE;AAAO;AClLrE,SAASygD,0BAA0BC,WAAyD;AACjG,SAAOC,QAAQD,SAAS,EAAEx3C,IAAK03C,CAEtB,WAAA;AAAA,IACL,GAFUA,MAAMv9C,SAASu9C,MAAMr9C;AAAAA,IAG/Bs9C,cAAc,CAAC,CAACD,MAAMr9C;AAAAA,IACtBolC,UAAU,CAAC,CAACiY,MAAMv9C;AAAAA,EAAAA,EAErB;AACH;AAEgBy9C,SAAAA,uBAAuBC,OAAkB5gD,YAAyC;AAChG,QAAM6gD,UAAUD,MAAMtC,GAAGv1C,IAAKu1C,CAAO,OAAA;AAEnC,QAAIA,GAAGwC;AACExC,aAAAA;AAGT,UAAMyC,YAAYC,4BAA4BhhD,YAAYs+C,GAAGC,KAAK;AAClE,WAAKwC,YAMDE,iBAAiBF,WAAW,UAAU,IACjC;AAAA,MAAC,GAAGzC;AAAAA,MAAIwC,SAAS;AAAA,IAAA,IAGtBC,UAAUG,aAAa,WAClB;AAAA,MAAC,GAAG5C;AAAAA,MAAIwC,SAAS;AAAA,QAGnBxC,KAbEA;AAAAA,EAAAA,CAcV;AAEMuC,SAAAA,QAAQ39B,MAAM,CAACrb,MAAM2B,UAAU3B,SAAS+4C,MAAMtC,GAAG90C,KAAK,CAAC,IAAIo3C,QAAQ;AAAA,IAAC,GAAGA;AAAAA,IAAOtC,IAAIuC;AAAAA,EAAO;AAClG;AAEA,SAASG,4BAA4BG,UAAsBvkC,MAAsC;AACzFwkC,QAAAA,eAAeC,UAAUC,WAAW1kC,IAAI;AAE9C,MAAI/I,UAAkCstC;AACtC,aAAWI,WAAWH,cAAc;AAClC,QAAI,CAACvtC;AACH;AAGE,QAAA,OAAO0tC,WAAY,UAAU;AACrBC,gBAAAA,mBAAmB3tC,SAAS0tC,OAAO;AAC7C;AAAA,IAAA;AAIE,QAAA,EADoBE,aAAaF,OAAO,KAAKG,eAAeH,OAAO,MAC/C1tC,QAAQqtC,aAAa;AAC3C;AAGF,UAAM,CAACS,YAAYC,SAAS,IAAI/tC,QAAQnH,MAAM,CAAE;AAChD,QAAIk1C,aAAa,CAACD;AAEhB;AAGE,QAAA,CAACE,sBAAsBF,UAAU,GAAG;AAC5BA,gBAAAA;AACV;AAAA,IAAA;AAGF,UAAM,CAACG,SAASC,YAAY,IAAIJ,WAAWK,MAAM,CAAE;AACnD,QAAID,gBAAgB,CAACD;AAEnB;AAGQA,cAAAA;AAAAA,EAAAA;AAGLjuC,SAAAA;AACT;AAEA,SAAS2tC,mBAAmBh7C,MAAkBy7C,WAA2C;AACvF,MAAI,EAAE,YAAYz7C;AAChB;AAGF,QAAMu6C,YAAYv6C,KAAK07C,OAAO7uC,KAAMkrC,CAAUA,UAAAA,MAAMt3C,SAASg7C,SAAS;AAC/DlB,SAAAA,YAAYA,UAAUv6C,OAAO0C;AACtC;AAEgB+3C,SAAAA,iBAAiB1C,OAAsC4D,QAAyB;AAC9F,MAAItuC,UAAkC0qC,MAAM/3C;AAC5C,SAAOqN,WAAS;AAKd,QAJIA,QAAQ5M,SAASk7C,UAIjB,CAACtuC,QAAQrN,QAAQqN,QAAQqtC,aAAaiB;AACjC,aAAA;AAGTtuC,cAAUA,QAAQrN;AAAAA,EAAAA;AAGb,SAAA;AACT;AAOA,SAAS47C,UAAU7rC,MAAoC;AACrD,UAAQA,KAAK/P,MAAI;AAAA,IACf,KAAK,UAAU;AACP,YAAA;AAAA,QAAC+U;AAAAA,QAAMC;AAAAA,MAAAA,IAASjF;AAEtB,cAAQA,KAAKmX,IAAE;AAAA;AAAA,QAEb,KAAK;AAECnS,iBAAAA,KAAK/U,SAAS,qBAAqB+U,KAAKtU,SAAS,WAAW,CAACsU,KAAKjC,OAChEkC,MAAMhV,SAAS,WAAW,OAAOgV,MAAMpb,SAAU,WAAiB,OAC3D8N,oBAAAA,IAAI,CAACsN,MAAMpb,KAAK,CAAC,IAI1Bob,MAAMhV,SAAS,qBAAqBgV,MAAMvU,SAAS,WAAW,CAACuU,MAAMlC,OACnEiC,KAAK/U,SAAS,WAAW,OAAO+U,KAAKnb,SAAU,WAAiB,OAC7D,oBAAI8N,IAAI,CAACqN,KAAKnb,KAAK,CAAC,IAItB;AAAA;AAAA,QAIT,KAAK,MAAM;AAELmb,cAAAA,KAAK/U,SAAS,qBAAqB+U,KAAKtU,SAAS,WAAWsU,KAAKjC,QAEjEkC,MAAMhV,SAAS,QAAgB,QAAA;AAE7B67C,gBAAAA,4BAAYn0C,IAAY;AAEnB6C,qBAAAA,WAAWyK,MAAM0B,UAAU;AAEhCnM,gBAAAA,QAAQuxC,WAERvxC,QAAQ3Q,MAAMoG,SAAS,WAEvB,OAAOuK,QAAQ3Q,MAAMA,SAAU,SAAiB,QAAA;AAE9Cke,kBAAAA,IAAIvN,QAAQ3Q,MAAMA,KAAK;AAAA,UAAA;AAI3BiiD,iBAAAA,MAAMnW,OAAamW,QAEhB;AAAA,QAAA;AAAA,QAGT;AACS,iBAAA;AAAA,MAAA;AAAA,IAEX;AAAA;AAAA,IAIF,KAAK;AACID,aAAAA,UAAU7rC,KAAK+C,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ5B,KAAK,MAAM;AACHiC,YAAAA,OAAO6mC,UAAU7rC,KAAKgF,IAAI;AAC5B,UAAA,CAACA,KAAa,QAAA;AAEZC,YAAAA,QAAQ4mC,UAAU7rC,KAAKiF,KAAK;AAC7BA,aAAAA,4BAEMtN,IAAI,CAAC,GAAGqN,MAAM,GAAGC,KAAK,CAAC,IAFf;AAAA,IAAA;AAAA;AAAA;AAAA;AAAA,IAQrB,KAAK,OAAO;AACJD,YAAAA,OAAO6mC,UAAU7rC,KAAKgF,IAAI,GAC1BC,QAAQ4mC,UAAU7rC,KAAKiF,KAAK;AAElC,aAAI,CAACD,QAAQ,CAACC,QAAc,2BACjBtN,IAAI,CAAC,GAAIqN,QAAQ,CAAK,GAAA,GAAIC,SAAS,CAAG,CAAA,CAAC;AAAA,IAAA;AAAA,IAGpD;AACS,aAAA;AAAA,EAAA;AAGb;AAEO,SAAS+mC,wBACdl5C,SACAvE,SAAkC,IACjB;AACb,MAAA;AACIu9C,UAAAA,QAAQD,UAAUz9B,MAAMtb,SAAQ;AAAA,MAACvE;AAAAA,IAAAA,CAAO,CAAC;AAC/C,WAAKu9C,QAEEr0C,MAAMC,KAAKo0C,KAAK,EAAEj0C,SAFN;AAAA,EAAA,QAGb;AAEC,WAAA;AAAA,EAAA;AAEX;AC5OA,MAAMo0C,8BAA8B,CAAC,OAAO,SAAS,cAAc,cAAc,MAAM;AAGvF,SAASC,eAAeziD,YAAwB4c,MAAgB8lC,SAAkB,IAAe;AAC/F,QAAM,CAACC,MAAM,GAAGC,IAAI,IAAIhmC;AAExB,MAAI,EAAE,YAAY5c;AACT,WAAA;AAGT,QAAM6iD,cAAc7iD,WAAWkiD,OAAO7uC,KAAMkrC,CAAUA,UAAAA,MAAMt3C,SAAS07C,IAAI;AACzE,MAAI,CAACE,aAAa;AAChB,QAAI,CAACL,4BAA4B/0B,SAASk1B,IAAI,GAAG;AAC/C,YAAMjiD,eAAe,+DAA+DiiD,IAAI,qBAAqB3iD,WAAWiH,IAAI,0BAA0BjH,WAAWkiD,OAAOn5C,IAAKw1C,WAAUA,MAAMt3C,IAAI,EAAEuB,KAAK,IAAI,CAAC;AACzMk6C,UAAAA;AACI,cAAA,IAAIn+C,MAAM7D,YAAY;AAG5B0kB,cAAQrK,KAAKra,YAAY;AAAA,IAAA;AAGtB,WAAA;AAAA,EAAA;AAGT,MAAI,QAAQmiD,YAAYr8C,QAAQq8C,YAAYr8C,KAAKS,SAAS,aAAa;AAC/D67C,UAAAA,WAAWD,YAAYr8C,KAAKw7C;AAClC,WAAO,GAAGW,IAAI,MAAMG,SAAS/5C,IAAK+4C,CAAAA,YAAYW,eAAeX,SAASc,IAAI,CAAC,EAAEp6C,KAAK,GAAG,CAAC;AAAA,EAAA;AAGxF,QAAMu6C,aAAaH,KAAK5gD,SAAS,KAAKygD,eAAeI,YAAYr8C,MAAMo8C,IAAI,GACrEI,cAAcD,aAAa,IAAIA,UAAU,MAAM;AACrD,SAAOH,KAAK5gD,SAAS,IAAI,GAAG2gD,IAAI,GAAGK,WAAW,KAAKL;AACrD;AAEO,SAASM,sBACdjjD,YACA6gD,SACA6B,SAAkB,IACV;AACR,SAAO7B,QACJ93C,IAAKm6C,CAAaT,aAAAA,eAAeziD,YAAYkjD,SAAS3E,MAAMlnC,MAAM,GAAG,GAAGqrC,MAAM,CAAC,EAC/El6C,KAAK,IAAI;AACd;ACGA,MAAM26C,MAAMC,UAAgC;AAAA,EAACtyB,SAAS;AAAG,CAAC;AAEnD,SAASuyB,kBAAkB5kC,SAA4D;AACtF,QAAA;AAAA,IACJ+W;AAAAA,IACA71B;AAAAA,IACAyO;AAAAA,IACA8xC;AAAAA,IACAp7C;AAAAA,IACAuE,QAAAA;AAAAA,IACAi6C;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,IACEhlC,SACEilC,SAASt1C,KAAKkwC,IACdqF,qBAAqBv1C,MAAMu1C,oBAK3BC,UAAUC,MAAM,MACbruB,OAAOloB,OAAO,KAAKjE,OAAM,KAAKvE,QAAQ;AAAA,IAC3Cg/C,QAAQ,CAAC,WAAW,YAAY,WAAW;AAAA,IAC3CC,eAAe;AAAA,IACf3X,YAAY;AAAA,EAAA,CACb,CACF,EAAE1hC,KACDs5C,SAAS,CAACznB,IAAI5e,MACIA,MAAM,KACP4e,GAAG/1B,SAAS,YAGlBy9C,WACL,MACE,IAAI1/C,MACFg4B,GAAG/1B,SAAS,cACR,+CACA,4CAA4C+1B,GAAG/1B,IAAI,GACzD,CACJ,IAEKkG,GAAG6vB,EAAE,CACb,GACD2nB,MACF,CAAA,GAEM,CAACC,UAAUC,qBAAqB,IAAIC,UAAUT,SAAUrnB,CAAOA,OAAAA,GAAG/1B,SAAS,SAAS,GAEpF89C,SAAS7/B,KAAKC,UAAU;AAAA,IAACrb,QAAAA;AAAAA,IAAQ62C;AAAAA,IAAOp7C;AAAAA,IAAQw+C;AAAAA,IAAal1C;AAAAA,IAAMm1C;AAAAA,EAAAA,CAAgB;AAElFh7B,SAAAA,MACL47B,SAASz5C,KAAK65C,KAAK,CAAC,CAAC,GACrBH,sBAAsB15C,KAAK8C,aAAa,KAAMg3C,gBAAgB;AAAA,IAAC/H,SAAS;AAAA,IAAMC,UAAU;AAAA,EAAA,CAAK,CAAC,CAChG,EAAEhyC,KACA+5C,uBAAwBtzC,CAAAA,WAGHoyC,kBACf72C,GAAG62C,eAAe,IAClB/tB,OAAOvpB,WAAWoB,MAAM,mBAAmBhE,OAAM,cAAcvE,MAAM,GAGvD4F,KAChBs5C,SAAUU,CAAwB,cAAA;AAC1BrC,UAAAA,QAAQsC,mBAAmBhlD,QAAQ4jD,mBAAmB,CAAE,CAAA,EAAEl6C,OAAQ7C,CAAAA,SAClEk+C,UAAUj3B,SAASjnB,KAAKS,IAAI,KAI9Bg8C,sBAAsBz8C,MAAM4H,KAAKkwC,IAAI,EAAI,GAClC,MAEF,EACR,GAEKsG,SAASC,aAAaxC,OAAO7sB,QAAQ;AAAA,MACzCnsB,QAAAA;AAAAA,MACAvE;AAAAA,MACAggD,UAAUrB;AAAAA,MACVsB,UAAUvB;AAAAA,IAAAA,CACX,GAEKwB,UAAUA,MAcPJ,OAba;AAAA,MAClB94C,OAAOw3C,eAAe;AAAA,MACtBjB;AAAAA,IAAAA,GAGoB;AAAA,MACpB4C,+BAA+BtB;AAAAA,MAC/BuB,UAAU,CAAC,uBAAuB5B,cAAc,eAAe,MAAM,EAAE;AAAA,MACvEpD;AAAAA,MACAiF,iBAAiB;AAAA,MACjB/2C,MAAMs1C;AAAAA,IAAAA,CAGgC,EAAEh5C,KACxC3B,MAAKyxB,CAAAA;AAAAA;AAAAA,MAEHA,OAAO4qB,KAAKr8C,IAAI,CAAC;AAAA,QAACs8C;AAAAA,MAAAA,MAASA,GAAG;AAAA,KAChC,CACF;AAGF,WAAIl0C,MAAM3K,SAAS,cAAc2K,MAAMi7B,eAAe,UAI7CphC,MAAM,IAAI,EAAEN,KAAKs5C,SAASgB,OAAO,CAAC,IAEpCA,QAAQ;AAAA,EAChB,CAAA,CACH,CACD,GACD7B,IAAImB,MAAM,GACVv7C,MAAI,CAAC;AAAA,IAACu8C;AAAAA,IAAWllD;AAAAA,EAAAA,OAAY;AAAA,IAACklD;AAAAA,IAAW/E,WAAWngD;AAAAA,IAAO,CAC7D;AACF;ACxHA,MAAMmlD,sBAAyC;AAAA,EAC7CllD,OAAO;AAAA,EACP8C,WAAW;AAAA,EACXqiD,mBAAmB;AAAA,EACnBF,WAAW;AAAA,EACXlT,OAAO,CAAA;AACT;AAUO,SAASqT,gBAAgBnQ,MAAqD;AAC7E,QAAA;AAAA,IAACjsC,QAAQq8C;AAAAA,IAAc5gD,QAAQ6gD;AAAAA,IAAYC;AAAAA,IAAWtC;AAAAA,IAAa/tB;AAAAA,EAAAA,IAAc+f,MACjF9f,SAAS7nB,UAAU;AAAA,IACvB,GAAGC;AAAAA,IACH2nB,YAAYA,cAAc3nB,8BAA8B2nB;AAAAA,EAAAA,CACzD,GACK;AAAA,IAACuvB,UAAUrB;AAAAA,EAAAA,IAAkBoC,aAAejB,EAAAA,QAC5CjlD,SAASC,UAAU,GACnB4jD,gBAAgBsC,uBAAuB,GAGvCC,qBAAqBxgC,QACzB,MAAMg9B,wBAAwBmD,cAAcC,UAAU,GACtD,CAACD,cAAcC,UAAU,CAC3B,GAEM,CAAC,CAACK,UAAUxG,OAAO,CAAC,IAAI3vC,SAAS,MAAMo2C,mBAAoB,CAAA,GAC3D,CAAC,CAACC,kBAAkBC,cAAc,CAAC,IAAIt2C,SAAS,MAAMo2C,oBAAoB,GAE1EG,gBAAgB7gC,QAAQ,MAAM;AAClC,UAAM8gC,wBAAwB;AAAA,MAC5B7wB;AAAAA,MACAnsB,QAAQq8C;AAAAA,MACRxF,OAAO/B;AAAAA,MACPr5C,QAAQ6gD;AAAAA,MACRhmD;AAAAA,MACA2jD,aAAaA,eAAe;AAAA,MAC5Bl1C,MAAMw3C,aAAavH;AAAAA,MACnBkF,iBAAiBwC;AAAAA,MACjBvC;AAAAA,MACAC;AAAAA,OAGI6C,eAAejD,kBAAkBgD,qBAAqB,EAAE37C,KAC5DQ,YAAY;AAAA,MAACC,UAAU;AAAA,MAAMC,YAAY;AAAA,IAAA,CAAE,CAC7C,GAGMm7C,YAAYL,iBAAiBx7C;AAAAA,MACjC87C,eAAeF,YAAY;AAAA,MAC3Bj9C,SAAO,CAAC,CAAA,EAAGmxB,MAAM,MAAMA,QAAQ+lB,UAAUv+C,WAAWm8C,kBAAkB;AAAA;AAAA,MAEtEoG,OAAK,CAAC;AAAA,MACNP,WAAS,MACP3pB,OACE3tB,GAAG;AAAA,QAAClG,MAAM;AAAA,MAAwB,CAAA,GAClC68C,kBAAkB;AAAA,QAAC,GAAGgD;AAAAA,QAAuBnG,OAAO9B;AAAAA,MAAgB,CAAA,EAAE1zC,KACpE3B,IAAKyxB,CAAY,cAAA;AAAA,QAACh0B,MAAM;AAAA,QAAmBg0B,QAAAA;AAAAA,MAAAA,EAAQ,CACrD,CACF,CACF;AAAA,MACA0pB,QAAM;AAAA,IACR;AAGA,WAAO37B,MACL+9B,aAAa57C;AAAAA,MACX3B,IAAKyxB,CAAY,cAAA;AAAA,QACfh0B,MAAM;AAAA,QACNg0B,QAAAA;AAAAA,MAAAA,EACA;AAAA;AAAA,MAEFisB,UAAUF,SAAS;AAAA,IAAA,GAErBA,SACF,EAAE77C,KACAqC,WAAW,CAAC6pB,KAAc8vB,YACjBrsB,OACL3tB,GAAG;AAAA,MAAClG,MAAM;AAAA,MAAkBnG,OAAOsmD,UAAU/vB,GAAG;AAAA,IAAA,CAAE,GAClDrO,MAAM9d,UAAUkH,QAAQ,QAAQ,GAAGq0C,QAAQ,EAAEt7C,KAC3C65C,OAAK,CAAC,GACNP,WAAS,MAAM0C,OAAO,CACxB,CACF,CACD,GACDE,KAAK,CAACt6B,MAAMnb,UAAU;AACpB,UAAIA,MAAM3K,SAAS;AACV,eAAA;AAAA,UACL,GAAG8lB;AAAAA,UACHjsB,OAAO8Q,MAAM9Q;AAAAA,QACf;AAEF,UAAI8Q,MAAM3K,SAAS;AACV,eAAA;AAAA,UACL,GAAG8lB;AAAAA,UACHjsB,OAAO;AAAA,UACPilD,WAAWn0C,MAAMqpB,OAAO8qB;AAAAA,UACxBniD,WAAW;AAAA,UACXivC,OAAOkO,0BAA0BnvC,MAAMqpB,OAAO+lB,SAAS;AAAA,UACvDiF,mBAAmB;AAAA,QACrB;AAEF,UAAIr0C,MAAM3K,SAAS;AACV,eAAA;AAAA,UACL,GAAG8lB;AAAAA,UACHjsB,OAAO;AAAA,UACPmlD,mBAAmB;AAAA,QACrB;AAEI,YAAA,IAAIjhD,MAAM,YAAY;AAAA,IAC9B,GAAGghD,mBAAmB,CACxB;AAAA,EACC,GAAA,CACD/vB,QACAkwB,cACAC,YACAhmD,QACA2jD,aACAsC,WACAG,oBACAvC,eACAC,gBACAyC,kBACAF,QAAQ,CACT,GAEK;AAAA,IAAC3lD;AAAAA,IAAO+xC;AAAAA,IAAOjvC;AAAAA,IAAWmiD;AAAAA,IAAWE;AAAAA,EAAAA,IAAqBniD,cAC9D+iD,eACAb,mBACF;AAEO,SAAA;AAAA,IACLllD;AAAAA,IACAm/C;AAAAA,IACAr8C;AAAAA,IACAivC;AAAAA,IACAkT;AAAAA,IACAa;AAAAA,IACAX;AAAAA,EACF;AACF;AAGA,MAAMqB,wBAAwB;AAC9B,SAASF,UAAUG,QAAwB;AACzC,SAAIA,kBAAkBviD,QACbuiD,SAEL,OAAOA,UAAW,YAAYA,WAAW,OACvC,aAAaA,UAAU,OAAOA,OAAOrmD,WAAY,WAC5C,IAAI8D,MAAM,GAAGuiD,OAAOrmD,OAAO,IAAIomD,qBAAqB,EAAE,IAExD,IAAItiD,MAAM,GAAGggC,OAAOuiB,MAAM,CAAC,IAAID,qBAAqB,EAAE,IAExD,IAAItiD,MAAM,GAAGggC,OAAOuiB,MAAM,CAAC,IAAID,qBAAqB,EAAE;AAC/D;AC/KA,MAAME,SAASzZ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAST0Z,SAAS1Z;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,GAYT2Z,sBAAsBnmD,OAAOomD,WAAW;AAAA,eAC/BH,MAAM;AAAA,GAGfI,oBAAoBrmD,OAAOomD,WAAW;AAAA,eAC7BH,MAAM;AAAA;AAAA,GAIfK,2BAA2BtmD,OAAOomD,WAAW;AAAA;AAAA,MAE7CH,MAAM;AAAA,MACNC,MAAM;AAAA;AAAA,GAQCK,mBAAmBxiC,KAAK,SAA0BvlB,OAA8B;AACrF,QAAA;AAAA,IAAC2/C;AAAAA,IAAa3U;AAAAA,IAAUjmC,MAAAA;AAAAA,IAAM4jB;AAAAA,IAAS29B,WAAW0B;AAAAA,IAAc9kD;AAAAA,EAAAA,IAAUlD,OAC1EK,SAASC,aAET;AAAA,IAAC2nD;AAAAA,IAAgB9oC;AAAAA,MAAWpa,OAC5B;AAAA,IAACkxB;AAAAA,IAAYlsB,QAAAA;AAAAA,EAAAA,IAAUoV,SACvB3Z,SAAS0iD,iBAAiB/oC,QAAQ3Z,UAAU05C,YAAY,GACxDj8B,WAAWgD,QAAQ,MAAM;AACvBkiC,UAAAA,cAAclF,wBAAwBl5C,SAAQvE,MAAM;AAC1D,WAAI2iD,aAAazlD,WAAW,IAAUylD,YAAY,CAAC,IAC5C;AAAA,EAAA,GACN,CAACp+C,SAAQvE,MAAM,CAAC,GAEb66C,YAAY4H,gBAAgB5H,cAAc,IAE1C;AAAA,IAAC1/C;AAAAA,EAAAA,IAAKC,eAAenB,wBAAwB,GAC7C;AAAA,IAAC4B;AAAAA,EAAAA,IAASwW,YAAY9S,KAAI,GAE1B,CAACi/C,aAAaoE,cAAc,IAAI73C,SAAiB,EAAE,GACnD,CAAC83C,kBAAkBC,mBAAmB,IAAI/3C,SAAiB,EAAE,GAC7D,CAAC6vC,oBAAoBmI,qBAAqB,IAAIh4C,SAAkC,IAAI,GAEpFi4C,qBACJvlC,YAAY+kC,eACR3G,uBAAuB2G,cAAc3nD,OAAOI,IAAIwiB,QAAQ,CAAQ,IAChE+kC,cAEA1B,YAAYxgD,UAAU0iD,kBAAkB,GAExC;AAAA,IAACznD;AAAAA,IAAOmlD;AAAAA,IAAmBriD;AAAAA,IAAWivC;AAAAA,IAAOkT;AAAAA,IAAWa;AAAAA,IAAgB3G;AAAAA,MAC5EiG,gBAAgB;AAAA,IACdlwB;AAAAA,IACAlsB,QAAAA;AAAAA,IACAvE;AAAAA,IACAw+C,aAAaA,aAAayE,KAAK;AAAA,IAC/BnC;AAAAA,EAAAA,CACD,GAEGoC,oBAAoBC,mBACvBC,YACQA,OAAOx9C,KACZ3B,MAAKoI,CAAAA,UAAUA,MAAM4hB,OAAO3yB,KAAK,GACjCq9B,MAAImqB,mBAAmB,GACvBO,SAAU/nD,CAAWA,UAAAA,UAAU,KAAKsM,GAAG,EAAE,IAAI1B,MAAM,GAAG,CAAE,GACxDyyB,MAAIiqB,cAAc,CACpB,CAEJ,GAEMU,oBAAoBjjC,YAAY,MAAM;AAC3B,mBAAA,EAAE,GACjByiC,oBAAoB,EAAE;AAAA,KACrB,CAAE,CAAA,GAECS,sBAAsBljC,YACzBhU,CAAiD,YAAA;AAC5CA,YAAMyF,QAAQ,YAChBwxC,kBAAkB;AAAA,EAAA,GAGtB,CAACA,iBAAiB,CACpB,GAEM,CAACE,qBAAqBC,sBAAsB,IAAI14C,SAAwB;AAE9EU,YAAU,MAAM;AACV,KAAC+3C,uBAAuB,CAACnlD,aAC3BolD,uBAAuBtgC,OAAO;AAAA,EAAA,GAE/B,CAACqgC,qBAAqBnlD,WAAW8kB,OAAO,CAAC,GAE5C1X,UAAU,MAAM;AAGd63C,sBAAAA,GACAG,uBAAuB;AAAA,EAAA,GACtB,CAACtgC,SAASmgC,iBAAiB,CAAC;AAE/B,QAAM9I,iBAAiC/5B,QAAQ,MACzCpiB,aAAamlD,wBAAwBrgC,UAChC,YAELq9B,YACK,WAGF,WACN,CAACgD,qBAAqBhD,WAAWniD,WAAW8kB,OAAO,CAAC,GAEjDugC,gBAAgBjjC,QAAQ,MACxB+5B,mBAAmB,YACd2H,sBAELU,oBAAoBrI,mBAAmB,WAClC6H,oBAEFl0B,YACN,CAACqsB,gBAAgBqI,gBAAgB,CAAC;AAErC,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAC,oBAAA,KAAA,EAAI,UAAU,GAAG,eAAe,GAC/B,UAAC,oBAAA,WAAA,EACC,cAAY1nD,EAAE,kDAAkD,GAChE,cAAa,OACb,QAAQ,IACR,aAAakO,CAAQm1C,CAAAA,aACrB,UAAUn1C,CAAAA,CAAQ9N,OAClB,UAAU,CAAC,GAAG,GAAG,CAAC,GAClB,MAAMmoD,eACN,WACElJ,mBAAmB,YAAY,CAACqI,mBAAmBP,2BAA2B,MAEhF,UAAUY,mBACV,SAASI,mBACT,WAAWC,qBACX,SAAS,GACT,aAAapoD,EAAE,mDAAmD,GAClE,QAAQ,GACR,KAAK4nD,uBACL,YAAY,IACZ,OAAOF,iBAAAA,CAAiB,EAE5B,CAAA;AAAA,IACC,oBAAA,yBAAA,EACC,aACA,OACA,8BAA8B,CAAC,CAACplC,UAChC,aAAa6vB,MAAMpwC,WAAWo8C,iBAC9B,gBAAgBjwC,CAAAA,CAAQm1C,aACxB,UACA,eAAekC,mBACf,WACA,OAEA,QACA,gBACA,cAAcW,gBACd,SACA,WAAWxlD,OACX,oBACA,aAPKsnB,OAOgB;AAAA,EAAA,GAEzB;AAEJ,CAAC,GC3LY1O,aAAasL,KACxBhlB,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAma;AAAAA,IAAAnQ;AAAAA,IAAAi/C,uBAAAtoD;AAAAA,IAAA6gB,gBAAAzgB;AAAAA,IAAAwgB,WAAAvgB;AAAAA,IAAAkoD;AAAAA,IAAAC;AAAAA,IAAAhoD;AAAAA,EAAAA,IAAAd;AASiBuC,MAAAA;AAAA7C,WAAAY,MANhBiC,KAAAjC,OAA0B+I,UAA1B/I,IAAAA,IAA0BZ,OAAAY,IAAAZ,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAA1B,QAAAkpD,wBAAArmD;AAA0BC,MAAAA;AAAA9C,WAAAgB,MAC1B8B,KAAA9B,OAAmB2I,UAAnB3I,IAAAA,IAAmBhB,OAAAgB,IAAAhB,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAAnB,QAAAyhB,iBAAA3e;AAAmBoB,MAAAA;AAAAlE,WAAAiB,MACnBiD,KAAAjD,OAAc0I,UAAd1I,IAAAA,IAAcjB,OAAAiB,IAAAjB,OAAAkE,MAAAA,KAAAlE,EAAA,CAAA;AAAd,QAAAwhB,YAAAtd,IAKA;AAAA,IAAAisB;AAAAA,EAAA,IAAmBrE,oBACnB;AAAA,IAAAtY;AAAAA,IAAAU;AAAAA,EAAAA,IAA4B8B,QAAQ,GAEpCwE,WAAiBtG,UAAM,CAAKV,YAAkB,KAAA;AAAA,MAAArN,IAAAC;AAAApG,WAAAmpD,aAI/B/iD,KAAAC,CAAAA,QAAA;AAAC,UAAA;AAAA,MAAApD,QAAApC;AAAAA,IAAAA,IAAAwF;AACV8iD,cAAUtoD,KAAK;AAAA,EAAC,GACjBb,OAAAmpD,WAAAnpD,OAAAoG,MAAAA,KAAApG,EAAA,CAAA;AAAAqG,MAAAA;AAAArG,WAAAopD,gBACa/iD,KAAAwI,CAAA,SAAA;AACZu6C,iBAAav6C,IAAI;AAAA,EAAC,GACnB7O,OAAAopD,cAAAppD,OAAAqG,MAAAA,KAAArG,EAAA,CAAA;AAAAuG,MAAAA;AAAAvG,IAAAoG,EAAAA,MAAAA,MAAApG,UAAAqG,MANIE,MAAA;AAAA,IAAA4iD,WACM/iD;AAAAA,IAEVgjD,cACa/iD;AAAAA,EAAAA,GAGfrG,QAAAoG,IAAApG,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA,GAPDmG,KAAOI;AADT,QAAAkf,iBAAuBtf;AASMM,MAAAA;AAAAzG,IAAA,EAAA,MAAAylB,kBAAAzlB,EAAAkpD,EAAAA,MAAAA,yBAAAlpD,EAAAyhB,EAAAA,MAAAA,kBAAAzhB,UAAAwhB,aAMrB/a,MAAC,oBAAA,mBAAA,EAC4ByiD,2BAAoB,uBAC/BzjC,gBACAhE,gBACLD,WACX,GAAAxhB,QAAAylB,gBAAAzlB,QAAAkpD,uBAAAlpD,QAAAyhB,gBAAAzhB,QAAAwhB,WAAAxhB,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,YAAAmwB,SAAAjW,cAAAla,UAAAiK,SAGFpB,MAAAsnB,SAAQjW,cACRjQ,QAAS,KACP,oBAAC,QACK9F,EAAAA,IAAOA,UACH,WAAA,KACFgoC,MAAAA,eACD,MAAA,SACS,cAAA;AAAA,IAAA9hC,SAAU;AAAA,EAAA,EAE3B,CAAA,GAAArK,EAAA,EAAA,IAAAmwB,SAAAjW,YAAAla,QAAAiK,OAAAjK,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAA,SAAAnJ,EAAAoa,EAAAA,MAAAA,gBAAApa,EAAA,EAAA,MAAAyG,OAAAzG,EAAA6I,EAAAA,MAAAA,OAAA7I,EAAA,EAAA,MAAAwa,YAAAxa,UAAAoB,SApBP+H,MAAC,oBAAA,2BACC,EAAA,UAAA,oBAACkgD,cAEG,EAAA,SAAA5iD,KAQA,YAAAoC,KAWYuR,cACJI,UACHpZ,MAEX,CAAA,EAAA,CAAA,GAA4BpB,QAAAoa,cAAApa,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAwa,UAAAxa,QAAAoB,OAAApB,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA,GA1B5BmJ;AA0B4B,CAGlC;AAEA6Q,WAAWjE,cAAc;ACjFlB,SAASuzC,wBAAwBvpD,OAA6C;AAC7E,QAAA;AAAA,IAACwpD;AAAAA,IAAKznD;AAAAA,MAAS/B,OAEf;AAAA,IAACypD;AAAAA,IAAgBC;AAAAA,EAAAA,IAAqB3nD,MAAMod,QAAQwqC,QAAQ,CAE5DC,GAAAA,gBAAgB/jC,YACnB9a,CAAoC,MAAA;AACnC,QAAIA,EAAE8+C,YAAYJ,mBAAmB,QAAQA,mBAAmB7/C,QAAW;AACnEkgD,YAAAA,kBAAkBN,IAAIt/C,OACtB6/C,aAAaD,kBAAkBL,iBAAiBK,kBAAkBL,gBAClEO,aAAaF,kBAAkBL,iBAAiBA,iBAAiBK,iBAEjEG,yBAAyBloD,MAC5BmoD,YAAY,EACZC,SAASxlD,MAAMolD,YAAYC,aAAa,CAAC,EACzCvgD,IAAI,CAAC;AAAA,QAAClE;AAAAA,MAAAA,MAAQA,EAAE,GAEb6kD,sBAAsBroD,MAAMsoD,sBAAsBC,KAAK7gD,IAAI,CAAC;AAAA,QAAClE,IAAAA;AAAAA,YAAQA,IAAE;AACvEglD,YAAAA,gBAAgB,MACpB,CAAC,GAAGN,wBAAwB,GAAGG,mBAAmB,EAAEtmC,OAClD,CAAC0mC,kBAAkBC,WAAW;AAAA,QAAC,GAAGD;AAAAA,QAAkB,CAACC,KAAK,GAAG;AAAA,MAAA,IAC7D,CACF,CAAA,CACF;AAAA,eACSf,mBAAmB;AACtBgB,YAAAA,yBAAyBlB,IAAImB,cAAc;AAG/CjB,wBAFEgB,yBAEgB,OAGAlB,IAAIt/C,KAHA,GAMxBs/C,IAAIoB,eAAe;AAAA,IAAA;AAAA,KAGvB,CAACnB,gBAAgBD,KAAKE,mBAAmB3nD,KAAK,CAChD;AAGE,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,OAAO;AAAA,QAAC8oD,aAAa;AAAA,MAAC;AAAA,MACtB,SAAS7qD,MAAMwpD,IAAImB,cAAc;AAAA,MACjC,UAAU,CAAC3qD,MAAMwpD,IAAIsB,aAAa;AAAA,MAIlC,UAAU,MAAM;AAAA,MAChB,SAASlB;AAAAA,IAAAA;AAAAA,EACT;AAEN;AC/BO,MAAMmB,8BAA8BA,MAAA;AACzC5hD,QAAAA,UAAgB1E,WAAAumD,wBAAmC;AAAC,MAEhD7hD,YAAOS;AAAc3E,UAAAA,IAAAA,MACP,8EAA8E;AAEzFkE,SAAAA;AAAO;AAIT,SAAS8hD,0BAA0B;AAAA,EACxCrkD;AAAAA,EACA7E;AAC8B,GAAc;AAC5C,QAAM,CAACmpD,2BAA2BC,4BAA4B,IAC5D56C,SAA8B,IAAI,GAC9B,CAAC66C,0BAA0BC,2BAA2B,IAAI96C,SAAmB,CAAA,CAAE,GAE/E+6C,4BAA4BzlC,YAChC,CAAC0lC,oBAAyC,SAAS;AAE/CL,+BAA2BrmD,UAAU,aACrC1E,SAASqrD,yBAAyBC,eAElCtrD,SAASqrD,cAAcE,QAGzBP,6BAA6BI,iBAAiB,GAC9CF,4BAA4B,CAAA,CAAE;AAAA,KAEhC,CAACH,yBAAyB,CAC5B,GAEMS,sBAAsB9lC,YAC1B,MAAMylC,6BACN,CAACA,yBAAyB,CAC5B,GAEMM,wBAAwB/lC,YAC3BnW,CAAgC,cAAA;AAC/B,QAAI,CAACw7C,0BAA2B;AAEhC,UAAMW,iBAAiB9pD,MAAM+pD,sBAAsB,GAC7CC,uBACJF,eAAe/wB,UAAWkxB,CAAQA,QAAAA,IAAIzmD,OAAO2lD,0BAA0Be,KAAK,KAC3Ev8C,cAAc,SAAS,KAAK;AAE3Bq8C,2BAAuB,KAAKA,wBAAwBF,eAAenpD,UAEvE4oD,0BAA0B;AAAA,MACxBW,OAAOJ,eAAeE,oBAAoB,EAAExmD;AAAAA,MAC5C2mD,UAAUhB,0BAA0BgB;AAAAA,MACpCrnD,OAAO;AAAA,IAAA,CACR;AAAA,EAAA,GAEH,CAACymD,2BAA2BJ,2BAA2BnpD,KAAK,CAC9D,GAEMoqD,uBAAuBtmC,YAC1BnW,CAA6B,gBAAA;AACvBw7C,iCAELG,4BAA6Be,CAAsB,sBAAA;AAC3C,YAAA;AAAA,QAACF,UAAUG;AAAAA,MAAAA,IAAenB,2BAC1BoB,eAAgBC,mBACpBA,iBAAiB78C,gBAAc,SAAS,IAAI;AAE1C,UAAA,CAAC08C,kBAAkB1pD,QAAQ;AACvB8pD,cAAAA,qBAAqBF,aAAaD,WAAW;AACnD,eAAIG,qBAAqB,IAAU,CAAE,IAC9B,CAACA,kBAAkB;AAAA,MAAA;AAEtBC,YAAAA,oBAAoBL,kBAAkBA,kBAAkB1pD,SAAS,CAAC,GAClEgqD,YAAYJ,aAAaG,iBAAiB;AAGhD,aAAIC,YAAY,IAAUN,oBAGtBM,cAAcL,cAAoB,CAAA,IAGlCD,kBAAkBj+B,SAASu+B,SAAS,IAC/BN,kBAAkBznD,MAAM,GAAG,EAAE,IAG/B,CAAC,GAAGynD,mBAAmBM,SAAS;AAAA,IAAA,CACxC;AAAA,EAAA,GAEH,CAACxB,yBAAyB,CAC5B,GAEMyB,wBAAwB9mC,YAC5B,CAAComC,OAAeC,aAAqB;AACT,8BAAA;AAAA,MAACD;AAAAA,MAAOC;AAAAA,MAAUrnD,OAAO;AAAA,IAAA,CAAW;AAAA,KAEhE,CAACymD,yBAAyB,CAC5B,GAEMsB,oBAAoB/mC,YAAY,MAAM;AACrCqlC,QAAAA;AACL,UAAIE,yBAAyB1oD;AAE3B2oD,oCAA4B,CAAA,CAAE;AAAA,WACzB;AACL,cAAMwB,wBACJ3B,0BAA0BrmD,UAAU,aAChC,OACA;AAAA,UACE,GAAGqmD;AAAAA,UACHrmD,OAAO;AAAA,QACT;AACNymD,kCAA0BuB,qBAAqB;AAAA,MAAA;AAAA,EAEhD,GAAA,CAACvB,2BAA2BJ,2BAA2BE,yBAAyB1oD,MAAM,CAAC,GAEpFoqD,kBAAkBjnC,YACtB,CAACknC,YAAqBz1C,QAAgB;AACpC,QAAI,CAAC4zC,0BAA2B;AAE1Bx7C,UAAAA,cAAY4H,QAAQ,cAAc,SAAS,MAC3C01C,SAASt9C,gBAAc,SAAS,IAAI;AAEtCq9C,QAAAA;AACFZ,2BAAqBz8C,WAAS;AAAA,SACzB;AACCu9C,YAAAA,0BAA0B/B,0BAA0BgB,WAAWc;AACrE,UAAIC,0BAA0B,EAAG;AAEX/B,4BAAAA,0BAA0Be,OAAOgB,uBAAuB;AAAA,IAAA;AAAA,EAChF,GAEF,CAACd,sBAAsBjB,2BAA2ByB,qBAAqB,CACzE,GAEMO,sBAAsBrnC,YACzBhU,CAAyB,UAAA;AACxB,QAAI,CAACq5C,0BAA2B;AAE1B,UAAA;AAAA,MAAC5zC,KAAAA;AAAAA,MAAKuyC;AAAAA,IAAAA,IAAYh4C;AAExB,YAAQyF,OAAG;AAAA,MACT,KAAK;AACH;AAAA;AAAA,MAEF,KAAK;AACe,0BAAA;AAClB;AAAA,MAEF,KAAK;AAAA,MACL,KAAK;AACHzF,cAAMC,eAAe,GACrBg7C,gBAAgBjD,UAAUvyC,KAAG;AAC7B;AAAA,MAEF,KAAK;AAAA,MACL,KAAK;AAGC4zC,kCAA0BrmD,UAAU,eACtCgN,MAAMC,eAAAA,GACN85C,sBAAsBt0C,UAAQ,cAAc,SAAS,OAAO;AAE9D;AAAA,IAGA;AAAA,EACJ,GAEF,CAAC4zC,2BAA2B0B,mBAAmBE,iBAAiBlB,qBAAqB,CACvF,GAEMuB,oBAAoBtnC,YACvBhU,CAAsB,YAAA;AACrB,IAAKq5C,8BACuB/qD,SACzBitD,eACC,QAAQlC,0BAA0Be,KAAK,IAAIf,0BAA0BgB,QAAQ,EAC/E,GACEmB,SAASx7C,QAAM4hB,MAAc,KAEPk4B,oBAAoB;AAAA,EAAA,GAEhD,CAACA,qBAAqBT,yBAAyB,CACjD;AAEAj6C,YAAU,OACJi6C,8BACF/qD,SAASoS,iBAAiB,WAAW26C,mBAAmB,GACxD/sD,SAASoS,iBAAiB,SAAS46C,iBAAiB,IAG/C,MAAM;AACPjC,kCACF/qD,SAASmS,oBAAoB,WAAW46C,mBAAmB,GAC3D/sD,SAASmS,oBAAoB,SAAS66C,iBAAiB;AAAA,EAG1D,IAAA,CAACA,mBAAmBD,qBAAqBhC,yBAAyB,CAAC;AAEtE,QAAMoC,kBAAkBznC,YACtB,MACEslC,6BAA8BoC,uBACvBA,oBAEE;AAAA,IAAC,GAAGA;AAAAA,IAAmB1oD,OAAO;AAAA,EAAA,IAFN,IAGhC,GACH,CACF,CAAA,GAEM2oD,mBAAmB3nC,YACvB,CAAComC,SAAeC,eACVhB,2BAA2Be,UAAUA,UAAc,OAEnDf,0BAA0BgB,aAAaA,aAClChB,0BAA0BrmD,UAAU,YAAY,YAAY,mBAEjEumD,yBAAyBj9B,SAAS+9B,UAAQ,IAAU,kBAEjD,MAET,CAAChB,2BAA2BE,wBAAwB,CACtD,GAEMqC,oBAAoB5nC,YAAY,MAAM;AACrCqlC,iCAELI,0BAA0B;AAAA,MACxBW,OAAOf,0BAA0Be;AAAAA,MACjCC,UAAUhB,0BAA0BgB,WAAW;AAAA,MAC/CrnD,OAAO;AAAA,IAAA,CACR;AAAA,EAAA,GACA,CAACymD,2BAA2BJ,yBAAyB,CAAC,GAEnDpqD,QAAQmlB,QACZ,OAAO;AAAA,IACLqnC;AAAAA,IACA3B;AAAAA,IACAgB;AAAAA,IACAa;AAAAA,IACAC;AAAAA,EAAAA,IAEF,CACEH,iBACA3B,qBACAgB,uBACAa,kBACAC,iBAAiB,CAErB;AAEA,SACG,oBAAA,yBAAyB,UAAzB,EAAkC,OAAe7mD,SAAS,CAAA;AAE/D;AC9QA,MAAM8mD,WAAWlsD,OAAOmsD;AAAAA;AAAAA;AAAAA;AAAAA,WAIb,CAAC;AAAA,EAAC5yC;AAAK,MAAMA,KAAK;AAAA;AAAA;AAAA,GAKvB6yC,iBAAiBpsD,OAAOksD,QAAQ;AAAA;AAAA;AAAA;AAa/B,SAASG,mBAAmB7tD,OAAgC;AAC3D,QAAA;AAAA,IAAC8tD;AAAAA,IAAUC;AAAAA,IAAQvE;AAAAA,IAAK/H;AAAAA,EAAazhD,IAAAA,OACrCguD,SAAS,QAAQD,OAAOxoD,EAAE,IAAIikD,IAAIt/C,KAAK,IACvC,CAAC+jD,aAAaC,cAAc,IAAI39C,SAAiBu9C,SAAAA,CAAoB,GACrE,CAACK,SAASC,UAAU,IAAI79C,SAAS,EAAK,GACtC89C,WAAW/5C,OAAiB,IAAI,GAChC;AAAA,IACJg5C;AAAAA,IACA3B;AAAAA,IACAgB;AAAAA,IACAa;AAAAA,IACAC;AAAAA,EACE1C,IAAAA,4BACEuD,GAAAA,YAAYd,iBAAiBO,OAAOxoD,IAAIikD,IAAIt/C,KAAK,GAEjDqkD,gBAAgB1oC,YAAY,MAAM;AAEtC8mC,0BAAsBoB,OAAOxoD,IAAIikD,IAAIt/C,KAAK,GAC1CojD,gBAAgB;AAAA,EAAA,GACf,CAACS,OAAOxoD,IAAI+nD,iBAAiB9D,IAAIt/C,OAAOyiD,qBAAqB,CAAC,GAC3D;AAAA,IAAC6B;AAAAA,EAAAA,IAAiBxuD,MAAM+B,MAAMod,QAAQwqC,QAAQ,CAAA,GAE9C8E,0BAA0BA,MAAM;AAC3Bl6C,aAAAA,SAASm6C,SACdL,SAAS95C,mBAAmBo6C,oBAC9BN,SAAS95C,QAAQ8d,OAAO;AAAA,EAAA,GAItBu8B,oBAA0D/8C,CAAU,UAAA;AACpEA,UAAMg9C,WAAW,IACnBJ,wBAAAA,KAEA58C,MAAMC,kBACN66C,sBAAsBoB,OAAOxoD,IAAIikD,IAAIt/C,KAAK;AAAA,EAAA,GAIxC4kD,oBAAoBjpC,YACvBhU,CAAyB,YAAA;AAClB,UAAA;AAAA,MAACyF;AAAAA,IAAAA,IAAOzF;AACVyF,YAAQ,YACNg3C,cAAc,oBAAkBG,2BAChCH,cAAc,aAAWb;EAAkB,GAGnD,CAACa,WAAWb,iBAAiB,CAC/B,GAEMsB,iBAAkBl9C,CAA+C,YAAA;AACrEu8C,eAAW,EAAI,GACfF,eAAer8C,QAAM4hB,OAAO3yB,KAAK;AAAA,EACnC,GAEMkuD,eAAeA,MAAM;AACrBb,gBACFK,gBAAgBhF,IAAIjkD,IAAIwoD,OAAOxoD,IAAI0oD,WAAW,GAC9CG,WAAW,EAAK,IAElBzC,oBAAoB;AAAA,EAAA,GAGhBsD,cAAcppC,YACjBhU,CAA0B,YAAA;AACzB,UAAMq9C,gBAAgBr9C,QAAMq9C,eAAeC,QAAQ,MAAM;AAEzD,KAAI,OAAOD,iBAAkB,YAAY,OAAOA,iBAAkB,cAChEhB,eAAegB,aAAa,GAE5BV,gBAAgBhF,IAAIjkD,IAAIwoD,OAAOxoD,IAAI2pD,aAAa;AAAA,EAAA,GAGpD,CAACnB,OAAOxoD,IAAIipD,eAAehF,IAAIjkD,EAAE,CACnC,GAEM6pD,aAAavpC,YAAY,MAAM;AACnCtb,cAAUC,UAAUC,UAAUwjD,YAAYrT,SAAAA,CAAU;AAAA,EAAA,GACnD,CAACqT,WAAW,CAAC;AAEN,YAAA,QACJK,cAAc,oBAAoBA,cAAc,cAElDnuD,SAASoS,iBAAiB,WAAWu8C,iBAAiB,IACpDR,cAAc,oBAAoBA,cAAc,oBAElDnuD,SAASoS,iBAAiB,SAAS08C,WAAW,GAE5CX,cAAc,oBAEhBnuD,SAASoS,iBAAiB,QAAQ68C,UAAU,GAEvC,MAAM;AACPd,KAAAA,cAAc,oBAAoBA,cAAc,cAClDnuD,SAASmS,oBAAoB,WAAWw8C,iBAAiB,IACvDR,cAAc,oBAAoBA,cAAc,oBAClDnuD,SAASmS,oBAAoB,SAAS28C,WAAW,GAC/CX,cAAc,oBAAkBnuD,SAASmS,oBAAoB,QAAQ88C,UAAU;AAAA,EAEpF,IAAA,CACDpB,QACAM,WACAP,OAAOxoD,IACPioD,kBACA4B,YACAN,mBACAG,aACAzF,IAAIt/C,KAAK,CACV;AAED,QAAMmlD,iBAAiBA,MACjBf,cAAc,YAAkB,mBAChCA,cAAc,kBAAwB,oBACtCA,cAAc,mBAAyB,mBAEpC,yBAGHgB,aAAa;AAAA,IACjB,SAAWf;AAAAA,IACX,QAAUS;AAAAA,IACV,aAAeJ;AAAAA,IACf,iBAAiB,CAAC,CAACN;AAAAA,IACnB,eAAeN;AAAAA,IACf,IAAMA;AAAAA,IACN,KAAQ1pD,CAAkB,QAAA;AACxB+pD,eAAS95C,UAAUjQ;AAAAA,IAAAA;AAAAA,EAEvB;AAEA,SAAIm9C,UAAU95C,SAAS,YAEnB,qBAAC,QACC,EAAA,GAAI2nD,YACJ,UAAU,MAAM,MAChB,QAAQ,GACR,OAAO;AAAA,IACLC,WAAW;AAAA,IACXn1C,QAAQi1C,eAAe;AAAA,IACvB/4C,SAAS;AAAA,EAEX,GAAA,OAAO6O,KAAKC,UAAU6oC,WAAW,GAEjC,UAAA;AAAA,IAAC,oBAAA,UAAA,EAAO,OAAM,QAAO,UAAI,QAAA;AAAA,IACxB,oBAAA,UAAA,EAAO,OAAM,SAAQ,UAAK,QAAA,CAAA;AAAA,EAC7B,EAAA,CAAA,IAKD,oBAAA,WAAA,EACKqB,GAAAA,YACJ,MAAM,GACN,QAAQ,GACR,QAAQ,IACR,OAAO;AAAA,IACLl1C,QAAQi1C,eAAe;AAAA,IACvB/4C,SAAS;AAAA,EAEX,GAAA,OACE,OAAO23C,eAAgB,YAAY,OAAOA,eAAgB,WACtDA,cACA9oC,KAAKC,UAAU6oC,WAAW,GAEhC,UAAUc,eACV,CAAA;AAEN;AAGO,SAASS,cAAcC,MAAqC;AACjE,QAAMC,WAAWD,KAAK1B,OAAO4B,YAAY,GACnCC,OAAOF,WAAW9B,iBAAiBF,UACnCmC,cAAcH,YAAYD,KAAK1B,OAAO+B,gBAAgB,MAAM,IAAI,IAAI;AAGxE,SAAA,oBAAC,QAEC,OAAO;AAAA,IACL7zC,MAAMwzC,KAAK1B,OAAOgC,SAAS,MAAM,KAAKnmD;AAAAA,IACtComD,aAAa,GAAGH,WAAW;AAAA,EAAA,GAE7B,OAAOJ,KAAK1B,OAAOkC,WAElBC,UAAAA,WAAWT,KAAK1B,OAAOoC,UAAUV,MAAMA,KAAKW,cAAc,EAPtDX,GAAAA,KAAKjG,IAAIpqC,SAAS3b,MAAMgsD,KAAKlqD,EAQpC;AAEJ;ACpMO,MAAM8qD,uBAAuB,GAE9BC,cAAetwD,CAMf,UAAA;AACE,QAAA;AAAA,IAACwD;AAAAA,IAAsBgmD;AAAAA,IAAK9oD;AAAAA,EAAAA,IAAcV,OAC1CqB,QAAQ,kBACRsC,yBAAyBsiB,QAC7B,MAAMviB,0BAA0BF,sBAAsB9C,YAAY8oD,IAAIpqC,SAAS3b,KAAKpC,KAAK,GACzF,CAACmC,sBAAsBgmD,IAAIpqC,SAAS3b,KAAK/C,UAAU,CACrD,GACM;AAAA,IAACkD;AAAAA,IAAOE;AAAAA,IAAWD;AAAAA,EAAAA,IAAaE,cAAcJ,wBAAwB;AAAA,IAC1EC,OAAO;AAAA,IACPC,WAAW;AAAA,IACXC,WAAW;AAAA,EAAA,CACZ;AACGD,MAAAA;AACF,+BACG,MAAK,EAAA,MAAM,GAAG,OAAK,IAAA,UAEpB,cAAA;AAGJ,QAAM0sD,eAAgB3sD,OAAOvC,SAASyC,WAAWzC,SAAS;AAC1D,SACG,qBAAA,MAAA,EAAK,OAAM,UAAS,KAAK,GACxB,UAAA;AAAA,IAAC,oBAAA,yBAAA,EAAwB,OAAc,UAAqB,CAAA;AAAA,IAC3D,oBAAA,MAAA,EAAK,MAAM,GAAIkvD,UAAa,aAAA,CAAA;AAAA,EAAA,GAC/B;AAEJ,GAEMC,eAAeC,sBACfC,mBAAmB,CAAC,UAAU,UAAU,SAAS,GAOjDC,wBAAwBA,CAACjwD,YAA8BkwD,kBACpDlwD,WAAWkiD,OAAO9+B,OAAgB,CAAC+sC,cAAuB5R,UAAU;AACnE,QAAA;AAAA,IAAC/3C;AAAAA,IAAMS;AAAAA,EAAAA,IAAQs3C;AACrB,MAAIyR,iBAAiBviC,SAASjnB,KAAKS,IAAI,GAAG;AACxC,UAAMmpD,UAAUN,aAAaO;AAAAA;AAAAA,MAE3BH,gBAAgB,GAAGA,aAAa,IAAI3R,MAAMt3C,IAAI,KAAKs3C,MAAMt3C;AAAAA,MACzD;AAAA,QACEpC,IAAIqrD,gBAAgB,GAAGA,aAAa,IAAI3R,MAAMt3C,IAAI,KAAKs3C,MAAMt3C;AAAAA,QAC7Dg8B,QAAQsb,MAAM/3C,KAAK7F;AAAAA,QACnB2vD,cAAc;AAAA,QACdvB,MAAOwB,CAAS,SAAA,oBAAC,sBAAmB,GAAIA,MAAM,WAAW/pD,KAAK,CAAA;AAAA,MAAA;AAAA,IAElE;AAEO,WAAA,CAAC,GAAG2pD,cAAcC,OAAO;AAAA,EAAA;AAIlC,SAAI5pD,KAAKS,SAAS,YAAYupD,mBAAmBhqD,IAAI,KAAK,CAAC0pD,gBAClD,CACL,GAAGC,cACHL,aAAatuC,MAAM;AAAA,IAACyhB,QAAQh8B;AAAAA,IAAMwpD,SAASR,sBAAsBzpD,MAAM+3C,MAAMt3C,IAAI;AAAA,EAAE,CAAA,CAAC,IAIjFkpD;AACT,GAAG,EAAE;AAIP,SAASO,uBACPrD,QACyD;AACzD,SAAO,iBAAiBA;AAC1B;AACA,SAASsD,iBACPtD,QACmD;AACnD,SAAO,aAAaA;AACtB;AAEA,MAAMuD,cAAeC,UACZA,KAAKC,QAASxF,SACfoF,uBAAuBpF,GAAG,IACrBA,MAELqF,iBAAiBrF,GAAG,IACfA,IAAImF,UAAUG,YAAYtF,IAAImF,OAAO,IAAI,CAE3C,IAAA,EACR;AAGI,SAASM,wBAAwBC,oBAAuC;AACvEluD,QAAAA,uBAAuBkE,2BAEvBypD,UAAmBlrC,QAAQ,MAC1ByrC,qBAGE,CACLlB,aAAamB,QAAQ;AAAA,IACnBpsD,IAAI;AAAA,IACJyrD,cAAc;AAAA,IACdrtB,QAASstB,CACP,SAAA,qBAAC,KACC,EAAA,UAAA;AAAA,MAAA,oBAAC,YACC,OAAO;AAAA,QAACpG,aAAa;AAAA,MAAA,GACrB,eAAeoG,KAAKlvD,MAAM6vD,sBAAAA,GAC1B,UAAUX,KAAKlvD,MAAM8vD,oCAAAA,GAAsC;AAAA,MAG5DZ,KAAKlvD,MAAMsoD,oBAAoB,EAAEC,KAAK5nD;AAAAA,MAAO;AAAA,IAAA,GAChD;AAAA,IAEF+sD,MAAMlG;AAAAA,EAAAA,CACP,GACDiH,aAAaO,SAAS,WAAW;AAAA,IAC/BC,cAAc;AAAA,IACdzrD,IAAI;AAAA,IACJkqD,MAAOwB,YAEF,oBAAA,aAAA,KACKA,QACJ,sBACA,YAAYS,mBACZ,CAAA;AAAA,EAAA,CAGP,GACD,GAAGf,sBAAsBe,kBAAkB,CAAC,IAhCrC,CAkCR,GAAA,CAACluD,sBAAsBkuD,kBAAkB,CAAC,GAEvC,CAACI,wBAAwB,IAA+B7rC,QAC5D,MACEqrC,YAAYH,OAAO,EAAErtC,OACnB,CAAC,CAACiuC,SAASC,mBAAmB,GAAGjE,WAAW;AAC1C,QAAI,CAACA,OAAOxoD,GAAU,OAAA,IAAIN,MAAM,wBAAwB;AACxD,UAAMgtD,gBAAgBlE,OAAOxoD;AAG7B,WAAKwoD,OAAOiD,eAKRgB,wBAAwB3B,uBACnB,CAAC;AAAA,MAAC,GAAG0B;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,IAAA,GAAQD,mBAAmB,IAG5D,CAAC;AAAA,MAAC,GAAGD;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,IAAA,GAAOD,sBAAsB,CAAC,IAR3D,CAAC;AAAA,MAAC,GAAGD;AAAAA,MAAS,CAACE,aAAa,GAAG;AAAA,OAAOD,mBAAmB;AAAA,EASpE,GACA,CAAC,CAAA,GAAI,CAAC,CACR,GACF,CAACb,OAAO,CACV;AAEO,SAAA;AAAA,IAACA;AAAAA,IAASW;AAAAA,EAAwB;AAC3C;AC9KO,SAASI,eAAe;AAAA,EAACnwD;AAA0B,GAAG;AACrD,QAAA;AAAA,IAACpB;AAAAA,EAAAA,IAAKC,eAAe,GACrBuxD,wBACJpwD,MAAM+pD,wBAAwB/hD,OAAQiiD,CAAQA,QAAAA,IAAIoG,WAAY,CAAA,EAAE1vD,UAAU2tD,sBAEtEgC,oBAAoBxsC,YAAY,MAAM;AAC1C9jB,UAAMuwD,sBAAsB;AAAA,KAC3B,CAACvwD,KAAK,CAAC,GAEJwwD,uBAAwBxE,YAA4C,MAAM;AAC9EA,WAAOyE,iBAAiB;AAAA,EAAA,GAGpBC,8BAA+B1E,CAA4C,aAAA;AAC/E,UAAM2E,kBAAkB3E,SAAO4E,aAAa,GACtCC,wBACJ7wD,MAAM+pD,sBAAAA,EAAwB/hD,OAAQiiD,CAAQA,UAAAA,MAAIoG,WAAW,CAAC,EAAE1vD,WAAW;AAErEyvD,WAAAA,yBAAyB,CAACO,mBAAqBE,yBAAyBF;AAAAA,EAClF;AAGE,SAAA,oBAAC,cACC,QAAQ,oBAAC,UAAO,MAAK,SAAQ,MAAM/xD,EAAE,yBAAyB,GAAE,GAChE,IAAG,mBACH,MACE,oBAAC,QAAK,SAAS,GAAG,YAAY,GAAG,OAAO;AAAA,IAACoa,OAAO;AAAA,EAAG,GACjD,+BAAC,MAAK,EAAA,WAAU,UAAS,QAAO,QAAO,KAAK,GAC1C,UAAA;AAAA,IAAA,oBAAC,QAAK,QAAO,YAAW,MAAM,GAC3Bpa,UAAAA,EAAE,0BAA0B,GAC/B;AAAA,IACA,oBAAC,QAAK,OAAO;AAAA,MAACuS,MAAM;AAAA,MAAY2/C,WAAW;AAAA,MAAKC,WAAW;AAAA,OACzD,UAAC,oBAAA,OAAA,EACE/wD,gBACEgxD,oBACAhpD,OAAQgkD,CAAWA,aAAAA,SAAOqE,WAAY,CAAA,EACtC3oD,IAAKskD,CACJ,aAAA,qBAAC,QAAqB,SAAS,GAAG,OAAM,UACtC,UAAA;AAAA,MAAA,oBAAC,YACC,UAAU0E,4BAA4B1E,QAAM,GAC5C,SAASA,SAAO4E,aAAa,GAC7B,UAAUJ,qBAAqBxE,QAAM,GACrC,IAAI,kBAAkBA,SAAOxoD,EAAE,IAC/B,OAAO;AAAA,QAACosD,SAAS;AAAA,MAAA,GAAS;AAAA,MAE5B,oBAAC,OAAI,MAAM,GAAG,aAAa,GACzB,UAAA,oBAAC,MAAK,EAAA,MAAM,GACV,UAAA,oBAAC,WAAM,SAAS,kBAAkB5D,SAAOxoD,EAAE,IACxCwoD,UAAAA,SAAOoC,UAAUxsB,QAAQiX,SAAAA,EAC5B,CAAA,EACF,CAAA,EACF,CAAA;AAAA,IAAA,EAAA,GAdSmT,SAAOxoD,EAelB,CACD,EAAA,CACL,EACF,CAAA;AAAA,IACA,oBAAC,QACC,EAAA,OAAM,QACN,MAAK,SACL,MAAM5E,EAAE,0BAA0B,GAClC,SAAS0xD,kBAAkB,CAAA;AAAA,EAAA,EAAA,CAE/B,EACF,CAAA,GAEF,WAAU,UACV,SAAS;AAAA,IAACv7C,QAAQ;AAAA,EAAA,GAClB;AAEN;AChFA,MAAMk8C,kBAAkBxxD,OAAOa,IAAI;AAAA;AAAA;AAI5B,SAAA4wD,0BAAA;AAAAhzD,QAAAA,IAAAC,EAAA,CAAA,GACL;AAAA,IAAA2E,OAAAtE;AAAAA,EAAA,IAEI2yD,kBADK;AAAA,IAAAC;AAAAA,EAAAA,IAAA5yD;AAAgBM,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAKrBhC,KAAC,oBAAA,cAAA,CAAe,CAAA,GAAAZ,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAkzD,kBACflyD,KAAAkyD,kBAAkB,oBAAC,WAAwB,gBAAI,GAAA,CAAK,GAAAlzD,OAAAkzD,gBAAAlzD,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,SAAAgB,MAFvDC,0BAAC,iBACCL,EAAAA,UAAAA;AAAAA,IAAAA;AAAAA,IACCI;AAAAA,EAAAA,EAAAA,CACH,GAAkBhB,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAHlBiB;AAGkB;ACLtB,MAAMkyD,SAAS5xD,OAAO6xD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,WAQX,CAAC;AAAA,EAACt4C;AAAK,MAAMA,KAAK;AAAA,eACd,CAAC;AAAA,EAACA;AAAK,MAAMA,KAAK;AAAA,GAG3Bu4C,eAAe9xD,OAAO4xD,MAAM;AAAA;AAAA;AAAA,GAK5BG,YAAY/xD,OAAO6tB;AAAAA;AAAAA;AAAAA,IAGrB+jC,MAAM;AAAA;AAAA;AAAA;AAUH,SAASI,wBAAwBxzD,OAAqC;AACrE,QAAA;AAAA,IAAC2jC;AAAAA,IAAQ8vB;AAAAA,MAAezzD,OACxB;AAAA,IAACW;AAAAA,EAAKC,IAAAA,eAAAA,GAEN8uD,WAAW/rB,OAAOoqB,OAAO4B,YAAY,GAErC+D,cACJD,YAAYE,QAAQ,KAAK,CAAChwB,OAAOoqB,OAAO6F,SAAS,OAC/C,oBAAC,MAAK,EAAA,MAAM,GAAG,QAAO,YAAW,cAAa,YAC3C1D,UAAAA,WAAWvsB,OAAOoqB,OAAOoC,UAAUxsB,QAAQA,OAAOysB,WAAW,CAAC,EACjE,CAAA,GAGEyD,YAAYnE,WAAW4D,eAAeF,QAEtCU,oBACJnwB,OAAOoqB,OAAOqE,WAAAA,MACbqB,YAAYE,UAAU,IAAI,CAAChwB,OAAOoqB,OAAOoD,QAAQzuD,SAASihC,OAAOoqB,OAAO6F,SAErE/D,cAAcH,YAAY/rB,OAAOoqB,OAAO+B,gBAAgB,MAAM,IAAI,IAAI;AAG1E,SAAA,oBAAC,aACC,OAAO;AAAA,IACL7zC,MAAM0nB,OAAOoqB,OAAOgC,SAAS,MAAM,KAAKnmD;AAAAA,IACxComD,aAAa,GAAGH,WAAW;AAAA,EAAA,GAG7B,eAAa,UAAUlsB,OAAOp+B,EAAE,IAChC,OAAOo+B,OAAOssB,QAAQ,GAEtB,+BAAC,MAAK,EAAA,SAAQ,iBAAgB,SAAS,GAAG,OAAM,YAC9C,UAAA;AAAA,IAAA,oBAAC,WAAQ,OAAO,KAAK,SAASyD,aAC5B,UAAA,oBAAC,OAAI,OAAO;AAAA,MAACK,WAAW;AAAA,IAAA,GAAe,YAAY,GAAG,aAAa,GAChEL,sBACH,CAAA,GACF;AAAA,IACCI,yCACE,WACC,EAAA,UAAA,oBAAC,cACC,QACE,oBAAC,UACC,cAAc;AAAA,MAACxpD,SAAS;AAAA,IAAiB,GACzC,MAAK,SACL,MAAM0pD,wBACN,eAAY,oBAEhB,CAAA,GACA,IAAG,cACH,SAAS;AAAA,MAACn9C,WAAW;AAAA,IAAA,GACrB,MACG,oBAAA,MAAA,EACC,8BAAC,UACC,EAAA,MAAMlW,EAAE,uBAAuB,GAC/B,MAAMyuB,WACN,SAAS,MAAMuU,OAAOoqB,OAAOyE,mBAAmB,CAAA,GAEpD,GACD,EAEL,CAAA;AAAA,EAAA,GAEJ,EAAA,GAnCK7uB,OAAOp+B,EAoCd;AAEJ;ACzFO,SAAS0uD,2BAA2B;AAAA,EAAClyD;AAAqC,GAAG;AAClF,6BACG,2BACC,EAAA,UAAA,qBAAC,QAAK,KAAK,GAAG,OAAO,UACnB,UAAA;AAAA,IAAA,oBAAC,QACC,EAAA,SAAS,MAAMA,MAAMmyD,aAAa,CAAC,GACnC,UAAU,CAACnyD,MAAMoyD,mBAAAA,GACjB,MAAMC,uBACN,cAAc;AAAA,MACZ9pD,SAAS;AAAA,IAAA,GACT;AAAA,IAEH,oBAAA,QAAA,EACC,SAAS,MAAMvI,MAAMsyD,aAAa,GAClC,UAAU,CAACtyD,MAAMoyD,mBAAAA,GACjB,MAAMG,iBACN,cAAc;AAAA,MACZhqD,SAAS;AAAA,IAAA,GACT;AAAA,IAEJ,qBAAC,QAAK,OAAO;AAAA,MAACmjC,YAAY;AAAA,IACvB1rC,GAAAA,UAAAA;AAAAA,MAAMwyD,MAAAA,SAAAA,EAAWC,WAAWC,YAAY;AAAA,MAAE;AAAA,MAAK1yD,MAAM2yD,aAAa;AAAA,IAAA,GACrE;AAAA,IAEC,oBAAA,QAAA,EACC,SAAS,MAAM3yD,MAAM4yD,SAAS,GAC9B,UAAU,CAAC5yD,MAAM6yD,eAAAA,GACjB,MAAMC,kBACN,cAAc;AAAA,MACZvqD,SAAS;AAAA,IAAA,GACT;AAAA,wBAEH,QACC,EAAA,SAAS,MAAMvI,MAAMmyD,aAAanyD,MAAM2yD,aAAa,IAAI,CAAC,GAC1D,UAAU,CAAC3yD,MAAM6yD,kBACjB,MAAME,wBACN,cAAc;AAAA,MACZxqD,SAAS;AAAA,IAAA,GACT;AAAA,IAEJ,oBAAC,YACC,OAAOvI,MAAMwyD,WAAWC,WAAWO,UACnC,UAAWhqD,CAAM,MAAA;AACfhJ,YAAMizD,YAAYC,OAAOlqD,EAAE0oB,OAAO3yB,KAAK,CAAC;AAAA,IAAA,GAGzC,UAAA,CAAC,IAAI,IAAI,GAAG,EAAE2I,IAAKsrD,CAClB,aAAA,oBAAC,YAAsB,OAAOA,UAC3BA,UADUA,SAAAA,GAAAA,QAEb,CACD,EACH,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ;ACtCA,SAASG,mBAAmBjU,WAA6B;AAEvD,SADsBA,UAAUn9B,OAAO,CAACQ,KAAKvX,SAAS;AAAA,IAAC,GAAGuX;AAAAA,IAAK,CAACvX,IAAItJ,GAAG,GAAGsJ;AAAAA,EAAG,IAAI,CAAA,CAAE;AAErF;AAEA,SAASooD,iBACPtwD,QACAoD,QACuB;AACvB,UAAQA,OAAOf,MAAI;AAAA,IACjB,KAAK,iBAAiB;AAEd+5C,YAAAA,YAAYiU,mBAAmBjtD,OAAOg5C,SAAS;AAE9C,aAAA;AAAA,QACL,GAAGp8C;AAAAA,QACHo8C;AAAAA,MACF;AAAA,IAAA;AAAA,IAGF,KAAK,qBAAqB;AACxB,YAAMmU,qBAAqBntD,OAAOxC;AAE3B,aAAA;AAAA,QACL,GAAGZ;AAAAA,QACHo8C,WAAW;AAAA,UACT,GAAGp8C,OAAMo8C;AAAAA,UACT,CAACmU,mBAAmB3xD,GAAG,GAAG2xD;AAAAA,QAAAA;AAAAA,MAE9B;AAAA,IAAA;AAAA,IAGF,KAAK,oBAAoB;AAEjB,YAAA;AAAA,QAAC,CAACntD,OAAO1C,EAAE,GAAG8vD;AAAAA,QAAG,GAAGC;AAAAA,UAAiBzwD,OAAMo8C;AAE1C,aAAA;AAAA,QACL,GAAGp8C;AAAAA,QACHo8C,WAAWqU;AAAAA,MACb;AAAA,IAAA;AAAA,IAGF,KAAK,oBAAoB;AACvB,YAAMC,kBAAkBttD,OAAOxC,SACzBF,KAAKgwD,gBAAgB9xD,KAGrB+xD,eAAe;AAAA;AAAA,QAEnB,GAJe3wD,OAAMo8C,UAAU17C,EAAE;AAAA;AAAA,QAMjC,GAAGgwD;AAAAA,MACL;AAEO,aAAA;AAAA,QACL,GAAG1wD;AAAAA,QACHo8C,WAAW;AAAA,UACT,GAAGp8C,OAAMo8C;AAAAA,UACT,CAAC17C,EAAE,GAAGiwD;AAAAA,QAAAA;AAAAA,MAEV;AAAA,IAAA;AAAA,IAGF;AACS3wD,aAAAA;AAAAA,EAAAA;AAEb;AAEA,MAAM4wD,iBAAgC;AAAA,EACpCjR,QAAQ,CAAC,WAAW,YAAY,WAAW;AAAA,EAC3CC,eAAe;AAAA,EACf3X,YAAY;AACd;AAQO,SAAA4oB,0BAAAn1D,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAmC;AAAA,IAAA6J,QAAAA;AAAAA,IAAAvE;AAAAA,IAAAywB;AAAAA,EAAAA,IAAA11B,IASxCo1D,QAAc,KAAK5rD,OAAM,eAGXlJ,KAAAo1B,cAAU3nB,8BAAA2nB;AAA4Ch1B,MAAAA;AAAAhB,WAAAY,MAF3CI,KAAA;AAAA,IAAA,GAAAqN;AAAAA,IAAA2nB,YAEXp1B;AAAAA,EAAsD,GACnEZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHDi2B,QAAAA,SAAe7nB,UAAUpN,EAGxB;AAACC,MAAAA;AAAAjB,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACqD3B,KAAA;AAAA,IAAA+/C,WAAA,CAAA;AAAA,EAAA,GAEtDhhD,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAFD4E,QAAAA,CAAAA,QAAA+wD,QAAA,IAA0BC,WAAAV,kBAA6Bj0D,EAEtD,GACD2C,CAAAA,WAAAiyD,YAAA,IAAkCvlD,SAAkB2lB,eAAe,GACnE,CAAAn1B,OAAAuP,QAAA,IAA0BC,aAA2B;AAACzN,MAAAA;AAAA7C,IAAA01D,CAAAA,MAAAA,SAAA11D,SAAAi2B,UAAAj2B,EAAA,CAAA,MAAAuF,UAErB1C,iBAAA;AAAA,QAAA,CAC1BozB,QAAM;AACT4/B,qBAAkB;AAAC;AAAA,IAAA;AAAA,QAAA;AAInB,YAAAC,YAAkB7/B,OAAMnoB,MAAO4nD,OAAOnwD,MAAM;AACpC,eAAA;AAAA,QAAA0B,MAAQ;AAAA,QAAe+5C,WAAa8U;AAAAA,MAAAA,CAAI,GAChDD,eAAkB;AAAA,aAAC/yD,KAAA;AAEnBuN,eADOgnB,GACK;AAAA,IAAA;AAAA,EAAC,GAEhBr3B,OAAA01D,OAAA11D,OAAAi2B,QAAAj2B,OAAAuF,QAAAvF,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAZD,QAAA+1D,eAAqBlzD;AAYMC,MAAAA;AAAA9C,WAAA+1D,gBAGzBjzD,YAAA8O,UAAA;AAEMA,QAAAA,MAAK3K,SAAU,cACjB4uD,eAAiB,GAAC,MACZE,aACNF,GAAAA,eAAkB,IAOhBjkD,MAAK3K,SAAU,eACjB4uD,eAAiB,GAKfjkD,MAAK3K,SAAU,YAAU;AACvB2K,UAAAA,MAAKw8B,eAAgB,UAAQ;AAC/B,cAAAmnB,eAAqB3jD,MAAKqpB;AAEtBs6B,wBACFI,SAAQ;AAAA,UAAA1uD,MACA;AAAA,UAAmBzB,SAChB+vD;AAAAA,QAAAA,CACV;AAAA,MAAA;AAID3jD,UAAAA,MAAKw8B,eAAgB,eACvBunB,SAAQ;AAAA,QAAA1uD,MAAQ;AAAA,QAAkB3B,IAAMsM,MAAKhL;AAAAA,MAAAA,CAAY,GAGvDgL,MAAKw8B,eAAgB,UAAQ;AAC/B,cAAAknB,kBAAwB1jD,MAAKqpB;AAEzBq6B,2BACFK,SAAQ;AAAA,UAAA1uD,MACA;AAAA,UAAkBzB,SACf8vD;AAAAA,QAAAA,CACV;AAAA,MAAA;AAAA,IAAC;AAAA,EAAA,GAITt1D,OAAA+1D,cAAA/1D,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AA9CH,QAAAg2D,sBAA4BlzD;AAgD3BoB,MAAAA;AAAA,OAAA;AAAA,QAAA,CAGM+xB,QAAM;AAAA9vB,UAAAA;AAAAnG,QAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAASuD,MAAAgH,GAAAA,GAAInN,OAAAmG,OAAAA,MAAAnG,EAAA,CAAA,GAAXkE,KAAOiC;AAAI2O,YAAAA;AAAAA,IAAAA;AAAA3O,QAAAA;AAAA,QAAAnG,EAAA,EAAA,MAAA01D,SAAA11D,EAAA,EAAA,MAAAi2B,OAAAvpB,cAAA1M,EAAA,EAAA,MAAAuF,QAAA;AAAAa,UAAAA;AAAApG,QAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAGXwD,MAAA6vD,CAAAA,WACT5lD,SAASgnB,KAAG,GACLlqB,GAAGkqB,KAAG,IACdr3B,QAAAoG,OAAAA,MAAApG,EAAA,EAAA,GAJamG,MAAA8vB,OAAMvpB,WAAAqB,OAAmB2nD,OAAOnwD,QAAMiwD,cAAgB,EAACrqD,KACrEqC,aAAWpH,GAGV,CACH,GAACpG,QAAA01D,OAAA11D,EAAA,EAAA,IAAAi2B,OAAAvpB,YAAA1M,QAAAuF,QAAAvF,QAAAmG;AAAAA,IAAA;AAAAA,YAAAnG,EAAA,EAAA;AALemG,SAAAA;AAAAA,EAAAA;AAHlB,QAAA+vD,YAAkBhyD;AAWS,MAAAiC,IAAAC;AAAApG,IAAAg2D,EAAAA,MAAAA,uBAAAh2D,UAAAk2D,aAEjB/vD,KAAAA,MAAA;AACRwjB,UAAAA,MAAYusC,UAASl2C,UAAWg2C,mBAAmB;AAAC,WAAA,MAAA;AAGlDrsC,WAAGC,YAAA;AAAA,IAAA;AAAA,EAEJxjB,GAAAA,KAAA,CAAC4vD,qBAAqBE,SAAS,GAACl2D,QAAAg2D,qBAAAh2D,QAAAk2D,WAAAl2D,QAAAmG,IAAAnG,QAAAoG,OAAAD,KAAAnG,EAAA,EAAA,GAAAoG,KAAApG,EAAA,EAAA,IANnCgR,UAAU7K,IAMPC,EAAgC;AAAC,MAAAC,IAAAE;AAAA,MAAAvG,EAAA,EAAA,MAAA4E,OAAAo8C,WAAA;AAKlCmV,UAAAA,UAAgBtxC,OAAAy6B,KAAY16C,OAAKo8C,SAAU,EAACn9B,OAAAQ,CAAAA,KAAAhN,QAAA;AAExC,YAAAnX,YAAiB0E,OAAKo8C,UAAW3pC,GAAG,GACpC++C,UAAgBl2D,UAAQsD,QAASyI,WAAW/L,UAAQsD,GAAI,GACxD8B,KAAW8wD,UAAUl2D,UAAQsD,MAAOyI,WAAW/L,UAAQsD,GAAI;AAGvD6gB,aAAAA,IAAI/e,EAAE,KAAA,CAAM8wD,YAGhB/xC,IAAI/e,EAAE,IAAIpF,YACHmkB;AAAAA,IAAG,GAAA,EAGd;AACOQ,UAAAA,OAAAwxC,OAAcF,OAAO,GAACn2D,EAAA,EAAA,IAAA4E,OAAAo8C,WAAAhhD,QAAAuG;AAAAA,EAAA;AAAAA,UAAAvG,EAAA,EAAA;AAAtBuG,OAAAA;AAjBT,QAAA+vD,cAAoBjwD;AAkBCI,MAAAA;AAAA,SAAAzG,EAAAs2D,EAAAA,MAAAA,eAAAt2D,UAAAc,SAAAd,EAAA,EAAA,MAAA4D,aAEd6C,MAAA;AAAA,IAAAka,MACC21C;AAAAA,IAAW1yD;AAAAA,IAAA9C;AAAAA,EAAAA,GAGlBd,QAAAs2D,aAAAt2D,QAAAc,OAAAd,QAAA4D,WAAA5D,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA,GAJMyG;AAIN;AC3OI,SAAS8vD,qBAAqB;AAAA,EAACvzC;AAAkC,GAAG;AACnE,QAAA;AAAA,IAACpe,OAAAA;AAAAA,EAASquD,IAAAA,eAEVpgB,GAAAA,QAAQ7sB,QAAQ,MAAM;AACpBxc,UAAAA,2BAAUqV,IAAI;AACpBja,WAAAA,OAAMq2B,OAAO4qB,KAAKpJ,QAAS+Z,CAAAA,MAAMhtD,KAAIqU,IAAIvW,eAAekvD,EAAE1Q,IAAItiD,GAAG,GAAGgzD,EAAE1Q,GAAG,CAAC,GACnEt8C;AAAAA,KACN,CAAC5E,OAAMq2B,OAAO4qB,IAAI,CAAC,GAGhB;AAAA,IAACllC;AAAAA,IAAM/c;AAAAA,MAAa6xD,0BAA0B;AAAA,IAClD3rD,QAAQ,aAAakZ,QAAQ;AAAA,EAAA,CAC9B;AAOM,SAAA;AAAA,IAACrC,MAJUqF,QAAQ,MACjBrF,KAAK7W,OAAQgD,SAAQ+lC,MAAMryB,IAAIlZ,eAAewF,IAAItJ,GAAG,CAAC,CAAC,GAC7D,CAACmd,MAAMkyB,KAAK,CAAC;AAAA,IAESjvC;AAAAA,EAAS;AACpC;ACFA,MAAM6yD,kBAAgBl1D,OAAOa,IAAI;AAAA;AAAA,GAG3Bs0D,iBAAiBn1D,OAAO6tB;AAAAA;AAAAA;AAAAA,GAIxBvtB,QAAQN,OAAOO;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAsBrB,SAAS60D,2BAA2B;AAAA,EAClClF;AACmE,GAAG;AAChE,QAAA;AAAA,IAACkE;AAAAA,IAAU/wD,OAAAA;AAAAA,EAAK,IAAIquD,kBACpB;AAAA,IAAC/B;AAAAA,IAASW;AAAAA,EAAAA,IAA4BL,wBAAwBC,kBAAkB,GAChF;AAAA,IAAC9wC;AAAAA,MAAQ41C,qBAAqB;AAAA,IAClCvzC,UAAUyuC,mBAAmB/pD;AAAAA,EAC9B,CAAA,GACK,CAAC8hD,gBAAgBC,iBAAiB,IAAIn5C,SAAwB,IAAI,GAElEsmD,YAAYhyD,OAAMq2B,OAAO4qB,KAAKpjD,QAC9BX,QAAQ+0D,cAAc;AAAA,IAC1Bl2C;AAAAA,IACAuwC;AAAAA,IACA4F,iBAAiBA,gBAAgB;AAAA,IACjCC,qBAAqBA,oBAAoB;AAAA,IACzCC,uBAAuBA,sBAAsB;AAAA;AAAA,IAE7CC,oBAAoB;AAAA,IACpBC,cAAc;AAAA,MACZC,eAAe;AAAA,QAACn7C,MAAM,CAAC,YAAY,SAAS;AAAA,MAAC;AAAA,MAC7Cu4C,YAAY;AAAA,QAACO,UAAU;AAAA,MAAE;AAAA,MACzBsC,kBAAkBvF;AAAAA,IACpB;AAAA,IACAwF,UAAW9N,SAAQA,IAAI/lD;AAAAA,IACvBkmD,MAAM;AAAA,MACJF;AAAAA,MACAC;AAAAA,MACA8E,eAAeA,CAAC3nD,YAAY0wD,SAASz2D,UAAU;AAAA,IAAA;AAAA,EACjD,CACD,GAEK;AAAA,IAACwpD;AAAAA,EAAAA,IAAQvoD,MAAMmoD,YAAY;AAEjCj5C,YAAU,OACR2kD,SAAS;AAAA,IAAC1uD,MAAM;AAAA,IAAkBxG,YAAYgxD;AAAAA,EAAmB,CAAA,GAC1D,MAAM;AACF,aAAA;AAAA,MAACxqD,MAAM;AAAA,MAAqBxG,YAAYgxD;AAAAA,IAAAA,CAAmB;AAAA,EAAA,IAErE,CAACA,oBAAoBkE,QAAQ,CAAC;AAE3B4B,QAAAA,YAAY3xC,YAAa2jC,CAE3B,UAAA,oBAAC,OACC,IAAG,MAEH,UAAU,GACV,OAAO;AAAA,IAACmI,SAAS;AAAA,IAAQ52C,OAAO;AAAA,EAAA,GAE/ByuC,UAAAA,MAAIiO,gBAAgB,EAAEhuD,IAAKgmD,CAC1B,SAAA,8BAAC,eAAkBA,EAAAA,GAAAA,MAAM,KAAKjG,MAAIpqC,SAAS3b,MAAMgsD,KAAKlqD,KACvD,EAAA,GANIikD,MAAIpqC,SAAS3b,MAAM+lD,MAAIjkD,EAO9B,GAED,CAAA,CAAE,GAECmyD,YAAY,UAAUb,SAAS,kBAAkBvM,KAAK5nD,MAAM;AAClE,8BACGg0D,iBAAc,EAAA,WAAU,UAAS,UAAU,GAAG,eAAY,4BACzD,UAAA;AAAA,IAAC,qBAAA,MAAA,EAAK,WAAU,OAAM,OAAM,UAAS,UAAU,GAAG,UAAU,GAAG,SAAQ,iBACrE,UAAA;AAAA,MAAA,qBAAC,MAAK,EAAA,WAAU,OAAM,OAAM,UAC1B,UAAA;AAAA,QAAA,oBAAC,yBAAuB,EAAA;AAAA,4BACvB,MAAK,EAAA,MAAM,GAAG,OAAK,IACjBgB,UACH,UAAA,CAAA;AAAA,MAAA,GACF;AAAA,MACA,oBAAC,kBAAe,MAAa,CAAA;AAAA,IAAA,GAC/B;AAAA,wBACC,gBACC,EAAA,UAAA,oBAAC,2BAA0B,EAAA,OACzB,+BAAC,OACC,EAAA,UAAA;AAAA,MAAC,oBAAA,SAAA,EACE31D,UAAM41D,MAAAA,gBAAkBluD,EAAAA,IAAKgqD,iBAC3B,oBAAA,KAAA,EAAI,IAAG,MACLA,UAAYmE,YAAAA,QAAQnuD,IAAKk6B,CACxB,WAAA,oBAAC,yBAEC,EAAA,QACA,YAFKA,GAAAA,OAAOp+B,GAIf,EAPekuD,GAAAA,YAAYluD,EAQ9B,CACD,EACH,CAAA;AAAA,MACA,oBAAC,WAAOxD,UAAMmoD,MAAAA,YAAAA,EAAcI,KAAK7gD,IAAI+tD,SAAS,EAAE,CAAA;AAAA,IAAA,EAClD,CAAA,EACF,CAAA,GACF;AAAA,IACC,oBAAA,MAAA,EAAK,SAAS,YAAY,SAAS,GAAG,KAAK,GAAG,UAAU,GACvD,UAAC,oBAAA,4BAAA,EAA2B,OAAa,EAC3C,CAAA;AAAA,EAAA,GACF;AAEJ;AAEO,SAASK,sBAAsB73D,OAAmC;AACjEK,QAAAA,SAASC,aACT2iB,WAAWjjB,MAAM+E,KAAK+yD,gBAEtBp3D,aAAaL,OAAOI,IAAIwiB,QAAQ;AACtC,MAAI,CAACviB,cAAc,CAACq3D,qBAAqBr3D,UAAU;AACjD,UAAM,IAAIuE,MAAM,gBAAgBge,QAAQ,sCAAsC;AAG9E,SAAA,oBAAC,kBACC,UAAC,oBAAA,4BAAA,EAA+BjjB,GAAAA,OAAO,oBAAoBU,YAAW,EACxE,CAAA;AAEJ;AC7IA,MAAMs3D,8BAA+B74C,CAI/B,YAAA;AACE,QAAA;AAAA,IAACsC;AAAAA,IAAWumC;AAAAA,IAAc9kD;AAAAA,EAAAA,IAAUic;AAE1C,SAAOsC,WAAWhY,IAAKlB,CACjBA,SAAAA,KAAK/C,QAAQtC,SACR;AAAA,IACL,GAAGqF;AAAAA,IACH6K,UAAUlQ,WAAWqF,KAAK/C,QAAQtC;AAAAA,EAAAA,IAIlCqF,MAAM/C,QAAQw5C,KACT;AAAA,IACL,GAAGz2C;AAAAA,IACH6K,UAAU6kD,QAAQjQ,cAAchJ,IAAIz2C,MAAM/C,QAAQw5C,MAAM53C,aAAW;AAAA,EAAA,IAIhE;AAAA,IAAC,GAAGmB;AAAAA,IAAM6K,UAAU;AAAA,EAAA,CAC5B;AACH;AAEO,SAAA80C,iBAAApnD,OAAA;AACL,QAAA,CAAAo3D,UAAAC,WAAA,IAAgC5nD,SAAoBzP,KAAK;AAAC,SACrDs3D,cAAcF,UAAUp3D,KAAK,IAI3Bo3D,YAHLC,YAAYr3D,KAAK,GACVA;AAEM;AAMJ41D,MAAAA,gBAAgBnxC,KAAK,SAAAvlB,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAGhC;AAAA,IAAAgK;AAAAA,IAAAs2C;AAAAA,IAAAz7C,MAAAA;AAAAA,IAAA4jB;AAAAA,MAA2C3oB,OAC3C;AAAA,IAAA2H,MAAAo2C;AAAAA,EAAA,IAAiC7K,aAEjC;AAAA,IAAAmlB,eAAA93D;AAAAA,IAAA4oD,uBAAAtoD;AAAAA,IAAA6gB;AAAAA,IAAAD;AAAAA,IAAAtC;AAAAA,EAAA,IAMIpa,OALFszD,gBAAA93D,OAAyBqJ,SAAT,YAAhBrJ,IACA4oD,wBAAAtoD,OAAmC+I,SAAAxC,gBAAnCvG,IAKF;AAAA,IAAAy3D,iBAAAr3D;AAAAA,IAAA8I,QAAAA;AAAAA,EAAAA,IAAgDoV,SAAzCm5C,kBAAAr3D,OAA6B2I,SAAAxC,gBAA7BnG,IACPuE,SAAe0iD,iBAAiB/oC,QAAO3Z,UAAA05C,YAAuB,GAC9DqZ,aAAmBxzD,MAAIi5C;AAAO98C,MAAAA;AAAA,OAAA;AAAA4B,QAAAA;AAAA7C,MAAA8J,CAAAA,MAAAA,WAAA9J,SAAAuF,UAER1C,MAAAmgD,wBAAwBl5C,SAAQvE,MAAM,GAACvF,OAAA8J,SAAA9J,OAAAuF,QAAAvF,OAAA6C,OAAAA,MAAA7C,EAAA,CAAA;AAA3D,UAAAkoD,cAAoBrlD;AAChBqlD,QAAAA,aAAWzlD,WAAc,GAAA;AAAExB,WAAOinD,YAAW,CAAA;AAAGpzC,YAAAA;AAAAA,IAAAA;AACpD,SAAA;AAAA,EAAA;AAHF,QAAAkO,WAAiB/hB,IAMjB,CAAAgC,QAAAkmD,SAAA,IAA4B14B,wBAC1B,UACAzN,YAAYle,MAAIQ,IAChB8yD,aACF,GAEA;AAAA,IAAAh3D;AAAAA,EAAAA,IAAgBwW,YAAY9S,KAAI;AAAC,MAAAjC,IAAAC;AAAA9C,WAAAq4D,mBAIxBv1D,KAAAu1D,iBAAe51D,SAAY,IAAA;AAAA,IAAAs8C,IAAQsZ;AAAAA,EAAevZ,IAAAA,kBAAoB9+C,OAAAq4D,iBAAAr4D,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA,GAA7E6C,KAAOC;AADTy1D,QAAAA,mBAAyB11D,IAIzB,CAAAklD,cAAAqB,YAAA,IAAqC34B,wBACnC,cACAzN,YAAYle,MAAIQ,IAChBizD,gBACF;AAAC,MAAAr0D,IAAAiC;AAAAnG,IAAAiD,CAAAA,MAAAA,UAAAjD,SAAAwhB,aAAAxhB,EAAA,CAAA,MAAA+nD,gBAIG5hD,KAAA4xD,4BAAA;AAAA,IAAAv2C;AAAAA,IAAAumC;AAAAA,IAAA9kD;AAAAA,EAAAA,CAIC,GAACjD,OAAAiD,QAAAjD,OAAAwhB,WAAAxhB,OAAA+nD,cAAA/nD,OAAAmG,MAAAA,KAAAnG,EAAA,CAAA,GAAAkE,KAJFiC;AAFJqyD,QAAAA,6BAAmCt0D,IAUnCu0D,oBAA0Bx1D,WAAW;AAAWmD,MAAAA;AAAApG,IAAA,CAAA,MAAAy4D,qBAAAz4D,EAAAiD,EAAAA,MAAAA,UAAAjD,EAAAD,EAAAA,MAAAA,SAAAC,UAAA+nD,gBAC7B3hD,KAAAqyD,oBAChB,8BAAA,uBAAA,EAA0B14D,GAAAA,OAAY,KAAAA,MAAK+E,KAAAQ,GAAQ,CAAA,IAEpD,oBAAC,oBAAgB,GAAKvF,OAAkBgoD,WAAAA,cAAsB9kD,OAC/D,CAAA,GAAAjD,OAAAy4D,mBAAAz4D,QAAAiD,QAAAjD,QAAAD,OAAAC,QAAA+nD,cAAA/nD,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAJDihB,QAAAA,aAAmB7a,IAOKC,KAAAiyD,cAAcxa;AAAgBv3C,MAAAA;AAAAvG,YAAAy4D,qBAK3ClyD,MAAAkyD,oBAAiB,CAAA,IAAA;AAAA,IAAAzlD,iBAAA;AAAA,IAAAE,UAAA;AAAA,EAAA,GAA6ClT,QAAAy4D,mBAAAz4D,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,IAAA,EAAA,MAAA8E,MAAAi5C,UAGlEt3C,MAAAilB,QAIA1rB,EAAA,EAAA,IAAA8E,MAAAi5C,QAAA/9C,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,IAAAiK,EAAAA,MAAAA,SAAAjK,EAAAkpD,EAAAA,MAAAA,yBAAAlpD,EAAAyhB,EAAAA,MAAAA,kBAAAzhB,UAAAw4D,8BAAAx4D,EAAA,EAAA,MAAAmpD,aAAAnpD,EAAA,EAAA,MAAAopD,gBAAAppD,EAAA,EAAA,MAAAoB,SAEDyH,0BAAC,YACQoB,EAAAA,OACgBi/C,uBACPznC,gBACL+2C,uCACArP,WACGC,cACPhoD,MACP,CAAA,GAAApB,QAAAiK,OAAAjK,QAAAkpD,uBAAAlpD,QAAAyhB,gBAAAzhB,QAAAw4D,4BAAAx4D,QAAAmpD,WAAAnpD,QAAAopD,cAAAppD,QAAAoB,OAAApB,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,YAAAugD,cAAAvgD,EAAA0oB,EAAAA,MAAAA,WAAA1oB,EAAAihB,EAAAA,MAAAA,cAAAjhB,EAAA,EAAA,MAAAuG,OAAAvG,UAAAyG,OAAAzG,EAAA,EAAA,MAAA6I,OArBJM,2BAAC,MACS,EAAA,WAAA,oBACJuf,aACM,eAAG,GACRniB,KACKg6C,UAAS,YAElB95C,UAAAA;AAAAA,IAAAA;AAAAA,IAMDoC;AAAAA,IASCoY;AAAAA,EAAAA,EAAAA,CACH,GAAOjhB,QAAAugD,YAAAvgD,QAAA0oB,SAAA1oB,QAAAihB,YAAAjhB,QAAAuG,KAAAvG,QAAAyG,KAAAzG,QAAA6I,KAAA7I,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAA,SAAApJ,EAAAmJ,EAAAA,MAAAA,OAAAnJ,UAAAqG,MAxBT+C,MAAC,oBAAA,gBAAqB,EAAA,MAAA/C,IACpB8C,UAwBF,IAAA,CAAA,GAAiBnJ,QAAAmJ,KAAAnJ,QAAAqG,IAAArG,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA,GAzBjBoJ;AAyBiB,CAEpB;AACDqtD,cAAc1gD,cAAc;AClJrB,MAAM2iD,uBAAuB1zD,MAAM;AAAA,EAIxC2zD,YACEz3D,SACA03D,YACAC,aACAC,MACA;AACM53D,UAAAA,OAAO,GACb,KAAKwG,OAAO;AACZ,UAAMs6C,UAAU,OAAO6W,cAAgB,MAAc,cAAc,GAAGA,WAAW;AAC5Ex7C,SAAAA,QAAQu7C,cAAc,CAAA,GAAI99B,OAAOg+B,OAAO,GAAG9W,OAAO,KAAK8W,IAAI,MAAM9W,OAAO;AAAA,EAAA;AAAA,EAG/E+W,YAAYzzD,IAA8B;AACxC,WAAA,KAAK0zD,SAAS1zD,IACP;AAAA,EAAA;AAEX;AAGY2zD,IAAAA,oCAAAA,WAAQ;AAARA,SAAAA,UAAQ,cAAA,8BAARA,UAAQ,iBAAA,4BAARA,UAAQ,kBAAA,6BAARA,UAAQ,oBAAA,+BAARA,UAAQ,qBAAA,qCAARA,UAAQ,uBAAA,kCAARA,UAAQ,yBAAA,oCAARA,UAAQ,uBAAA,kCAARA,UAAQ,wBAAA,mCAARA,UAAQ,2BAAA,sCAARA,UAAQ,4BAAA,uCAARA,UAAQ,4BAAA,uCAARA,UAAQ,+BAAA,0CAARA,UAAQ,uCAAA,kDAARA,UAAQ,yCAAA,oDAARA;AAAQ,EAAA,CAAA,CAAA;ACtBb,MAAMC,sBAAoC;AAAA,EAC/C93D,OAAO;AAAA,EACP2gB,MAAM;AAAA,IACJ3gB,OAAO;AAAA,MACLiW,KAAK;AAAA,MACL8hD,IAAI35D;AAAAA,IAAAA;AAAAA,EAER;AAAA,EACAkI,MAAM;AAAA,EACNq3C,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAcvvC,WAAW;AAAA,EAAO,CAAA;AAC/C,GAEa2pD,sBAAoC;AAAA,EAC/Ch4D,OAAO;AAAA,EACP2gB,MAAM;AAAA,IACJ3gB,OAAO;AAAA,MACLiW,KAAK;AAAA,MACL8hD,IAAI35D;AAAAA,IAAAA;AAAAA,EAER;AAAA,EACAkI,MAAM;AAAA,EACNq3C,IAAI,CAAC;AAAA,IAACC,OAAO;AAAA,IAAcvvC,WAAW;AAAA,EAAO,CAAA;AAC/C,GAEa4pD,mCAAmCH,qBAEnCI,2BAA2C;AAAA,EACtDJ;AAAAA;AAAAA,EACAE;AAAAA;AAAqB;ACpBPG,SAAAA,uBACdjxD,MACA2B,OACAoT,MACU;AACH/U,SAAAA,gBAAgBkxD,kBAAkBlxD,KAAKmxD,UAAU;AAAA,IAACp8C;AAAAA,IAAMpT;AAAAA,EAAM,CAAA,IAAI3B;AAC3E;AAwDO,MAAMkxD,gBAAkD;AAAA;AAAA,EAI7Db,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7B3xD,OAAOA,QAA6C;AAClD,WAAO,KAAK4xD,MAAM;AAAA,MAAC5xD;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B6xD,YAAuC;AACrC,WAAO,KAAKF,KAAK3xD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnByP,OAAOA,QAAiC;AACtC,WAAO,KAAKmiD,MAAM;AAAA,MAACniD;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5BqL,YAAuC;AACrC,WAAO,KAAK62C,KAAKliD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBrW,MAAMA,OAAgC;AACpC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3B04D,WAA+B;AAC7B,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB2gB,KAAKA,MAAgD;AACnD,WAAO,KAAK63C,MAAM;AAAA,MAAC73C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1Bg4C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK53C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBE,MAAMA,OAAgC;AACpC,WAAO,KAAK23C,MAAM;AAAA,MAAC33C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3B+3C,WAAqC;AACnC,WAAO,KAAKL,KAAK13C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBjf,KAAKA,MAA8D;AACjE,WAAO,KAAK42D,MAAM;AAAA,MAAC52D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1Bi3D,UAAmC;AACjC,WAAO,KAAKN,KAAK32D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBuC,OAAOA,QAA6C;AAClD,WAAO,KAAKq0D,MAAM;AAAA,MAACr0D;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B20D,YAAuC;AACrC,WAAO,KAAKP,KAAKp0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB6c,aAAaA,eAAe,IAAuB;AACjD,WAAO,KAAKw3C,MAAM;AAAA,MAACx3C,cAAcxT,CAAQwT,CAAAA;AAAAA,IAAAA,CAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzD+3C,kBAAmD;AACjD,WAAO,KAAKR,KAAKv3C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBq3C,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACpD,UAAA;AAAA,MAACjc;AAAAA,MAAO4G;AAAAA,MAAQyP;AAAAA,QAAU,KAAKkiD;AACrC,QAAI,CAACv4D,OAAO;AACV,YAAM03D,OAAO,OAAO9wD,UAAW,WAAW,YAAYA,MAAM,MAAM2B;AAC5D,YAAA,IAAI+uD,eACR,qCACAx5C,QAAQ7B,MACR6B,QAAQjV,OACR6uD,IACF,EAAEC,YAAYE,SAASmB,cAAc;AAAA,IAAA;AAGnC,QAAA,CAACpyD,UAAU,CAACyP;AACd,YAAM,IAAIihD,eACR,8DAA8D,KAAKiB,KAAKv4D,KAAK,IAC7E8d,QAAQ7B,MACR6B,QAAQjV,OACR,IAAI7I,KAAK,GACX,EAAE23D,YAAYE,SAASoB,yBAAyB;AAGlD,QAAI5iD,UAAUzP;AACZ,YAAM,IAAI0wD,eACR,yCACAx5C,QAAQ7B,MACR6B,QAAQjV,OACR,IAAI7I,KAAK,GACX,EAAE23D,YAAYE,SAASqB,oCAAoC;AAGtD,WAAA;AAAA,MAAC,GAAG,KAAKX;AAAAA,MAAMv4D;AAAAA,IAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7Bw4D,MAAMW,UAA6C;AACjD,UAAMC,UAAU,IAAIhB,gBAAgB,KAAKE,QAAQ;AACjDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AAUO,SAASC,oBACdvxD,SACA;AAAA,EAAC61C;AAAAA,EAAI39C;AAAAA,EAAO2gB;AAAkB,GAC9BqiC,oBACiB;AACjB,MAAIoW,UAAU,IAAIhB,gBAAgBtwD,OAAO,EACtC+Y,MAAM,SAAS,EACf7gB,MACC8H,QAAQ6Y,KAAKrhB,EAAE,oCAAoC;AAAA;AAAA,IAEjDy4D,IAAI;AAAA,IACJj0B,SAAS;AAAA,MAAC9jC;AAAAA,IAAAA;AAAAA;AAAAA,EAAK,CAChB,CACH,EACC4B,KAAK03D,QAAQ,EACb1yD,OAAO,cAAc,EACrBzC,OAAO;AAAA,IAACw5C;AAAAA,IAAIqF;AAAAA,EAAAA,CAAmB;AAElC,SAAIriC,SACFy4C,UAAUA,QAAQz4C,KAAKA,IAAI,IAGtBy4C;AACT;AAGgBG,SAAAA,kCACdzxD,SACA8Z,UACmB;AACb,QAAA;AAAA,IAAC5iB;AAAAA,EAAAA,IAAU8I,SACXjC,OAAO,OAAO+b,YAAa,WAAW5iB,OAAOI,IAAIwiB,QAAQ,IAAIA;AAC/D,SAAA,CAAC/b,QAAQ,EAAE,eAAeA,QACrB,CAAA,KAIPA,KAAK2zD,YAAY3zD,KAAK2zD,UAAU9/B,OAAOw+B,wBAAwB,IAAIA,0BACnE9vD,IAAKm6C,CAAAA,aACL8W,oBAAoBvxD,SAASy6C,UAAUD,sBAAsBz8C,MAAM08C,SAAS5E,EAAE,CAAC,CACjF;AACF;AC3TgB8b,SAAAA,4BACdvyD,MACA2B,OACAoT,MACe;AACR/U,SAAAA,gBAAgBwyD,uBAAuBxyD,KAAKmxD,UAAU;AAAA,IAACp8C;AAAAA,IAAMpT;AAAAA,EAAM,CAAA,IAAI3B;AAChF;AAmBO,MAAMwyD,qBAA4D;AAAA;AAAA;AAAA,EAQvEnC,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKl2D,MAAMm2D,OAAOA,KAAKr0D,KAAK,IAC5B,KAAKy1D,SAASpB,OAAOA,KAAKv4D,QAAQ,IAClC,KAAK45D,QAAQrB,OAAOA,KAAK53C,OAAOpY;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQlCrE,GAAGA,IAAkC;AAC5B,WAAA,IAAIw1D,qBAAqB,KAAKpB,UAAU;AAAA,MAACp0D;AAAAA,MAAIlE,OAAO,KAAK25D;AAAAA,MAAQh5C,MAAM,KAAKi5C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3FC,QAAgB;AACd,WAAO,KAAKz3D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQdpC,MAAMA,OAAqC;AAClC,WAAA,IAAI05D,qBAAqB,KAAKpB,UAAU;AAAA,MAACt4D;AAAAA,MAAOkE,IAAI,KAAK9B;AAAAA,MAAKue,MAAM,KAAKi5C;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxFlB,WAAmB;AACjB,WAAO,KAAKiB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQdh5C,KAAKA,MAAqD;AACjD,WAAA,IAAI+4C,qBAAqB,KAAKpB,UAAU;AAAA,MAAC33C;AAAAA,MAAMzc,IAAI,KAAK9B;AAAAA,MAAKpC,OAAO,KAAK25D;AAAAA,IAAAA,CAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzFhB,UAA+C;AAC7C,WAAO,KAAKiB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQdvB,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAoB;AACzD,UAAA;AAAA,MAAC7Z;AAAAA,MAAKu3D;AAAAA,MAAQC;AAAAA,IAAAA,IAAS;AAC7B,QAAI,CAACx3D;AACG,YAAA,IAAIk1D,eACR,0CACAx5C,QAAQ7B,MACR6B,QAAQjV,OACR8wD,MACF,EAAEhC,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACH;AACG,YAAA,IAAIrC,eACR,6CACAx5C,QAAQ7B,MACR7Z,GACF,EAAEu1D,YAAYE,SAASmB,cAAc;AAGhC,WAAA;AAAA,MACL90D,IAAI9B;AAAAA,MACJpC,OAAO25D;AAAAA,MACPh5C,MAAMi5C;AAAAA,IACR;AAAA,EAAA;AAEJ;AClIO,MAAMG,oBAAoB;AAEjBC,SAAAA,WACd91D,IACAszD,YACAC,aACQ;AACR,MAAI,OAAOvzD,MAAO;AAChB,UAAM,IAAIozD,eACR,iDAAiD,OAAOpzD,EAAE,IAC1DszD,YACAC,WACF;AAGF,QAAM,CAACwC,cAAc,IAAI/1D,GAAGg2D,MAAMH,iBAAiB,KAAK,CAAE;AACtDE,MAAAA;AACF,UAAM,IAAI3C,eACR,+CAA+C2C,cAAc,KAC7DzC,YACAC,WACF;AAGEvzD,MAAAA,GAAGs1C,WAAW,UAAU;AAC1B,UAAM,IAAI8d,eACR,gDACAE,YACAC,WACF;AAGKvzD,SAAAA;AACT;AC/BgBi2D,SAAAA,mBAAmBn6D,OAAekE,IAAqB;AACjEA,MAAAA;AACKA,WAAAA;AAGHk2D,QAAAA,aAAaC,UAAUr6D,KAAK;AAE3B+5D,SAAAA,kBAAkBO,KAAKF,UAAU,IAAIC,UAAUE,YAAQv6D,KAAK,CAAC,IAAIo6D;AAC1E;ACqEO,MAAMI,iBAAoD;AAAA;AAAA,EAI/DjD,YAAYgB,MAAuB;AACjC,SAAKA,OAAO;AAAA,MAACz6C,SAAS,CAAC;AAAA,MAAG,GAAIy6C,QAAc,CAAA;AAAA,IAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjDr0D,GAAGA,IAA8B;AAC/B,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxB21D,QAAkC;AAChC,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAAiC;AACrC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,MAAOkE,IAAIi2D,mBAAmBn6D,OAAO,KAAKu4D,KAAKr0D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxEw0D,WAAwC;AACtC,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB2gB,KAAKA,MAAiD;AACpD,WAAO,KAAK63C,MAAM;AAAA,MAAC73C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bg4C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK53C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB5K,MAAMA,OAAgC;AACpC,WAAO,KAAKyiD,MAAM;AAAA,MAACziD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B0kD,WAAwC;AACtC,WAAO,KAAKlC,KAAKxiD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBmZ,UAAUA,YAA4C;AACpD,WAAO,KAAKspC,MAAM;AAAA,MAACtpC,WAAAA;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BwrC,eAAgD;AAC9C,WAAO,KAAKnC,KAAKrpC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBpR,QAAQA,SAAqD;AAC3D,WAAO,KAAK06C,MAAM;AAAA,MAAC16C;AAAAA,IAAAA,CAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM7B68C,aAAyD;AAChD,WAAA,KAAKpC,KAAKz6C,WAAW,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/BsC,UAAUA,WAA6D;AACrE,WAAO,KAAKo4C,MAAM;AAAA,MAACp4C;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BmxB,eAAgD;AAC9C,WAAO,KAAKgnB,KAAKn4C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBC,eAAeA,gBAA4E;AACzF,WAAO,KAAKm4C,MAAM;AAAA,MAACn4C;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpCu6C,oBAA0D;AACxD,WAAO,KAAKrC,KAAKl4C;AAAAA,EAAAA;AAAAA,EAGnBw6C,gBAAgBA,iBAAkD;AAChE,WAAO,KAAKrC,MAAM;AAAA,MAACqC;AAAAA,IAAAA,CAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrCxC,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAgB;AACrD,UAAA;AAAA,MAAC/X;AAAAA,MAAIlE;AAAAA,MAAO+V;AAAAA,MAAO+H,SAASg9C;AAAAA,MAAkB5rC,WAAAA;AAAAA,QAAa,KAAKqpC;AACtE,QAAI,CAACr0D;AACG,YAAA,IAAIozD,eACR,mDACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAAC5qC;AACG,YAAA,IAAIooC,eACR,0DACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASiC,WAAW;AAG7B,WAAA;AAAA,MACL51D,IAAI81D,WAAW91D,IAAI4Z,QAAQ7B,MAAM6B,QAAQjV,KAAK;AAAA,MAC9C7I;AAAAA,MACA6F,MAAM;AAAA,MACNkQ;AAAAA,MACAmZ,WAAAA;AAAAA,MACA2rC,iBAAiB,KAAKtC,KAAKsC;AAAAA,MAC3B/8C,SAASg9C,oBAAoB,CAAC;AAAA,MAC9B16C,YAAY,KAAKm4C,KAAKn4C,aAAa,CAAA,GAAIhY,IAAI,CAAClB,MAAM8V,MAChDm7C,uBAAuBjxD,MAAM8V,GAAGc,QAAQ7B,IAAI,CAC9C;AAAA,MACAoE,iBAAiB,KAAKk4C,KAAKl4C,kBAAkB,CAAIjY,GAAAA,IAAI,CAAClB,MAAM8V,MAC1Dy8C,4BAA4BvyD,MAAM8V,GAAGc,QAAQ7B,IAAI,CACnD;AAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFu8C,MAAMW,UAAiD;AAC/CC,UAAAA,UAAU,IAAIoB,iBAAiB;AACrCpB,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AC/PsB2B,eAAAA,uBACpBC,WACA92D,IAC6B;AACvBiH,QAAAA,QAAQ,2CACR3F,aAAaU,eAAehC,EAAE,GAC9B0G,UAAUC,WAAW3G,EAAE;AAQ7B,UANc,MAAM82D,UAAU/tD,6BAA6B,EAAEP,MAC3DvB,OACA;AAAA,IAAC3F;AAAAA,IAAYoF;AAAAA,EAAAA,GACb;AAAA,IAACS,KAAK;AAAA,EACR,CAAA,GAEa,CAAC;AAChB;ACIO,MAAe4vD,mBAEtB;AAAA;AAAA,EAEY1C,OAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzBr0D,GAAGA,IAA0B;AAC3B,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAKxB21D,QAAqB;AACnB,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAA6B;AACjC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,MAAOkE,IAAI,KAAKq0D,KAAKr0D,MAAMg3D,UAAUl7D,KAAK;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjE04D,WAA2B;AACzB,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB4B,KAAKA,MAA2D;AAC9D,WAAO,KAAK42D,MAAM;AAAA,MAAC52D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bi3D,UAAyB;AACvB,WAAO,KAAKN,KAAK32D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBy2D,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACpD,UAAA;AAAA,MAAC/X;AAAAA,MAAIlE;AAAAA,MAAO4B;AAAAA,QAAQ,KAAK22D;AAC/B,QAAI,CAACr0D;AACG,YAAA,IAAIozD,eACR,kCACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAAC95D;AACG,YAAA,IAAIs3D,eACR,qCACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASmB,cAAc;AAGhC,WAAA;AAAA,MACL90D,IAAI81D,WAAW91D,IAAI4Z,QAAQ7B,MAAM6B,QAAQjV,KAAK;AAAA,MAC9C7I;AAAAA,MACA4B;AAAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAQJ;AAEA,SAASu5D,eAAel7B,MAAyE;AACxF,SAAA,OAAQA,KAAgCo4B,aAAc;AAC/D;AAGgB+C,SAAAA,mBACdl0D,MACA2B,OACAoT,MACM;AACN,SAAOk/C,eAAej0D,IAAI,IAAIA,KAAKmxD,UAAU;AAAA,IAACp8C;AAAAA,IAAMpT;AAAAA,EAAM,CAAA,IAAI3B;AAChE;ACzGA,MAAMm0D,kBAAmB9C,CACvBx2D,SAAAA,SAASw2D,IAAI,KAAKA,KAAK1yD,SAAS;AAM3B,MAAMy1D,6BAA6BL,mBAGxC;AAAA;AAAA,EAIA1D,YAKEgE,iBACA;AACMhD,UAAAA,OAAO8C,gBAAgBE,eAAe,IAAI;AAAA,MAAC,GAAGA;AAAAA,IAAAA,IAAmB;AAAA,MAACz9C,SAAS,CAAA;AAAA,IAAE;AAE7E,UAAA,GACN,KAAKy6C,OAAOA;AAEZ,UAAMiD,gBACJ,OAAOD,mBAAoB,aAAaA,kBAAkB,KAAKhD,KAAKrpC;AAElEssC,sBAEF,KAAKjD,OAAO,KAAKrpC,UAAUssC,aAAa,EAAEjD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ9CrpC,UAAUA,YAAoD;AAC5D,WAAO,KAAKspC,MAAM;AAAA,MAACtpC,WAAAA;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BwrC,eAAoD;AAClD,WAAO,KAAKnC,KAAKrpC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBpR,QAAQA,SAAqD;AAC3D,WAAO,KAAK06C,MAAM;AAAA,MAAC16C;AAAAA,IAAAA,CAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM7B68C,aAAuC;AAC9B,WAAA,KAAKpC,KAAKz6C,WAAW,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ/Bu6C,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAoB;AAC/D,UAAMtD,OAAO,MAAM0/C,UAAUv6C,OAAO,GAE9BoR,aAAY,KAAKqpC,KAAKrpC;AAC5B,QAAI,OAAOA,cAAc;AACjB,YAAA,IAAIooC,eACR,8EACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAAS4D,kBAAkB;AAGpC,WAAA;AAAA,MACL,GAAG9iD;AAAAA,MACHuW,WAAAA;AAAAA,MACApR,SAAS,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,MAC/BjY,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOF2yD,MAAMW,UAAyD;AACvDC,UAAAA,UAAU,IAAIkC,qBAAqB;AACzClC,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACvGO,MAAMsC,wBAAwBT,mBAAuD;AAAA;AAAA,EAI1F1D,YAAYgB,MAA0B;AAC9B,UAAA,GACN,KAAKA,OAAO;AAAA,MAACr0D,IAAI;AAAA,MAAUlE,OAAO;AAAA,MAAU,GAAIu4D,QAAc,CAAA;AAAA,IAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQnEF,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AACnD,WAAA;AAAA,MACL,GAAG,MAAMo8C,UAAUv6C,OAAO;AAAA,MAC1BjY,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQF2yD,MAAMW,UAA+C;AAC7CC,UAAAA,UAAU,IAAIsC,gBAAgB;AACpCtC,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACrCauC,MAAAA,OAAQpD,CAA8C,SAAA,IAAImD,gBAAgBnD,IAAI,GAG9ErpC,YACXqsC,CAAAA,oBACyB,IAAID,qBAAqBC,eAAe;;;;;;;;;;ACMnE,MAAMK,8BACJA,CAAC;AAAA,EAACC;AAAAA,EAAqBb;AAA2B,MAClD,OAAOc,QAAQ;AAAA,EAAC33D;AAAAA,EAAQ8X;AAAI,MAAM;AAChC,MAAIpW,OAAO1B,OAAO0B;AAElB,QAAM2xD,aAAav7C,KAAK3Y,MAAM,GAAG2Y,KAAK5a,SAAS,CAAC,GAC1C06D,iBAAiB9/C,KAAKA,KAAK5a,SAAS,CAAC;AAM3C,MAJKwE,SACHA,OAAO,MAAMk1D,uBAAuBC,WAAWc,MAAM,IAGnD,CAACj2D;AACH,UAAM,IAAIyxD,eACR,mEACAE,YACAuE,cACF;AAGF,SAAOF,oBAAoB;AAAA,IAACr2D,YAAYs2D;AAAAA,IAAQz8D,YAAYwG;AAAAA,EAAAA,CAAK;AACnE;AA4CK,MAAMm2D,gBAAsD;AAAA;AAAA,EAIjEzE,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7Br0D,GAAGA,IAA6B;AAC9B,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxB21D,QAAmC;AACjC,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAAgC;AACpC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,MAAOkE,IAAIi2D,mBAAmBn6D,OAAO,KAAKu4D,KAAKr0D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxEw0D,WAAyC;AACvC,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB2gB,KAAKA,MAAgD;AACnD,WAAO,KAAK63C,MAAM;AAAA,MAAC73C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bg4C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK53C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB5K,MAAMA,OAA+B;AACnC,WAAO,KAAKyiD,MAAM;AAAA,MAACziD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B0kD,WAAyC;AACvC,WAAO,KAAKlC,KAAKxiD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBvQ,WAAWA,YAAqC;AAExCy2D,UAAAA,SAAS,KAAK1D,KAAKr0D,MAAMsB;AAC/B,WAAO,KAAKgzD,MAAM;AAAA,MAChBt0D,IAAI+3D;AAAAA,MACJn+C,SAAS;AAAA,QACP,GAAI,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,QAC1B5Z,IAAIsB;AAAAA,MAAAA;AAAAA,IACN,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMH02D,gBAAgD;AACvC,WAAA,KAAK3D,KAAKz6C,SAAS5Z;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5B7E,WAAWoG,cAAoD;AAC7D,WAAO,KAAK+yD,MAAM;AAAA,MAChB16C,SAAS;AAAA,QACP,GAAI,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,QAC1BjY,MAAM,OAAOJ,gBAAiB,WAAWA,eAAeA,aAAaa;AAAAA,MAAAA;AAAAA,IACvE,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMH61D,gBAAkD;AACzC,WAAA,KAAK5D,KAAKz6C,SAASjY;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ5Bu2D,qBAAqBv6C,YAAoBG,YAAuD;AAC9F,WAAO,KAAKw2C,MAAM;AAAA,MAChB16C,SAAS;AAAA,QACP,GAAI,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,QAC1BnY,UAAUkc;AAAAA,QACVo0B,oBAAoBj0B;AAAAA,MAAAA;AAAAA,IACtB,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHq6C,0BAAgE;AACvD,WAAA,KAAK9D,KAAKz6C,SAASnY;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAM5B22D,oCAAoF;AAC3E,WAAA,KAAK/D,KAAKz6C,SAASm4B;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5B9W,MAAMA,QAAgD;AACpD,WAAO,KAAKq5B,MAAM;AAAA,MAACr5B,OAAAA;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3Bo9B,WAAmC;AAC1B,WAAA,KAAKhE,KAAKp5B,SAAS,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9Bk5B,UAAU;AAAA,IAACp8C,OAAO,CAAE;AAAA,IAAEpT;AAAAA,IAAO6uD;AAAAA,EAAAA,IAA0B;AAAA,IAACz7C,MAAM,CAAA;AAAA,EAAA,GAAmB;AAC/E,UAAMugD,QAAQvgD,KAAKpT,SAASoT,KAAK5a,SAAS,CAAC,GAGrC6C,KAAK,KAAKq0D,KAAKr0D,MAAOs4D,SAAS,GAAGA,KAAK,MAAO,IAC9C1+C,UAAoC;AAAA,MACxC5Z;AAAAA,MACA2B,MAAM0C;AAAAA,MACN5C,UAAU4C;AAAAA,MACV0tC,oBAAoB1tC;AAAAA,MACpB,GAAG,KAAKgwD,KAAKz6C;AAAAA,IACf;AAEI,QAAA,OAAO5Z,MAAO,YAAY,CAACA;AACvB,YAAA,IAAIozD,eACR,uCACAr7C,MACApT,OACA6uD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGhC,QAAA,CAACh8C,WAAW,CAACA,QAAQ5Z;AACjB,YAAA,IAAIozD,eACR,qDACAr7C,MACA/X,IACAwzD,IACF,EAAEC,YAAYE,SAAS4E,oBAAoB;AAGzC,QAAA,CAAC3+C,WAAW,CAACA,QAAQjY;AACvB,YAAM,IAAIyxD,eACR,+DACAr7C,MACA/X,IACAwzD,IACF;AAGIv4B,UAAAA,UAAS,KAAKo5B,KAAKp5B,SAAS,KAAKo5B,KAAKp5B,MAAM99B,SAAS,IAAI,KAAKk3D,KAAKp5B,QAAQ,CAACw8B,MAAM,GAAGvzD,IACzF,CAAClB,MAAM8V,MAAMo+C,mBAAmBl0D,MAAM8V,GAAGf,IAAI,CAC/C,GAEMygD,UAAUv9B,OAAM/2B,IAAK63B,UAASA,KAAK/7B,EAAE,GACrCy4D,QAAQC,KAAKF,QAAQh0D,OAAO,CAACkhC,QAAQ5sB,MAAM0/C,QAAQ5vC,SAAS8c,QAAQ5sB,IAAI,CAAC,CAAC,CAAC;AACjF,QAAI2/C,MAAMt7D,SAAS;AACX,YAAA,IAAIi2D,eACR,+CAA+CqF,MAAM90D,KAAK,KAAK,CAAC,IAChEoU,MACA/X,IACAwzD,IACF;AAGK,WAAA;AAAA,MACL,GAAG,KAAKa;AAAAA,MACRxiD,OAAO,KAAKwiD,KAAKxiD,SAAS6lD,4BAA4B,KAAKtD,QAAQ;AAAA,MACnEp0D,IAAI81D,WAAW91D,IAAI+X,MAAMpT,KAAK;AAAA,MAC9BhD,MAAM;AAAA,MACNiY,SAAS++C,mBAAmB/+C,OAAO;AAAA,MACnCqhB,OAAAA;AAAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFq5B,MAAMW,WAAgC,IAAqB;AACzD,UAAMC,UAAU,IAAI4C,gBAAgB,KAAK1D,QAAQ,GAC3Cx6C,UAAU;AAAA,MAAC,GAAI,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,MAAI,GAAIq7C,SAASr7C,WAAW,CAAA;AAAA,IAAG;AAC1Es7C,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGY;AAAAA,MAAUr7C;AAAAA,IAAAA,GACpCs7C;AAAAA,EAAAA;AAEX;AAEA,SAASyD,mBAAmBtE,MAAiD;AAC3E,QAAM5jB,OAAwB;AAAA,IAC5BzwC,IAAIq0D,KAAKr0D,MAAM;AAAA,IACf2B,MAAM0yD,KAAK1yD,QAAQ;AAAA,EACrB;AAEI0yD,SAAAA,KAAK5yD,aACPgvC,KAAKhvC,WAAW4yD,KAAK5yD,WAGnB4yD,KAAKtiB,uBACPtB,KAAKsB,qBAAqBsiB,KAAKtiB,qBAG1BtB;AACT;AAGgBmoB,SAAAA,mBAAmBh1D,SAA2BywD,MAAoC;AAChG,MAAI7sD,MAAM6sD,MAAM1yD;AAAAA;AAAAA,IAEZiC,QAAQ+zD,oBAAoB;AAAA,MAACx8D,YAAYk5D,KAAK1yD;AAAAA,IAAK,CAAA;AAAA;AAAA;AAAA,IAEnD,IAAIm2D,gBAAgBl0D,OAAO;AAAA;AAE3B,MAAA,CAACywD,KAAa7sD,QAAAA;AAEZ,QAAA;AAAA,IAACxH;AAAAA,IAAI2B;AAAAA,IAAMF;AAAAA,IAAUswC;AAAAA,MAAsBsiB,KAAKz6C;AACtDpS,SAAAA,MAAMA,IAAIxH,GAAGq0D,KAAKr0D,EAAE,EAAEsB,WAAWtB,EAAE,GAE/B2B,SACF6F,MAAMA,IAAIrM,WAAWwG,IAAI,IAEvBF,aACF+F,MAAMA,IAAI0wD,qBAAqBz2D,UAAUswC,kBAAkB,IAEzDsiB,KAAKxiD,UACPrK,MAAMA,IAAIqK,MAAMwiD,KAAKxiD,KAAK,IAGrBrK;AACT;AAGO,SAASqxD,mCACd;AAAA,EAAClB;AAAAA,EAAqBl6C;AAA2B,GACjDE,YACAG,YACiB;AACjB,QAAMrc,WAAWgc,UAAUjP,KAAMpT,CAAMA,MAAAA,EAAE4E,OAAO2d,UAAU;AAE1D,MAAI,CAAClc;AACH,UAAM,IAAI/B,MAAM,qBAAqBie,UAAU,eAAe;AAGhE,SAAOg6C,oBAAoB;AAAA,IAACx8D,YAAYsG,SAAStG;AAAAA,EAAAA,CAAW,EAAE+8D,qBAC5Dv6C,YACAG,UACF;AACF;ACpXO,MAAMg7C,gCAAkF;AAAA;AAAA,EAI7FzF,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7Br0D,GAAGA,IAA6C;AAC9C,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxB21D,QAAiD;AAC/C,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAAgD;AACpD,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B04D,WAAuD;AACrD,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBmlB,YAAYA,aAAsD;AAChE,WAAO,KAAKqzC,MAAM;AAAA,MAACrzC;AAAAA,IAAAA,CAAY;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMjC83C,iBAAmE;AACjE,WAAO,KAAK1E,KAAKpzC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBtD,WAAWA,YAAqD;AAExDo6C,UAAAA,SAAS,KAAK1D,KAAKr0D,MAAM2d;AAC/B,WAAO,KAAK22C,MAAM;AAAA,MAChBt0D,IAAI+3D;AAAAA,MACJp6C;AAAAA,IAAAA,CACD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHq7C,gBAAiE;AAC/D,WAAO,KAAK3E,KAAK12C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBG,WAAWA,YAAmE;AAC5E,WAAO,KAAKw2C,MAAM;AAAA,MAACx2C;AAAAA,IAAAA,CAAW;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhCm7C,gBAAiE;AAC/D,WAAO,KAAK5E,KAAKv2C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBq2C,UAAU;AAAA,IAACp8C,OAAO,CAAE;AAAA,IAAEpT;AAAAA,IAAO6uD;AAAAA,EAAAA,IAA0B;AAAA,IAACz7C,MAAM,CAAA;AAAA,EAAA,GAA+B;AACrF,UAAA;AAAA,MAACs8C;AAAAA,MAAMD;AAAAA,QAAY,MACnB;AAAA,MAAC32C;AAAAA,IAAAA,IAAa22C;AAEpB,QAAI,OAAOC,KAAKr0D,MAAO,YAAY,CAACq0D,KAAKr0D;AACjC,YAAA,IAAIozD,eACR,0DACAr7C,MACApT,OACA6uD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACvB,KAAK12C;AACF,YAAA,IAAIy1C,eACR,gFACAr7C,MACAs8C,KAAKr0D,IACLwzD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAGpC,UAAMn0D,WAAWgc,UAAUjP,KAAMpT,OAAMA,EAAE4E,OAAOq0D,KAAK12C,UAAU;AAE/D,QAAI,CAAClc;AACG,YAAA,IAAI2xD,eACR,gFACAr7C,MACAs8C,KAAKr0D,IACLwzD,IACF,EAAEC,YAAYE,SAASiC,WAAW;AAG7B,WAAA;AAAA,MACL51D,IAAIq0D,KAAKr0D;AAAAA,MACT2d,YAAY02C,KAAKr0D;AAAAA,MACjB7E,YAAYsG,SAAStG;AAAAA,MACrBwG,MAAM;AAAA,MACNsf,aAAaozC,KAAKpzC,eAAexf,SAASwf;AAAAA,MAC1CnlB,OAAOu4D,KAAKv4D,SAAS2F,SAAS3F;AAAAA,MAC9Bo9D,UAAU7E,KAAK6E;AAAAA,MACfx7D,MAAM22D,KAAK32D,QAAQ+D,SAAS/D;AAAAA,MAC5BmgB,mBAAmBw2C,KAAKx2C;AAAAA,MACxBC,YAAYu2C,KAAKv2C;AAAAA,IACnB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOFw2C,MAAMW,WAA8C,IAAqC;AACvF,UAAMC,UAAU,IAAI4D,gCAAgC,KAAK1E,QAAQ;AACjEc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGY;AAAAA,IAAAA,GAC1BC;AAAAA,EAAAA;AAEX;AAGO,SAASiE,iCACdv1D,SACmC;AAC7B,QAAA;AAAA,IAAC9I;AAAAA,IAAQs+D;AAAAA,IAAqB37C;AAAAA,EAAa7Z,IAAAA,SAG3Ci8C,YAAY/kD,OAAOu+D,aAAa;AAQtC,SAPgB57C,UAGbjZ,OAAQ80D,CAAQ,QAAA,CAACA,IAAIx7C,YAAY3gB,MAAM,EACvCoM,KAAK,CAACkP,GAAGC,MAAMmnC,UAAUpxC,QAAQgK,EAAEtd,UAAU,IAAI0kD,UAAUpxC,QAAQiK,EAAEvd,UAAU,CAAC,EAGpE+I,IAAKo1D,CAAAA,QAAQF,oBAAoB,EAAEG,yBAAyBD,IAAIt5D,EAAE,CAAC;AACpF;AAGgBw5D,SAAAA,uCACdx2D,MACA2B,OACAoT,MAC0B;AACnB/U,SAAAA,gBAAgB81D,kCAAkC91D,KAAKmxD,UAAU;AAAA,IAACp8C;AAAAA,IAAMpT;AAAAA,EAAM,CAAA,IAAI3B;AAC3F;AAGgBy2D,SAAAA,uCACd71D,SACAoa,eACY;AACN,QAAA;AAAA,IAACljB;AAAAA,IAAQ2iB;AAAAA,EAAAA,IAAa7Z;AACrBoa,SAAAA,cAAc9Z,IAAKlB,CAAS,SAAA;AACjC,UAAMvB,WAAWgc,UAAUjP,KAAMpT,CAAMA,MAAAA,EAAE4E,OAAOgD,KAAK2a,UAAU,GACzD7hB,QAAQkH,KAAKlH,SAAS2F,UAAU3F,SAAS,UAEzCmE,SAA2B,CAAC;AAC9BwB,gBAAYA,SAAStG,eACvB8E,OAAO0B,OAAOF,SAAStG,aAGrB6H,KAAK2a,eACP1d,OAAOwB,WAAWuB,KAAK2a;AAGzB,UAAMoD,eAA6B/d,KAAK8a,aAAa,CAAC7d,QAAQ+C,KAAK8a,UAAU,IAAI7d,QAC3E9E,aAAasG,YAAY3G,OAAOI,IAAIuG,SAAStG,UAAU,GAEvDshB,OAAOzZ,KAAKyZ,QAAQhb,UAAUgb;AAEpC,QAAIy4C,UAAU,IAAIhB,gBAAgBtwD,OAAO,EACtC9H,MAAMA,KAAK,EACX4B,KAAM+D,YAAYA,SAAS/D,QAASvC,YAAYuC,QAAQ+gB,OAAO,EAC/DtM,OAAO;AAAA,MAACxQ,MAAM;AAAA,MAAU1B,QAAQ8gB;AAAAA,IAAAA,CAAa;AAEhD,WAAItE,SACFy4C,UAAUA,QAAQz4C,KAAKA,IAAI,IAGtBy4C,QAAQf,UAAU;AAAA,EAAA,CAC1B;AACH;AC/KO,MAAMuF,yBAAyBr8D,OAAO,oCAAoC,GAyCpEs8D,uBAAsCA,CAACC,YAAY35D,QAAQ;AAAA,EAACT,MAAAA;AAAI,MAAe;AAC1F,QAAMq6D,SAASD,eAAe,QACxBE,WAAWF,eAAe,UAC1BG,YAAYv6D,OACZw6D,aAAaD,UAAUngD,SAASpV,UAAU,IAC1C+pC,aAAawrB,UAAUngD,SAAS3Z,UAAU,CAC1C4/C,GAAAA,YAAYka,UAAUxH,iBACxB,CAACwH,UAAUxH,cAAc,IACzB0H,uBAAuBD,YAAYzrB,UAAU,GAE3CqV,wBAAwBmW,UAAUnW,yBAAyB,CAAE;AAE/DkW,SAAAA,YAAY75D,OAAOwB,WACdmiD,sBAAsBl8C,KAAM4xD,CAAQA,QAAAA,IAAI37C,eAAe1d,OAAOwB,QAAQ,IAI5Eo4D,UAAU55D,OAAOD,MAAM6/C,UAAUj3B,SAAS3oB,OAAO0B,IAAI,KACrDm4D,YAAYja,UAAUj3B,SAAS3oB,OAAO0B,IAAI;AAE/C;AAEAg4D,qBAAqBO,WAAWR;ACxHzB,MAAMS,gBAAgB,CAAC,WAAW,QAAQ,SAAS,UAAU,OAAO;ACwB3E,SAASC,kBAAkB;AAE3B;AAGaC,MAAAA,uBAAsCA,CAACT,YAAY35D,QAAQ;AAAA,EAACT,MAAAA;AAAAA,EAAMmF;AAAK,MAC3EA,SAAS,KAAKg1D,qBAAqBC,YAAY35D,QAAQ;AAAA,EAACT,MAAAA;AAAAA,EAAMmF;AAAK,CAAC;AAwFtE,MAAe21D,mBAEtB;AAAA;AAAA,EAEYC,iCAAiC;AAAA;AAAA,EAEjClG,OAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzBr0D,GAAGA,IAA0B;AAC3B,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxB21D,QAAqB;AACnB,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAA6B;AACjC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,MAAOkE,IAAIi2D,mBAAmBn6D,OAAO,KAAKu4D,KAAKr0D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMxEw0D,WAA2B;AACzB,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB2gB,KAAKA,MAA6C;AAChD,WAAO,KAAK63C,MAAM;AAAA,MAAC73C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bg4C,UAAyB;AACvB,WAAO,KAAKJ,KAAK53C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBq2C,cAAcA,eAA+C;AAC3D,WAAO,KAAKwB,MAAM;AAAA,MAACxB;AAAAA,IAAAA,CAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnC0H,mBAA2C;AACzC,WAAO,KAAKnG,KAAKvB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB52C,UAAUA,WAAqE;AAC7E,WAAO,KAAKo4C,MAAM;AAAA,MAACp4C;AAAAA,IAAAA,CAAU;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/BmxB,eAAmC;AACjC,WAAO,KAAKgnB,KAAKn4C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBC,eAAeA,gBAAwE;AACrF,WAAO,KAAKm4C,MAAM;AAAA,MAACn4C;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpCu6C,oBAA6C;AAC3C,WAAO,KAAKrC,KAAKl4C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBtK,MAAMA,OAA4B;AAChC,WAAO,KAAKyiD,MAAM;AAAA,MAACziD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B0kD,WAA2B;AACzB,WAAO,KAAKlC,KAAKxiD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB8kD,gBAAgBA,iBAA+C;AAC7D,WAAO,KAAKrC,MAAM;AAAA,MAACqC;AAAAA,IAAAA,CAAgB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMrC8D,qBAA+C;AAC7C,WAAO,KAAKpG,KAAKsC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB7b,UAAU5mC,UAAU,IAAoB;AACtC,WAAO,KAAKogD,MAAM;AAAA,MAChB5R,gBAAgB;AAAA,QAAC,GAAI,KAAK2R,KAAK3R,kBAAkB,CAAC;AAAA,QAAI5H,WAAW5mC;AAAAA,MAAAA;AAAAA,IAAO,CACzE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHwmD,eAAoC;AAClC,WAAO,KAAKrG,KAAK3R,iBAAiB,KAAK2R,KAAK3R,eAAe5H,YAAYz2C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOzEu/C,sBACEnmC,WAIc;AACT88C,WAAAA,KAAAA,iCAAiC,IAC/B,KAAKjG,MAAM;AAAA,MAAC1Q,uBAAuBz6C,MAAMmW,QAAQ7B,SAAS,IAAIA,YAAY,CAACA,SAAS;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM/Fk9C,2BAA2D;AACzD,WAAO,KAAKtG,KAAKzQ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBuQ,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAkB;AACvD/X,UAAAA,KAAK,KAAKq0D,KAAKr0D,MAAM,IACrB+X,OAAO6B,QAAQ7B,MAEf+6C,gBAAgB,KAAKuB,KAAKvB;AAChC,QAAIA,iBAAiB,CAACqH,cAAcvxC,SAASkqC,aAAa;AAClD,YAAA,IAAIM,eACR,6BAA6B+G,cAAcj2D,IAAKlB,CAAS,SAAA,IAAIA,IAAI,GAAG,EAAEW,KAAK,IAAI,CAAC,IAChFoU,MACA/X,MAAM4Z,QAAQjV,OACd,KAAK0vD,KAAKv4D,KACZ;AAGF,UAAM8nD,yBAAyB,KAAKyQ,KAAKzQ,yBAAyB,CAAA,GAAI1/C,IAAI,CAAClB,MAAM8V,MAC/E0gD,uCAAuCx2D,MAAM8V,GAAGf,IAAI,CACtD;AAEO,WAAA;AAAA,MACL/X,IAAI81D,WAAW91D,IAAI4Z,QAAQ7B,MAAM/X,MAAM4Z,QAAQjV,KAAK;AAAA,MACpD7I,OAAO,KAAKu4D,KAAKv4D;AAAAA,MACjB2gB,MAAM,KAAK43C,KAAK53C;AAAAA,MAChB9a,MAAM;AAAA,MACNmxD;AAAAA,MACAjhD,OAAO,KAAKwiD,KAAKxiD,SAASuoD;AAAAA,MAC1BzD,iBAAiB,KAAKtC,KAAKsC,mBAAmB0D;AAAAA,MAC9C3X,gBAAgB,KAAK2R,KAAK3R;AAAAA,MAC1BkB;AAAAA,MACA1nC,YAAY,KAAKm4C,KAAKn4C,aAAa,CAAIhY,GAAAA,IAAI,CAAClB,MAAM8V,MAChDm7C,uBAAuBjxD,MAAM8V,GAAGf,IAAI,CACtC;AAAA,MACAoE,iBAAiB,KAAKk4C,KAAKl4C,kBAAkB,CAAA,GAAIjY,IAAI,CAAClB,MAAM8V,MAC1Dy8C,4BAA4BvyD,MAAM8V,GAAGf,IAAI,CAC3C;AAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAQJ;ACxTA,MAAM6iD,iBAAiBA,CAACvG,MAA2Bz6C,YAA8B;AAC/E,QAAMpV,UAAS6vD,KAAKz6C,SAASpV,OAAO0+C,KAAU,KAAA;AAE9C,MAAI,CAAC,KAAK,GAAG,EAAEt6B,SAASpkB,QAAO,CAAC,CAAC;AAC/B,UAAM,IAAI4uD,eACR,kCAAkC5uD,QAAO,CAAC,CAAC,2DAC3CoV,QAAQ7B,MACRs8C,KAAKr0D,IACLq0D,KAAKv4D,KACP,EAAE23D,YAAYE,SAASkH,yBAAyB;AAG3Cr2D,SAAAA;AACT,GAEMs2D,qCACHl3D,CAAAA,YACD,CAACg0D,QAAgBh+C,YAA8E;AACvFmhD,QAAAA,aAAanhD,QAAQy0C,QACrB5sD,WAAWmY,QAAQ3Z,QAAQwB,WAC7BmC,QAAQ6Z,UAAUjP,KAAM8qD,CAAAA,QAAQA,IAAIt5D,OAAO4Z,QAAQ3Z,OAAOwB,QAAQ,IAClE4C,QACE1C,OAAOF,WACTA,SAAStG,aACT4/D,WAAWxI,kBAAkBsE,uBAAuBjzD,QAAQkzD,WAAWc,MAAM;AAE1EoD,SAAAA,QAAQC,QAAQt5D,IAAI,EAAEwD,KAAMhK,CACjCA,eAAAA,aACIyI,QAAQ+zD,oBAAoB;AAAA,IAACx8D;AAAAA,IAAYmG,YAAYs2D;AAAAA,EAAO,CAAA,IAC5D,IAAIE,gBAAgBl0D,OAAO,EAAE5D,GAAG,QAAQ,EAAEsB,WAAWs2D,MAAM,EAAEz8D,WAAW,EAAE,CAChF;AACF;AA4DK,MAAM+/D,4BAA4BZ,mBAGvC;AAAA;AAAA,EAIAjH,YAIYe,UACVC,MACA;AACA,UAAO,GAAA,KAHGD,WAAAA,UAIV,KAAKC,OAAOA,QAAQ,CACpB,GAAA,KAAKkG,iCAAiCjxD,CAAAA,CAAQ+qD,MAAMzQ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOtDlzB,WAAWA,YAAyC;AAClD,WAAO,KAAK4jC,MAAM;AAAA,MAAC16C,SAAS;AAAA,QAAC,GAAI,KAAKy6C,KAAKz6C,WAAW;AAAA,UAACpV,QAAQ;AAAA,QAAE;AAAA,QAAIksB;AAAAA,MAAAA;AAAAA,IAAU,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnFyqC,gBAAoC;AAC3B,WAAA,KAAK9G,KAAKz6C,SAAS8W;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BlsB,OAAOA,SAAqC;AAC1C,WAAO,KAAK8vD,MAAM;AAAA,MAAC16C,SAAS;AAAA,QAAC,GAAI,KAAKy6C,KAAKz6C,WAAW,CAAC;AAAA,QAAIpV,QAAAA;AAAAA,MAAAA;AAAAA,IAAM,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMrE42D,YAAgC;AACvB,WAAA,KAAK/G,KAAKz6C,SAASpV;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BrJ,WAAWwG,MAAgD;AACzD,UAAM4wD,iBAAiB,OAAO5wD,QAAS,WAAWA,OAAOA,KAAKS;AAC9D,WAAO,KAAKkyD,MAAM;AAAA,MAAC/B;AAAAA,IAAAA,CAAe;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMpC0F,gBAAoC;AAClC,WAAO,KAAK5D,KAAK9B;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBtyD,OAAOA,QAAsD;AAC3D,WAAO,KAAKq0D,MAAM;AAAA,MAChB16C,SAAS;AAAA,QAAC,GAAI,KAAKy6C,KAAKz6C,WAAW;AAAA,UAACpV,QAAQ;AAAA,QAAE;AAAA,QAAIvE;AAAAA,MAAAA;AAAAA,IAAM,CACzD;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMH20D,YAAiD;AACxC,WAAA,KAAKP,KAAKz6C,SAAS3Z;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5B8yD,gBAAgB1U,UAAmD;AAC7D,QAAA,CAACl1C,MAAMmW,QAAQ++B,QAAQ;AACnB,YAAA,IAAI3+C,MAAM,qDAAqD;AAGvE,WAAO,KAAK40D,MAAM;AAAA,MAChB16C,SAAS;AAAA,QAAC,GAAI,KAAKy6C,KAAKz6C,WAAW;AAAA,UAACpV,QAAQ;AAAA,QAAE;AAAA,QAAIuuD,iBAAiB1U;AAAAA,MAAAA;AAAAA,IAAQ,CAC5E;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMHgd,qBAAqD;AAC5C,WAAA,KAAKhH,KAAKz6C,SAASm5C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAO5BoB,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAmB;AAC9D,QAAI,OAAO,KAAKs8C,KAAKr0D,MAAO,YAAY,CAAC,KAAKq0D,KAAKr0D;AACjD,YAAM,IAAIozD,eACR,uCACAx5C,QAAQ7B,MACR6B,QAAQjV,OACR,KAAK0vD,KAAKv4D,KACZ,EAAE23D,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAAC,KAAKvB,KAAKz6C,WAAW,CAAC,KAAKy6C,KAAKz6C,QAAQpV;AAC3C,YAAM,IAAI4uD,eACR,2CACAx5C,QAAQ7B,MACR,KAAKs8C,KAAKr0D,IACV,KAAKq0D,KAAKv4D,KACZ,EAAE23D,YAAYE,SAAS2H,eAAe;AAIpC,WADoB,KAAKjH,KAAKz6C,SAASpV,WAAW,oBAC9B,KAAK6vD,KAAKz6C,QAAQpV,UAAU,CAAC,KAAK6vD,KAAKz6C,QAAQ8W,cACrEnQ,QAAQrK,KACN,wEAAwE,KAAKm+C,KAAKz6C,QAAQpV,MAAM,kEAChG+2D,gBAAgB5H,SAAS6H,sCAAsC,CACjE,GAEK;AAAA,MACL,GAAG,MAAMrH,UAAUv6C,OAAO;AAAA,MAC1BjY,MAAM;AAAA,MACN4wD,gBAAgB,KAAK8B,KAAK9B;AAAAA,MAC1B1gD,OAAO,KAAKwiD,KAAKxiD,SAASipD,mCAAmC,KAAK1G,QAAQ;AAAA,MAC1Ex6C,SAAS;AAAA,QACP,GAAG,KAAKy6C,KAAKz6C;AAAAA;AAAAA,QAEb8W,YAAY,KAAK2jC,KAAKz6C,QAAQ8W,cAAc3nB,8BAA8B2nB;AAAAA,QAC1ElsB,QAAQo2D,eAAe,KAAKvG,MAAMz6C,OAAO;AAAA,MAAA;AAAA,IAE7C;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOF06C,MAAMW,UAAqD;AACzD,UAAMC,UAAU,IAAIgG,oBAAoB,KAAK9G,QAAQ;AACrDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GAE1C,KAAKsF,mCACRrF,QAAQb,KAAKzQ,wBAAwB6X,2BAA2B,KAAKrH,UAAUc,QAAQb,IAAI,IAGxFa,QAAQb,KAAK9B,mBAChB2C,QAAQb,KAAK9B,iBAAiBmJ,cAAcxG,QAAQb,IAAI,IAGnDa;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAMTyG,UAA+B;AAC7B,WAAO,KAAKtH;AAAAA,EAAAA;AAEhB;AAEA,SAASoH,2BACP73D,SACAywD,MACwC;AAClC,QAAA;AAAA,IAACz5D,UAAAA;AAAAA,MAAYgJ,SACb;AAAA,IAAC2uD;AAAAA,IAAgB34C;AAAAA,MAAWy6C,MAC5B;AAAA,IAAC7vD,QAAAA;AAAAA,IAAQvE;AAAAA,MAAU2Z,WAAW;AAAA,IAACpV,QAAQ;AAAA,IAAIvE,QAAQ,CAAA;AAAA,EACnD4/C,GAAAA,YAAY0S,iBACd,CAACA,cAAc,IACfppD,MAAMC,KAAK,IAAIC,IAAI4wD,uBAAuBz1D,SAAQvE,MAAM,CAAC,CAAC;AAE9D,MAAI4/C,UAAU1iD,WAAW;AAIzB,WAAO0iD,UACJoM,QAAS9wD,CACRP,eAAAA,UAAS+9C,0BAA0B;AAAA,MACjCh3C,MAAM;AAAA,MACNxG;AAAAA,IAAAA,CACD,CACH,EACC+I,IAAK03D,CAAY,YAAA;AAAA,MAAC,GAAGA;AAAAA,MAAQl+D,MAAM+gB;AAAAA,IAAAA,EAAS;AACjD;AAEA,SAASi9C,cAAcrH,MAA+C;AAC9D,QAAA;AAAA,IAACz6C;AAAAA,MAAWy6C,MACZ;AAAA,IAAC7vD,QAAAA;AAAAA,IAAQvE;AAAAA,MAAU2Z,WAAW;AAAA,IAACpV,QAAQ;AAAA,IAAIvE,QAAQ,CAAA;AAAA,EACnD4/C,GAAAA,YAAYoa,uBAAuBz1D,SAAQvE,MAAM;AACvD,SAAO4/C,UAAU1iD,WAAW,IAAI0iD,UAAU,CAAC,IAAIx7C;AACjD;AAGO,SAAS41D,uBACdz1D,SACAvE,SAAkC,IACxB;AACN4/C,MAAAA,YAAYgc,+BAA+Br3D,SAAQvE,MAAM;AAE7D,SAAI4/C,UAAU1iD,WAAW,MACvB0iD,YAAYic,8BAA8Bt3D,SAAQvE,MAAM,IAGnD4/C;AACT;AAGA,SAASgc,+BACPr3D,SACAvE,SAAkC,IACxB;AACJ87D,QAAAA,UACJ,0FACIC,UAAoB,CAAE;AACxBhG,MAAAA;AACJ,UAAQA,QAAQ+F,QAAQE,KAAKz3D,OAAM,OAAO;AACxCw3D,YAAQ52D,KAAK4wD,MAAM,CAAC,KAAKA,MAAM,CAAC,CAAC;AAG5BgG,SAAAA,QACJ93D,IAAKg4D,CACaA,gBAAAA,UAAU,CAAC,MAAM,MAAMj8D,OAAOi8D,UAAU98D,MAAM,CAAC,CAAC,IAAI88D,cACzB,IAAIhZ,KAAOtjB,EAAAA,QAAQ,gBAAgB,EAAE,CAElF,EACAp7B,OAAO8E,OAAO;AACnB;AAGA,SAASwyD,8BACPt3D,SACAvE,SAAkC,IACxB;AACV,QAAM87D,UAAU,4BACVC,UAAUx3D,QAAOwxD,MAAM+F,OAAO;AACpC,SAAKC,UAIEA,QAAQ,CAAC,EACbxpD,MAAM,MAAM,EACZtO,IAAK8xD,CAAAA,UAAUA,MAAM9S,KAAK,EAAEtjB,QAAQ,kBAAkB,EAAE,CAAC,EACzD17B,IAAKlB,CAAAA,SAAUA,KAAK,CAAC,MAAM,MAAM/C,OAAO+C,KAAK5D,MAAM,CAAC,CAAC,IAAI4D,IAAK,EAC9DwB,OAAO8E,OAAO,IAPR,CAAE;AAQb;AC7VA,MAAM6yD,aAAcC,CACdA,UAAAA,iBAAiBC,cACZ,gBAGLC,UAAoBF,KAAK,IACpB,YAGFjzD,MAAMmW,QAAQ88C,KAAK,IAAI,UAAU,OAAOA,OAG3CG,aAAcv5D,CACXA,SAAAA,KAAKrB,SAAS,YAGjB66D,yBAAwCA,CAAC5C,YAAoB35D,QAAQ2D,aAC5DA,QAAQpE,KACF+tC,SAAS,IAGvB/oC,OAAOi4D,kBAAkB,EACzB/0D,KAAM1E,CAASA,SAAAA,KAAK7H,WAAWiH,SAASnC,OAAO0B,QAAQqB,KAAK9E,QAAQ+B,OAAOD,EAAE,KAChFq6D,qBAAqBT,YAAY35D,QAAQ2D,OAAO,GAI9C84D,sBAAqCA,CAAC9E,QAAgBh+C,YAAkC;AAG5F,QAAMsU,UAFatU,QAAQy0C,OACF9gB,MAAM/oC,OAAO+3D,UAAU,EAC1B/tD,KAAMxL,CAASA,SAAAA,KAAKhD,OAAO43D,MAAM,KAAK;AAAA,IAAC/lD,OAAOxN;AAAAA,EAAAA,GAAYwN;AAEhF,SAAI,CAACqc,UAAU,OAAOA,UAAW,aACxBA,SAGF,OAAOA,UAAW,aAAaA,OAAO0pC,QAAQh+C,OAAO,IAAIsU;AAClE;AAEA,SAASyuC,uBACP35D,MACA2B,OACAoT,MACoB;AACpB,MAAI/U,gBAAgB45D;AAClB,WAAO55D,KAAKmxD,UAAU;AAAA,MAACp8C;AAAAA,MAAMpT;AAAAA,IAAAA,CAAM;AAGrC,QAAMk4D,WAAW75D;AACb65D,MAAAA,YAAYA,SAASl7D,SAAS;AACzBqB,WAAAA;AAGT,MAAI,CAAC65D,YAAYA,SAASl7D,SAAS,YAAY;AACvCm7D,UAAAA,UAAWD,YAAYA,SAASl7D,QAASw6D,WAAWU,QAAQ,GAC5DE,WAAWD,YAAY,UAAU,gDAAgD;AACvF,UAAM,IAAI1J,eACR,+CAA+C0J,OAAO,IAAIC,QAAQ,IAClEhlD,MACApT,KACF,EAAE8uD,YAAYE,SAASqJ,iBAAiB;AAAA,EAAA;AAGnCh6D,SAAAA;AACT;AAEA,SAASs5D,UAAaF,OAAyC;AAC7D,SAAOv+D,SAASu+D,KAAK,KAAK,OAAOA,MAAMj3D,QAAS;AAClD;AAqCO,MAAMk3D,oBAAoB/B,mBAA+C;AAAA;AAAA,EAI9EjH,YAIYe,UACVC,MACA;AACA,UAAA,GAAO,KAHGD,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAA,GAC1B,KAAKkG,iCAAiCjxD,CAAAA,EAAQ+qD,QAAQA,KAAKzQ;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQ7DrW,MAAMA,OAA8D;AAClE,WAAO,KAAK+mB,MAAM;AAAA,MAAC/mB;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM3B0vB,WAAmC;AACjC,WAAO,KAAK5I,KAAK9mB;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB4mB,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAW;AAChD/X,UAAAA,KAAK,KAAKq0D,KAAKr0D;AACjB,QAAA,OAAOA,MAAO,YAAY,CAACA;AACvB,YAAA,IAAIozD,eACR,8BACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASiC,WAAW;AAG9BroB,UAAAA,QAAQ,OAAO,KAAK8mB,KAAK9mB,QAAU,MAAc,CAAK,IAAA,KAAK8mB,KAAK9mB;AAClE,QAAA,CAACpkC,MAAMmW,QAAQiuB,KAAK;AAChB,YAAA,IAAI6lB,eACR,qCACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASuJ,wBAAwB;AAG3CnlD,UAAAA,QAAQ6B,QAAQ7B,QAAQ,CAAA,GAAIyd,OAAOx1B,EAAE,GACrCm9D,kBAAkB5vB,MAAMrpC,IAAI,CAAClB,MAAM2B,UAAUg4D,uBAAuB35D,MAAM2B,OAAOoT,IAAI,CAAC,GACtF0gD,QAAQ0E,gBAAgB34D,OAAO,CAAC44D,KAAKtkD,MAAMtK,KAAK2uD,iBAAiB;AAAA,MAACn9D,IAAIo9D,IAAIp9D;AAAAA,IAAAA,GAAK8Y,IAAI,CAAC,CAAC;AAEvF2/C,QAAAA,MAAMt7D,SAAS,GAAG;AACdkgE,YAAAA,UAAU5E,MAAMv0D,IAAKlB,CAAAA,SAASA,KAAKhD,EAAE,EAAEZ,MAAM,GAAG,CAAC,GACjDk+D,WAAW7E,MAAMt7D,SAAS,IAAI,GAAGkgE,QAAQ15D,KAAK,IAAI,CAAC,QAAQ05D,QAAQ15D,KAAK,IAAI;AAClF,YAAM,IAAIyvD,eACR,kCAAkCkK,QAAQ,KAC1C1jD,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAAS4J,4BAA4B;AAAA,IAAA;AAG9C,WAAA;AAAA,MACL,GAAG,MAAMpJ,UAAUv6C,OAAO;AAAA,MAC1BjY,MAAM;AAAA,MACNg1D,iBAAiB,KAAKtC,KAAKsC,mBAAmB6F;AAAAA,MAC9C3qD,OAAO,KAAKwiD,KAAKxiD,SAAS6qD;AAAAA,MAC1BnvB,OAAO4vB;AAAAA,IACT;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQF7I,MAAMW,UAAuC;AAC3C,UAAMC,UAAU,IAAImH,YAAY,KAAKjI,QAAQ;AAC7Cc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;ACzEO,MAAM0H,gBAAkD;AAAA;AAAA,EAI7DvJ,YAIYe,UACVC,MACA;AAAA,SAFUD,WAAAA,UAGV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7Br0D,GAAGA,IAA6B;AAC9B,WAAO,KAAKs0D,MAAM;AAAA,MAACt0D;AAAAA,IAAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB21D,QAA+B;AAC7B,WAAO,KAAKtB,KAAKr0D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBlE,MAAMA,OAAgC;AACpC,WAAO,KAAKw4D,MAAM;AAAA,MAACx4D;AAAAA,MAAOkE,IAAIi2D,mBAAmBn6D,OAAO,KAAKu4D,KAAKr0D,EAAE;AAAA,IAAA,CAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxEw0D,WAAqC;AACnC,WAAO,KAAKH,KAAKv4D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB2gB,KAAKA,MAAgD;AACnD,WAAO,KAAK63C,MAAM;AAAA,MAAC73C;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1Bg4C,UAA+C;AAC7C,WAAO,KAAKJ,KAAK53C;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnB/e,KAAKA,MAA8D;AACjE,WAAO,KAAK42D,MAAM;AAAA,MAAC52D;AAAAA,IAAAA,CAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1B8/D,SAAStpD,UAAU,IAAuB;AACxC,WAAO,KAAKogD,MAAM;AAAA,MAChB5R,gBAAgB;AAAA,QAAC,GAAI,KAAK2R,KAAK3R,kBAAkB,CAAC;AAAA,QAAI8a,UAAUtpD;AAAAA,MAAAA;AAAAA,IAAO,CACxE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOHupD,cAAmC;AACjC,WAAO,KAAKpJ,KAAK3R,iBAAiB,KAAK2R,KAAK3R,eAAe8a,WAAWn5D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOxEswD,UAAmC;AACjC,WAAO,KAAKN,KAAK32D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnBmU,MAAMA,OAAmD;AACvD,WAAO,KAAKyiD,MAAM;AAAA,MAACziD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO3B0kD,WAAqC;AACnC,WAAO,KAAKlC,KAAKxiD;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAQnB1W,WAAWA,YAAkD;AAC3D,WAAO,KAAKm5D,MAAM;AAAA,MAACn5D;AAAAA,IAAAA,CAAW;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhC88D,gBAA+C;AACvC98D,UAAAA,aAAa,KAAKk5D,KAAKl5D;AAEzB,WAAA,OAAOA,cAAe,WACjB,KAAKi5D,SAASt5D,OAAOI,IAAIC,UAAU,IAGrC,KAAKk5D,KAAKl5D;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOnBg5D,UAAUv6C,UAAoC;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAe;AAC5D,UAAA;AAAA,MAAC/X;AAAAA,MAAIlE;AAAAA,MAAO+V;AAAAA,QAAS,KAAKwiD;AAC5B,QAAA,OAAOr0D,MAAO,YAAY,CAACA;AACvB,YAAA,IAAIozD,eACR,mCACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASiC,WAAW;AAGpC,QAAI,CAACh8C,QAAQ8jD,oBAAoB,OAAO5hE,SAAU,YAAY,CAACA;AACvD,YAAA,IAAIs3D,eAAe,sCAAsCx5C,QAAQ7B,MAAM/X,EAAE,EAAEyzD,YAC/EE,SAASmB,cACX;AAGE35D,QAAAA,aAAa,KAAKk5D,KAAKl5D;AACvB,QAAA,OAAOA,cAAe,UAAU;AAClC,YAAMwG,OAAO,KAAKyyD,SAASt5D,OAAOI,IAAIC,UAAU;AAChD,UAAI,CAACwG;AACG,cAAA,IAAIyxD,eACR,wBAAwBj4D,UAAU,eAClCye,QAAQ7B,MACR/X,EACF,EAAEyzD,YAAYE,SAASgK,qBAAqB;AAGjCh8D,mBAAAA;AAAAA,IAAAA;AAGf,UAAMi8D,mBAAmB;AAAA,MAAC7lD,MAAM6B,QAAQ7B,KAAKyd,OAAOx1B,EAAE;AAAA,MAAGwzD,MAAM;AAAA,IAAO;AACtE,QAAIqK,YACFhsD,iBAAiBykD,oBACjBzkD,iBAAiBqpD,uBACjBrpD,iBAAiBimD,mBACjBjmD,iBAAiBwqD,cACbxqD,MAAMsiD,UAAUyJ,gBAAgB,IAChC/rD;AAIF,QAAA,OAAOgsD,aAAc,YAAY;AACnC,YAAMC,gBAAgBD;AACtBA,kBAAYA,CAACjG,QAAQmG,iBACZD,cAAclG,QAAQ;AAAA,QAAC,GAAGmG;AAAAA,QAAcH;AAAAA,MAAAA,CAAiB;AAAA,IAAA;AAI7D,WAAA;AAAA,MACL,GAAG,KAAKvJ;AAAAA,MACRr0D,IAAI81D,WAAW91D,IAAI4Z,QAAQ7B,MAAM6B,QAAQjV,KAAK;AAAA,MAC9CxJ;AAAAA,MACA0W,OAAOgsD;AAAAA,MACP/hE;AAAAA,MACA6F,MAAM;AAAA,IACR;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOF2yD,MAAMW,UAA6C;AACjD,UAAMC,UAAU,IAAI0H,gBAAgB,KAAKxI,QAAQ;AACjDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AC7SA,MAAM8I,6BACJA,CAACp6D,SAA2BywD,SAAmC/yD,CAAuB,eAAA;AAC9EnG,QAAAA,aACJk5D,KAAKl5D,eACJ,OAAOk5D,KAAKl5D,cAAe,WAAWk5D,KAAKl5D,aAAak5D,KAAKl5D,WAAWiH;AAEpEjH,SAAAA,aACHyI,QAAQ+zD,oBAAoB;AAAA,IAACx8D;AAAAA,IAAYmG;AAAAA,EAAAA,CAAW,IACpD,IAAIw2D,gBAAgBl0D,OAAO,EAAE5D,GAAG,gBAAgB,EAAEsB,WAAWA,UAAU;AAC7E;AAOK,MAAM28D,gCAAgCrB,gBAAgB;AAAA;AAAA,EAI3DvJ,YAIYe,UACVC,MACA;AACMD,UAAAA,UAAUC,IAAI,GAAC,KAHXD,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7BF,UAAUv6C,UAA4B;AAAA,IAAC7B,MAAM,CAAA;AAAA,EAAA,GAAuB;AAC5Ds8C,UAAAA,OAAO,MAAMF,UAAU;AAAA,MAAC,GAAGv6C;AAAAA,MAAS8jD,iBAAiB;AAAA,IAAA,CAAK;AAEhE,QAAI,CAACrJ,KAAKl5D;AACF,YAAA,IAAIi4D,eACR,oDACAx5C,QAAQ7B,MACR6B,QAAQjV,KACV,EAAE8uD,YAAYE,SAASuK,oBAAoB;AAG7C,UAAMrsD,QAAQwiD,KAAKxiD,SAASmsD,2BAA2B,KAAK5J,UAAUC,IAAI;AACnE,WAAA;AAAA,MAAC,GAAGA;AAAAA,MAAMxiD;AAAAA,MAAO1W,YAAYk5D,KAAKl5D;AAAAA,MAAY+C,KAAKm2D,KAAKr0D;AAAAA,IAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnEs0D,MAAMW,UAA6D;AACjE,UAAMC,UAAU,IAAI+I,wBAAwB,KAAK7J,QAAQ;AACzDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAIY,YAAY,CAAA;AAAA,IAAC,GACxCC;AAAAA,EAAAA;AAEX;AAGO,SAASuH,mBAAmBz5D,MAAyC;AACnEnF,SAAAA,SAASmF,IAAI,KAAK,OAAOA,KAAK7H,aAAe,OAAe,OAAO6H,KAAK9E,OAAQ;AACzF;ACrFO,MAAMigE,gCAAgCjD,oBAAoB;AAAA;AAAA,EAI/D7H,YAIYe,UACVC,MACA;AACMD,UAAAA,QAAQ,GAAC,KAHLA,WAAAA,UAIV,KAAKC,OAAOA,QAAc,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7BxiD,MAAMA,OAAuC;AAC3C,WAAO,KAAKusD,iCAAiC;AAAA,MAACvsD;AAAAA,IAAAA,CAAM;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtDyiD,MAAMW,UAAyD;AACvD5G,UAAAA,SAAS,MAAMiG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,KAAK/J,QAAQ;AACzDc,WAAAA,QAAQb,OAAO;AAAA,MAAC,GAAG,KAAKA;AAAAA,MAAM,GAAGhG,OAAOsN,QAAQ;AAAA,MAAG,GAAI1G,YAAY,CAAA;AAAA,IAAC,GAC7DC;AAAAA,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAOTkJ,iCAAiCnJ,UAAyD;AACxF,UAAM5G,SAAS,MAAMiG,MAAMW,QAAQ,GAC7BC,UAAU,IAAIiJ,wBAAwB,KAAK/J,QAAQ,GACnDuC,kBAAkB,KAAKtC,KAAKsC,iBAE5B0H,WADiB1H,mBAAmBA,gBAAgBuD,aAAaR,yBACrC;AAAA,MAAC/C,iBAAiBtyD;AAAAA,IAAAA,IAAa,CAAC;AAClE6wD,WAAAA,QAAQb,OAAO;AAAA,MACb,GAAGhG,OAAOsN,QAAQ;AAAA,MAClB,GAAG,KAAKtH;AAAAA,MACR,GAAIY,YAAY,CAAC;AAAA,MACjB,GAAGoJ;AAAAA,IAAAA,GAEEnJ;AAAAA,EAAAA;AAEX;AC7DA,MAAMoJ,oBAAoB,CAAC,qBAAqB,kBAAkB;AAElE,SAASC,iBAAiB7gD,UAAkB;AACnC4gD,SAAAA,kBAAkB11C,SAASlL,QAAQ;AAC5C;AAEA,SAAS8gD,eAAerjE,YAAwB;AACvCA,SAAAA,WAAWwG,MAAMS,SAAS;AACnC;AAEA,SAASq8D,OAAOC,YAA4C;AAC1D,SAAOA,WAAW/8D,SAAS;AAC7B;AAEO,SAASg9D,iBAAiB;AAAA,EAAC7jE;AAAwB,GAAa;AACrE,SAAOA,OACJu+D,aAAAA,EACA70D,OAAQo6D,CAAM,MAAA;AACPzjE,UAAAA,aAAaL,OAAOI,IAAI0jE,CAAC;AACxBzjE,WAAAA,cAAcqjE,eAAerjE,UAAU;AAAA,EAAA,CAC/C,EACAqJ,OAAQo6D,OAAM,CAACL,iBAAiBK,CAAC,CAAC;AACvC;AAEO,SAASC,yBAAyBj7D,SAA8C;AACvE+6D,SAAAA,iBAAiB/6D,OAAO,EACzBM,IAAKwZ,cAAaohD,wBAAwBl7D,SAAS8Z,QAAQ,CAAC;AAC3E;AAEgBohD,SAAAA,wBACdl7D,SACA8Z,UACiB;AACX,QAAA;AAAA,IAAC5iB;AAAAA,EAAU8I,IAAAA,SAEXjC,OAAO7G,OAAOI,IAAIwiB,QAAQ;AAChC,MAAI,CAAC/b;AACH,UAAM,IAAIjC,MAAM,0BAA0Bge,QAAQ,aAAa;AAGjE,QAAM5hB,QAAQ6F,KAAK7F,SAASijE,UAAUrhD,QAAQ;AAE9C,SAAO,IAAIk/C,gBAAgBh5D,OAAO,EAC/B5D,GAAG0d,QAAQ,EACX5hB,MAAMA,KAAK,EACXX,WAAWwG,IAAI,EACfkQ,MAAM,CAAC7R,IAAIg/D,iBAAiB;AAC3B,UAAM3Q,SAAS2Q,aAAa3Q,QACtB0M,aAAa0D,OAAOpQ,MAAM,IAC3BA,OAAO9gB,MAAM/+B,KAAMxL,CAAAA,SAASA,KAAKhD,OAAOA,EAAE,IAC3C;AAEAi/D,QAAAA,OAAOC,oBAAoBt7D,SAAS8Z,QAAQ;AAC5Cq9C,WAAAA,cAAcA,WAAWj/D,UAC3BmjE,OAAOA,KAAKnjE,MAAMi/D,WAAWj/D,KAAK,IAG7BmjE;AAAAA,EAAAA,CACR;AACL;AAEgBC,SAAAA,oBACdt7D,SACAu7D,gBACqB;AACf,QAAA;AAAA,IAACrkE;AAAAA,IAAQ68D;AAAAA,EAAAA,IAAuB/zD,SAEhCzI,aAAa,OAAOgkE,kBAAmB,WAAWA,iBAAiBA,eAAehkE,YAClFuiB,WAAW,OAAOviB,cAAe,WAAWA,aAAaA,WAAWiH,MACpEiyD,OACJ,OAAO8K,kBAAmB,WAAW;AAAA,IAAChkE;AAAAA,EAAcgkE,IAAAA,gBAEhDx9D,OAAO7G,OAAOI,IAAIwiB,QAAQ;AAChC,MAAI,CAAC/b;AACH,UAAM,IAAIjC,MAAM,0BAA0Bge,QAAQ,aAAa;AAGjE,QAAM5hB,QAAQ6F,KAAK7F,SAASijE,UAAUrhD,QAAQ;AAE9C,SAAO,IAAIygD,wBAAwBv6D,OAAO,EACvC5D,GAAGq0D,KAAKr0D,MAAM0d,QAAQ,EACtB5hB,MAAMu4D,KAAKv4D,SAASA,KAAK,EACzB0I,OAAO,gBAAgB,EACvBvE,OAAO;AAAA,IAAC0B,MAAM+b;AAAAA,EAAS,CAAA,EACvBviB,WAAWwG,IAAI,EACfoxD,gBAAgBgB,iCAAiCta,EAAE,EACnDt9B,eACCk4C,KAAKl4C,kBAAkB,CACrB;AAAA,IACEnc,IAAI;AAAA,IACJlE,OAAO;AAAA,IACP2gB,MAAM;AAAA,MAAC3gB,OAAO;AAAA,QAACiW,KAAK;AAAA,QAAkC8hD,IAAI35D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,GAErF;AAAA,IACE8F,IAAI;AAAA,IACJlE,OAAO;AAAA,IACP2gB,MAAM;AAAA,MAAC3gB,OAAO;AAAA,QAACiW,KAAK;AAAA,QAAiC8hD,IAAI35D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,GAEpF;AAAA,IACE8F,IAAI;AAAA,IACJlE,OAAO;AAAA,IACP2gB,MAAM;AAAA,MAAC3gB,OAAO;AAAA,QAACiW,KAAK;AAAA,QAAkC8hD,IAAI35D;AAAAA,MAAAA;AAAAA,IAAwB;AAAA,EAAC,CACpF,CAEL,EACC2X,MACCwiD,KAAKxiD,UACDvQ,gBAAuBq2D,oBAAoB;AAAA,IAACx8D,YAAYuiB;AAAAA,IAAUpc;AAAAA,EAAAA,CAAW,EACnF,EACCq1D,gBAAgBtC,KAAKsC,mBAAmBgD,oBAAoB,EAC5Dz9C,UACCm4C,KAAKn4C,aAAa;AAAA;AAAA;AAAA,IAIhB,GAAGm5C,kCAAkCzxD,SAASjC,IAAI;AAAA;AAAA,IAGlD,IAAIuyD,gBAAgBtwD,OAAO,EACxB+Y,MAAM,QAAQ,EACdF,KAAK;AAAA,MAAC3gB,OAAO;AAAA,QAACiW,KAAK;AAAA,QAAkC8hD,IAAI35D;AAAAA,MAAAA;AAAAA,IAAwB,CAAE,EACnF4B,MAAM,cAAc,EACpB4B,KAAK0hE,gBAAgB,EACrB18D,OAAO,WAAW,EAClBzC,OAAO;AAAA,MAACtC,QAAQ;AAAA,IAAA,CAAU;AAAA,IAE7B,IAAIu2D,gBAAgBtwD,OAAO,EACxB+Y,MAAM,QAAQ,EACdF,KAAK;AAAA,MAAC3gB,OAAO;AAAA,QAACiW,KAAK;AAAA,QAAmC8hD,IAAI35D;AAAAA,MAAAA;AAAAA,IAAwB,CAAE,EACpF4B,MAAM,eAAe,EACrB4B,KAAK2hE,SAAS,EACd38D,OAAO,WAAW,EAClBzC,OAAO;AAAA,MAACtC,QAAQ;AAAA,IAAS,CAAA;AAAA;AAAA,EAAA,CAIhC;AACJ;ACjHA,SAAS2hE,QAAQnkE,YAA2C;AAC1D,SAAI,CAACA,cAAc,OAAOA,cAAe,WAChC,KAGFmO,EAAQnO,WAAWuC;AAC5B;AAEA,SAAS6hE,oBAAoB37D,SAAwC;AAC7D2pC,QAAAA,QAAQsxB,yBAAyBj7D,OAAO;AACvC,SAAA,IAAIy4D,YAAYz4D,OAAO,EAC3B5D,GAAG,UAAU,EACblE,MAAM,SAAS,EACf2gB,KAAK;AAAA,IAAC3gB,OAAO;AAAA,MAACiW,KAAK;AAAA,MAAoC8hD,IAAI35D;AAAAA,IAAAA;AAAAA,EAA0B,CAAA,EACrFqzC,MAAMA,KAAK,EACXuN,UAAUvN,MAAM7lC,KAAM1E,CAAAA,SAASs8D,QAAQt8D,KAAKi1D,cAAc,CAAC,CAAC,CAAC;AAClE;AAGO,SAASuH,uBAAuB;AAAA,EACrCC;AAAAA,EACAhnB;AACuB,GAAqB;AAC5C,QAAMinB,gBAAgBC,2BAA2BlnB,MAAM,GACjD70C,UAA4B;AAAA,IAChC,GAAG60C;AAAAA,IACH2gB,qBAAqBA,MAAMwG;AAAAA,IAC3BjI,qBAAsB/9C,CAAY,YAAA;AAC5Bs7C,UAAAA,UACFuK,sBAAsBG,kBAAkB;AAAA,QAAC,GAAGhmD;AAAAA,QAAS,GAAG8lD;AAAAA,MAAAA,CAAc,KACtE,IAAI5H,gBAAgBl0D,OAAO;AAExBsxD,aAAAA,QAAQS,MACXT,MAAAA,UAAUA,QAAQl1D,GAAG,gBAAgB,IAGnC4Z,QAAQtY,eACV4zD,UAAUA,QAAQ5zD,WAAWU,eAAe4X,QAAQtY,UAAU,CAAC,IAG1D4zD,QAAQ/5D,WAAWye,QAAQze,UAAU;AAAA,IAAA;AAAA,KAI1CykE,mBAAqC;AAAA,IACzCC,UAAUA,MAAMN,oBAAoB37D,OAAO;AAAA,IAC3Ck8D,kBAAkBA,IAAIC,SAASb,oBAAoBt7D,SAAS,GAAGm8D,IAAI;AAAA,IACnEC,sBAAsBA,IAAID,SAASjB,wBAAwBl7D,SAAS,GAAGm8D,IAAI;AAAA,IAC3EE,uBAAuBA,IAAIF,SAASlB,yBAAyBj7D,SAAS,GAAGm8D,IAAI;AAAA,IAC7EnlE,UAAUA,IAAImlE,SAAS,IAAIjI,gBAAgBl0D,SAAS,GAAGm8D,IAAI;AAAA,IAC3DG,kCAAkCA,IAAIH,SACpClH,mCAAmCj1D,SAAS,GAAGm8D,IAAI;AAAA,IACrDI,iBAAiBv8D,QAAQ+zD;AAAAA,IAEzBsH,MAAMA,IAAIc,SAAS,IAAI1D,YAAYz4D,SAAS,GAAGm8D,IAAI;AAAA,IACnDlD,UAAUA,IAAIkD,SAAS,IAAInD,gBAAgBh5D,SAAS,GAAGm8D,IAAI;AAAA,IAE3Dh4C,UAAUA,IAAIg4C,SAAS,IAAI7L,gBAAgBtwD,SAAS,GAAGm8D,IAAI;AAAA,IAC3DK,eAAeA,IAAIL,SAAS,IAAIvK,qBAAqB5xD,SAAS,GAAGm8D,IAAI;AAAA,IACrEtG,wCAAwCA,IAAIsG,SAC1CtG,uCAAuC71D,SAAS,GAAGm8D,IAAI;AAAA,IAEzDM,cAAcA,IAAIN,SAAS,IAAI7E,oBAAoBt3D,SAAS,GAAGm8D,IAAI;AAAA,IACnEO,kBAAkBA,IAAIP,SAAS,IAAI9B,wBAAwBr6D,SAAS,GAAGm8D,IAAI;AAAA,IAE3EQ,kBAAkBA,IAAIR,SAAS5K,oBAAoBvxD,SAAS,GAAGm8D,IAAI;AAAA,IACnES,0BAA0BA,IAAIT,SAAS1K,kCAAkCzxD,SAAS,GAAGm8D,IAAI;AAAA,IAEzFU,QAAQA,IAAIV,SAASnH,mBAAmBh1D,SAAS,GAAGm8D,IAAI;AAAA,IAExD5G,kCAAkCA,IAAI4G,SACpC5G,iCAAiCv1D,SAAS,GAAGm8D,IAAI;AAAA,IAEnDxG,0BAA0BA,CACxB57C,YACAG,eAEA,IAAIg7C,gCAAgCl1D,SAAS;AAAA,MAC3C5D,IAAI2d;AAAAA,MACJG;AAAAA,MACAH;AAAAA,IAAAA,CACD;AAAA,IAEHqN,WAAYqpC,CAAAA,SACHqM,mBAAmBrM,IAAI,IAC1B,IAAIiC,iBAAiB,EAAEtrC,UAAUqpC,IAAqB,IACtD,IAAIiC,iBAAiBjC,IAAsB;AAAA,IAGjD1kD,SAASA,OAAgB;AAAA,MAAC3P,IAAI2gE,SAAS,aAAa;AAAA,MAAGh/D,MAAM;AAAA,IAAA;AAAA,IAE7Do6B,MAAMd;AAAAA,IACNr3B;AAAAA,EACF;AAEOg8D,SAAAA;AACT;ACpIO,MAAMgB,gBAAyCnmE,CAAU,UAAA;AACxD,QAAA;AAAA,IAAC4uB;AAAAA,EAAAA,IAAY5uB;AAEnB,SAAI4uB,WACK;AAAA,IACLsW,OAAO;AAAA,IACP5jC,OAAO;AAAA,EAAA,IAIJ;AACT;AACA6kE,cAAcnwD,cAAc;ACV5B,MAAMnR,QAEF;AAAA,EAACuhE,aAAa,CAAA;AAAE;AAEb,SAASC,eAAezhE,OAAoD;AACjFC,QAAMuhE,cAAcxhE;AACtB;AAQO,SAAS0hE,eACd5uD,QACAlS,QACA+gE,aACA9gE,SAC2F;AAC3F,QAAMb,QAAQ2hE,aAAa3hE,SAAS,CAC9BwhE,GAAAA,cAAcvhE,MAAMuhE,eAAe,CACnCI,GAAAA,iBAAiBhhE,OAAOD,MAAM0hC,QAC9Bw/B,aAAa/uD,WAAW,YAAYlS,OAAOwB;AAGjD,WAASqX,IAAI+nD,YAAY1jE,SAAS,GAAG2b,KAAK,GAAGA,KAAK;AAC1CtZ,UAAAA,QAAOqhE,YAAY/nD,CAAC;AAE1B,QAAI,OAAOtZ,SAAS,aAKlBA,MAAKm3D,kBAAkBxkD,QAAQlS,QAAQ;AAAA,MACrCT,MAAAA;AAAAA,MACAmF,OAAOmU;AAAAA,IAAAA,CACR;AAAA,IAEAtZ,MAAKmC,SAAS,kBACbnC,MAAK+yD,mBAAmBtyD,OAAO0B,QAC/BnC,MAAKoa,QAAQpV,WAAW,mBAC1B;AACA,YAAM+pC,aAAa2yB,aAAa;AAAA,QAACz/D,UAAUxB,OAAOwB;AAAAA,MAAAA,IAAY4kB;AAEvD,aAAA;AAAA,QACLhnB,OAAOA,MACJD,MAAM,GAAG0Z,CAAC,EACV0c,OAAO,CAAC,CAAC;AAAA,UAACx1B,IAAIihE;AAAAA,UAAgBhhE,QAAQsuC;AAAAA,UAAYruC;AAAAA,QAAAA,CAAQ,CAAC,CAAC;AAAA,MACjE;AAAA,IAAA;AAAA,EACF;AAGK,SAAA;AAAA,IAACiS;AAAAA,IAAgBlS;AAAAA,IAAQC;AAAAA,EAAO;AACzC;ACjDO,MAAMihE,2BAAuE;AAAA,EAClFC,QAAQ3iD;AAAAA,EACR9E,QAAQmnB;AAAAA,EACRugC,cAAcx3C;AAAAA,EACdy3C,SAAS7iD;AAAAA,EACT8iD,WAAWC;AAAAA,EACXC,UAAUD;AAAAA,EACV5qC,SAASqN;AAAAA,EACTE,WAAWC;AACb;ACdO,SAASs9B,8BAA8B//D,MAA4C;AACxF,SAAOw/D,yBAAyBx/D,IAAI;AACtC;ACOA,SAASggE,sBAAsBz1C,aAAqB;AAElD,MAAIA,YAAY;AAEV01C,QAAAA,cAAchnE,SAASitD,eAAega,wBAAwB;AAEpE,MAAID,aAAa;AACTE,UAAAA,gBAAgBF,YAAYvgE,SAAS,CAAC;AAE5C,QAAI,EADiBygE,cAAcC,eAAeD,cAAcE,eAC7C;AAEXC,YAAAA,eAAeC,iBAAiBJ,aAAa,EAAEvU;AAErDuU,oBAAchyD,MAAMy9C,YAAY,UAChC/hD,WAAW,MAAM;AAEfs2D,sBAAchyD,MAAMy9C,YAAY0U;AAAAA,SAC/B,CAAC;AAAA,IAAA;AAAA,EACN;AAEJ;AAEA,MAAME,WAAWlmE,OAAO8yD,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC,SAAAqT,6BAAApnE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAsC;AAAA,IAAAuxB,YAAAA;AAAAA,IAAA1Q;AAAAA,MAAAxgB,IAO3C;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC;AAACoB,MAAAA;AAAAZ,IAAAwxB,CAAAA,MAAAA,eAAAxxB,SAAA8gB,YAGlDlgB,KAAAkK,CAAA,MAAA;AACEA,MAACkqC,gBAAiB,GAClBiyB,sBAAsBz1C,WAAU,GAChC1Q,SAAS;AAAA,EACV9gB,GAAAA,OAAAwxB,aAAAxxB,OAAA8gB,UAAA9gB,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AALH,QAAA2nE,oBAA0B/mE;AAOzBI,MAAAA;AAAAhB,WAAAwxB,eAKSxwB,KAAC,oBAAA,UAAA,EAAwBwwB,iBAAAA,YAAc,CAAA,GAAAxxB,OAAAwxB,aAAAxxB,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAAwxB,CAAAA,MAAAA,eAAAxxB,SAAAU,KAElCO,KACLP,EADK8wB,cACH,uCACA,kCADoC,GACDxxB,OAAAwxB,aAAAxxB,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAAiB,MAH7B4B,KAAA;AAAA,IAAAwH,SACHpJ;AAAAA,EAEgC,GAC1CjB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAA2nE,EAAAA,MAAAA,qBAAA3nE,UAAAgB,MAAAhB,EAAA,EAAA,MAAA6C,MAPHC,KAAC,oBAAA,QAAA,EACM,MAAA,SACC,MAAA9B,IACQ,cAAA6B,IAKL8kE,SAAgB,kBACzB,CAAA,GAAA3nE,QAAA2nE,mBAAA3nE,QAAAgB,IAAAhB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GATF8C;AASE;ACpEO8kE,MAAAA,eAAermE,OAAOk7B,KAAK;AAAA;AAAA,GAI3BorC,cAActmE,OAAOa,IAAI;AAAA,gBACrBrC,CAAAA,UAAUA,MAAM+nE,UAAU;AAAA;AAAA,GAI9B12D,SAAO7P,OAAOC,GAAG,EAAwB,CAAC;AAAA,EAACumE;AAAQ,MACvD7uD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAKH6uD,YACF7uD;AAAAA;AAAAA;AAAAA,KAGC;AAAA,GAEJ,GCjBY8uD,iCAA8E;AAAA,EACzFpB,SAAS;AAAA,EACTF,QAAQ;AAAA,EACRxqC,SAAS;AAAA,EACT6qC,UAAU;AAAA,EACVF,WAAW;AAAA,EACXp9B,WAAW;AAAA,EACXk9B,cAAc;AAAA,EACd1nD,QAAQ;AACV;ACNO,SAAAgpD,gBAAA3nE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAyB;AAAA,IAAAioE;AAAAA,IAAAC;AAAAA,IAAAx7B;AAAAA,IAAAy7B,aAAAxnE;AAAAA,EAAAN,IAAAA,IAI9B8nE,cAAAxnE,OAAkB+I,cAAlB/I;AAAkBI,MAAAA;AAAA,MAAAhB,EAAAmoE,CAAAA,MAAAA,WAAAnoE,SAAAooE,aAAA;AAAAnnE,QAAAA;AAAAjB,aAAAooE,eAIDnnE,MAAAonE,CAAAA,+BACV,YAA8BA,EAAAA,cAAqBD,YAAAA,GAA9B,MAA6C,GACpEpoE,OAAAooE,aAAApoE,OAAAiB,OAAAA,MAAAjB,EAAA,CAAA,GAFAgB,KAAAmnE,QAAO3+D,IAAKvI,GAEZ,GAACjB,OAAAmoE,SAAAnoE,OAAAooE,aAAApoE,OAAAgB;AAAAA,EAAA;AAAAA,SAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAkoE,CAAAA,MAAAA,aAAAloE,SAAA2sC,QAAA3sC,EAAA,CAAA,MAAAgB,MAHJC,yBAAC,aAAuBinE,EAAAA,WAAiBv7B,MACtC3rC,UAGH,GAAA,CAAA,GAAchB,OAAAkoE,WAAAloE,OAAA2sC,MAAA3sC,OAAAgB,IAAAhB,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAJdiB;AAIc;ACAX,MAAMqnE,UAAU/mE,OAAOa,IAAI,EAAuCrC,CAAU,UAAA;AACjF,QAAMgC,QAAQwmE,YAAYxoE,MAAMgC,KAAK,GAC/BV,QAAQtB,MAAMyoE;AAEbtvD,SAAAA;AAAAA,yBACgBnX,MAAMV,MAAMonE,OAAOpnE,KAAK,EAAEgY,EAAE;AAAA,wBAC7BtX,MAAMV,MAAMonE,OAAOpnE,KAAK,EAAEiY,EAAE;AAAA;AAAA;AAAA;AAAA,aAIvCvX,MAAM0mE,OAAO31C,MAAM,CAAC,EAAE6Z,IAAI;AAAA,cACzB5qC,MAAM0mE,OAAO31C,MAAM,CAAC,EAAE6Z,IAAI;AAAA;AAAA;AAAA;AAAA;AAKxC,CAAC,GAEK+7B,2BAA4F;AAAA,EAChG9B,SAAS;AAAA,EACTF,QAAQ;AAAA,EACRxqC,SAAS;AAAA,EACT6qC,UAAU;AAAA,EACVF,WAAW;AAAA,EACXp9B,WAAW;AAAA,EACXk9B,cAAc;AAAA,EACd1nD,QAAQ;AAAA,EACR0pD,iBAAiB;AACnB,GAUMC,wBAA6C;AAAA,EACjDC,SAAS;AAAA,EACT/gC,mBAAmB;AACrB,GAEMghC,iBAAiBvnE,OAAOwnE,QAAQ,EAAGhpE,CAAU,UAAA;AAC3CgC,QAAAA,QAAQwmE,YAAYxoE,MAAMgC,KAAK;AAC9BmX,SAAAA;AAAAA;AAAAA,aAEInX,MAAM0mE,OAAO31C,MAAM,CAAC,EAAE6Z,IAAI;AAAA,cACzB5qC,MAAM0mE,OAAO31C,MAAM,CAAC,EAAE6Z,IAAI;AAAA;AAExC,CAAC,GAEKq8B,eAAeznE,OAAOwnE,QAAQ,EAAGhpE,CAAU,UAAA;AACzCgC,QAAAA,QAAQwmE,YAAYxoE,MAAMgC,KAAK;AAC9BmX,SAAAA;AAAAA;AAAAA,cAEKnX,MAAMknE,KAAKh5D,KAAK6iB,MAAM,CAAC,EAAEhE,UAAU;AAAA;AAEjD,CAAC,GAEKo6C,WAAW5oE,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAooE;AAAAA,EAAAA,IAAA/nE,IAChB,CAAA6oE,MAAA9uD,OAAA,IAAwB+uD,QAAQf,MAAM;AAACznE,MAAAA;AAAAZ,IAAAqa,CAAAA,MAAAA,WAAAra,SAAAmpE,QAInCvoE,KAAC,oBAAA,OAAKyZ,UAAO,WAAA,CAAK8uD,OAAQ,oBAAA,gBAAA,EAAe,UAAA,GAAQ,CAAA,IAAO,oBAAA,YAAA,EAAiBA,MAAO,EAAE,CAAA,GAAMnpE,OAAAqa,SAAAra,OAAAmpE,MAAAnpE,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAqa,CAAAA,MAAAA,WAAAra,SAAAmpE,QACxFnoE,KAAC,oBAAA,KAAA,EACEqZ,sBAAY8uD,MAAIpzD,cACd,oBAAA,MAAA,EAAW,MAAC,GACX,UAAA,oBAAC,cAAa,EAAA,UAAO,GACvB,CAAA,GAAA,IAEC,oBAAA,MAAA,EAAK,OAAI,IAAQ,MAAA,GACfozD,UAAIpzD,KAAAA,YACP,CAAA,EAEJ,CAAA,GAAM/V,OAAAqa,SAAAra,OAAAmpE,MAAAnpE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,SAAAA,EAAAY,CAAAA,MAAAA,MAAAZ,SAAAgB,MAAAhB,EAAA,CAAA,MAAAqoE,UAZRpnE,0BAAC,MAAW,EAAA,OAAA,UAAc,KAAA,GAAyB,SAAC,GAClDL,UAAAA;AAAAA,IAAAA;AAAAA,IACAI;AAAAA,EAAAA,KAFgCqnE,MAalC,GAAOroE,OAAAY,IAAAZ,OAAAgB,IAAAhB,OAAAqoE,QAAAroE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAbPiB;AAaO,GAGLooE,iBAAiB/oE,CAAA,OAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAC;AAAA,IAAAqpE;AAAAA,MAAAhpE,IACtB;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAe,QAAQ;AAACC,MAAAA;AAAAZ,WAAAU,KAK3BE,KAAAF,EAAE,wBAAwB,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MAFhCI,KAAC,oBAAA,KAAa,EAAA,SAAA,GAAkB,eAAA,GAC9B,UAAA,oBAAC,QAAW,MAAA,GAAU,QAAA,UACnBJ,UACH,GAAA,CAAA,EACF,CAAA,GAAMZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAspE,iBACLroE,KAAAqoE,cAAa9/D,IAAAO,OAEb,GAAC/J,OAAAspE,eAAAtpE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA,SAAA7C,EAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MARJ4B,KAAC,qBAAA,OAAqB,EAAA,eAAC,GACrB7B,UAAAA;AAAAA,IAAAA;AAAAA,IAKCC;AAAAA,EAAAA,EAGH,CAAA,GAAQjB,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA,GATR6C;AASQ;AAGL,SAAA0mE,aAAAjpE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAsB;AAAA,IAAAupE;AAAAA,IAAAjpB;AAAAA,IAAAkpB;AAAAA,IAAAH;AAAAA,IAAAI;AAAAA,MAAAppE,IAO3B;AAAA,IAAAI;AAAAA,EAAAA,IAAYC,eAAe,QAAQ,GACnC;AAAA,IAAAsG;AAAAA,IAAA0iE,cAAAC;AAAAA,EAAAA,IAAwCJ;AAAK5oE,MAAAA;AAAAZ,WAAAiH,QACvBrG,KAAAomE,8BAA8B//D,IAAI,GAACjH,OAAAiH,MAAAjH,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAzD,QAAA6pE,gBAAsBjpE;AAAmCI,MAAAA;AAAAhB,IAAA,CAAA,MAAAwpE,MAAAM,WACnC9oE,KAAAyN,MAAAC,KAAW86D,MAAKM,OAAQ,GAAC9pE,EAAA,CAAA,IAAAwpE,MAAAM,SAAA9pE,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAA/C,QAAA+pE,gBAAsB/oE;AAAyBC,MAAAA;AAAAjB,WAAAspE,iBACjBroE,KAAAqoE,gBAAgB76D,MAAAC,KAAW46D,aAAa,IAAM,CAAA,GAAAtpE,OAAAspE,eAAAtpE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAA5EgqE,QAAAA,wBAA8B/oE,IAC9BgpE,eAAqBhjE,SAAS;AAAQpE,MAAAA;AAAA7C,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACDC,KAAA;AAAA,IAAAqnE,WAAY;AAAA,IAAQC,WAAa;AAAA,EAAA,GAAQnqE,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAA9EoqE,QAAAA,aAAmBC,kBAAkBxnE,EAAyC;AAACC,MAAAA;AAAA9C,WAAA4pE,aAClE9mE,KAAA,IAAA81B,KAASgxC,SAAS,GAAC5pE,OAAA4pE,WAAA5pE,OAAA8C,MAAAA,KAAA9C,EAAA,CAAA;AAEhC,QAAAsqE,iBAAuBtiC,gBAFVllC,MAEkC,IAAE8lE,qBAAuB;AAAC,MAAA1kE,IAAAiC;AAAA,MAAAnG,EAAAoqE,CAAAA,MAAAA,cAAApqE,UAAA4pE,WAAA;AAGvEW,UAAAA,aAAA,IAAA3xC,KAA4BgxC,SAAS;AACfzjE,SAAAikE,WAAUv6B,OAAQ06B,UAAU,GAACvqE,OAAAoqE,YAAApqE,QAAA4pE,WAAA5pE,QAAAmG;AAAAA,EAAA;AAAAA,SAAAnG,EAAA,EAAA;AAA7BmG,OAAAA;AAFxB,QAAAqkE,qBAA2BtmE;AAKAkC,MAAAA;AAAApG,IAAAwpE,EAAAA,MAAAA,SAAAxpE,UAAAiqE,gBAAAjqE,EAAA,EAAA,MAAAypE,YAGzBrjE,KAAAqkE,CAAA,QAAA;AACEA,QAAG54D,kBACH44D,IAAGz1B,mBAECi1B,gBACFR,SAASD,KAAK;AAAA,EAAA,GAEjBxpE,QAAAwpE,OAAAxpE,QAAAiqE,cAAAjqE,QAAAypE,UAAAzpE,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AARH,QAAAqY,cAAoBjS;AAUnBC,MAAAA;AAAArG,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAemByD,KAAA;AAAA,IAAAuoB,UAAW;AAAA,EAAA,GAAW5uB,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,YAAA+pE,iBAChCxjE,0BAAC,iBAA2B,EAAA,WAAC,GAAWwjE,wBAAqB,SAAK,GAAA/pE,QAAA+pE,eAAA/pE,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AACjByG,QAAAA,MAAAiiE,yBAAyBzhE,IAAI;AAAC4B,MAAAA;AAAA7I,YAAA6pE,iBAC7DhhE,MAAAghE,qCAAkB,eAAgB,EAAA,GAAA7pE,QAAA6pE,eAAA7pE,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAAnJ,YAAA6I,OAAlDM,MAAC,oBAAA,MAAA,EAAW,MAAA,GAAIN,UAAAA,KAAmC,GAAO7I,QAAA6I,KAAA7I,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,IAAAyG,EAAAA,MAAAA,OAAAzG,UAAAmJ,OAD5DC,MAAC,oBAAA,SAAA,EAAc,OAAA,UAAiB,SAAA,UAAiB,QAAA3C,KAC/C0C,UAAAA,IACF,CAAA,GAAUnJ,QAAAyG,KAAAzG,QAAAmJ,KAAAnJ,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAoJ,OAJZC,MAKM,qBAAA,OALM,EAAA,OAAAhD,IACVE,UAAAA;AAAAA,IAAAA;AAAAA,IACA6C;AAAAA,EAAAA,EAGF,CAAA,GAAMpJ,QAAAuG,KAAAvG,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAAU,EAAAA,MAAAA,KAAAV,UAAAiH,QAGDqC,MAAA5I,EAACsnE,+BAAgC/gE,IAAI,CAAC,KAAwB,oBAAA,QAAA,EAAT,UAAE,KAAA,CAAA,GAAOjH,QAAAU,GAAAV,QAAAiH,MAAAjH,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAAAgK,MAAAA;AAAAhK,YAAAsJ,OADjEU,MAAC,oBAAA,MAAA,EAAW,SAAU,QAAA,UACnBV,eACH,GAAOtJ,QAAAsJ,KAAAtJ,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA;AAAAmV,MAAAA;AAAAnV,IAAAwqE,EAAAA,MAAAA,sBAAAxqE,UAAA4pE,aAAA5pE,EAAA,EAAA,MAAAsqE,kBAEPn1D,0BAAC,MAAQ,EAAA,IAAA,QAAa,MAAA,GAAG,OAAI,IAAYy0D,UAAAA,WAAkBY,OAAiB,oBACzEF,0BACH,GAAOtqE,QAAAwqE,oBAAAxqE,QAAA4pE,WAAA5pE,QAAAsqE,gBAAAtqE,QAAAmV,OAAAA,MAAAnV,EAAA,EAAA;AAAAqV,MAAAA;AAAArV,IAAAgK,EAAAA,MAAAA,OAAAhK,UAAAmV,OAPTE,MAAC,qBAAA,OAAa,EAAA,OAAC,GACbrL,UAAAA;AAAAA,IAAAA;AAAAA,IAIAmL;AAAAA,EAAAA,EAGF,CAAA,GAAQnV,QAAAgK,KAAAhK,QAAAmV,KAAAnV,QAAAqV,OAAAA,MAAArV,EAAA,EAAA;AAAAsV,MAAAA;AAAAtV,YAAAgqE,yBAEP10D,MAAA00D,sBAAqBvnE,SAAW,KAC/B,oBAAC,MAAW,EAAA,SAAW,SAAA,YAAiB,OAAA,UACtC,UAAA,oBAAC,SACW,EAAA,WAAA,OACD,SAAC,oBAAA,gBAAA,EAA8BunE,eAAAA,sBAAAA,CAAwB,GAChE,QAAK,IAEL,UAAA,oBAAC,OAAiB,gBAAa,UAAA,GAC7B,UAAC,oBAAA,iBAAA,EACY,cACFA,SAAAA,uBACH,MAAC,GACM,aAAA,GAAA,CAEjB,EAAA,CAAA,EAAA,CACF,EACF,CAAA,GACDhqE,QAAAgqE,uBAAAhqE,QAAAsV,OAAAA,MAAAtV,EAAA,EAAA;AAAAuV,MAAAA;AAAAvV,IAAAqJ,EAAAA,MAAAA,OAAArJ,UAAAqV,OAAArV,EAAA,EAAA,MAAAsV,OAlCHC,MAAA,qBAAC,QAAW,OAAA,UAAc,KAAC,GACzBlM,UAAAA;AAAAA,IAAAA;AAAAA,IAMAgM;AAAAA,IAUCC;AAAAA,EAAAA,GAkBH,GAAOtV,QAAAqJ,KAAArJ,QAAAqV,KAAArV,QAAAsV,KAAAtV,QAAAuV,OAAAA,MAAAvV,EAAA,EAAA;AAAAwV,MAAAA;AAAAxV,IAAAwpE,EAAAA,MAAAA,MAAAlkE,MAAAtF,EAAA,EAAA,MAAAqY,eAAArY,EAAAugD,EAAAA,MAAAA,cAAAvgD,UAAAuV,OA7CTC,MAAC,oBAAA,MAAA,EACI,IAAA,UACM6C,SAAAA,aACA,SAAC,GACDkoC,SAAAA,YACD,WACA,WAAA,gBACI,eAAA,wBACG,iBAAAipB,MAAKlkE,IAEpBiQ,UAoCF,IAAA,CAAA,GAAOvV,EAAA,EAAA,IAAAwpE,MAAAlkE,IAAAtF,QAAAqY,aAAArY,QAAAugD,YAAAvgD,QAAAuV,KAAAvV,QAAAwV,OAAAA,MAAAxV,EAAA,EAAA;AAAAyV,MAAAA;AAAA,SAAAzV,EAAA0pE,EAAAA,MAAAA,eAAA1pE,UAAAwV,OA/CTC,MAAC,qBAAA,MAAA,EAAW,OAAA,UAAc,KAAC,GACzBD,UAAAA;AAAAA,IAAAA;AAAAA;IAgDF,CAAA,GAAOxV,QAAA0pE,aAAA1pE,QAAAwV,KAAAxV,QAAAyV,OAAAA,MAAAzV,EAAA,EAAA,GAjDPyV;AAiDO;AAtGY,SAAA1L,QAAAs+D,QAAA;AAUf,SAAA,oBAAC,UAA8BA,EAAAA,OAAAA,GAAhBA,MAA0B;AAAA;AClGpCqC,MAAAA,oBAAqBlB,WAChCA,MAAMviE,SAAS,WAEJ0jE,iBAAkBnB,CAAAA,UAAwCA,MAAMviE,SAAS;AAQtF,SAAS2jE,yBAAyBC,QAAiB;AACjD,MAAIC,kBAAuC;AAE3C,WAAS7gE,QAAQ4gE,OAAOpoE,SAAS,GAAGwH,SAAS,GAAGA,SAAS;AACjDu/D,UAAAA,QAAQqB,OAAO5gE,KAAK;AACtB0gE,QAAAA,eAAenB,KAAK,GAAG;AACPA,wBAAAA;AAClB;AAAA,IAAA;AAEF,QAAIA,MAAMviE,SAAS;AAEZ;AAAA,EAAA;AAGF6jE,SAAAA;AACT;AAQO,SAASC,kBAAkBF,QAA8C;AAC9E,QAAM5vC,SAAsC,CAAE;AAE9C,aAAWuuC,SAASqB,QAAQ;AACtBF,QAAAA,eAAenB,KAAK,GAAG;AACzBvuC,aAAOvwB,KAAK;AAAA,QACV,GAAG8+D;AAAAA,QACHviE,MAAM;AAAA,QACNN,UAAU,CAAE;AAAA,QACZ2iE,mCAAmB36D,IAAI;AAAA;AAAA,MAAA,CACxB;AACD;AAAA,IAAA;AAEE+7D,QAAAA,kBAAkBlB,KAAK,GAAG;AACtBsB,YAAAA,kBAAkBF,yBAAyB3vC,MAAM;AACvD,UAAIuuC,MAAMviE,SAAS,eAAe6jE,iBAAiB7jE,SAAS,WAAW;AACrEwH,cAAMC,KAAK86D,MAAMM,OAAO,EAAErtB,QAASn3C,CAAO,OAAA;AACxBgkE,0BAAAA,cAAcvqD,IAAIzZ,EAAE;AAAA,QAAA,CACrC,GACDwlE,gBAAgBnkE,SAAS+D,KAAK8+D,MAAMlkE,EAAE,GACtC21B,OAAOvwB,KAAK;AAAA,UACV,GAAG8+D;AAAAA,UACHlvC,UAAUwwC,gBAAgBxlE;AAAAA,QAAAA,CAC3B;AACD;AAAA,MAAA;AAAA,IACF;AAEEolE,sBAAkBlB,KAAK,KACzBvuC,OAAOvwB,KAAK8+D,KAAK;AAAA,EAAA;AAIdvuC,SAAAA;AACT;AChDaksC,MAAAA,2BAA2B,yBAE3B6D,WAAWA,CAAC;AAAA,EACvBH;AAAAA,EACAI;AAAAA,EACAC,WAAWC;AAAAA,EACXC;AAAAA,EACA3B;AAAAA,EACA4B,gBAAgB;AACH,MAAM;AACnB,QAAM,CAACthD,SAASC,UAAU,IAAI1Z,SAAS,EAAK,GACtC;AAAA,IAAC5P;AAAAA,EAAAA,IAAKC,eAAe,QAAQ,GAC7B2qE,kBAAkBH,eAAe7lE,IACjCimE,qBAAqBvlD,QAAQ,MAAM+kD,kBAAkBF,MAAM,GAAG,CAACA,MAAM,CAAC,GAEtE,CAACW,iBAAiBC,kBAAkB,IAAIn7D,SAAsB,MAAM;AACxE,QAAIg7D,iBAAiB;AAEnB,YAAMn4D,WAAWo4D,mBAAmBz3D,KAAM01D,CAAUA,UAAAA,MAAMlkE,OAAOgmE,eAAe;AAChF,UAAIn4D,YAAYu3D,kBAAkBv3D,QAAQ,KAAKA,SAASmnB;AACtD,eAAW3rB,oBAAAA,IAAI,CAACwE,SAASmnB,QAAQ,CAAC;AAAA,IAAA;AAGtC,+BAAW3rB,IAAI;AAAA,EAAA,CAChB;AAEDqC,YAAU,MAAM;AAEd,QAAIs6D,iBAAiB;AACnB,YAAMn4D,aAAWo4D,mBAAmBz3D,KAAM01D,CAAUA,YAAAA,QAAMlkE,OAAOgmE,eAAe;AAChF,UAAIn4D,cAAYu3D,kBAAkBv3D,UAAQ,KAAKA,WAASmnB,UAAU;AAChE,cAAMA,WAAWnnB,WAASmnB;AAC1BmxC,2BAAoB1+C,CAAS,SAAA;AAC3B,cAAIA,KAAKvM,IAAI8Z,QAAQ,EAAUvN,QAAAA;AACzBC,gBAAAA,OAAO,IAAIre,IAAIoe,IAAI;AACpBhO,iBAAAA,KAAAA,IAAIub,QAAQ,GACVtN;AAAAA,QAAAA,CACR;AAAA,MAAA;AAAA,IACH;AAAA,EACF,GACC,CAACu+C,oBAAoBD,eAAe,CAAC;AAElCI,QAAAA,iBAAiB1lD,QAAQ,MACtBulD,mBAAmBzhE,OAAQ0/D,CAC5BmB,YAAAA,eAAenB,OAAK,KAAK,CAACA,QAAMlvC,WAAiB,KAE9CkxC,gBAAgBhrD,IAAIgpD,QAAMlvC,QAAQ,CAC1C,GACA,CAACixC,oBAAoBC,eAAe,CAAC;AAExCx6D,YAAU,MAAM;AAKV06D,mBAAejpE,SAAS,MAAMwoE,iBAChCG,WAAW;AAAA,EAEZ,GAAA,CAACM,gBAAgBT,eAAeG,UAAU,CAAC;AAE9C,QAAMO,qBAAqB/lD,YACxB0U,CAAqB,eAAA,MACpBmxC,mBAAoB1+C,CAAS,WAAA;AACrBC,UAAAA,SAAO,IAAIre,IAAIoe,MAAI;AAErBA,WAAAA,OAAKvM,IAAI8Z,UAAQ,IAAGtN,OAAK/N,OAAOqb,UAAQ,IACvCtN,OAAKjO,IAAIub,UAAQ,GAEftN;AAAAA,EAAAA,CACR,GACH,CAAA,CACF,GAEM4+C,gBAAgB5lD,QACpB,MACEslD,kBAAkBI,eAAe7wC,UAAW2uC,CAAAA,YAAUA,QAAMlkE,OAAOgmE,eAAe,IAAI,IACxF,CAACA,iBAAiBI,cAAc,CAClC,GACMG,oBAAoBjmD,YACvB4jD,CAAqC,YAAA;AACpC,UAAMsC,gBAAgBjB,OAAO/2D,KAAMi4D,QAAMA,GAAEzmE,OAAOkkE,QAAMlkE,EAAE;AACtDwmE,oBAAerC,SAASqC,aAAa,KAEvCjmD,QAAQ/kB,MAAM,+BAA+B,GAC7C2oE,SAASD,OAAK;AAAA,EAAA,GAGlB,CAACqB,QAAQpB,QAAQ,CACnB,GAEM7oB,aAAah7B,YACjB,CAAC4jD,SAAO;AAAA,IAACn4B;AAAAA,EAAAA,MAIJ,qBAAA,KAAA,EACC,eAAe,GACf,YALYA,gBAAgB,IAKN,IAAI,GAC1B,cAAc,GACd,aAAaq5B,kBAAkBlB,OAAK,KAAKA,QAAMlvC,WAAW,IAAI,GAE9D,UAAA;AAAA,IAAA,oBAAC,gBACC,OAAOkvC,SACP,YAAY8B,oBAAoB9B,QAAMlkE,IACtC,UAAUumE,mBACV,eAAelB,eAAenB,OAAK,IAAIA,QAAMF,gBAAgB3/D,QAC7D,aACEghE,eAAenB,OAAK,KAAKA,QAAM7iE,SAASlE,SAAS,IAC9C,oBAAA,8BAAA,EACC,YAAY+oE,gBAAgBhrD,IAAIgpD,QAAMlkE,EAAE,GACxC,UAAUqmE,mBAAmBnC,QAAMlkE,EAAE,EAAA,CACrC,IACA,MACL;AAAA,IAEF+rC,gBAAgBq6B,eAAejpE,SAAS,KAAKwoE,qCAAkB,cAAe,CAAA,CAAA;AAAA,EAAA,GACjF,GAGJ,CACEO,iBACAE,eAAejpE,QACfkpE,oBACAE,mBACAZ,eACAK,eAAe,CAEnB;AAEAt6D,SAAAA,UAAU,MAAMgZ,WAAW,EAAI,GAAG,CAAA,CAAE,GAGlC;AAAA,IAAC5Y;AAAAA,IAAA;AAAA,MASC,UAAU,CAACw6D,iBAAiB7hD;AAAAA,MAC5B,WAAQ;AAAA,MAEP2hD,UAAAA;AAAAA,QAAAA,eAAejpE,WAAW,KACzB,qBAAC,gBAAa,SAAS,GAAG,OAAO,GAC/B,UAAA;AAAA,UAAA,oBAAC,QAAK,MAAM,GAAG,QAAO,UACnB/B,UAAAA,EAAE,0CAA0C,GAC/C;AAAA,UACA,oBAAC,QAAK,OAAK,IAAC,MAAM,GACfA,UAAAA,EAAE,gDAAgD,EACrD,CAAA;AAAA,QAAA,GACF;AAAA,QAGDgrE,eAAejpE,SAAS,KACtB,oBAAA,aAAA,EAAY,WAAU,UAAS,YAAY4oE,eAAe,IAAIlE,0BAC7D,UAAC,oBAAA,aAAA,EACC,oBAAmB,gBACnB,WAAWzmE,EAAE,0BAA0B,GACvC,WAAU,QACV,cAAckrE,eACd,oBAAmB,UACnB,YAAY,IACZ,OAAOF,gBACP,cAAcN,YACd,yBAAyB,IACzB,UAAU,GACV,YACA,YAAY,IAAM,EAEtB,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEJ;AAEJ;AAEAJ,SAASj1D,cAAc;AC7MhB,SAAAi2D,gBAAA;AAAAhsE,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAS;AAAAA,EAAAA,IAAYC,eAAe,QAAQ;AAACL,MAAAA;AAAAN,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAIhCtC,KAAC,oBAAA,cAAkB,EAAA,MAAA,YACjB,UAAC,oBAAA,kBAAA,EAAgB,GACnB,GAAeN,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAY,MAAAA;AAAAZ,WAAAU,KAGVE,KAAAF,EAAE,4CAA4C,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAY,MADlDI,yBAAC,cAAmB,EAAA,MAAC,GAAO,MAAA,YAAkB,QAAA,UAC3CJ,UACH,GAAA,CAAA,GAAeZ,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAAU,KAEZO,KAAAP,EAAE,kDAAkD,GAACV,OAAAU,GAAAV,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAAiB,MADxD4B,KAAC,oBAAA,cAAA,EAAmB,SAAQ,MAAA,YACzB5B,cACH,GAAejB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA,SAAA9C,EAAAgB,CAAAA,MAAAA,MAAAhB,UAAA6C,MAVnBC,0BAAC,QAAW,OAAA,cAAkB,KAAA,GAAY,SAAC,GACzCxC,UAAAA;AAAAA,IAAAA;AAAAA,IAGA,qBAAC,OAAa,EAAA,OAAC,GACbU,UAAAA;AAAAA,MAAAA;AAAAA,MAGA6B;AAAAA,IAAAA,EAGF,CAAA;AAAA,EAAA,EACF,CAAA,GAAO7C,OAAAgB,IAAAhB,QAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA,GAZP8C;AAYO;ACKX,MAAMsO,OAAO7P,OAAO0qE,SAAO;AAAA;AAAA;AAAA,GAKdC,uBAAuB;AAE7B,SAAAC,aAAA7rE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAsB;AAAA,IAAAupE;AAAAA,IAAAx1C;AAAAA,IAAApd;AAAAA,MAAAtW,IAC3B;AAAA,IAAA24C;AAAAA,IAAAlB;AAAAA,IAAAC;AAAAA,IAAArnC;AAAAA,IAAAiwB;AAAAA,EAAAA,IAAiFzW,mBACjF,CAAAuwB,MAAA0xB,OAAA,IAAwB97D,WAAc,GACtC,CAAA+7D,QAAAC,SAAA,IAA4Bh8D,aAAuC,GACnE,CAAAi8D,YAAAC,aAAA,IAAoCl8D,aAAiC,GAErElI,QAAcC,YAEdwiE,SAAe/oC,oBAAoBlB,eAAa72B,OAAyB,GACzEsQ,UAAgBynB,oBAAoBlB,eAAa7xB,QAA4B,GAC7Ek8D,gBAAsBnpC,oBAAoBlB,eAAa5xB,QAAgC,GACvFy9D,eAAqB3qC,oBAAoBlB,eAAa3xB,QAA+B,GACrFy9D,YAAkB5qC,oBAAoBlB,eAAa+rC,QAA4B,GAE/E;AAAA,IAAAjsE;AAAAA,EAAAA,IAAYC,eAAe,QAAQ;AAACC,MAAAA;AAAAZ,IAAAg0B,CAAAA,MAAAA,QAAAh0B,SAAA+3C,mBAELn3C,KAAAA,MAAA;AACbozB,oBAAAA,IAAI,GACpBo4C,UAAY;AAAA,EACbpsE,GAAAA,OAAAg0B,MAAAh0B,OAAA+3C,iBAAA/3C,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAHD,QAAA4sE,aAAmBhsE;AAGQI,MAAAA;AAAAhB,WAAA+3C,mBAEK/2C,KAAAA,MAAA;AACd,oBAAA,QAAQ,GACxBorE,UAAa;AAAA,EAAC,GACfpsE,OAAA+3C,iBAAA/3C,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAHD,QAAAowB,cAAoBpvB;AAGCC,MAAAA;AAAAjB,IAAAqsE,CAAAA,MAAAA,UAAArsE,SAAAowB,eAAApwB,EAAA,CAAA,MAAA06C,QAGnBz5C,KAAA2Q,CAAA,UAAA;AACM8oC,aAAS9oC,MAAKyF,QAAS,YAAYzF,MAAKyF,QAAS,WACnD+Y,YAAAA,GACAi8C,QAAM5d,MAAA;AAAA,EAAA,GAETzuD,OAAAqsE,QAAArsE,OAAAowB,aAAApwB,OAAA06C,MAAA16C,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA,GAIHmjC,iBAV4BliC,EAUQ;AAAC4B,MAAAA;AAAA7C,IAAAqsE,CAAAA,MAAAA,UAAArsE,UAAAusE,cACK1pE,KAAAA,MAAOwpE,CAAAA,QAAQE,UAAU,GAACvsE,OAAAqsE,QAAArsE,QAAAusE,YAAAvsE,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAApEojC,qBAAqBsX,QAAQtqB,aAAavtB,EAA0B;AAACC,MAAAA;AAAA9C,IAAA+3C,EAAAA,MAAAA,mBAAA/3C,EAAA,EAAA,MAAAi5C,oBAAAj5C,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAA4gC,iBAAA5gC,UAAAoI,SAGnEtF,KAAA+pE,CAAA,aAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,SAAAC,KAAA,IAAyBnsC,cAAaosC,gBAAiBH,QAAQ;AAC/D90B,sBAAgB,QAAQ,GACxBkB,iBAAiB6zB,SAASC,KAAK;AAAA,aAAC7oE,KAAA;AACzBmzB,YAAAA,MAAAA;AACPjvB,YAAKsC,KAAA;AAAA,QAAA4jB,UAAA;AAAA,QAAA/H,aAEU8Q,IAAGn2B;AAAAA,QAAA6C,QACR;AAAA,QAAO3C,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,QAAA+3C,iBAAA/3C,QAAAi5C,kBAAAj5C,QAAAU,GAAAV,QAAA4gC,eAAA5gC,QAAAoI,OAAApI,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAdH,QAAAitE,YAAkBnqE;AAgBjBoB,MAAAA;AAAAlE,IAAA+3C,EAAAA,MAAAA,mBAAA/3C,EAAA,EAAA,MAAAi5C,oBAAAj5C,EAAAU,EAAAA,MAAAA,KAAAV,EAAA,EAAA,MAAA4gC,iBAAA5gC,UAAAoI,SAGClE,KAAAgpE,CAAA,eAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,WAAAC,OAAA,IAAyBxsC,cAAaysC,kBAAmBH,UAAU;AACnEn1B,sBAAgB,QAAQ,GACxBkB,iBAAiB6zB,WAASC,OAAK;AAAA,aAAC5mE,KAAA;AACzBkxB,YAAAA,QAAAA;AACPjvB,YAAKsC,KAAA;AAAA,QAAA4jB,UAAA;AAAA,QAAA/H,aAEU8Q,MAAGn2B;AAAAA,QAAA6C,QACR;AAAA,QAAO3C,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,QAAA+3C,iBAAA/3C,QAAAi5C,kBAAAj5C,QAAAU,GAAAV,QAAA4gC,eAAA5gC,QAAAoI,OAAApI,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAdH,QAAAstE,cAAoBppE;AAgBnBiC,MAAAA;AAAAnG,IAAAqa,EAAAA,MAAAA,WAAAra,UAAA4gC,iBAEkCz6B,KAAAA,MAAA;AAC5BkU,eACHumB,cAAa2sC,SAAU;AAAA,EAE1BvtE,GAAAA,QAAAqa,SAAAra,QAAA4gC,eAAA5gC,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAJD,QAAAwtE,iBAAuBrnE;AAIKC,MAAAA;AAAA,OAAA;AAAA,QAGtB4xC,eAAa;AAAA3xC,UAAAA;AAAArG,QAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAASyD,MAAA,oBAAC,gBAAgB,CAAA,GAAArG,QAAAqG,OAAAA,MAAArG,EAAA,EAAA,GAAxBoG,KAAOC;AAAiByO,YAAAA;AAAAA,IAAAA;AAAA,QAEvCkf,SAAS,OAAK;AAAA3tB,UAAAA;AAAArG,QAAA6qE,EAAAA,MAAAA,UAAA7qE,EAAA,EAAA,MAAAwtE,kBAAAxtE,EAAAirE,EAAAA,MAAAA,iBAAAjrE,EAAA,EAAA,MAAAysE,gBAAAzsE,UAAAitE,aAEd5mE,MAAA,oBAAC,UACSwkE,EAAAA,QACOI,eACJwB,WAAW,cACVe,YAAAA,gBACFP,UAAQ,UAClB,CAAA,GAAAjtE,QAAA6qE,QAAA7qE,QAAAwtE,gBAAAxtE,QAAAirE,eAAAjrE,QAAAysE,cAAAzsE,QAAAitE,WAAAjtE,QAAAqG,OAAAA,MAAArG,EAAA,EAAA,GAPJoG,KACEC;AAODyO,YAAAA;AAAAA,IAAAA;AAAAzO,QAAAA;AAAArG,MAAA6qE,EAAAA,MAAAA,UAAA7qE,UAAAysE,gBAGoBpmE,MAAAomE,eACnB5B,OAAM/gE,OAAAiiE,CAAAA,OAAeA,GAAC9hE,QAASwiE,aAAYxiE,KAAM,IACjD4gE,QAAM7qE,QAAA6qE,QAAA7qE,QAAAysE,cAAAzsE,QAAAqG,OAAAA,MAAArG,EAAA,EAAA;AAFV,UAAA0rE,iBAAuBrlE;AAEbE,QAAAA;AAAAvG,MAAA0rE,EAAAA,MAAAA,kBAAA1rE,EAAA,EAAA,MAAAwtE,kBAAAxtE,EAAAirE,EAAAA,MAAAA,iBAAAjrE,EAAA,EAAA,MAAAstE,eAAAttE,UAAA0sE,aAERnmE,OAAA,oBAAC,UACSmlE,EAAAA,QAAa,gBACNT,eACJyB,WAAQ,WACPc,YAAAA,gBACFF,UAAU,YACpB,CAAA,GAAAttE,QAAA0rE,gBAAA1rE,QAAAwtE,gBAAAxtE,QAAAirE,eAAAjrE,QAAAstE,aAAAttE,QAAA0sE,WAAA1sE,QAAAuG,QAAAA,OAAAvG,EAAA,EAAA,GAPJoG,KACEG;AAAAA,EAAAA;AAnBJ,QAAA8D,UAAgBjE;AAqCd,MAAAqnE,UAAApnE;AAAA,MAAArG,EAAAwpE,EAAAA,MAAAA,SAAAxpE,UAAAU,GAAA;AAEF,UAAAgtE,eAAA;AAAA,MAAA9D,WAAA;AAAA,QAAAM,WACyB;AAAA,QAAQC,WAAa;AAAA,MAAA;AAAA,IAAO;AAGrDsD,eAAiBjE,QACb9oE,EAACsnE,+BAAgCwB,MAAKviE,IAAA,GAAA;AAAA,MAAAiC,SAC3B;AAAA,MAAW0gE,WAAAhxC,IAAAA,KACA4wC,OAAKG,YAAA;AAAA,MAAA+D;AAAAA,IAAAA,CAE1B,IACDhtE,EAAE,0BAA0B,GAEb2F,KAAAmjE,QACf9oE,EAAE,kBAAgB;AAAA,MAAAkpE,WAAAhxC,IAAAA,KACI4wC,OAAKG,YAAA;AAAA,MAAA+D;AAAAA,IAAAA,CAE1B,IACDhtE,EAAE,gCAAgC,GAACV,QAAAwpE,OAAAxpE,QAAAU,GAAAV,QAAAytE,UAAAztE,QAAAqG;AAAAA,EAAA;AAAAonE,eAAAztE,EAAA,EAAA,GAAAqG,KAAArG,EAAA,EAAA;AAEvC2tE,QAAAA,cAAoB35C,SAAS,QAAQy5C,WAPlBpnE;AAOuCE,MAAAA;AAAAvG,YAAAusE,cAGnBhmE,MAAA;AAAA,IAAA,CAAA2lE,oBAAA,GAAyBK;AAAAA,EAAU,GAACvsE,QAAAusE,YAAAvsE,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAI5D,QAAAyG,MAAAi0C,QAAQrwC,SAUAxB,MAAA6xC,OAAO,+BAA+B,6BACzCvxC,OAACwH,OAEFvH,MAAAsxC,OAAOtqB,cAAcw8C;AAAUvjE,MAAAA;AAAArJ,IAAA,EAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAMjCyG,MAAA;AAAA,IAAA6J,UACK;AAAA,EAAA,GACXlT,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAA2tE,EAAAA,MAAAA,eAAA3tE,UAAA2Q,SAAA3Q,EAAA,EAAA,MAAAU,KAEK4I,MAAAqH,QAAQg9D,cAAcjtE,EAAE,0BAA0B,GAACV,QAAA2tE,aAAA3tE,QAAA2Q,OAAA3Q,QAAAU,GAAAV,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAAAgK,MAAAA;AAAAhK,IAAA06C,EAAAA,MAAAA,QAAA16C,EAAA,EAAA,MAAA6I,OAAA7I,EAAAmJ,EAAAA,MAAAA,OAAAnJ,EAAA,EAAA,MAAAoJ,OAAApJ,UAAAsJ,OAf7DU,MAAC,oBAAA,MAAA,EAAY,OAAA,QACX,8BAAC,QACc,EAAA,eAAAnB,KACH,UAAAM,KACL,MAAA,SACI,SAAAC,KACJkjE,gBACK5xB,UAAG,MACP,OAAA,QACQ,oBACL,SAAA,iBACF,OAAArxC,KAGIukE,4BACL,MAAAtkE,IAEV,CAAA,GAAA,GAAOtJ,QAAA06C,MAAA16C,QAAA6I,KAAA7I,QAAAmJ,KAAAnJ,QAAAoJ,KAAApJ,QAAAsJ,KAAAtJ,QAAAgK,OAAAA,MAAAhK,EAAA,EAAA;AAAAmV,MAAAA;AAAAnV,IAAA,EAAA,MAAA06C,QAAA16C,EAAA4W,EAAAA,MAAAA,aAAA5W,EAAAyG,EAAAA,MAAAA,OAAAzG,UAAAgK,OA5BTmL,MAAC,oBAAA,MAAA,EACa,eAAA,iBACZ,eAAA,IACS,SAAA1O,KACD,WAAA,eACFi0C,MACK9jC,WACX,qBAAkB,IAClB,QAAA,IACK41D,KAAAA,eAELxiE,UAkBF,KAAA,GAAOhK,QAAA06C,MAAA16C,QAAA4W,WAAA5W,QAAAyG,KAAAzG,QAAAgK,KAAAhK,QAAAmV,OAAAA,MAAAnV,EAAA,EAAA;AAAAqV,MAAAA;AAAA,SAAArV,EAAAuG,EAAAA,MAAAA,OAAAvG,UAAAmV,OA9BTE,MAAC,oBAAA,gBAAoC,EAAA,qBAAA9O,KACnC4O,UA8BF,IAAA,CAAA,GAAiBnV,QAAAuG,KAAAvG,QAAAmV,KAAAnV,QAAAqV,OAAAA,MAAArV,EAAA,EAAA,GA/BjBqV;AA+BiB;AA7Kd,SAAAs3D,SAAAkB,SAAA;AAAA,SAY2DjpE,QAAK8nE;AAAA;AAZhE,SAAAz9D,SAAA6+D,SAAA;AAAA,SAW8DlpE,QAAK6nE;AAAA;AAXnE,SAAAz9D,SAAA++D,SAAA;AAAA,SAU+DnpE,QAAKqmE;AAAA;AAVpE,SAAAl8D,SAAAi/D,SAAA;AAAA,SASyDppE,QAAKhB;AAAA;AAT9D,SAAAmG,QAAAnF,QAAA;AAAA,SAQwDA,OAAKimE;AAAA;ACnBpE,MAAM/qC,aAAWv+B,OAAOw+B,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,GAOjCuD,OAAO/hC,OAAOC,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShB,SAAAysE,iBAAA3tE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAA0B;AAAA,IAAAiuE;AAAAA,MAAA5tE,IAC/B;AAAA,IAAAsG;AAAAA,IAAAnG;AAAAA,IAAAu3C;AAAAA,IAAApX;AAAAA,IAAA//B;AAAAA,EAAAA,IAAsEspB,gBAAgB,GACtF,CAAAgkD,WAAAC,YAAA,IAAkC99D,aAAoC,GAEtEkqB,MAAYsH,oBAAoBlB,eAAa72B,OAA0B,GACvEskE,OAAavsC,oBAAoBlB,eAAa7xB,QAAuB,GACrEmiC,kBAAwBpP,oBAAoBlB,eAAa5xB,QAAkC,GAC3Fs/D,iBAAuBxsC,oBAAoBlB,eAAa3xB,QAAiC,GACzFy9D,YAAkB5qC,oBAAoBlB,eAAa+rC,MAA4B,GAC/EtyD,UAAgBi0D,mBAAmB,WACnCC,sBAA4Br9B,iBAI5B;AAAA,IAAAxwC,GAAA8tE;AAAAA,EAAAA,IAAwB7tE,eAAAnB,wBAAuC;AAAC,MAAAoB,IAAAI;AAAAhB,IAAAquE,CAAAA,MAAAA,QAAAruE,EAAA,CAAA,MAAA4G,cAAA5G,EAAAuuE,CAAAA,MAAAA,sBAAAvuE,EAAA,CAAA,MAAAS,cAAAT,SAAAa,SAGvDG,KAAA;AAAA,IAAA4F;AAAAA,IAAAnG;AAAAA,IAAAguE,cAAAC;AAAAA,IAAAC,UAIKN;AAAAA,IAAIE;AAAAA,IAAA1tE;AAAAA,IAAA+tE,eAAA;AAAA,EAIf5uE,GAAAA,OAAAquE,MAAAruE,OAAA4G,YAAA5G,OAAAuuE,oBAAAvuE,OAAAS,YAAAT,OAAAa,OAAAb,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAAAY,KARMI;AADT,QAAA6tE,kBAAuDjuE;AAWtDK,MAAAA;AAAAjB,WAAAwuE,cAOUvtE,KAAAutE,WAAW,oBAAoB,GAACxuE,OAAAwuE,YAAAxuE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAAA6C,MAAAA;AAAA7C,WAAAiB,MADnC4B,KAAC,oBAAA,MAAA,EAAW,SAAG,OAAA,IACZ5B,cACH,GAAOjB,OAAAiB,IAAAjB,OAAA6C,MAAAA,KAAA7C,EAAA,CAAA;AAAA8C,MAAAA;AAAA9C,YAAA0sE,aAEP5pE,yBAAC,cAAkB,EAAA,MAAA,SAAe4pE,kBAAqB,WAAA,gBAAiB,GAAA1sE,QAAA0sE,WAAA1sE,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,YAAAwuE,cAErEtqE,KAAAsqE,WAAW,kBAAkB,GAACxuE,QAAAwuE,YAAAxuE,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,YAAAkE,MADjCiC,KAAC,oBAAA,MAAA,EAAW,SAAG,OAAA,IACZjC,cACH,GAAOlE,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAAAoG,MAAAA;AAAApG,YAAAw6B,OACPp0B,yBAAC,cAAoBo0B,EAAAA,OAAE,KAAQ,MAAA,OAAgB,WAAA,cAAe,GAAAx6B,QAAAw6B,KAAAx6B,QAAAoG,MAAAA,KAAApG,EAAA,EAAA;AAAAqG,MAAAA;AAAArG,IAAA,EAAA,MAAA6C,MAAA7C,EAAA8C,EAAAA,MAAAA,MAAA9C,EAAAmG,EAAAA,MAAAA,MAAAnG,UAAAoG,MAVlEC,KAAC,oBAAA,KAAa,EAAA,SAAC,GACb,UAAA,qBAAC,MAAe,EAAA,UAAC,GAAiB,eAAA,GAChCxD,UAAAA;AAAAA,IAAAA;AAAAA,IAIAC;AAAAA,IACAqD;AAAAA,IAGAC;AAAAA,EACF,EAAA,CAAA,EACF,CAAA,GAAMpG,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,YAAAquE,QAAAruE,EAAA6uE,EAAAA,MAAAA,mBAAA7uE,EAAAqa,EAAAA,MAAAA,WAAAra,EAAA,EAAA,MAAAS,cAAAT,UAAAkuE,eAAAluE,EAAA,EAAA,MAAAg4C,iBAMGzxC,MAAA2nE,eACC,oBAAC,SACOG,EAAAA,MACWQ,iBACV72B,OAAAA,eACE39B,SACG5Z,WAEf,CAAA,GAAAT,QAAAquE,MAAAruE,QAAA6uE,iBAAA7uE,QAAAqa,SAAAra,QAAAS,YAAAT,QAAAkuE,aAAAluE,QAAAg4C,eAAAh4C,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,YAAAuG,OAVLE,MAAC,oBAAAq5B,YAAA,EAAiB,WAAA,YAAgBsuC,mBAChC,UAAC,oBAAA,KAAA,EAAU,MAAC,GAAY,UAAA,GAAU,QAAA,QAC/B7nE,UAAAA,IAAAA,CASH,EACF,CAAA,GAAWvG,QAAAuG,KAAAvG,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAAA6I,MAAAA;AAAA7I,IAAAmuE,EAAAA,MAAAA,aAAAnuE,UAAAyG,OAdfoC,MAAC,oBAAA,QAAW,MAAA,GAAa,UAAA,GAAa,UAAC,GACrC,UAAC,oBAAA,yBAAA,EAAiCslE,SAAAA,WAChC1nE,cAaF,CAAA,EACF,CAAA,GAAOzG,QAAAmuE,WAAAnuE,QAAAyG,KAAAzG,QAAA6I,OAAAA,MAAA7I,EAAA,EAAA;AAAAmJ,MAAAA;AAAA,SAAAnJ,EAAA6I,EAAAA,MAAAA,OAAA7I,UAAAqG,MA/BT8C,MAAC,qBAAA,MAAA,EAAiB,eAAA,uBAAgC,WAAA,UAAgB,QAAA,QAAgB,UAAA,UAChF9C,UAAAA;AAAAA,IAAAA;AAAAA,IAcAwC;AAAAA,EAAAA,EAiBF,CAAA,GAAO7I,QAAA6I,KAAA7I,QAAAqG,IAAArG,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA,GAhCPmJ;AAgCO;AA9DJ,SAAAwjE,OAAAkB,SAAA;AAAA,SAQ2DjpE,QAAK8nE;AAAA;AARhE,SAAAz9D,SAAA6+D,SAAA;AAAA,SAOgElpE,QAAK0pE;AAAA;AAPrE,SAAAt/D,SAAA++D,SAAA;AAAA,SAMiEnpE,QAAKssC;AAAA;AANtE,SAAAniC,SAAAi/D,SAAA;AAAA,SAKsDppE,QAAKypE;AAAA;AAL3D,SAAAtkE,QAAAnF,QAAA;AAAA,SAIqDA,OAAK+lC;AAAA;AA8DjE,SAAAthB,QAAA/oB,IAAA;AAAAN,QAAAA,IAAAC,EAAA,CAAA,GAAiB;AAAA,IAAAa;AAAAA,IAAAutE;AAAAA,IAAAQ;AAAAA,IAAAx0D;AAAAA,IAAA5Z;AAAAA,EAAAA,IAAAH;AAYhB,MACKQ,OAAK;AAAAF,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACAhC,MAAA,oBAAC,WAAY,CAAA,CAAA,GAAAZ,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAbY;AAAAA,EAAAA;AAAa,MAGlByZ,SAAO;AAAAzZ,QAAAA;AAAAZ,WAAAA,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACFhC,MAAC,oBAAA,cAAA,EAAa,UAAA,GAAW,CAAA,GAAAZ,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAzBY;AAAAA,EAAAA;AAAyB,MAAA,CAG7BytE,MAAI;AAAAztE,QAAAA;AAAA,WAAAZ,EAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KACAhC,MAAA,oBAAC,WAAY,CAAA,CAAA,GAAAZ,OAAAY,OAAAA,MAAAZ,EAAA,CAAA,GAAbY;AAAAA,EAAAA;AAAaA,MAAAA;AAAAZ,IAAAquE,CAAAA,MAAAA,QAAAruE,SAAAS,cAKlBG,KAAC,oBAAA,YAAiBytE,EAAAA,MAAkB5tE,WAAc,CAAA,GAAAT,OAAAquE,MAAAruE,OAAAS,YAAAT,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAA,SAAAhB,EAAA6uE,CAAAA,MAAAA,mBAAA7uE,SAAAY,MADpDI,KAAA,oBAAA,sBAAA,UAAA,EAAuC6tE,OAAAA,iBACrCjuE,UAAAA,GACF,CAAA,GAAiCZ,OAAA6uE,iBAAA7uE,OAAAY,IAAAZ,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA,GAFjCgB;AAEiC;AC1HrC,MAAM8+B,WAAWv+B,OAAOw+B,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC,SAAA+uC,gBAAAxuE,IAAA;AAAAN,QAAAA,IAAAC,EAAA,EAAA,GAAyB;AAAA,IAAA8uE;AAAAA,MAAAzuE,IAC9B;AAAA,IAAA03C;AAAAA,IAAAD;AAAAA,IAAAkB;AAAAA,IAAArY;AAAAA,EAA0EzW,IAAAA,gBAAAA,GAC1E,CAAAgkD,WAAAC,YAAA,IAAkC99D,aAAoC,GACtE,CAAA0+D,YAAAC,aAAA,IAAoC3+D,UAAU;AAAC1P,MAAAA;AAAAZ,IAAA,CAAA,MAAA2C,OAAAC,IAAA,2BAAA,KAEZhC,KAAAwc,CAAA,OAAA;AAMnBA,kBAAAA,IAAEkqD,eAAiBlqD,GAAEkqD,eAAiB,IAAA,CAAI,GACxD8G,aAAahxD,EAAE;AAAA,EAAA,GAChBpd,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AARDkvE,QAAAA,iBAAuBtuE,IAUvBiqE,SAAe/oC,oBAAoBlB,eAAa72B,KAAyB,GACzE0iE,eAAqB3qC,oBAAoBlB,eAAa7xB,MAA+B,GACrFk8D,gBAAsBnpC,oBAAoBlB,eAAa5xB,MAAgC,GACvFqL,UAAgBynB,oBAAoBlB,eAAa3xB,MAA4B,GAE7E;AAAA,IAAAvO;AAAAA,EAAYC,IAAAA,eAAe,QAAQ,GACnCyH,QAAcC,SAAS;AAACrH,MAAAA;AAAAhB,IAAA+3C,CAAAA,MAAAA,mBAAA/3C,EAAA,CAAA,MAAAi5C,oBAAAj5C,EAAAU,CAAAA,MAAAA,KAAAV,EAAA,CAAA,MAAA4gC,iBAAA5gC,SAAAoI,SAEtBpH,KAAA6rE,CAAA,aAAA;AAAA,QAAA;AAEI,YAAAC,CAAAA,SAAAC,KAAA,IAAyBnsC,cAAaosC,gBAAiBH,QAAQ;AAC/D90B,sBAAgB,QAAQ,GACxBkB,iBAAiB6zB,SAASC,KAAK;AAAA,aAAC9rE,KAAA;AACzBo2B,YAAAA,MAAAA;AACPjvB,YAAKsC,KAAA;AAAA,QAAA4jB,UAAA;AAAA,QAAA/H,aAEU8Q,IAAGn2B;AAAAA,QAAA6C,QACR;AAAA,QAAO3C,OACRV,EAAE,wCAAwC;AAAA,MAAA,CAClD;AAAA,IAAA;AAAA,EAAC,GAELV,OAAA+3C,iBAAA/3C,OAAAi5C,kBAAAj5C,OAAAU,GAAAV,OAAA4gC,eAAA5gC,OAAAoI,OAAApI,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAdH,QAAAitE,YAAkBjsE;AAgBjBC,MAAAA;AAAAjB,IAAAqa,CAAAA,MAAAA,WAAAra,SAAA4gC,iBAEkC3/B,KAAAA,MAAA;AAE5BoZ,eACHumB,cAAa2sC,SAAU;AAAA,EAE1BvtE,GAAAA,OAAAqa,SAAAra,OAAA4gC,eAAA5gC,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AALD,QAAAwtE,iBAAuBvsE;AAKK4B,MAAAA;AAAA,SAAA7C,EAAA,EAAA,MAAA6qE,UAAA7qE,EAAAwtE,EAAAA,MAAAA,kBAAAxtE,UAAAirE,iBAAAjrE,EAAA,EAAA,MAAAgvE,cAAAhvE,EAAAysE,EAAAA,MAAAA,gBAAAzsE,EAAAmuE,EAAAA,MAAAA,aAAAnuE,EAAA,EAAA,MAAAitE,aAAAjtE,EAAA+uE,EAAAA,MAAAA,YAAA/uE,UAAAg4C,iBAG1Bn1C,KAAA,oBAAC,MAAiB,EAAA,eAAA,uBAAgC,WAAA,UAAgB,QAAA,QAChE,UAAA,oBAAC,QAAW,MAAC,GAAW,SAAC,GAAc,YAAA,GACpCm1C,UACC,gBAAA,oBAAC,eAAa,CAAA,CAAA,IAEb,oBAAA,yBAAA,EAAiCm2B,SAAAA,WAChC,UAAC,oBAAA,UAAA,EAAiB,WAAA,YAAgBe,KAAAA,gBAC/BF,UAAAA,cAEDD,WACE,oBAAC,UACSlE,EAAAA,QACOI,eACJwB,WAAAA,cACCe,YAAa,gBACfP,UAAQ,WACH,eAAG+B,GAAAA,UAAU,KAC5B,CAAA,IAAA,KAEN,CAAA,EACF,CAAA,EAEJ,CAAA,EACF,CAAA,GAAOhvE,QAAA6qE,QAAA7qE,QAAAwtE,gBAAAxtE,QAAAirE,eAAAjrE,QAAAgvE,YAAAhvE,QAAAysE,cAAAzsE,QAAAmuE,WAAAnuE,QAAAitE,WAAAjtE,QAAA+uE,UAAA/uE,QAAAg4C,eAAAh4C,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA,GAvBP6C;AAuBO;AAvEJ,SAAAoM,OAAA6+D,SAAA;AAAA,SAkByDlpE,QAAKhB;AAAA;AAlB9D,SAAAoL,OAAA++D,SAAA;AAAA,SAiB+DnpE,QAAKqmE;AAAA;AAjBpE,SAAAl8D,OAAAi/D,SAAA;AAAA,SAgB8DppE,QAAK6nE;AAAA;AAhBnE,SAAA1iE,MAAAnF,QAAA;AAAA,SAewDA,OAAKimE;AAAA;ACnBpE,MAAMsE,aAAa5tE,OAAOa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOxBgtE,OAAO,CAAC,WAAW,QAAQ,GAC3BC,aAAcC,CAAAA;AAAAA;AAAAA,EAElBA,OAAOF,KAAKlhD,SAASohD,GAAG;AAAA;AAEnB,SAAAC,YAAAxvE,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAsF;AAAAA,IAAAslB;AAAAA,EAAA,IAA4B3jB,iBAC5B;AAAA,IAAAxG;AAAAA,EAAAA,IAAYC,eAAAnB,wBAAuC,GACnDgwE,UAAgBjqE,QAAM4lB,YAAAoB,wBAEtBkjD,gBAAsBJ,WAAW9pE,QAAM6vC,mBAAqB,IACxD7vC,OAAM6vC,sBAAAg6B,KACC,CAAA;AAAA9uE,MAAAA;AAAAN,IAAAuF,CAAAA,MAAAA,UAAAvF,SAAA6qB,aACcvqB,KAAAgvE,CAAAA,QACvBzkD,UAAS;AAAA,IAAA,GACJtlB;AAAAA,IAAM6vC,qBACYk6B;AAAAA,EAAAA,CACtB,GAACtvE,OAAAuF,QAAAvF,OAAA6qB,WAAA7qB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJJ,QAAA0vE,mBAAyBpvE,IAO8CM,KAAA4uE,UAAU,KAAE7lE;AAAY3I,MAAAA;AAAAhB,WAAAU,KAM9EM,KAAAN,EAAE,qBAAqB,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,WAAA0vE,oBACtBzuE,KAAAA,MAAMyuE,iBAAiB,SAAS,GAAC1vE,OAAA0vE,kBAAA1vE,OAAAiB,MAAAA,KAAAjB,EAAA,CAAA;AAChC,QAAA6C,KAAA4sE,kBAAkB;AAAS3sE,MAAAA;AAAA9C,IAAAgB,CAAAA,MAAAA,MAAAhB,SAAAiB,MAAAjB,EAAA,CAAA,MAAA6C,MALvCC,yBAAC,KACe,EAAA,iBAAA,iBACX,IAAA,eACI,OAAA9B,IACE,SAAAC,IACC,UAAA4B,GACV,CAAA,GAAA7C,OAAAgB,IAAAhB,OAAAiB,IAAAjB,OAAA6C,IAAA7C,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,YAAAU,KAIOwD,KAAAxD,EAAE,4BAA4B,GAACV,QAAAU,GAAAV,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAAnG,YAAA0vE,oBAC7BvpE,KAAAA,MAAMupE,iBAAiB,QAAQ,GAAC1vE,QAAA0vE,kBAAA1vE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA;AAC/B,QAAAoG,KAAAqpE,kBAAkB;AAAQppE,MAAAA;AAAArG,IAAAkE,EAAAA,MAAAA,MAAAlE,UAAAmG,MAAAnG,EAAA,EAAA,MAAAoG,MALtCC,yBAAC,KACe,EAAA,iBAAA,wBACX,IAAA,eACI,OAAAnC,IACE,SAAAiC,IACC,UAAAC,GACV,CAAA,GAAApG,QAAAkE,IAAAlE,QAAAmG,IAAAnG,QAAAoG,IAAApG,QAAAqG,MAAAA,KAAArG,EAAA,EAAA;AAAAuG,MAAAA;AAAAvG,IAAA8C,EAAAA,MAAAA,MAAA9C,UAAAqG,MAdJE,MAAC,qBAAA,SAAA,EAAe,OAAA,GAAS,SACvBzD,UAAAA;AAAAA,IAAAA;AAAAA,IAOAuD;AAAAA,EAAAA,EAOF,CAAA,GAAUrG,QAAA8C,IAAA9C,QAAAqG,IAAArG,QAAAuG,OAAAA,MAAAvG,EAAA,EAAA;AAAAyG,MAAAA;AAAAzG,YAAAU,KAGM+F,MAAA/F,EAAE,4BAA4B,GAACV,QAAAU,GAAAV,QAAAyG,OAAAA,MAAAzG,EAAA,EAAA;AAGlC,QAAA6I,MAAA9I,MAAKmvB;AAAQ/lB,MAAAA;AAAAnJ,YAAAU,KACEyI,MAAAzI,EAAE,yCAAyC,GAACV,QAAAU,GAAAV,QAAAmJ,OAAAA,MAAAnJ,EAAA,EAAA;AAAAoJ,MAAAA;AAAApJ,YAAAmJ,OAAtDC,MAAA;AAAA,IAAAiB,SAAUlB;AAAAA,EAA4C,GAACnJ,QAAAmJ,KAAAnJ,QAAAoJ,OAAAA,MAAApJ,EAAA,EAAA;AAAAqJ,MAAAA;AAAArJ,IAAA,EAAA,MAAAD,MAAAmvB,WAAAlvB,EAAA,EAAA,MAAAyG,OAAAzG,EAAA,EAAA,MAAAoJ,OANzEC,MAAC,oBAAA,KAAA,EAAS,MAAA,QACR,8BAAC,QACa,EAAA,cAAA5C,KACN0oB,MAAAA,WACD,MAAA,SACI,SAAAtmB,KACK,cAAAO,IAAAA,CAElB,EAAA,CAAA,GAAMpJ,EAAA,EAAA,IAAAD,MAAAmvB,SAAAlvB,QAAAyG,KAAAzG,QAAAoJ,KAAApJ,QAAAqJ,OAAAA,MAAArJ,EAAA,EAAA;AAAAsJ,MAAAA;AAAAtJ,IAAAuG,EAAAA,MAAAA,OAAAvG,UAAAqJ,OAzBRC,MAAA,qBAAC,QAAW,OAAA,UAAkB,SAAC,GAAO,KAAA,GACpC/C,UAAAA;AAAAA,IAAAA;AAAAA,IAgBA8C;AAAAA,EAAAA,EASF,CAAA,GAAOrJ,QAAAuG,KAAAvG,QAAAqJ,KAAArJ,QAAAsJ,OAAAA,MAAAtJ,EAAA,EAAA;AAKG,QAAAgK,MAAAylE,kBAAkB,WAGCt6D,MAAAs6D,kBAAkB;AAASp6D,MAAAA;AAAArV,YAAAmV,OAAtDE,MAAC,oBAAA,iBAAA,EAA0B,UAAAF,IAA+B,CAAA,GAAAnV,QAAAmV,KAAAnV,QAAAqV,OAAAA,MAAArV,EAAA,EAAA;AAAAsV,MAAAA;AAAAtV,IAAAgK,EAAAA,MAAAA,OAAAhK,UAAAqV,OAN5DC,0BAAC,UACiB,EAAA,mBAAA,eACT,QAAA,QACC,QAAAtL,KACL,IAAA,iBAEHqL,eACF,GAAWrV,QAAAgK,KAAAhK,QAAAqV,KAAArV,QAAAsV,OAAAA,MAAAtV,EAAA,EAAA;AAID,QAAAuV,MAAAk6D,kBAAkB,UAIKj6D,MAAAi6D,kBAAkB;AAAQh6D,MAAAA;AAAAzV,YAAAwV,OAAzDC,MAAC,oBAAA,kBAAA,EAA8B,aAAAD,IAA8B,CAAA,GAAAxV,QAAAwV,KAAAxV,QAAAyV,OAAAA,MAAAzV,EAAA,EAAA;AAAA0V,MAAAA;AAAA1V,IAAAuV,EAAAA,MAAAA,OAAAvV,UAAAyV,OAN/DC,0BAAC,UACiB,EAAA,mBAAA,cACR,QAAAH,KACL,IAAA,gBACI,QAAA,QAEPE,eACF,GAAWzV,QAAAuV,KAAAvV,QAAAyV,KAAAzV,QAAA0V,OAAAA,MAAA1V,EAAA,EAAA;AAAA2V,MAAAA;AAAA3V,SAAAA,EAAA,EAAA,MAAAY,MAAAZ,EAAAsJ,EAAAA,MAAAA,OAAAtJ,EAAAsV,EAAAA,MAAAA,OAAAtV,UAAA0V,OA7CbC,MAAC,qBAAA,YAAqB,EAAA,WAAA,UAAkB,SAAC,GAAS,QAAA,QAAmB,cAAA/U,IACnE0I,UAAAA;AAAAA,IAAAA;AAAAA,IA4BAgM;AAAAA,IASAI;AAAAA,EAQF,EAAA,CAAA,GAAa1V,QAAAY,IAAAZ,QAAAsJ,KAAAtJ,QAAAsV,KAAAtV,QAAA0V,KAAA1V,QAAA2V,OAAAA,MAAA3V,EAAA,EAAA,GA9Cb2V;AA8Ca;AC9EV,MAAMg6D,mBAAsC;AAAA,EACjDjoE,MAAM6kB;AAAAA,EACNW,aAAaA,MAAM;AACX,UAAA;AAAA,MAACiD;AAAAA,IAAQ,IAAIrE,oBACb;AAAA,MAACprB;AAAAA,QAAKC,eAAe;AAEpB,WAAA;AAAA,MACLqU,QAAQ,CAACmb,SAAS8pB;AAAAA,MAClBj3C,MAAM4sE;AAAAA,MACNxuE,OAAOV,EAAE,eAAe;AAAA,IAC1B;AAAA,EACF;AAAA,EACA4vB,WAAWi/C;AAAAA,EACXrgD,SAASA,CAAC;AAAA,IAAC3pB;AAAAA,EAAAA,OAAa;AAAA,IACtBA,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ6yC,OAAOzuC;AAAAA,MAAW6wB,KAAK7wB;AAAAA,MAAWyrC,qBAAqBzrC;AAAAA,IAAAA;AAAAA,EAAS;AAAA,EAEtFmwC,QAAQA,CAAC;AAAA,IAACv0C;AAAAA,EAAAA,OAAa;AAAA,IAACA,QAAQ;AAAA,MAAC,GAAGA;AAAAA,MAAQ6yC,OAAO;AAAA,IAAA;AAAA,EAAiB;AACtE;ACnBO,SAASy3B,cAAc3wD,SAIY;AAClC,QAAA;AAAA,IAAC7B;AAAAA,IAAM5c;AAAAA,IAAYI;AAAAA,EAAAA,IAASqe,SAC5B+b,SAAgD,CAAE;AAEpDmK,MAAAA,IAAI3kC,YACJkkB,IAAa9jB;AAEjB,aAAWmhD,WAAW3kC,MAAM;AAEtB,QAAA,OAAO2kC,WAAY,UAAU;AAC/B,UAAI,CAAC7+C,SAASwhB,CAAC,KAAKA,MAAMhb;AACxB,cAAM,IAAI3E,MAAM,4DAA4Dg9C,OAAO,EAAE;AAGvF,UAAI5c,EAAEuc,aAAa;AACjB,cAAM,IAAI38C,MACR,uEAAuEg9C,OAAO,EAChF;AAGFr9B,UAAIA,IAAIq9B,OAAO;AAEf,YAAMhD,QAAQ5Z,EAAEud,OAAO7uC,KAAMg8D,CAAMA,MAAAA,EAAEpoE,SAASs6C,OAAO;AAErD,UAAI,CAAChD;AACH/jB,eAAAA,OAAOvwB,KAAK;AAAA,UAAChD,MAAMs6C;AAAAA,QAAQ,CAAA,GACpB/mB;AAGTmK,UAAI4Z,MAAM/3C,MAEVg0B,OAAOvwB,KAAK06B,CAAC;AAEb;AAAA,IAAA;AAIE,QAAA,OAAO4c,WAAY,UAAU;AAC/B,UAAI,CAACp9B,QAAQD,CAAC,KAAKA,MAAMhb;AACvB,cAAM,IAAI3E,MAAM,2DAA2Dg9C,OAAO,GAAG;AAGvF,UAAI5c,EAAEuc,aAAa;AACjB,cAAM,IAAI38C,MACR,sEAAsEg9C,OAAO,GAC/E;AAGFr9B,UAAIA,IAAIq9B,OAAO;AAEf,YAAM+tB,WAAW3qC,EAAEj4B,GAAG2G,KAAM8uC,CACtB,WAAA,OAAOj+B,KAAM,WACRi+B,OAAOjB,aAAa,WAGzB,OAAOh9B,KAAM,WACRi+B,OAAOjB,aAAa,WAGzB,OAAOh9B,KAAM,YACRi+B,OAAOjB,aAAa,YAGzBx+C,SAASwhB,CAAC,IACLi+B,OAAOl7C,SAASid,GAAGpkB,QAGrB,EACR;AAED,UAAI,CAACwvE;AACH,cAAM,IAAI/qE,MAAM,yBAAyBg9C,OAAO,GAAG;AAGjD+tB,UAAAA,UAEJ90C,OAAOvwB,KAAK06B,CAAC;AAEb;AAAA,IAAA;AAIF,QAAIjiC,SAAS6+C,OAAO,KAAKA,QAAQguB,MAAM;AACjC,UAAA,CAACprD,QAAQD,CAAC;AACZ,cAAM,IAAI3f,MACR,mEAAmEg9C,OAAO,GAC5E;AAGF,UAAI5c,EAAEuc,aAAa;AACjB,cAAM,IAAI38C,MACR,sEAAsEg9C,OAAO,EAC/E;AAOF,UAFAr9B,KAFeA,KAAK,CAET7Q,GAAAA,KAAMsK,OAAMjb,SAASib,CAAC,KAAKA,EAAE4xD,SAAShuB,QAAQguB,IAAI,GAEzD,CAAC7sE,SAASwhB,CAAC;AACb,cAAM,IAAI3f,MAAM,kCAAkCg9C,QAAQguB,IAAI,GAAG;AAG7DptB,YAAAA,SAASxd,EAAEj4B,GAAG2G,KAAMsK,CAAAA,MAAMjb,SAASwhB,CAAC,KAAKvG,EAAE1W,SAASid,GAAGpkB,KAAK;AAElE,UAAI,CAACqiD;AACH,cAAM,IAAI59C,MAAM,+BAA+B2f,GAAGpkB,KAAK,EAAE;AAGvDqiD,UAAAA,QAEJ3nB,OAAOvwB,KAAK06B,CAAC;AAEb;AAAA,IAAA;AAGF,UAAM,IAAIpgC,MAAM,yBAAyBkgB,KAAKC,UAAU68B,OAAO,CAAC,EAAE;AAAA,EAAA;AAG7D/mB,SAAAA;AACT;AC3GA,MAAMg1C,cAAmE;AAAA,EACvEnvE,OAAOu0B;AAAAA,EACP4X,SAASvR;AAAAA,EACTs1B,MAAMkf;AACR,GAEMC,cAA8D;AAAA,EAClErvE,OAAO;AAAA,EACPmsC,SAAS;AAAA,EACT+jB,MAAM;AACR;AAEO,SAAAof,oBAAArwE,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GACL;AAAA,IAAAivB;AAAAA,MAAkBnvB,OAClB;AAAA,IAAAw9B;AAAAA,IAAA7S;AAAAA,IAAAjqB;AAAAA,IAAA48B;AAAAA,IAAAx8B;AAAAA,EAAA,IAA6DspB,mBAC7D;AAAA,IAAAzpB;AAAAA,EAAAA,IAAYC,eAAe,YAAY;AAACL,MAAAA;AAAAN,IAAAu9B,CAAAA,MAAAA,WAAAv9B,SAAA0qB,cAGtCpqB,KAAA+c,CAAA,SAAA;AACaA,eAAAA,IAAI,GACfkgB,QAAQlgB,IAAI;AAAA,EACbrd,GAAAA,OAAAu9B,SAAAv9B,OAAA0qB,YAAA1qB,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAJH,QAAA4sE,aAAmBtsE;AAMlBM,MAAAA;AAAAZ,WAAAU,KAMuBE,KAAAF,EAAE,+BAA+B,GAACV,OAAAU,GAAAV,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,WAAAU,KAG7CM,KAAAN,EAAE,aAAa,GAACV,OAAAU,GAAAV,OAAAgB,MAAAA,KAAAhB,EAAA,CAAA;AAAAiB,MAAAA;AAAAjB,IAAAkvB,CAAAA,MAAAA,WAAAlvB,SAAAY,MAAAZ,EAAA,CAAA,MAAAgB,MALzBC,KAAC,oBAAA,yBAAA,EACI,IAAA,UACe,kBAAAL,IACb,MAAA,QACIsuB,SACF,OAAAluB,GACP,CAAA,GAAAhB,OAAAkvB,SAAAlvB,OAAAY,IAAAZ,OAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA;AAAA6C,MAAAA;AAAA7C,YAAAU,KAAAV,EAAAq9B,EAAAA,MAAAA,WAAA56B,UAGCI,KAAAw6B,WAAU56B,gBACR,oBAAA,KAAA,EAAa,SAAA,GACZ,UAAA,oBAAC,QAAK,OAAA,IAAY,MAAA,GACf/B,UAAAA,EAAE,yBAAyB,GAC9B,EAAA,CACF,GACDV,QAAAU,GAAAV,EAAA,EAAA,IAAAq9B,WAAA56B,QAAAzC,QAAA6C,MAAAA,KAAA7C,EAAA,EAAA;AAAA8C,MAAAA;AAAA9C,IAAA,EAAA,MAAA4sE,cAAA5sE,EAAAS,EAAAA,MAAAA,cAAAT,EAAAq9B,EAAAA,MAAAA,cAAAr9B,UAAAa,SAEAiC,KAAAu6B,WAAU56B,SAAA,KACR,oBAAA,OAAA,EAAa,OAAA,GACX46B,UAAU7zB,WAAAA,IAAA6mE,CAAAA,QAAAjyD,MACR,oBAAA,gBAAA,EAGSiyD,QACAzD,QAAAA,YACInsE,YACLI,MAJF,GAAA,CAMR,CAAA,EACH,CAAA,GACDb,QAAA4sE,YAAA5sE,QAAAS,YAAAT,QAAAq9B,YAAAr9B,QAAAa,OAAAb,QAAA8C,MAAAA,KAAA9C,EAAA,EAAA;AAAAkE,MAAAA;AAAAlE,IAAA6C,EAAAA,MAAAA,MAAA7C,UAAA8C,MAtBHoB,KAAA,qBAAC,QAAW,MAAC,GAAW,UAAA,QAAgB,SAAA,GACrCrB,UAAAA;AAAAA,IAAAA;AAAAA,IAQAC;AAAAA,EAAAA,EAcH,CAAA,GAAO9C,QAAA6C,IAAA7C,QAAA8C,IAAA9C,QAAAkE,MAAAA,KAAAlE,EAAA,EAAA;AAAAmG,MAAAA;AAAA,SAAAnG,EAAAiB,EAAAA,MAAAA,MAAAjB,UAAAkE,MAhCTiC,KAAA,qBAAC,QAAe,WAAA,UAAgB,QAAA,QAAgB,UAAA,UAC9ClF,UAAAA;AAAAA,IAAAA;AAAAA,IAQAiD;AAAAA,EAAAA,EAwBF,CAAA,GAAOlE,QAAAiB,IAAAjB,QAAAkE,IAAAlE,QAAAmG,MAAAA,KAAAnG,EAAA,EAAA,GAjCPmG;AAiCO;AAIX,SAAAmqE,eAAAvwE,OAAA;AAAAC,QAAAA,IAAAC,EAAA,EAAA,GAME;AAAA,IAAAowE;AAAAA,IAAAv2B;AAAAA,IAAAr5C;AAAAA,IAAAI;AAAAA,EAAAA,IAA4Cd;AAAKO,MAAAA;AAAAN,WAAAqwE,OAAAhzD,QAAArd,SAAA85C,UAClBx5C,KAAAA,MAAMw5C,OAAOu2B,OAAMhzD,IAAK,GAACrd,EAAA,CAAA,IAAAqwE,OAAAhzD,MAAArd,OAAA85C,QAAA95C,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAxD,QAAA4sE,aAAmBtsE,IACnB,CAAAiwE,WAAAC,YAAA,IAAkClgE,aAAqD,GACvFkkB,OAAAy7C,YAAyBI,OAAMI,KAAA;AAAO7vE,MAAAA;AAAAZ,WAAAuwE,aAIjC3vE,KAAA2vE,aACC,oBAAC,MAAc,EAAA,SAAC,GAAU,QAAA,GAAQ,MAAA,YAChC,UAAC,oBAAA,MAAA,EAAW,MAAC,GAAGA,UAASzvE,UAAAA,MAAAI,QAAe,CAAA,EAC1C,CAAA,GACDlB,OAAAuwE,WAAAvwE,OAAAY,MAAAA,KAAAZ,EAAA,CAAA;AAAAgB,MAAAA;AAAAhB,IAAAw0B,CAAAA,MAAAA,QAAAx0B,SAAAuwE,aAAAvwE,EAAA,CAAA,MAAA4sE,cAAA5sE,EAAAqwE,CAAAA,MAAAA,OAAAI,SAAAzwE,EAAA,CAAA,MAAAqwE,OAAAnvE,WAAAlB,UAAAqwE,OAAAhzD,QAAArd,EAAAS,EAAAA,MAAAA,cAAAT,UAAAa,SAEAG,KAACuvE,CAAAA,aACC,oBAAA,MAAA,EACC,sBAAmB,IAChB,IAAA,UACM3D,SAAS,YACT,SAAA,GACD,QAAA,GACF,MAAAuD,YAAYE,OAAMI,KAAA,GAExB,UAAA,qBAAC,MAAW,EAAA,OAAA,cAAkB,KAAA,GAC5B,UAAA;AAAA,IAAC,oBAAA,KAAA,EAAS,MAAA,QACR,UAAC,oBAAA,MAAA,EAAW,MAAA,GACV,UAAA,oBAAC,MACH,CAAA,CAAA,EAAA,CAAA,GACF;AAAA,IAEC,qBAAA,OAAA,EAAY,MAAC,GAAS,OAAA,GACrB,UAAA;AAAA,MAAA,oBAAC,6BACO,EAAA,MAAAJ,OAAMhzD,MACA5c,YACLI,OAGT;AAAA,0BAAC,MAAK,EAAA,OAAI,IAAQ,MAAC,GAChBwvE,iBAAMnvE,QACT,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,GACF,GACF,GACDlB,OAAAw0B,MAAAx0B,OAAAuwE,WAAAvwE,OAAA4sE,YAAA5sE,EAAA,CAAA,IAAAqwE,OAAAI,OAAAzwE,EAAA,CAAA,IAAAqwE,OAAAnvE,SAAAlB,EAAA,EAAA,IAAAqwE,OAAAhzD,MAAArd,QAAAS,YAAAT,QAAAa,OAAAb,QAAAgB,MAAAA,KAAAhB,EAAA,EAAA;AAAAiB,MAAAA;AAAA,SAAAjB,EAAAY,EAAAA,MAAAA,MAAAZ,UAAAgB,MApCHC,0BAAC,eAAuBuvE,EAAAA,uBACrB5vE,UAAAA;AAAAA,IAAAA;AAAAA,IAMAI;AAAAA,EAAAA,EA8BH,CAAA,GAAgBhB,QAAAY,IAAAZ,QAAAgB,IAAAhB,QAAAiB,MAAAA,KAAAjB,EAAA,EAAA,GArChBiB;AAqCgB;AAIpB,SAASyvE,4BAA4B3wE,OAIlC;AACK,QAAA;AAAA,IAACsd;AAAAA,IAAM5c;AAAAA,IAAYI;AAAAA,EAAAA,IAASd,OAE5B4wE,aAAa3qD,QAAQ,MAAM;AAC3B,QAAA;AACF,aAAO6pD,cAAc;AAAA,QAACxyD;AAAAA,QAAM5c;AAAAA,QAAYI;AAAAA,MAAAA,CAAM;AAAA,aACvCiK,GAAG;AACV+a,cAAQ/kB,MAAMgK,CAAC;AAAA,IAAA;AAEV,WAAA;AAAA,EACN,GAAA,CAACuS,MAAM5c,YAAYI,KAAK,CAAC;AAE5B,SAAK8vE,YAAYluE,SAGd,oBAAA,MAAA,EAAK,MAAM,GACTkuE,UAAWnnE,WAAAA,IAAI,CAAC9I,GAAG0d,MAClB,qBAACwyD,YACExyD,EAAAA,UAAAA;AAAAA,IAAI,IAAA,KAAM,oBAAA,QAAA,EAAK,OAAO;AAAA,MAAC/c,OAAO;AAAA,MAA8BmmB,SAAS;AAAA,IAAA,GAAM,UAAG,OAAA;AAAA,IAC/E,oBAAC,UAAK,OAAO;AAAA,MAACqpD,YAAY;AAAA,IAAOnwE,GAAAA,UAAAA,EAAEU,SAASV,EAAEgH,KAAK,CAAA;AAAA,EAFtC0W,EAAAA,GAAAA,CAGf,CACD,EACH,CAAA,IAV8B;AAYlC;ACtJA,SAAS8O,YAAYntB,OAAqE;AAClF,QAAA;AAAA,IAAC6G;AAAAA,IAAYC;AAAAA,MAAgB9G,OAC7B;AAAA,IAACW;AAAAA,EAAAA,IAAKC,eAAe,YAAY,GACjC;AAAA,IAAC08B,YAAYyzC;AAAAA,EAAAA,IAAqBzoC,oBAAoBzhC,YAAYC,YAAY,GAE9Ew2B,aAAmCrX,QACvC,MACE8qD,kBAAkBtnE,IAAKlB,CAAU,UAAA;AAAA,IAC/BmoE,OAAOnoE,KAAKmoE;AAAAA,IACZvvE,SAASoH,KAAKpH;AAAAA,IACdmc,MAAM/U,KAAK+U;AAAAA,EAAAA,EACX,GACJ,CAACyzD,iBAAiB,CACpB,GAEMC,YAAY1zC,WAAWrwB,KAAKgkE,iBAAiB,GAC7CC,cAAc5zC,WAAWrwB,KAAKkkE,mBAAmB,GAEjDluE,OAAOgjB,QAAQ,MACf+qD,YAAkB17C,mBAClB47C,cAAoBv1C,qBACjBy1C,qBACN,CAACJ,WAAWE,WAAW,CAAC,GAErBzgE,OAAOwV,QAAQ,MACf+qD,YAAkB,aAClBE,cAAoB,YACjB,YACN,CAACF,WAAWE,WAAW,CAAC;AAEpB,SAAA;AAAA,IACLj8D,QAAQqoB,WAAW56B,WAAW;AAAA,IAC9BO;AAAAA,IACA5B,OAAOV,EAAE,aAAa;AAAA,IACtB8P;AAAAA,IACA4R,cAAc;AAAA,EAChB;AACF;AAEO,MAAMgvD,sBAAyC;AAAA,EACpD1pE,MAAM8kB;AAAAA,EACN8D,WAAW8/C;AAAAA,EACXljD;AACF,GCtDMvB,eAAe,CAAC;AAKf,SAAS0lD,wBAAwB9rE,QAAyC;AAC3E,MAAA;AACF,WAAO2f,KAAKE,MAAMksD,mBAAmB/rE,MAAM,CAAC;AAAA,EAAA,QAChC;AAEJiW,WAAAA,QAAAA,KAAK,iCAAiC,GACvC,CAAC;AAAA,EAAA;AAEZ;AAEO,SAAS+1D,mBAAmB5sE,OAA4B;AAC7D,UAAQA,SAAS,IACd6E,IAAKyY,CAAAA,UAAUA,MAAMzY,IAAIgoE,YAAY,EAAEvoE,KAAK,GAAG,CAAC,EAChDO,IAAIioE,kBAAkB,EACtBxoE,KAAK,GAAG;AACb;AAKO,SAASyoE,uBAAuBnsE,QAAyC;AACvE2f,SAAAA,KAAKC,UAAU5f,MAAM;AAC9B;AAOO,SAASosE,QAAQ9Y,aAAwC;AACvD+Y,SAAAA,kBAAkBN,mBAAmBzY,WAAW,CAAC;AAC1D;AAKO,SAASgZ,OAAOltE,OAAkC;AACvD,SAAO4sE,mBAAmB5sE,KAAK;AACjC;AAEamtE,MAAAA,SAASC,MAAMrL,OAAO,KAAK;AAAA;AAAA,EAEtCqL,MAAMC,QAAQ,SAAS;AAAA;AAAA,EAGvBD,MAAMrL,OAAO,+BAA+B,CAC1CqL,MAAMrL,OAAO;AAAA,IACXrpD,MAAM;AAAA,IACN40D,WAAW;AAAA,MAAC1sE,QAAQ;AAAA,QAACosE,SAASN;AAAAA,QAAyBQ,QAAQH;AAAAA,MAAAA;AAAAA,IAAsB;AAAA,EACtF,CAAA,CAAC,CACH;AAAA;AAAA,EAGDK,MAAMrL,OAAO;AAAA,IACXrpD,MAAM;AAAA;AAAA,IAEN1W,UAAU,CAACorE,MAAMrL,OAAO,YAAYqL,MAAMrL,OAAO,wBAAwB,CAAC,CAAC;AAAA,IAC3EuL,WAAW;AAAA,MACTttE,OAAO;AAAA,QAACgtE;AAAAA,QAASE;AAAAA,MAAAA;AAAAA,IAAM;AAAA,EAE1B,CAAA;AAAC,CACH,GAKKK,cAAc,uCACdC,UAAW57D,CAAAA,QAAgB,oBAAoBmlD,KAAKnlD,GAAG,GACvD67D,gBAAiB77D,CAAgB,QAAA,8BAA8BmlD,KAAKnlD,GAAG,GACvE87D,kBAAkB,CAAC,QAAQ,SAAS,OAAO,WAAW,SAAS,GAa/DC,WAAW1jE;AAEjB,SAAS2jE,YAAY1H,QAAkBjE,SAA+C;AACpF,QAAM4L,UAA6B;AAAA,IAAC,GAAG5L;AAAAA,IAASrhE,QAAQomB;AAAAA,IAAcnmB,SAASmE;AAAAA,EAAS;AACxF,SAAOkhE,OAAOhnD,OAAO,CAAC/e,OAAM0kE,UAAU;AAChC2I,QAAAA,QAAQ3I,KAAK,GAAG;AAClB,YAAMnyD,MAAMmyD,MAAM9kE,MAAM,GAAG8kE,MAAMz1D,QAAQ,GAAG,CAAC,GACvClT,QAAQ2oE,MAAM9kE,MAAM2S,IAAI5U,SAAS,CAAC;AACxCqC,MAAAA,MAAKS,SAAS;AAAA,QAAC,GAAGT,MAAKS;AAAAA,QAAQ,CAAC+rE,mBAAmBj6D,GAAG,CAAC,GAAGi6D,mBAAmBzwE,KAAK;AAAA,MAAC;AAAA,IAC9E,MAAIuxE,eAAc5I,KAAK,IAC5B1kE,MAAKU,UAAUitE,sBAAsBjJ,KAAK,IAG1C3jD,QAAQrK,KAAK,uCAAuCguD,KAAK;AAGpD1kE,WAAAA;AAAAA,KACN0tE,OAAO;AACZ;AAEA,SAAShB,aAAa1sE,OAAyBmF,OAAegY,OAAgC;AACtF,QAAA;AAAA,IAACzc;AAAAA,IAASD,SAAS,CAAC;AAAA,IAAGD;AAAAA,EAAMR,IAAAA,OAC7B,CAAC4tE,YAAY,IAAIzwD,OACjB0wD,qBAAqB7tE,UAAS4tE,cAC9BE,cAAc3oE,UAAU,KAAK3E,OAAOotE,aAAaptE,IACjDutE,iBACJ,OAAOrtE,UAAY,MAAcmE,SAAYmpE,iBAAiBttE,OAAc,GAExEutE,gBAAgBluD,OAAOC,QAAQvf,MAAM,EACxCuE,OAAQo3C,CAAqC,UAAA;AACtC,UAAA,CAAC7pC,KAAKxW,KAAK,IAAIqgD;AACjB,QAAA,CAACrgD,MAAc,QAAA;AACnB,QAAI8xE,mBAA2B,QAAA;AAGzBK,UAAAA,wBAAwBN,aAAantE,SAAS8R,GAAG;AACvD,WAAIxW,EAAUmyE,UAAAA,yBAAyB,CAACX,gBAAgBnkD,SAAS7W,GAAG;AAAA,EAErE,CAAA,EACA7N,IAAI,CAAC,CAAC6N,KAAKxW,KAAK,MAAM,GAAG4wE,mBAAmBp6D,GAAG,CAAC,IAAIo6D,mBAAmB5wE,KAAK,CAAC,EAAE;AAGhF,SAAA,CAAC+xE,cAAc,KAAKttE,EAAE,EACnBw1B,OAAO,CAACi4C,cAActwE,SAAS,KAAKswE,eAAeF,cAAc,EAAE/oE,OAAOwoE,QAAQ,EAAEW,MAAM,EAC1FhqE,KAAK,GAAG,KAAK;AAEpB;AAEO,SAAS2oE,kBAAkBr7D,KAA0B;AAC1D,SAAIA,IAAIxC,QAAQ,IAAI,MAAM,KACjBm/D,qBAAqB38D,GAAG,IAG1BA,IACJuB,MAAM,GAAG,EACTtO,IAAKyY,CAAU,UAAA;AACR,UAAA,CAACywD,cAAc,GAAGS,cAAc,IAAIlxD,MAAMnK,MAAM,GAAG,EAAEtO,IAAKw4C,CAAY,YAAA;AAC1E,YAAM,CAAC18C,IAAI,GAAGulE,MAAM,IAAI7oB,QAAQlqC,MAAM,GAAG;AACzC,aAAOy6D,YAAY1H,QAAQ;AAAA,QAACvlE;AAAAA,MAAAA,CAAG;AAAA,IAAA,CAChC;AAED,WAAO,CACLotE,cACA,GAAGS,eAAe3pE,IAAKgpE,CAAa,aAAA;AAAA,MAClC,GAAGE;AAAAA,MACH,GAAGF;AAAAA,MACHltE,IAAIktE,QAAQltE,MAAMotE,aAAaptE;AAAAA,MAC/BC,QAAQ;AAAA,QAAC,GAAGi1C,KAAKk4B,aAAantE,QAAQ8sE,eAAe;AAAA,QAAG,GAAGG,QAAQjtE;AAAAA,MAAM;AAAA,MACzEC,SAASgtE,QAAQhtE,WAAWktE,aAAaltE;AAAAA,MACzC,CAAC;AAAA,EAAA,CAEN,EACAsE,OAAQmY,CAAUA,UAAAA,MAAMxf,SAAS,CAAC;AACvC;AAEA,SAASywE,qBAAqB38D,KAA0B;AACtD,QAAMs0D,SAA0B,CAAE;AAElC,MAAIuI,SAAS78D;AACb,SAAO68D,OAAO3wE,UAAQ;AACd,UAAA,CAAC64D,OAAOh2D,IAAI+tE,YAAY,IAAID,OAAO9X,MAAM4W,WAAW,KAAK,CAAE;AACjE,QAAI,CAAC5W,OAAO;AACD8X,eAAAA,OAAO1uE,MAAM,CAAC;AACvB;AAAA,IAAA;AAGIc,UAAAA,UAAU6tE,gBAAgBC,gBAAgBD,YAAY;AAC5DxI,WAAOngE,KAAK;AAAA,MAACpF;AAAAA,MAAIE;AAAAA,IAAQ,CAAA,GAEzB4tE,SAASA,OAAO1uE,MAAM42D,MAAM74D,MAAM;AAAA,EAAA;AAGpC,SAAO,CAACooE,MAAM;AAChB;AAEA,SAASyI,gBAAgBhnE,MAAc;AACjC,MAAA;AACK4Y,WAAAA,KAAKE,MAAM9Y,IAAI;AAAA,WACf+qB,KAAK;AAEZxR,YAAQrK,KAAK,+BAA+B6b,IAAIn2B,OAAO,EAAE;AACzD;AAAA,EAAA;AAEJ;AAEA,SAASuxE,sBAAsB9xD,MAAuB;AAChD,MAAA;AACKA,WAAAA,OAAO4yD,iBAAiB5yD,IAAI,IAAIhX;AAAAA,WAChC0tB,KAAK;AAEZxR,YAAQrK,KAAK,+BAA+B6b,IAAIn2B,OAAO,EAAE;AACzD;AAAA,EAAA;AAEJ;ACzLA,MAAMu1C,kBAAkB,CACtBxO,eACAuB,iBACAhD,sBACAG,iBACAlB,cACA2B,oBAAoB,GAGhBsP,iBAAiB,CAACwvB,aAAa,GAE/Bx5C,aAAa,CAAC0kD,qBAAqBzB,gBAAgB,GAgD5C5jD,gBAAgBynD,aAA2Ct0D,CAAY,YAAA;AAC5Elc,QAAAA,OAAOkc,SAASlc,QAAQywE;AAEvB,SAAA;AAAA,IACL/rE,MAAM;AAAA,IACNxH,UAAU;AAAA,MACR+Z,SAAUy5D,CAAAA,gBAGDjlE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAG+kE,aAAa,GAAGj9B,eAAe,CAAC,CAAC;AAAA,MAEjEluB,QAASorD,CAAAA,eAGAllE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAGglE,YAAY,GAAGj9B,cAAc,CAAC,CAAC;AAAA,MAE/DhqB,YAAaknD,CAAAA,mBAGJnlE,MAAMC,KAASC,oBAAAA,IAAI,CAAC,GAAGilE,gBAAgB,GAAGlnD,UAAU,CAAC,CAAC;AAAA,IAEjE;AAAA,IAEAmnD,OAAO,CACL;AAAA,MACEnsE,MAAMwX,SAASxX,QAAQ;AAAA,MACvBtG,OAAO8d,SAAS9d,SAAS;AAAA,MACzB4B;AAAAA,MACAstB,WAAWwjD,KAAK,MAAM,OAAO,cAA4B,CAAC;AAAA,MAC1D7X,iBAAiBA,CAACxkD,QAAQlS,WACpBkS,WAAW,WAAiBs8D,sBAAsBxuE,MAAM,IACxDkS,WAAW,SAAeu8D,oBAAoBzuE,MAAM,IACjD;AAAA,MAET8gE;AAAAA;AAAAA,MAEA4N,uBAAuB;AAAA,MACvB/0D;AAAAA,MACA4yD;AAAAA,MACAoC,2BAA2B;AAAA,IAAA,CAC5B;AAAA,IAGHnyD,MAAM;AAAA,MACJoyD,SAAS,CAAC10E,8BAA8B;AAAA,IAAA;AAAA,EAE5C;AACF,CAAC;AAED,SAASs0E,sBAAsBxuE,QAAiC;AAExD,SAAA,UAAUA,SAMT,cAAcA,SAAS;AAAA,IAACwB,UAAU;AAAA,MAAQ,KALxC;AAMX;AAEA,SAASitE,oBAAoBzuE,QAAiC;AAEtD,SAAA,QAAQA,SAOP,UAAUA,SAAS;AAAA,IAACyuB,MAAMzuB,OAAOyuB,SAAS;AAAA,MAAe,KANvD;AAOX;AClIO,SAASogD,sBAAsB;AAAA,EACpCrP;AAAAA,EACAsP,WAAWC;AAAAA,EACX3tE;AAC0B,GAAsB;AAC1C,QAAA,CAAC8M,iBAAiB8gE,kBAAkB,IAAIjkE,SAAS,EAAK,GACtDytC,SAAS9K,UAAU,GACnB+xB,gBAAgBwP,2BAA2Bz2B,MAAM,GACjDnwC,gBAAgBU,oBAEhBmmE,IAAIzuD,QAAQ,MACT8+C,uBAAuB;AAAA,IAC5BC;AAAAA,IACAhnB;AAAAA,EAAAA,CACD,GACA,CAACgnB,qBAAqBhnB,MAAM,CAAC,GAE1B22B,eAAe1uD,QAAQ,MAEvBsuD,mBACKA,iBAAiBG,GAAG;AAAA,IACzB,GAAGzP;AAAAA,IACHp3D;AAAAA,EACD,CAAA,IACI6mE,EAAEtP,YACR,CAACsP,GAAGH,kBAAkBtP,eAAep3D,aAAa,CAAC,GAEhDuiB,WAAkDnK,QACtD,OAAO;AAAA,IACL9L,YAAYzG;AAAAA,IACZ8c,gBAAgB,CAAC9c;AAAAA,IACjBwmC,eAAe,CAACxmC;AAAAA,IAChB+tB,YAAY,CAAC/tB;AAAAA,IACbq4B,YAAY,CAACr4B;AAAAA,MAEf,CAACA,eAAe,CAClB,GAEMsY,iBAA2C/F,QAAQ,OAChD;AAAA,IACLmK;AAAAA,IACA1c;AAAAA,IACA8gE;AAAAA,IACAG;AAAAA,IACAC,kBAAkBF,EAAEvrE;AAAAA,EAAAA,IAErB,CAACinB,UAAU1c,iBAAiBihE,cAAcD,EAAEvrE,OAAO,CAAC;AAEvD,6BACG,qBAAqB,UAArB,EAA8B,OAAO6iB,gBAAgBplB,UAAS;AAEnE;;;;;;;;"}
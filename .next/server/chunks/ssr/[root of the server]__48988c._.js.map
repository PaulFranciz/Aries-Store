{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/lato_77326abd.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"lato_77326abd-module__we7fHW__className\",\n  \"variable\": \"lato_77326abd-module__we7fHW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/lato_77326abd.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Lato%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:[%22300%22,%22400%22,%22700%22],%22variable%22:%22--font-lato%22}],%22variableName%22:%22lato%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Lato', 'Lato Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,uJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,uJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,uJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0]}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2024-12-31'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AAAO,MAAM,aACX,kDAA8C;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/sanity/lib/client.ts"],"sourcesContent":["import { createClient } from 'next-sanity'\n\nimport { apiVersion, dataset, projectId } from '../env'\n\nexport const client = createClient({\n  projectId,\n  dataset,\n  apiVersion,\n  useCdn: true, // Set to false if statically generating pages, using ISR or tag-based revalidation\n})\n"],"names":[],"mappings":";;;AAEA;AAFA;;;AAIO,MAAM,SAAS,CAAA,GAAA,8KAAA,CAAA,eAAY,AAAD,EAAE;IACjC,WAAA,6GAAA,CAAA,YAAS;IACT,SAAA,6GAAA,CAAA,UAAO;IACP,YAAA,6GAAA,CAAA,aAAU;IACV,QAAQ;AACV"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/lib/queries/navigation.ts"],"sourcesContent":["export const getNavigationQuery = `\n  *[_type == \"category\" && isMainCategory == true] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    mainCategoryType,\n    \"featuredImage\": featuredImage.asset->url,\n    \"subcategories\": *[_type == \"category\" && references(^._id)] {\n      _id,\n      title,\n      \"slug\": slug.current,\n      subcategoryType\n    }\n  }\n`\n\n"],"names":[],"mappings":";;;AAAO,MAAM,qBAAqB,CAAC;;;;;;;;;;;;;;AAcnC,CAAC"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/components/common/Navigation/NavigationBar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const NavigationBar = registerClientReference(\n    function() { throw new Error(\"Attempted to call NavigationBar() from the server but NavigationBar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/common/Navigation/NavigationBar.tsx <module evaluation>\",\n    \"NavigationBar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,gFACA"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/components/common/Navigation/NavigationBar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const NavigationBar = registerClientReference(\n    function() { throw new Error(\"Attempted to call NavigationBar() from the server but NavigationBar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/common/Navigation/NavigationBar.tsx\",\n    \"NavigationBar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,4DACA"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/ella/Desktop/Aries/app/layout.tsx"],"sourcesContent":["import React from 'react'\nimport { Lato } from 'next/font/google'\nimport { client } from '@/sanity/lib/client'\nimport { getNavigationQuery } from '@/lib/queries/navigation'\nimport { NavigationBar } from '@/components/common/Navigation/NavigationBar'\nimport type { MainCategory } from '@/types/navigation'\nimport './globals.css'\n\nconst lato = Lato({\n  subsets: ['latin'],\n  weight: ['300', '400', '700'],\n  variable: '--font-lato',\n})\n\nasync function getCategories(): Promise<MainCategory[]> {\n  try {\n    return await client.fetch(getNavigationQuery)\n  } catch (error) {\n    console.error('Failed to fetch categories:', error)\n    return []\n  }\n}\n\nexport default async function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const categories = await getCategories()\n\n  return (\n    <html lang=\"en\" className={`${lato.variable} font-sans`}>\n      <body>\n        <NavigationBar\n          categories={categories}\n          bannerMessage=\"New Lines Added | Enjoy up to 30% off\"\n          bannerLink={{\n            text: \"Shop Now\",\n            url: \"/sale\"\n          }}\n        />\n        <main className=\"pt-[calc(6rem+16rem)]\"> {/* Adjusted to account for header height + image height */}\n          {children}\n        </main>\n      </body>\n    </html>\n  )\n}\n\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;;;;;AAUA,eAAe;IACb,IAAI;QACF,OAAO,MAAM,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,4HAAA,CAAA,qBAAkB;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,EAAE;IACX;AACF;AAEe,eAAe,WAAW,EACvC,QAAQ,EAGT;IACC,MAAM,aAAa,MAAM;IAEzB,qBACE,8OAAC;QAAK,MAAK;QAAK,WAAW,GAAG,wIAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;kBACrD,cAAA,8OAAC;;8BACC,8OAAC,oJAAA,CAAA,gBAAa;oBACZ,YAAY;oBACZ,eAAc;oBACd,YAAY;wBACV,MAAM;wBACN,KAAK;oBACP;;;;;;8BAEF,8OAAC;oBAAK,WAAU;;wBAAwB;wBACrC;;;;;;;;;;;;;;;;;;AAKX"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}